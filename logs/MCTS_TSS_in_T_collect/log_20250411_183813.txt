2025-04-11 18:38:21,881 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:38:21,890 [INFO] Final candidates: []
2025-04-11 18:38:21,890 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:21,900 [INFO] Final candidates: []
2025-04-11 18:38:21,900 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:21,900 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 18:38:21,900 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:38:21,900 [DEBUG] Tree_policy iteration 1: Expanding move (17, 9)
2025-04-11 18:38:21,910 [INFO] Final candidates: []
2025-04-11 18:38:21,910 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:21,922 [INFO] Final candidates: []
2025-04-11 18:38:21,922 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:21,922 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:38:21,922 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,089 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,089 [DEBUG] Tree_policy iteration 1: Expanding move (3, 4)
2025-04-11 18:38:22,101 [INFO] Final candidates: []
2025-04-11 18:38:22,101 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,112 [INFO] Final candidates: []
2025-04-11 18:38:22,112 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,112 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,146 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,146 [DEBUG] Tree_policy iteration 1: Expanding move (5, 12)
2025-04-11 18:38:22,166 [INFO] Final candidates: []
2025-04-11 18:38:22,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,176 [INFO] Final candidates: []
2025-04-11 18:38:22,176 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,176 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,182 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,182 [DEBUG] Tree_policy iteration 1: Expanding move (7, 18)
2025-04-11 18:38:22,192 [INFO] Final candidates: []
2025-04-11 18:38:22,192 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,201 [INFO] Final candidates: []
2025-04-11 18:38:22,201 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,201 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,250 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,250 [DEBUG] Tree_policy iteration 1: Expanding move (17, 7)
2025-04-11 18:38:22,260 [INFO] Final candidates: []
2025-04-11 18:38:22,260 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,270 [INFO] Final candidates: []
2025-04-11 18:38:22,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,270 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,285 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:22,285 [DEBUG] Tree_policy iteration 1: Expanding move (17, 18)
2025-04-11 18:38:22,294 [INFO] Final candidates: []
2025-04-11 18:38:22,295 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,304 [INFO] Final candidates: []
2025-04-11 18:38:22,304 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,304 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,353 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,353 [DEBUG] Tree_policy iteration 1: Expanding move (1, 13)
2025-04-11 18:38:22,363 [INFO] Final candidates: []
2025-04-11 18:38:22,363 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,372 [INFO] Final candidates: []
2025-04-11 18:38:22,372 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,372 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,415 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,415 [DEBUG] Tree_policy iteration 1: Expanding move (0, 3)
2025-04-11 18:38:22,425 [INFO] Final candidates: []
2025-04-11 18:38:22,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,434 [INFO] Final candidates: []
2025-04-11 18:38:22,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,435 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,627 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:22,627 [DEBUG] Tree_policy iteration 1: Expanding move (8, 6)
2025-04-11 18:38:22,636 [INFO] Final candidates: []
2025-04-11 18:38:22,637 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,646 [INFO] Final candidates: []
2025-04-11 18:38:22,646 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,646 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,766 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,766 [DEBUG] Tree_policy iteration 1: Expanding move (9, 16)
2025-04-11 18:38:22,775 [INFO] Final candidates: []
2025-04-11 18:38:22,776 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,785 [INFO] Final candidates: []
2025-04-11 18:38:22,785 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,785 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,904 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:22,904 [DEBUG] Tree_policy iteration 1: Expanding move (12, 1)
2025-04-11 18:38:22,915 [INFO] Final candidates: []
2025-04-11 18:38:22,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,924 [INFO] Final candidates: []
2025-04-11 18:38:22,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,924 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:22,936 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:22,936 [DEBUG] Tree_policy iteration 1: Expanding move (17, 16)
2025-04-11 18:38:22,946 [INFO] Final candidates: []
2025-04-11 18:38:22,946 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,955 [INFO] Final candidates: []
2025-04-11 18:38:22,955 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:22,955 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,008 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,008 [DEBUG] Tree_policy iteration 1: Expanding move (8, 17)
2025-04-11 18:38:23,019 [INFO] Final candidates: []
2025-04-11 18:38:23,019 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,031 [INFO] Final candidates: []
2025-04-11 18:38:23,031 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,031 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,144 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:23,144 [DEBUG] Tree_policy iteration 1: Expanding move (7, 5)
2025-04-11 18:38:23,157 [INFO] Final candidates: []
2025-04-11 18:38:23,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,166 [INFO] Final candidates: []
2025-04-11 18:38:23,166 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,166 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,267 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,267 [DEBUG] Tree_policy iteration 1: Expanding move (17, 2)
2025-04-11 18:38:23,277 [INFO] Final candidates: []
2025-04-11 18:38:23,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,287 [INFO] Final candidates: []
2025-04-11 18:38:23,287 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,287 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,332 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,332 [DEBUG] Tree_policy iteration 1: Expanding move (0, 12)
2025-04-11 18:38:23,342 [INFO] Final candidates: []
2025-04-11 18:38:23,342 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,351 [INFO] Final candidates: []
2025-04-11 18:38:23,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,352 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,478 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,478 [DEBUG] Tree_policy iteration 1: Expanding move (10, 7)
2025-04-11 18:38:23,488 [INFO] Final candidates: []
2025-04-11 18:38:23,488 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,497 [INFO] Final candidates: []
2025-04-11 18:38:23,497 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,497 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,500 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,500 [DEBUG] Tree_policy iteration 1: Expanding move (0, 16)
2025-04-11 18:38:23,509 [INFO] Final candidates: []
2025-04-11 18:38:23,509 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,519 [INFO] Final candidates: []
2025-04-11 18:38:23,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,519 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,632 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:23,632 [DEBUG] Tree_policy iteration 1: Expanding move (16, 14)
2025-04-11 18:38:23,641 [INFO] Final candidates: []
2025-04-11 18:38:23,642 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,651 [INFO] Final candidates: []
2025-04-11 18:38:23,651 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,651 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,714 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,714 [DEBUG] Tree_policy iteration 1: Expanding move (4, 17)
2025-04-11 18:38:23,724 [INFO] Final candidates: []
2025-04-11 18:38:23,724 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,733 [INFO] Final candidates: []
2025-04-11 18:38:23,734 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,734 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,788 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,788 [DEBUG] Tree_policy iteration 1: Expanding move (16, 16)
2025-04-11 18:38:23,798 [INFO] Final candidates: []
2025-04-11 18:38:23,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,808 [INFO] Final candidates: []
2025-04-11 18:38:23,808 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,808 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,925 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:23,925 [DEBUG] Tree_policy iteration 1: Expanding move (11, 3)
2025-04-11 18:38:23,934 [INFO] Final candidates: []
2025-04-11 18:38:23,934 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,945 [INFO] Final candidates: []
2025-04-11 18:38:23,945 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:23,945 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:23,994 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:23,994 [DEBUG] Tree_policy iteration 1: Expanding move (8, 18)
2025-04-11 18:38:24,004 [INFO] Final candidates: []
2025-04-11 18:38:24,004 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,013 [INFO] Final candidates: []
2025-04-11 18:38:24,013 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,013 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:24,280 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:24,280 [DEBUG] Tree_policy iteration 1: Expanding move (3, 5)
2025-04-11 18:38:24,289 [INFO] Final candidates: []
2025-04-11 18:38:24,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,298 [INFO] Final candidates: []
2025-04-11 18:38:24,298 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,298 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:24,334 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:24,334 [DEBUG] Tree_policy iteration 1: Expanding move (3, 7)
2025-04-11 18:38:24,344 [INFO] Final candidates: []
2025-04-11 18:38:24,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,353 [INFO] Final candidates: []
2025-04-11 18:38:24,353 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,353 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:24,479 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:24,479 [DEBUG] Tree_policy iteration 1: Expanding move (12, 6)
2025-04-11 18:38:24,489 [INFO] Final candidates: []
2025-04-11 18:38:24,489 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,498 [INFO] Final candidates: []
2025-04-11 18:38:24,498 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,498 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:24,614 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:24,615 [DEBUG] Tree_policy iteration 1: Expanding move (4, 9)
2025-04-11 18:38:24,624 [INFO] Final candidates: []
2025-04-11 18:38:24,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,633 [INFO] Final candidates: []
2025-04-11 18:38:24,633 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,633 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:24,795 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:24,795 [DEBUG] Tree_policy iteration 1: Expanding move (11, 15)
2025-04-11 18:38:24,805 [INFO] Final candidates: []
2025-04-11 18:38:24,805 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,814 [INFO] Final candidates: []
2025-04-11 18:38:24,814 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,814 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:24,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:24,863 [DEBUG] Tree_policy iteration 1: Expanding move (5, 10)
2025-04-11 18:38:24,873 [INFO] Final candidates: []
2025-04-11 18:38:24,873 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,882 [INFO] Final candidates: []
2025-04-11 18:38:24,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:24,883 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,023 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:25,024 [DEBUG] Tree_policy iteration 1: Expanding move (18, 1)
2025-04-11 18:38:25,034 [INFO] Final candidates: []
2025-04-11 18:38:25,034 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,043 [INFO] Final candidates: []
2025-04-11 18:38:25,043 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,043 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,053 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:25,053 [DEBUG] Tree_policy iteration 1: Expanding move (16, 7)
2025-04-11 18:38:25,063 [INFO] Final candidates: []
2025-04-11 18:38:25,063 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,072 [INFO] Final candidates: []
2025-04-11 18:38:25,072 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,072 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,134 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:25,134 [DEBUG] Tree_policy iteration 1: Expanding move (12, 9)
2025-04-11 18:38:25,144 [INFO] Final candidates: []
2025-04-11 18:38:25,144 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,153 [INFO] Final candidates: []
2025-04-11 18:38:25,153 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,154 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,223 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:25,224 [DEBUG] Tree_policy iteration 1: Expanding move (10, 2)
2025-04-11 18:38:25,247 [INFO] Final candidates: []
2025-04-11 18:38:25,247 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,258 [INFO] Final candidates: []
2025-04-11 18:38:25,258 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,259 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,312 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:25,312 [DEBUG] Tree_policy iteration 1: Expanding move (5, 9)
2025-04-11 18:38:25,322 [INFO] Final candidates: []
2025-04-11 18:38:25,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,331 [INFO] Final candidates: []
2025-04-11 18:38:25,331 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,331 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,395 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:25,395 [DEBUG] Tree_policy iteration 1: Expanding move (18, 16)
2025-04-11 18:38:25,404 [INFO] Final candidates: []
2025-04-11 18:38:25,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,414 [INFO] Final candidates: []
2025-04-11 18:38:25,414 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,414 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,476 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:25,476 [DEBUG] Tree_policy iteration 1: Expanding move (18, 3)
2025-04-11 18:38:25,486 [INFO] Final candidates: []
2025-04-11 18:38:25,486 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,495 [INFO] Final candidates: []
2025-04-11 18:38:25,495 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,496 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,540 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:25,541 [DEBUG] Tree_policy iteration 1: Expanding move (12, 2)
2025-04-11 18:38:25,550 [INFO] Final candidates: []
2025-04-11 18:38:25,550 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,559 [INFO] Final candidates: []
2025-04-11 18:38:25,559 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,559 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,610 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:25,610 [DEBUG] Tree_policy iteration 1: Expanding move (9, 2)
2025-04-11 18:38:25,620 [INFO] Final candidates: []
2025-04-11 18:38:25,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,629 [INFO] Final candidates: []
2025-04-11 18:38:25,629 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,629 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,794 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:25,794 [DEBUG] Tree_policy iteration 1: Expanding move (6, 13)
2025-04-11 18:38:25,810 [INFO] Final candidates: []
2025-04-11 18:38:25,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,820 [INFO] Final candidates: []
2025-04-11 18:38:25,820 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,820 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,849 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:25,850 [DEBUG] Tree_policy iteration 1: Expanding move (6, 2)
2025-04-11 18:38:25,859 [INFO] Final candidates: []
2025-04-11 18:38:25,859 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,869 [INFO] Final candidates: []
2025-04-11 18:38:25,869 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,869 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,904 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:25,905 [DEBUG] Tree_policy iteration 1: Expanding move (0, 1)
2025-04-11 18:38:25,914 [INFO] Final candidates: []
2025-04-11 18:38:25,914 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,924 [INFO] Final candidates: []
2025-04-11 18:38:25,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,924 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:25,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:25,958 [DEBUG] Tree_policy iteration 1: Expanding move (5, 7)
2025-04-11 18:38:25,968 [INFO] Final candidates: []
2025-04-11 18:38:25,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,978 [INFO] Final candidates: []
2025-04-11 18:38:25,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:25,978 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:26,023 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:26,023 [DEBUG] Tree_policy iteration 1: Expanding move (0, 13)
2025-04-11 18:38:26,032 [INFO] Final candidates: []
2025-04-11 18:38:26,033 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,042 [INFO] Final candidates: []
2025-04-11 18:38:26,042 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,042 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:26,199 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:26,199 [DEBUG] Tree_policy iteration 1: Expanding move (8, 9)
2025-04-11 18:38:26,209 [INFO] Final candidates: []
2025-04-11 18:38:26,209 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,218 [INFO] Final candidates: []
2025-04-11 18:38:26,218 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,218 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:26,441 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:26,441 [DEBUG] Tree_policy iteration 1: Expanding move (7, 3)
2025-04-11 18:38:26,451 [INFO] Final candidates: []
2025-04-11 18:38:26,451 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,460 [INFO] Final candidates: []
2025-04-11 18:38:26,460 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,460 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:26,481 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:26,481 [DEBUG] Tree_policy iteration 1: Expanding move (6, 4)
2025-04-11 18:38:26,491 [INFO] Final candidates: []
2025-04-11 18:38:26,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,500 [INFO] Final candidates: []
2025-04-11 18:38:26,500 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,500 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:26,530 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:26,530 [DEBUG] Tree_policy iteration 1: Expanding move (14, 12)
2025-04-11 18:38:26,539 [INFO] Final candidates: []
2025-04-11 18:38:26,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,549 [INFO] Final candidates: []
2025-04-11 18:38:26,549 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,549 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:26,733 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:26,733 [DEBUG] Tree_policy iteration 1: Expanding move (2, 9)
2025-04-11 18:38:26,743 [INFO] Final candidates: []
2025-04-11 18:38:26,743 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,752 [INFO] Final candidates: []
2025-04-11 18:38:26,752 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,752 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:26,899 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:26,899 [DEBUG] Tree_policy iteration 1: Expanding move (6, 16)
2025-04-11 18:38:26,908 [INFO] Final candidates: []
2025-04-11 18:38:26,908 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,918 [INFO] Final candidates: []
2025-04-11 18:38:26,918 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:26,918 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,079 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:27,079 [DEBUG] Tree_policy iteration 1: Expanding move (13, 13)
2025-04-11 18:38:27,089 [INFO] Final candidates: []
2025-04-11 18:38:27,089 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,098 [INFO] Final candidates: []
2025-04-11 18:38:27,098 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,098 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,262 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:27,262 [DEBUG] Tree_policy iteration 1: Expanding move (6, 7)
2025-04-11 18:38:27,272 [INFO] Final candidates: []
2025-04-11 18:38:27,272 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,281 [INFO] Final candidates: []
2025-04-11 18:38:27,281 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,281 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:38:27,281 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,363 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:27,363 [DEBUG] Tree_policy iteration 1: Expanding move (8, 1)
2025-04-11 18:38:27,373 [INFO] Final candidates: []
2025-04-11 18:38:27,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,382 [INFO] Final candidates: []
2025-04-11 18:38:27,382 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,382 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,532 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:27,533 [DEBUG] Tree_policy iteration 1: Expanding move (13, 3)
2025-04-11 18:38:27,542 [INFO] Final candidates: []
2025-04-11 18:38:27,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,552 [INFO] Final candidates: []
2025-04-11 18:38:27,552 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,552 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,720 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:27,720 [DEBUG] Tree_policy iteration 1: Expanding move (15, 15)
2025-04-11 18:38:27,729 [INFO] Final candidates: []
2025-04-11 18:38:27,730 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,739 [INFO] Final candidates: []
2025-04-11 18:38:27,739 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,739 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,766 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:27,766 [DEBUG] Tree_policy iteration 1: Expanding move (0, 9)
2025-04-11 18:38:27,776 [INFO] Final candidates: []
2025-04-11 18:38:27,776 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,785 [INFO] Final candidates: []
2025-04-11 18:38:27,785 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,785 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,863 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:27,863 [DEBUG] Tree_policy iteration 1: Expanding move (14, 3)
2025-04-11 18:38:27,873 [INFO] Final candidates: []
2025-04-11 18:38:27,873 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,883 [INFO] Final candidates: []
2025-04-11 18:38:27,883 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,883 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:27,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:27,959 [DEBUG] Tree_policy iteration 1: Expanding move (0, 6)
2025-04-11 18:38:27,971 [INFO] Final candidates: []
2025-04-11 18:38:27,971 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,981 [INFO] Final candidates: []
2025-04-11 18:38:27,981 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:27,981 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,059 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:28,059 [DEBUG] Tree_policy iteration 1: Expanding move (3, 17)
2025-04-11 18:38:28,069 [INFO] Final candidates: []
2025-04-11 18:38:28,069 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,078 [INFO] Final candidates: []
2025-04-11 18:38:28,078 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,079 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,147 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:28,147 [DEBUG] Tree_policy iteration 1: Expanding move (3, 13)
2025-04-11 18:38:28,157 [INFO] Final candidates: []
2025-04-11 18:38:28,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,166 [INFO] Final candidates: []
2025-04-11 18:38:28,166 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,166 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,181 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:28,181 [DEBUG] Tree_policy iteration 1: Expanding move (2, 3)
2025-04-11 18:38:28,190 [INFO] Final candidates: []
2025-04-11 18:38:28,190 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,199 [INFO] Final candidates: []
2025-04-11 18:38:28,199 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,200 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,239 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:28,239 [DEBUG] Tree_policy iteration 1: Expanding move (15, 5)
2025-04-11 18:38:28,248 [INFO] Final candidates: []
2025-04-11 18:38:28,248 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,257 [INFO] Final candidates: []
2025-04-11 18:38:28,257 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,257 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,348 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:28,348 [DEBUG] Tree_policy iteration 1: Expanding move (11, 2)
2025-04-11 18:38:28,358 [INFO] Final candidates: []
2025-04-11 18:38:28,358 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,367 [INFO] Final candidates: []
2025-04-11 18:38:28,367 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,367 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,526 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:28,526 [DEBUG] Tree_policy iteration 1: Expanding move (5, 16)
2025-04-11 18:38:28,536 [INFO] Final candidates: []
2025-04-11 18:38:28,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,545 [INFO] Final candidates: []
2025-04-11 18:38:28,545 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,545 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,575 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:28,575 [DEBUG] Tree_policy iteration 1: Expanding move (1, 9)
2025-04-11 18:38:28,585 [INFO] Final candidates: []
2025-04-11 18:38:28,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,594 [INFO] Final candidates: []
2025-04-11 18:38:28,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,594 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:28,810 [DEBUG] Tree_policy iteration 1: Expanding move (14, 7)
2025-04-11 18:38:28,820 [INFO] Final candidates: []
2025-04-11 18:38:28,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,829 [INFO] Final candidates: []
2025-04-11 18:38:28,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,829 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:28,888 [DEBUG] Tree_policy iteration 1: Expanding move (1, 0)
2025-04-11 18:38:28,897 [INFO] Final candidates: []
2025-04-11 18:38:28,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,907 [INFO] Final candidates: []
2025-04-11 18:38:28,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:28,907 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:28,995 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:28,995 [DEBUG] Tree_policy iteration 1: Expanding move (17, 4)
2025-04-11 18:38:29,008 [INFO] Final candidates: []
2025-04-11 18:38:29,008 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,017 [INFO] Final candidates: []
2025-04-11 18:38:29,017 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,017 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,038 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:29,038 [DEBUG] Tree_policy iteration 1: Expanding move (10, 11)
2025-04-11 18:38:29,047 [INFO] Final candidates: []
2025-04-11 18:38:29,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,057 [INFO] Final candidates: []
2025-04-11 18:38:29,057 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,057 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,123 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:29,123 [DEBUG] Tree_policy iteration 1: Expanding move (16, 0)
2025-04-11 18:38:29,132 [INFO] Final candidates: []
2025-04-11 18:38:29,132 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,142 [INFO] Final candidates: []
2025-04-11 18:38:29,142 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,142 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,227 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:29,227 [DEBUG] Tree_policy iteration 1: Expanding move (1, 4)
2025-04-11 18:38:29,237 [INFO] Final candidates: []
2025-04-11 18:38:29,237 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,246 [INFO] Final candidates: []
2025-04-11 18:38:29,246 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,246 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,375 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:29,375 [DEBUG] Tree_policy iteration 1: Expanding move (1, 8)
2025-04-11 18:38:29,385 [INFO] Final candidates: []
2025-04-11 18:38:29,385 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,394 [INFO] Final candidates: []
2025-04-11 18:38:29,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,394 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,405 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:29,405 [DEBUG] Tree_policy iteration 1: Expanding move (14, 15)
2025-04-11 18:38:29,417 [INFO] Final candidates: []
2025-04-11 18:38:29,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,428 [INFO] Final candidates: []
2025-04-11 18:38:29,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,428 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,505 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:29,505 [DEBUG] Tree_policy iteration 1: Expanding move (0, 11)
2025-04-11 18:38:29,514 [INFO] Final candidates: []
2025-04-11 18:38:29,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,524 [INFO] Final candidates: []
2025-04-11 18:38:29,524 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,524 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,599 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:29,599 [DEBUG] Tree_policy iteration 1: Expanding move (6, 10)
2025-04-11 18:38:29,608 [INFO] Final candidates: []
2025-04-11 18:38:29,609 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,618 [INFO] Final candidates: []
2025-04-11 18:38:29,618 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,618 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:29,736 [DEBUG] Tree_policy iteration 1: Expanding move (18, 9)
2025-04-11 18:38:29,745 [INFO] Final candidates: []
2025-04-11 18:38:29,746 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,755 [INFO] Final candidates: []
2025-04-11 18:38:29,755 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,755 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,825 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:29,825 [DEBUG] Tree_policy iteration 1: Expanding move (1, 1)
2025-04-11 18:38:29,835 [INFO] Final candidates: []
2025-04-11 18:38:29,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,844 [INFO] Final candidates: []
2025-04-11 18:38:29,844 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,844 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:29,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:29,958 [DEBUG] Tree_policy iteration 1: Expanding move (12, 15)
2025-04-11 18:38:29,967 [INFO] Final candidates: []
2025-04-11 18:38:29,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,976 [INFO] Final candidates: []
2025-04-11 18:38:29,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:29,977 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:30,191 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:30,191 [DEBUG] Tree_policy iteration 1: Expanding move (6, 3)
2025-04-11 18:38:30,201 [INFO] Final candidates: []
2025-04-11 18:38:30,201 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,210 [INFO] Final candidates: []
2025-04-11 18:38:30,210 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,210 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:30,292 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:30,292 [DEBUG] Tree_policy iteration 1: Expanding move (10, 13)
2025-04-11 18:38:30,301 [INFO] Final candidates: []
2025-04-11 18:38:30,301 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,311 [INFO] Final candidates: []
2025-04-11 18:38:30,311 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,311 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:30,503 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:30,503 [DEBUG] Tree_policy iteration 1: Expanding move (10, 14)
2025-04-11 18:38:30,513 [INFO] Final candidates: []
2025-04-11 18:38:30,513 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,523 [INFO] Final candidates: []
2025-04-11 18:38:30,523 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,523 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:30,573 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:30,573 [DEBUG] Tree_policy iteration 1: Expanding move (7, 13)
2025-04-11 18:38:30,582 [INFO] Final candidates: []
2025-04-11 18:38:30,582 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,591 [INFO] Final candidates: []
2025-04-11 18:38:30,592 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,592 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:30,709 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:30,709 [DEBUG] Tree_policy iteration 1: Expanding move (4, 0)
2025-04-11 18:38:30,718 [INFO] Final candidates: []
2025-04-11 18:38:30,718 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,728 [INFO] Final candidates: []
2025-04-11 18:38:30,728 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,728 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:30,923 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:30,923 [DEBUG] Tree_policy iteration 1: Expanding move (13, 16)
2025-04-11 18:38:30,932 [INFO] Final candidates: []
2025-04-11 18:38:30,932 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,941 [INFO] Final candidates: []
2025-04-11 18:38:30,942 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:30,942 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,086 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:31,086 [DEBUG] Tree_policy iteration 1: Expanding move (5, 17)
2025-04-11 18:38:31,095 [INFO] Final candidates: []
2025-04-11 18:38:31,095 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,105 [INFO] Final candidates: []
2025-04-11 18:38:31,105 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,105 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,231 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:31,231 [DEBUG] Tree_policy iteration 1: Expanding move (18, 8)
2025-04-11 18:38:31,241 [INFO] Final candidates: []
2025-04-11 18:38:31,241 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,250 [INFO] Final candidates: []
2025-04-11 18:38:31,250 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,250 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,346 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:31,346 [DEBUG] Tree_policy iteration 1: Expanding move (8, 0)
2025-04-11 18:38:31,355 [INFO] Final candidates: []
2025-04-11 18:38:31,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,365 [INFO] Final candidates: []
2025-04-11 18:38:31,365 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,365 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,389 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:31,389 [DEBUG] Tree_policy iteration 1: Expanding move (13, 15)
2025-04-11 18:38:31,399 [INFO] Final candidates: []
2025-04-11 18:38:31,399 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,408 [INFO] Final candidates: []
2025-04-11 18:38:31,408 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,408 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,428 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:31,428 [DEBUG] Tree_policy iteration 1: Expanding move (16, 12)
2025-04-11 18:38:31,437 [INFO] Final candidates: []
2025-04-11 18:38:31,437 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,447 [INFO] Final candidates: []
2025-04-11 18:38:31,447 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,447 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,530 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:31,530 [DEBUG] Tree_policy iteration 1: Expanding move (14, 8)
2025-04-11 18:38:31,540 [INFO] Final candidates: []
2025-04-11 18:38:31,540 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,549 [INFO] Final candidates: []
2025-04-11 18:38:31,549 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,550 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,875 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:31,875 [DEBUG] Tree_policy iteration 1: Expanding move (11, 18)
2025-04-11 18:38:31,887 [INFO] Final candidates: []
2025-04-11 18:38:31,887 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,896 [INFO] Final candidates: []
2025-04-11 18:38:31,896 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,896 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:31,938 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:31,938 [DEBUG] Tree_policy iteration 1: Expanding move (8, 15)
2025-04-11 18:38:31,947 [INFO] Final candidates: []
2025-04-11 18:38:31,947 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,957 [INFO] Final candidates: []
2025-04-11 18:38:31,957 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:31,957 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,148 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:32,148 [DEBUG] Tree_policy iteration 1: Expanding move (11, 12)
2025-04-11 18:38:32,158 [INFO] Final candidates: []
2025-04-11 18:38:32,158 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,167 [INFO] Final candidates: []
2025-04-11 18:38:32,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,167 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,255 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:32,256 [DEBUG] Tree_policy iteration 1: Expanding move (11, 6)
2025-04-11 18:38:32,265 [INFO] Final candidates: []
2025-04-11 18:38:32,265 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,274 [INFO] Final candidates: []
2025-04-11 18:38:32,274 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,274 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,333 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:32,333 [DEBUG] Tree_policy iteration 1: Expanding move (9, 9)
2025-04-11 18:38:32,343 [INFO] Final candidates: []
2025-04-11 18:38:32,343 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,352 [INFO] Final candidates: []
2025-04-11 18:38:32,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,352 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,469 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:32,469 [DEBUG] Tree_policy iteration 1: Expanding move (2, 4)
2025-04-11 18:38:32,479 [INFO] Final candidates: []
2025-04-11 18:38:32,479 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,488 [INFO] Final candidates: []
2025-04-11 18:38:32,489 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,489 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:32,562 [DEBUG] Tree_policy iteration 1: Expanding move (9, 14)
2025-04-11 18:38:32,572 [INFO] Final candidates: []
2025-04-11 18:38:32,572 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,582 [INFO] Final candidates: []
2025-04-11 18:38:32,582 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,582 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:32,696 [DEBUG] Tree_policy iteration 1: Expanding move (16, 15)
2025-04-11 18:38:32,705 [INFO] Final candidates: []
2025-04-11 18:38:32,705 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,715 [INFO] Final candidates: []
2025-04-11 18:38:32,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,715 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,795 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:32,795 [DEBUG] Tree_policy iteration 1: Expanding move (9, 5)
2025-04-11 18:38:32,805 [INFO] Final candidates: []
2025-04-11 18:38:32,805 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,814 [INFO] Final candidates: []
2025-04-11 18:38:32,814 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,815 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:32,898 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:32,898 [DEBUG] Tree_policy iteration 1: Expanding move (3, 8)
2025-04-11 18:38:32,923 [INFO] Final candidates: []
2025-04-11 18:38:32,923 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,946 [INFO] Final candidates: []
2025-04-11 18:38:32,946 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:32,947 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:33,170 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:33,171 [DEBUG] Tree_policy iteration 1: Expanding move (6, 1)
2025-04-11 18:38:33,182 [INFO] Final candidates: []
2025-04-11 18:38:33,182 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:33,191 [INFO] Final candidates: []
2025-04-11 18:38:33,191 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:33,191 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:33,308 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:33,309 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:38:33,309 [INFO] MCTS selected move: K18
2025-04-11 18:38:33,309 [INFO] ===============NEW MOVE================
2025-04-11 18:38:40,628 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:38:40,637 [INFO] Final candidates: []
2025-04-11 18:38:40,637 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,646 [INFO] Final candidates: []
2025-04-11 18:38:40,646 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,646 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 18:38:40,646 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:38:40,646 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 18:38:40,656 [INFO] Final candidates: []
2025-04-11 18:38:40,656 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,666 [INFO] Final candidates: []
2025-04-11 18:38:40,666 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,666 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:38:40,667 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:40,691 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:40,692 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:40,701 [INFO] Final candidates: []
2025-04-11 18:38:40,701 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,710 [INFO] Final candidates: []
2025-04-11 18:38:40,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,710 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:40,772 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:40,772 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 18:38:40,783 [INFO] Final candidates: []
2025-04-11 18:38:40,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,792 [INFO] Final candidates: []
2025-04-11 18:38:40,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,793 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:40,947 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:40,948 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:40,958 [INFO] Final candidates: []
2025-04-11 18:38:40,958 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,968 [INFO] Final candidates: []
2025-04-11 18:38:40,968 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:40,968 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:41,021 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:41,021 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(10)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:41,031 [INFO] Final candidates: []
2025-04-11 18:38:41,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,040 [INFO] Final candidates: []
2025-04-11 18:38:41,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,040 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:41,163 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:41,163 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(17), np.int64(7)))
2025-04-11 18:38:41,172 [INFO] Final candidates: []
2025-04-11 18:38:41,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,181 [INFO] Final candidates: []
2025-04-11 18:38:41,181 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,181 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:41,445 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:41,591 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(7)), (np.int64(6), np.int64(9)))
2025-04-11 18:38:41,601 [INFO] Final candidates: []
2025-04-11 18:38:41,601 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,610 [INFO] Final candidates: []
2025-04-11 18:38:41,610 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,610 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:41,751 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:41,751 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:41,761 [INFO] Final candidates: []
2025-04-11 18:38:41,761 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,769 [INFO] Final candidates: []
2025-04-11 18:38:41,769 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,770 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:41,819 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:41,819 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(17), np.int64(7)))
2025-04-11 18:38:41,828 [INFO] Final candidates: []
2025-04-11 18:38:41,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,837 [INFO] Final candidates: []
2025-04-11 18:38:41,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,838 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:41,878 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:41,878 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(17), np.int64(11)))
2025-04-11 18:38:41,888 [INFO] Final candidates: []
2025-04-11 18:38:41,888 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,899 [INFO] Final candidates: []
2025-04-11 18:38:41,899 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:41,899 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:42,215 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:42,215 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:42,225 [INFO] Final candidates: []
2025-04-11 18:38:42,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,234 [INFO] Final candidates: []
2025-04-11 18:38:42,234 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,234 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:42,392 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:42,393 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(17), np.int64(8)))
2025-04-11 18:38:42,402 [INFO] Final candidates: []
2025-04-11 18:38:42,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,411 [INFO] Final candidates: []
2025-04-11 18:38:42,411 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,411 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:42,628 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:42,629 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(9), np.int64(10)))
2025-04-11 18:38:42,638 [INFO] Final candidates: []
2025-04-11 18:38:42,638 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,647 [INFO] Final candidates: []
2025-04-11 18:38:42,647 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,648 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:42,820 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:42,820 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:38:42,829 [INFO] Final candidates: []
2025-04-11 18:38:42,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,838 [INFO] Final candidates: []
2025-04-11 18:38:42,838 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,838 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:42,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:42,970 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(11)))
2025-04-11 18:38:42,980 [INFO] Final candidates: []
2025-04-11 18:38:42,980 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,989 [INFO] Final candidates: []
2025-04-11 18:38:42,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:42,989 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:43,186 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:43,187 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:43,197 [INFO] Final candidates: []
2025-04-11 18:38:43,197 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,206 [INFO] Final candidates: []
2025-04-11 18:38:43,206 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,206 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:43,233 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:43,233 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:43,243 [INFO] Final candidates: []
2025-04-11 18:38:43,243 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,252 [INFO] Final candidates: []
2025-04-11 18:38:43,252 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,252 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:43,275 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:43,276 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:43,285 [INFO] Final candidates: []
2025-04-11 18:38:43,285 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,295 [INFO] Final candidates: []
2025-04-11 18:38:43,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,295 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:43,516 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:43,516 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(10)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:43,526 [INFO] Final candidates: []
2025-04-11 18:38:43,526 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,535 [INFO] Final candidates: []
2025-04-11 18:38:43,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,535 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:43,701 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:43,701 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(17), np.int64(8)))
2025-04-11 18:38:43,713 [INFO] Final candidates: []
2025-04-11 18:38:43,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,722 [INFO] Final candidates: []
2025-04-11 18:38:43,722 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,722 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:43,809 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:43,809 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:43,819 [INFO] Final candidates: []
2025-04-11 18:38:43,819 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,828 [INFO] Final candidates: []
2025-04-11 18:38:43,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,828 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:43,893 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:43,893 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(10)))
2025-04-11 18:38:43,903 [INFO] Final candidates: []
2025-04-11 18:38:43,903 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,913 [INFO] Final candidates: []
2025-04-11 18:38:43,913 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:43,913 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:44,070 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:44,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 18:38:44,080 [INFO] Final candidates: []
2025-04-11 18:38:44,080 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,089 [INFO] Final candidates: []
2025-04-11 18:38:44,089 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,089 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:44,351 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:44,352 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(17), np.int64(8)))
2025-04-11 18:38:44,361 [INFO] Final candidates: []
2025-04-11 18:38:44,361 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,370 [INFO] Final candidates: []
2025-04-11 18:38:44,370 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,370 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:44,376 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:44,376 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(10)), (np.int64(10), np.int64(8)))
2025-04-11 18:38:44,396 [INFO] Final candidates: []
2025-04-11 18:38:44,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,406 [INFO] Final candidates: []
2025-04-11 18:38:44,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,406 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:44,415 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:44,415 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(17), np.int64(7)))
2025-04-11 18:38:44,425 [INFO] Final candidates: []
2025-04-11 18:38:44,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,434 [INFO] Final candidates: []
2025-04-11 18:38:44,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,435 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:44,547 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:44,548 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(7)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:44,558 [INFO] Final candidates: []
2025-04-11 18:38:44,558 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,567 [INFO] Final candidates: []
2025-04-11 18:38:44,567 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,567 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:44,794 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:44,794 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:44,803 [INFO] Final candidates: []
2025-04-11 18:38:44,803 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,812 [INFO] Final candidates: []
2025-04-11 18:38:44,812 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,812 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:44,931 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:44,932 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:44,941 [INFO] Final candidates: []
2025-04-11 18:38:44,941 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,952 [INFO] Final candidates: []
2025-04-11 18:38:44,952 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:44,953 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:45,078 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:45,078 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:45,088 [INFO] Final candidates: []
2025-04-11 18:38:45,088 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,097 [INFO] Final candidates: []
2025-04-11 18:38:45,097 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,097 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:45,271 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:45,272 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(7)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:45,282 [INFO] Final candidates: []
2025-04-11 18:38:45,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,291 [INFO] Final candidates: []
2025-04-11 18:38:45,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,292 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:45,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:45,408 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:45,417 [INFO] Final candidates: []
2025-04-11 18:38:45,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,426 [INFO] Final candidates: []
2025-04-11 18:38:45,426 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,426 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:45,542 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:45,542 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(11)), (np.int64(9), np.int64(10)))
2025-04-11 18:38:45,552 [INFO] Final candidates: []
2025-04-11 18:38:45,552 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,561 [INFO] Final candidates: []
2025-04-11 18:38:45,561 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,561 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:45,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:45,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(9)))
2025-04-11 18:38:45,707 [INFO] Final candidates: []
2025-04-11 18:38:45,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,716 [INFO] Final candidates: []
2025-04-11 18:38:45,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,717 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:45,962 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:45,962 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(9)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:45,971 [INFO] Final candidates: []
2025-04-11 18:38:45,971 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,980 [INFO] Final candidates: []
2025-04-11 18:38:45,980 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:45,980 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:46,093 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:46,094 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:46,103 [INFO] Final candidates: []
2025-04-11 18:38:46,103 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,112 [INFO] Final candidates: []
2025-04-11 18:38:46,112 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,112 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:46,256 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:46,256 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:46,267 [INFO] Final candidates: []
2025-04-11 18:38:46,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,276 [INFO] Final candidates: []
2025-04-11 18:38:46,276 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,276 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:46,554 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:46,554 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 18:38:46,564 [INFO] Final candidates: []
2025-04-11 18:38:46,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,572 [INFO] Final candidates: []
2025-04-11 18:38:46,572 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,573 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:46,741 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:46,741 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(10), np.int64(8)))
2025-04-11 18:38:46,750 [INFO] Final candidates: []
2025-04-11 18:38:46,750 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,760 [INFO] Final candidates: []
2025-04-11 18:38:46,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,760 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:46,891 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:46,892 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 18:38:46,901 [INFO] Final candidates: []
2025-04-11 18:38:46,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,910 [INFO] Final candidates: []
2025-04-11 18:38:46,910 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:46,910 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:47,141 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:47,141 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(16), np.int64(9)))
2025-04-11 18:38:47,150 [INFO] Final candidates: []
2025-04-11 18:38:47,150 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,159 [INFO] Final candidates: []
2025-04-11 18:38:47,159 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,159 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:47,210 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:47,210 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(7), np.int64(9)))
2025-04-11 18:38:47,219 [INFO] Final candidates: []
2025-04-11 18:38:47,219 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,228 [INFO] Final candidates: []
2025-04-11 18:38:47,228 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,228 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:47,301 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:47,301 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(7)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:47,311 [INFO] Final candidates: []
2025-04-11 18:38:47,311 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,320 [INFO] Final candidates: []
2025-04-11 18:38:47,320 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,320 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:47,684 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:47,684 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(6), np.int64(9)))
2025-04-11 18:38:47,687 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 18:38:47,687 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:38:47,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 9), (7, 9)]
2025-04-11 18:38:47,688 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 18:38:47,688 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 18:38:47,688 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:38:47,688 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 9), (11, 9)]
2025-04-11 18:38:47,688 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:38:47,694 [INFO] Final candidates: [(7, 9), (5, 9), (11, 9)]
2025-04-11 18:38:47,694 [INFO] Phase win: Collected 3unique candidate(s):[((7, 9), (5, 9)), ((5, 9), (11, 9)), ((7, 9), (11, 9))]
2025-04-11 18:38:47,694 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:38:47,703 [INFO] Final candidates: []
2025-04-11 18:38:47,703 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,703 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:47,915 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:47,915 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(6), np.int64(9)))
2025-04-11 18:38:47,924 [INFO] Final candidates: []
2025-04-11 18:38:47,924 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,933 [INFO] Final candidates: []
2025-04-11 18:38:47,934 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:47,934 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:48,021 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:48,022 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(11)), (np.int64(8), np.int64(11)))
2025-04-11 18:38:48,031 [INFO] Final candidates: []
2025-04-11 18:38:48,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,040 [INFO] Final candidates: []
2025-04-11 18:38:48,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,041 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:48,178 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:48,179 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 18:38:48,188 [INFO] Final candidates: []
2025-04-11 18:38:48,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,197 [INFO] Final candidates: []
2025-04-11 18:38:48,197 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,198 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:48,329 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:48,329 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(9)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:48,339 [INFO] Final candidates: []
2025-04-11 18:38:48,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,348 [INFO] Final candidates: []
2025-04-11 18:38:48,348 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,348 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:48,412 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:48,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(9)), (np.int64(8), np.int64(7)))
2025-04-11 18:38:48,431 [INFO] Final candidates: []
2025-04-11 18:38:48,431 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,440 [INFO] Final candidates: []
2025-04-11 18:38:48,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,440 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:48,454 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:48,454 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(10), np.int64(10)))
2025-04-11 18:38:48,463 [INFO] Final candidates: []
2025-04-11 18:38:48,463 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,472 [INFO] Final candidates: []
2025-04-11 18:38:48,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,472 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:48,687 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:48,687 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:48,697 [INFO] Final candidates: []
2025-04-11 18:38:48,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,705 [INFO] Final candidates: []
2025-04-11 18:38:48,705 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,706 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:38:48,706 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:48,910 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:48,911 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(11)), (np.int64(7), np.int64(8)))
2025-04-11 18:38:48,930 [INFO] Final candidates: []
2025-04-11 18:38:48,930 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,939 [INFO] Final candidates: []
2025-04-11 18:38:48,939 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:48,939 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:49,171 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:49,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(6), np.int64(9)))
2025-04-11 18:38:49,180 [INFO] Final candidates: []
2025-04-11 18:38:49,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,189 [INFO] Final candidates: []
2025-04-11 18:38:49,189 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,189 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:49,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:49,347 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(11)), (np.int64(17), np.int64(7)))
2025-04-11 18:38:49,357 [INFO] Final candidates: []
2025-04-11 18:38:49,357 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,366 [INFO] Final candidates: []
2025-04-11 18:38:49,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,367 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:49,461 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:49,462 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:38:49,471 [INFO] Final candidates: []
2025-04-11 18:38:49,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,480 [INFO] Final candidates: []
2025-04-11 18:38:49,480 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,480 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:49,501 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:49,501 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(9)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:49,510 [INFO] Final candidates: []
2025-04-11 18:38:49,510 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,519 [INFO] Final candidates: []
2025-04-11 18:38:49,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,519 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:49,690 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:49,690 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:49,700 [INFO] Final candidates: []
2025-04-11 18:38:49,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,709 [INFO] Final candidates: []
2025-04-11 18:38:49,709 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,709 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:49,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:49,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(17), np.int64(11)))
2025-04-11 18:38:49,835 [INFO] Final candidates: []
2025-04-11 18:38:49,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,843 [INFO] Final candidates: []
2025-04-11 18:38:49,844 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,844 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:49,932 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:49,932 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(10)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:49,942 [INFO] Final candidates: []
2025-04-11 18:38:49,942 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,952 [INFO] Final candidates: []
2025-04-11 18:38:49,952 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:49,952 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,004 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:50,004 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:50,013 [INFO] Final candidates: []
2025-04-11 18:38:50,013 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,022 [INFO] Final candidates: []
2025-04-11 18:38:50,022 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,022 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,102 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:50,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(10)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:50,111 [INFO] Final candidates: []
2025-04-11 18:38:50,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,120 [INFO] Final candidates: []
2025-04-11 18:38:50,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,120 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,192 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:50,193 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(9)), (np.int64(17), np.int64(7)))
2025-04-11 18:38:50,202 [INFO] Final candidates: []
2025-04-11 18:38:50,202 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,211 [INFO] Final candidates: []
2025-04-11 18:38:50,211 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,211 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,268 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:50,269 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(16), np.int64(9)))
2025-04-11 18:38:50,279 [INFO] Final candidates: []
2025-04-11 18:38:50,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,288 [INFO] Final candidates: []
2025-04-11 18:38:50,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,288 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,425 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:50,425 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(10)))
2025-04-11 18:38:50,435 [INFO] Final candidates: []
2025-04-11 18:38:50,435 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,454 [INFO] Final candidates: []
2025-04-11 18:38:50,454 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,455 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,630 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:50,630 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 18:38:50,640 [INFO] Final candidates: []
2025-04-11 18:38:50,640 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,649 [INFO] Final candidates: []
2025-04-11 18:38:50,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,649 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,746 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:50,746 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(10)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:50,755 [INFO] Final candidates: []
2025-04-11 18:38:50,755 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,764 [INFO] Final candidates: []
2025-04-11 18:38:50,764 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,764 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:50,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:50,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:50,906 [INFO] Final candidates: []
2025-04-11 18:38:50,906 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,915 [INFO] Final candidates: []
2025-04-11 18:38:50,915 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:50,915 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:51,000 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:51,000 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(17), np.int64(7)))
2025-04-11 18:38:51,010 [INFO] Final candidates: []
2025-04-11 18:38:51,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,018 [INFO] Final candidates: []
2025-04-11 18:38:51,018 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,019 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:51,147 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:51,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:51,156 [INFO] Final candidates: []
2025-04-11 18:38:51,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,165 [INFO] Final candidates: []
2025-04-11 18:38:51,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,165 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:51,170 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:51,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(11)), (np.int64(8), np.int64(7)))
2025-04-11 18:38:51,180 [INFO] Final candidates: []
2025-04-11 18:38:51,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,189 [INFO] Final candidates: []
2025-04-11 18:38:51,189 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,189 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:51,314 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:51,314 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(10)), (np.int64(7), np.int64(9)))
2025-04-11 18:38:51,324 [INFO] Final candidates: []
2025-04-11 18:38:51,324 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,333 [INFO] Final candidates: []
2025-04-11 18:38:51,333 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,333 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:51,430 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:51,430 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:51,439 [INFO] Final candidates: []
2025-04-11 18:38:51,439 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,448 [INFO] Final candidates: []
2025-04-11 18:38:51,448 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,448 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:51,657 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:51,657 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(7)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:51,666 [INFO] Final candidates: []
2025-04-11 18:38:51,666 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,675 [INFO] Final candidates: []
2025-04-11 18:38:51,675 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,675 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:51,918 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:51,919 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(17), np.int64(7)))
2025-04-11 18:38:51,928 [INFO] Final candidates: []
2025-04-11 18:38:51,928 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,937 [INFO] Final candidates: []
2025-04-11 18:38:51,937 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:51,937 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:52,234 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:52,234 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(9)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:52,243 [INFO] Final candidates: []
2025-04-11 18:38:52,243 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,252 [INFO] Final candidates: []
2025-04-11 18:38:52,252 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,253 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:52,492 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:52,492 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:52,502 [INFO] Final candidates: []
2025-04-11 18:38:52,502 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,510 [INFO] Final candidates: []
2025-04-11 18:38:52,510 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,511 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:52,567 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:52,567 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(10)), (np.int64(8), np.int64(8)))
2025-04-11 18:38:52,577 [INFO] Final candidates: []
2025-04-11 18:38:52,577 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,585 [INFO] Final candidates: []
2025-04-11 18:38:52,586 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,586 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:52,654 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:52,654 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(16), np.int64(10)))
2025-04-11 18:38:52,663 [INFO] Final candidates: []
2025-04-11 18:38:52,663 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,672 [INFO] Final candidates: []
2025-04-11 18:38:52,672 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,672 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:52,715 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:52,715 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:52,724 [INFO] Final candidates: []
2025-04-11 18:38:52,724 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,733 [INFO] Final candidates: []
2025-04-11 18:38:52,733 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,733 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:52,800 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:52,801 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(8)))
2025-04-11 18:38:52,810 [INFO] Final candidates: []
2025-04-11 18:38:52,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,819 [INFO] Final candidates: []
2025-04-11 18:38:52,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:52,819 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,067 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:53,067 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:53,077 [INFO] Final candidates: []
2025-04-11 18:38:53,077 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,085 [INFO] Final candidates: []
2025-04-11 18:38:53,085 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,086 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,124 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:53,124 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(18), np.int64(10)))
2025-04-11 18:38:53,133 [INFO] Final candidates: []
2025-04-11 18:38:53,133 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,142 [INFO] Final candidates: []
2025-04-11 18:38:53,142 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,142 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,211 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:53,211 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:53,220 [INFO] Final candidates: []
2025-04-11 18:38:53,220 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,229 [INFO] Final candidates: []
2025-04-11 18:38:53,229 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,229 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,244 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:53,244 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(16), np.int64(9)))
2025-04-11 18:38:53,254 [INFO] Final candidates: []
2025-04-11 18:38:53,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,262 [INFO] Final candidates: []
2025-04-11 18:38:53,262 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,263 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,416 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:53,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(15), np.int64(9)))
2025-04-11 18:38:53,425 [INFO] Final candidates: []
2025-04-11 18:38:53,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,435 [INFO] Final candidates: []
2025-04-11 18:38:53,435 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,435 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,634 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:53,634 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(10)), (np.int64(7), np.int64(8)))
2025-04-11 18:38:53,643 [INFO] Final candidates: []
2025-04-11 18:38:53,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,652 [INFO] Final candidates: []
2025-04-11 18:38:53,652 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,652 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:53,697 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(18), np.int64(9)))
2025-04-11 18:38:53,706 [INFO] Final candidates: []
2025-04-11 18:38:53,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,716 [INFO] Final candidates: []
2025-04-11 18:38:53,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,716 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,826 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:53,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(9), np.int64(10)))
2025-04-11 18:38:53,836 [INFO] Final candidates: []
2025-04-11 18:38:53,836 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,844 [INFO] Final candidates: []
2025-04-11 18:38:53,844 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,845 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:53,906 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:53,906 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:38:53,915 [INFO] Final candidates: []
2025-04-11 18:38:53,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,924 [INFO] Final candidates: []
2025-04-11 18:38:53,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:53,924 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:54,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:54,073 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(17), np.int64(8)))
2025-04-11 18:38:54,083 [INFO] Final candidates: []
2025-04-11 18:38:54,083 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,091 [INFO] Final candidates: []
2025-04-11 18:38:54,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:54,213 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:54,214 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:54,223 [INFO] Final candidates: []
2025-04-11 18:38:54,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,232 [INFO] Final candidates: []
2025-04-11 18:38:54,232 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,232 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:54,446 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:54,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 18:38:54,455 [INFO] Final candidates: []
2025-04-11 18:38:54,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,464 [INFO] Final candidates: []
2025-04-11 18:38:54,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,464 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:54,561 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:54,561 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 18:38:54,570 [INFO] Final candidates: []
2025-04-11 18:38:54,570 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,579 [INFO] Final candidates: []
2025-04-11 18:38:54,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,579 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:54,864 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:54,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(18), np.int64(9)))
2025-04-11 18:38:54,874 [INFO] Final candidates: []
2025-04-11 18:38:54,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,883 [INFO] Final candidates: []
2025-04-11 18:38:54,883 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:54,883 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:55,021 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:55,021 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(11)), (np.int64(16), np.int64(9)))
2025-04-11 18:38:55,031 [INFO] Final candidates: []
2025-04-11 18:38:55,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,039 [INFO] Final candidates: []
2025-04-11 18:38:55,039 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,040 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:55,180 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:38:55,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(18), np.int64(8)))
2025-04-11 18:38:55,190 [INFO] Final candidates: []
2025-04-11 18:38:55,190 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,199 [INFO] Final candidates: []
2025-04-11 18:38:55,199 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,199 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:55,233 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:55,233 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(16), np.int64(8)))
2025-04-11 18:38:55,242 [INFO] Final candidates: []
2025-04-11 18:38:55,242 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,251 [INFO] Final candidates: []
2025-04-11 18:38:55,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,251 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:55,384 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:55,384 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(8), np.int64(8)))
2025-04-11 18:38:55,394 [INFO] Final candidates: []
2025-04-11 18:38:55,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,403 [INFO] Final candidates: []
2025-04-11 18:38:55,403 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,403 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:55,642 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:55,642 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(10)), (np.int64(9), np.int64(10)))
2025-04-11 18:38:55,651 [INFO] Final candidates: []
2025-04-11 18:38:55,651 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,660 [INFO] Final candidates: []
2025-04-11 18:38:55,660 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,661 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:55,692 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:55,692 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(17), np.int64(10)))
2025-04-11 18:38:55,701 [INFO] Final candidates: []
2025-04-11 18:38:55,701 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,710 [INFO] Final candidates: []
2025-04-11 18:38:55,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:38:55,711 [INFO] Default policy: Starting random playout.
2025-04-11 18:38:55,848 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:38:55,848 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:38:55,849 [INFO] MCTS selected move: J9,J11
2025-04-11 18:38:55,849 [INFO] ===============NEW MOVE================
2025-04-11 18:39:01,047 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:39:01,056 [INFO] Final candidates: []
2025-04-11 18:39:01,056 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,065 [INFO] Final candidates: []
2025-04-11 18:39:01,065 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,065 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 18:39:01,066 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:39:01,066 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(5), np.int64(8)))
2025-04-11 18:39:01,074 [INFO] Final candidates: []
2025-04-11 18:39:01,075 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,083 [INFO] Final candidates: []
2025-04-11 18:39:01,083 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,084 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:39:01,084 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:01,261 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:01,262 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:01,271 [INFO] Final candidates: []
2025-04-11 18:39:01,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,279 [INFO] Final candidates: []
2025-04-11 18:39:01,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,280 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:01,382 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:01,382 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(7)))
2025-04-11 18:39:01,391 [INFO] Final candidates: []
2025-04-11 18:39:01,391 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,399 [INFO] Final candidates: []
2025-04-11 18:39:01,399 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,400 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:01,645 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:01,645 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(6), np.int64(8)))
2025-04-11 18:39:01,654 [INFO] Final candidates: []
2025-04-11 18:39:01,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,663 [INFO] Final candidates: []
2025-04-11 18:39:01,663 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,663 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:01,801 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:01,801 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(16)), (np.int64(2), np.int64(14)))
2025-04-11 18:39:01,810 [INFO] Final candidates: []
2025-04-11 18:39:01,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,819 [INFO] Final candidates: []
2025-04-11 18:39:01,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:01,819 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,051 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:02,051 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 18:39:02,060 [INFO] Final candidates: []
2025-04-11 18:39:02,060 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,069 [INFO] Final candidates: []
2025-04-11 18:39:02,069 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,069 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,156 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:02,156 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(18), np.int64(10)))
2025-04-11 18:39:02,165 [INFO] Final candidates: []
2025-04-11 18:39:02,165 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,174 [INFO] Final candidates: []
2025-04-11 18:39:02,174 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,174 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,207 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:02,207 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(10)), (np.int64(3), np.int64(8)))
2025-04-11 18:39:02,216 [INFO] Final candidates: []
2025-04-11 18:39:02,216 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,224 [INFO] Final candidates: []
2025-04-11 18:39:02,224 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,225 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,297 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:02,297 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(11), np.int64(7)))
2025-04-11 18:39:02,306 [INFO] Final candidates: []
2025-04-11 18:39:02,306 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,314 [INFO] Final candidates: []
2025-04-11 18:39:02,314 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,314 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,494 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:02,495 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(10)), (np.int64(8), np.int64(10)))
2025-04-11 18:39:02,504 [INFO] Final candidates: []
2025-04-11 18:39:02,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,512 [INFO] Final candidates: []
2025-04-11 18:39:02,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,513 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:02,748 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(16), np.int64(9)))
2025-04-11 18:39:02,757 [INFO] Final candidates: []
2025-04-11 18:39:02,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,765 [INFO] Final candidates: []
2025-04-11 18:39:02,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,766 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,834 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:02,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 18:39:02,843 [INFO] Final candidates: []
2025-04-11 18:39:02,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,852 [INFO] Final candidates: []
2025-04-11 18:39:02,852 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,852 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:02,976 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:02,977 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:02,979 [DEBUG] board coords: [(7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (12, 8)]
2025-04-11 18:39:02,980 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 18:39:02,980 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (11, 8)]
2025-04-11 18:39:02,980 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (12, 8)] triggers candidate.
2025-04-11 18:39:02,986 [INFO] Final candidates: [(11, 8), (9, 8)]
2025-04-11 18:39:02,986 [INFO] Phase win: Collected 1unique candidate(s):[((11, 8), (9, 8))]
2025-04-11 18:39:02,986 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:02,994 [INFO] Final candidates: []
2025-04-11 18:39:02,994 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:02,995 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:03,079 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:03,080 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(3), np.int64(14)))
2025-04-11 18:39:03,089 [INFO] Final candidates: []
2025-04-11 18:39:03,089 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,097 [INFO] Final candidates: []
2025-04-11 18:39:03,097 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,098 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:03,191 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:03,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(16)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:03,200 [INFO] Final candidates: []
2025-04-11 18:39:03,200 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,209 [INFO] Final candidates: []
2025-04-11 18:39:03,209 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,209 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:03,387 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:03,388 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(17), np.int64(11)))
2025-04-11 18:39:03,397 [INFO] Final candidates: []
2025-04-11 18:39:03,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,405 [INFO] Final candidates: []
2025-04-11 18:39:03,405 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,406 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:03,639 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:03,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(3), np.int64(8)))
2025-04-11 18:39:03,648 [INFO] Final candidates: []
2025-04-11 18:39:03,648 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,657 [INFO] Final candidates: []
2025-04-11 18:39:03,657 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,657 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:03,930 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:03,930 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(7)), (np.int64(2), np.int64(9)))
2025-04-11 18:39:03,939 [INFO] Final candidates: []
2025-04-11 18:39:03,939 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,948 [INFO] Final candidates: []
2025-04-11 18:39:03,948 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:03,948 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:04,150 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:04,150 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(11), np.int64(7)))
2025-04-11 18:39:04,159 [INFO] Final candidates: []
2025-04-11 18:39:04,159 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,168 [INFO] Final candidates: []
2025-04-11 18:39:04,168 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,168 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:04,381 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:04,382 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(9)), (np.int64(18), np.int64(9)))
2025-04-11 18:39:04,390 [INFO] Final candidates: []
2025-04-11 18:39:04,391 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,399 [INFO] Final candidates: []
2025-04-11 18:39:04,399 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,400 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:04,688 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:04,689 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(8)), (np.int64(10), np.int64(10)))
2025-04-11 18:39:04,699 [INFO] Final candidates: []
2025-04-11 18:39:04,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,707 [INFO] Final candidates: []
2025-04-11 18:39:04,707 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,708 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:04,954 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:04,955 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(17), np.int64(10)))
2025-04-11 18:39:04,963 [INFO] Final candidates: []
2025-04-11 18:39:04,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,972 [INFO] Final candidates: []
2025-04-11 18:39:04,972 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:04,972 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:05,074 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 18:39:05,082 [INFO] Final candidates: []
2025-04-11 18:39:05,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,091 [INFO] Final candidates: []
2025-04-11 18:39:05,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,351 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:05,352 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:05,362 [INFO] Final candidates: []
2025-04-11 18:39:05,362 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,373 [INFO] Final candidates: []
2025-04-11 18:39:05,373 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,373 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,375 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:05,376 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:05,386 [INFO] Final candidates: []
2025-04-11 18:39:05,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,408 [INFO] Final candidates: []
2025-04-11 18:39:05,408 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,409 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,514 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:05,514 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(16), np.int64(9)))
2025-04-11 18:39:05,523 [INFO] Final candidates: []
2025-04-11 18:39:05,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,532 [INFO] Final candidates: []
2025-04-11 18:39:05,532 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,532 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,565 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:05,565 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(4), np.int64(11)))
2025-04-11 18:39:05,574 [INFO] Final candidates: []
2025-04-11 18:39:05,574 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,582 [INFO] Final candidates: []
2025-04-11 18:39:05,582 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,583 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,722 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:05,723 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(5), np.int64(15)))
2025-04-11 18:39:05,732 [INFO] Final candidates: []
2025-04-11 18:39:05,732 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,740 [INFO] Final candidates: []
2025-04-11 18:39:05,740 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,740 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,806 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:05,806 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(15), np.int64(9)))
2025-04-11 18:39:05,815 [INFO] Final candidates: []
2025-04-11 18:39:05,815 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,825 [INFO] Final candidates: []
2025-04-11 18:39:05,825 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,826 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:05,929 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:05,929 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(10)))
2025-04-11 18:39:05,938 [INFO] Final candidates: []
2025-04-11 18:39:05,938 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,949 [INFO] Final candidates: []
2025-04-11 18:39:05,949 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:05,949 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:06,113 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:06,113 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:06,131 [INFO] Final candidates: []
2025-04-11 18:39:06,131 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,148 [INFO] Final candidates: []
2025-04-11 18:39:06,148 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,149 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:06,370 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:06,370 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(16), np.int64(10)))
2025-04-11 18:39:06,379 [INFO] Final candidates: []
2025-04-11 18:39:06,379 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,388 [INFO] Final candidates: []
2025-04-11 18:39:06,388 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,389 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:06,520 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:06,521 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:06,531 [INFO] Final candidates: []
2025-04-11 18:39:06,531 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,541 [INFO] Final candidates: []
2025-04-11 18:39:06,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,542 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:06,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:06,562 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:06,571 [INFO] Final candidates: []
2025-04-11 18:39:06,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,580 [INFO] Final candidates: []
2025-04-11 18:39:06,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,580 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:06,749 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:06,749 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:06,758 [INFO] Final candidates: []
2025-04-11 18:39:06,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,767 [INFO] Final candidates: []
2025-04-11 18:39:06,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:06,767 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:07,033 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:07,033 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(6), np.int64(9)))
2025-04-11 18:39:07,042 [INFO] Final candidates: []
2025-04-11 18:39:07,042 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,051 [INFO] Final candidates: []
2025-04-11 18:39:07,051 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,051 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:07,261 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:07,262 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(8)), (np.int64(3), np.int64(9)))
2025-04-11 18:39:07,271 [INFO] Final candidates: []
2025-04-11 18:39:07,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,280 [INFO] Final candidates: []
2025-04-11 18:39:07,280 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,280 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:07,416 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:07,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(10), np.int64(7)))
2025-04-11 18:39:07,425 [INFO] Final candidates: []
2025-04-11 18:39:07,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,433 [INFO] Final candidates: []
2025-04-11 18:39:07,433 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,434 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:07,693 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:07,693 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(7), np.int64(7)))
2025-04-11 18:39:07,702 [INFO] Final candidates: []
2025-04-11 18:39:07,702 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,711 [INFO] Final candidates: []
2025-04-11 18:39:07,711 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,711 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:07,801 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:07,802 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 18:39:07,811 [INFO] Final candidates: []
2025-04-11 18:39:07,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,819 [INFO] Final candidates: []
2025-04-11 18:39:07,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:07,820 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:08,053 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:08,053 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(8)), (np.int64(3), np.int64(8)))
2025-04-11 18:39:08,062 [INFO] Final candidates: []
2025-04-11 18:39:08,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,071 [INFO] Final candidates: []
2025-04-11 18:39:08,071 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,071 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:08,262 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:08,262 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 18:39:08,271 [INFO] Final candidates: []
2025-04-11 18:39:08,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,279 [INFO] Final candidates: []
2025-04-11 18:39:08,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,279 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:08,448 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:08,448 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(17), np.int64(7)))
2025-04-11 18:39:08,457 [INFO] Final candidates: []
2025-04-11 18:39:08,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,466 [INFO] Final candidates: []
2025-04-11 18:39:08,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,467 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:08,636 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:08,636 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 18:39:08,645 [INFO] Final candidates: []
2025-04-11 18:39:08,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,654 [INFO] Final candidates: []
2025-04-11 18:39:08,654 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,654 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:08,839 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:08,839 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(10)))
2025-04-11 18:39:08,848 [INFO] Final candidates: []
2025-04-11 18:39:08,848 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,856 [INFO] Final candidates: []
2025-04-11 18:39:08,856 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,857 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:08,914 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:08,914 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(5), np.int64(9)))
2025-04-11 18:39:08,923 [INFO] Final candidates: []
2025-04-11 18:39:08,923 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,932 [INFO] Final candidates: []
2025-04-11 18:39:08,932 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:08,932 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:09,156 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:09,157 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(17), np.int64(8)))
2025-04-11 18:39:09,167 [INFO] Final candidates: []
2025-04-11 18:39:09,167 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,177 [INFO] Final candidates: []
2025-04-11 18:39:09,178 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,178 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:09,296 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:09,296 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(15), np.int64(9)))
2025-04-11 18:39:09,305 [INFO] Final candidates: []
2025-04-11 18:39:09,305 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,314 [INFO] Final candidates: []
2025-04-11 18:39:09,314 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,314 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:09,358 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:09,358 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 18:39:09,367 [INFO] Final candidates: []
2025-04-11 18:39:09,367 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,376 [INFO] Final candidates: []
2025-04-11 18:39:09,376 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,377 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:09,590 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:09,590 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(18), np.int64(9)))
2025-04-11 18:39:09,600 [INFO] Final candidates: []
2025-04-11 18:39:09,600 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,609 [INFO] Final candidates: []
2025-04-11 18:39:09,609 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,609 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:09,908 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:09,908 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(10), np.int64(7)))
2025-04-11 18:39:09,917 [INFO] Final candidates: []
2025-04-11 18:39:09,917 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,926 [INFO] Final candidates: []
2025-04-11 18:39:09,926 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:09,926 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:39:09,926 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:10,169 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:10,169 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(9)), (np.int64(11), np.int64(9)))
2025-04-11 18:39:10,178 [INFO] Final candidates: []
2025-04-11 18:39:10,178 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,187 [INFO] Final candidates: []
2025-04-11 18:39:10,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,187 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:10,377 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:10,377 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(6), np.int64(8)))
2025-04-11 18:39:10,386 [INFO] Final candidates: []
2025-04-11 18:39:10,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,394 [INFO] Final candidates: []
2025-04-11 18:39:10,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,395 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:10,509 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:10,509 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(4), np.int64(8)))
2025-04-11 18:39:10,518 [INFO] Final candidates: []
2025-04-11 18:39:10,518 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,526 [INFO] Final candidates: []
2025-04-11 18:39:10,527 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,527 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:10,658 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:10,658 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(3), np.int64(17)))
2025-04-11 18:39:10,667 [INFO] Final candidates: []
2025-04-11 18:39:10,667 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,676 [INFO] Final candidates: []
2025-04-11 18:39:10,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,677 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:10,810 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:10,810 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:10,819 [INFO] Final candidates: []
2025-04-11 18:39:10,819 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,828 [INFO] Final candidates: []
2025-04-11 18:39:10,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:10,828 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:11,121 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:11,122 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:11,130 [INFO] Final candidates: []
2025-04-11 18:39:11,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,139 [INFO] Final candidates: []
2025-04-11 18:39:11,139 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,139 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:11,268 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:11,268 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(3), np.int64(17)))
2025-04-11 18:39:11,277 [INFO] Final candidates: []
2025-04-11 18:39:11,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,288 [INFO] Final candidates: []
2025-04-11 18:39:11,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,288 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:11,456 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:11,457 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(9)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:11,465 [INFO] Final candidates: []
2025-04-11 18:39:11,465 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,474 [INFO] Final candidates: []
2025-04-11 18:39:11,474 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,474 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:11,633 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:11,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(18), np.int64(9)))
2025-04-11 18:39:11,642 [INFO] Final candidates: []
2025-04-11 18:39:11,642 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,651 [INFO] Final candidates: []
2025-04-11 18:39:11,651 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,651 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:11,879 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:11,879 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(16)), (np.int64(11), np.int64(9)))
2025-04-11 18:39:11,888 [INFO] Final candidates: []
2025-04-11 18:39:11,888 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,904 [INFO] Final candidates: []
2025-04-11 18:39:11,904 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:11,905 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:11,987 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:11,987 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(6), np.int64(8)))
2025-04-11 18:39:11,996 [INFO] Final candidates: []
2025-04-11 18:39:11,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,005 [INFO] Final candidates: []
2025-04-11 18:39:12,005 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,005 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:12,211 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:12,211 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(17), np.int64(7)))
2025-04-11 18:39:12,220 [INFO] Final candidates: []
2025-04-11 18:39:12,220 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,229 [INFO] Final candidates: []
2025-04-11 18:39:12,229 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,229 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:12,375 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:12,376 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(2), np.int64(14)))
2025-04-11 18:39:12,384 [INFO] Final candidates: []
2025-04-11 18:39:12,385 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,393 [INFO] Final candidates: []
2025-04-11 18:39:12,393 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,394 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:12,556 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:12,556 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(8)), (np.int64(6), np.int64(8)))
2025-04-11 18:39:12,559 [DEBUG] board coords: [(6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8)]
2025-04-11 18:39:12,559 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 18:39:12,559 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 8), (9, 8)]
2025-04-11 18:39:12,559 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8)] triggers candidate.
2025-04-11 18:39:12,565 [INFO] Final candidates: [(9, 8), (7, 8)]
2025-04-11 18:39:12,565 [INFO] Phase win: Collected 1unique candidate(s):[((9, 8), (7, 8))]
2025-04-11 18:39:12,565 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:12,573 [INFO] Final candidates: []
2025-04-11 18:39:12,573 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,574 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:12,675 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:12,675 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(3), np.int64(14)))
2025-04-11 18:39:12,684 [INFO] Final candidates: []
2025-04-11 18:39:12,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,692 [INFO] Final candidates: []
2025-04-11 18:39:12,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,693 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:12,803 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:12,804 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(4), np.int64(7)))
2025-04-11 18:39:12,812 [INFO] Final candidates: []
2025-04-11 18:39:12,812 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,821 [INFO] Final candidates: []
2025-04-11 18:39:12,821 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,821 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:12,889 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:12,890 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(16), np.int64(9)))
2025-04-11 18:39:12,898 [INFO] Final candidates: []
2025-04-11 18:39:12,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,907 [INFO] Final candidates: []
2025-04-11 18:39:12,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:12,908 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:12,984 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:12,984 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:12,993 [INFO] Final candidates: []
2025-04-11 18:39:12,993 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,002 [INFO] Final candidates: []
2025-04-11 18:39:13,002 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,002 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:13,161 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:13,162 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:13,170 [INFO] Final candidates: []
2025-04-11 18:39:13,170 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,186 [INFO] Final candidates: []
2025-04-11 18:39:13,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,187 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:13,400 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:13,400 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(11), np.int64(8)))
2025-04-11 18:39:13,410 [INFO] Final candidates: []
2025-04-11 18:39:13,410 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,419 [INFO] Final candidates: []
2025-04-11 18:39:13,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,419 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:13,430 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:13,430 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(8)), (np.int64(11), np.int64(7)))
2025-04-11 18:39:13,439 [INFO] Final candidates: []
2025-04-11 18:39:13,439 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,448 [INFO] Final candidates: []
2025-04-11 18:39:13,448 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,448 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:13,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:13,553 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(4), np.int64(7)))
2025-04-11 18:39:13,562 [INFO] Final candidates: []
2025-04-11 18:39:13,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,572 [INFO] Final candidates: []
2025-04-11 18:39:13,572 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,572 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:13,602 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:13,602 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(5), np.int64(9)))
2025-04-11 18:39:13,611 [INFO] Final candidates: []
2025-04-11 18:39:13,611 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,619 [INFO] Final candidates: []
2025-04-11 18:39:13,619 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,620 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:13,781 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:13,782 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(9), np.int64(7)))
2025-04-11 18:39:13,791 [INFO] Final candidates: []
2025-04-11 18:39:13,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,799 [INFO] Final candidates: []
2025-04-11 18:39:13,799 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,800 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:13,912 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:13,912 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(10)), (np.int64(3), np.int64(8)))
2025-04-11 18:39:13,921 [INFO] Final candidates: []
2025-04-11 18:39:13,921 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,930 [INFO] Final candidates: []
2025-04-11 18:39:13,930 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:13,930 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:14,136 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:14,136 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(16)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:14,145 [INFO] Final candidates: []
2025-04-11 18:39:14,145 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,154 [INFO] Final candidates: []
2025-04-11 18:39:14,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,154 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:14,484 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:14,485 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(10), np.int64(10)))
2025-04-11 18:39:14,494 [INFO] Final candidates: []
2025-04-11 18:39:14,494 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,502 [INFO] Final candidates: []
2025-04-11 18:39:14,502 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,503 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:14,592 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:14,593 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(17), np.int64(7)))
2025-04-11 18:39:14,601 [INFO] Final candidates: []
2025-04-11 18:39:14,601 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,610 [INFO] Final candidates: []
2025-04-11 18:39:14,610 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,611 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:14,659 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:14,659 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:14,668 [INFO] Final candidates: []
2025-04-11 18:39:14,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,677 [INFO] Final candidates: []
2025-04-11 18:39:14,677 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,677 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:14,819 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:14,819 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(17), np.int64(10)))
2025-04-11 18:39:14,828 [INFO] Final candidates: []
2025-04-11 18:39:14,828 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,837 [INFO] Final candidates: []
2025-04-11 18:39:14,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,837 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:14,936 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:14,936 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(18), np.int64(9)))
2025-04-11 18:39:14,945 [INFO] Final candidates: []
2025-04-11 18:39:14,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,954 [INFO] Final candidates: []
2025-04-11 18:39:14,954 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:14,954 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:15,053 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:15,053 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(4), np.int64(11)))
2025-04-11 18:39:15,062 [INFO] Final candidates: []
2025-04-11 18:39:15,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,071 [INFO] Final candidates: []
2025-04-11 18:39:15,071 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,071 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:15,207 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:15,207 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(17), np.int64(7)))
2025-04-11 18:39:15,216 [INFO] Final candidates: []
2025-04-11 18:39:15,216 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,225 [INFO] Final candidates: []
2025-04-11 18:39:15,225 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,225 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:15,431 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:15,431 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(7)), (np.int64(5), np.int64(8)))
2025-04-11 18:39:15,440 [INFO] Final candidates: []
2025-04-11 18:39:15,440 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,449 [INFO] Final candidates: []
2025-04-11 18:39:15,449 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,449 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:15,637 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:15,638 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 18:39:15,647 [INFO] Final candidates: []
2025-04-11 18:39:15,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,656 [INFO] Final candidates: []
2025-04-11 18:39:15,656 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,656 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:15,904 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:15,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 18:39:15,913 [INFO] Final candidates: []
2025-04-11 18:39:15,913 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,922 [INFO] Final candidates: []
2025-04-11 18:39:15,922 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:15,922 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:15,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:15,989 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(10), np.int64(10)))
2025-04-11 18:39:15,998 [INFO] Final candidates: []
2025-04-11 18:39:15,998 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,006 [INFO] Final candidates: []
2025-04-11 18:39:16,006 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,007 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:16,094 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:16,095 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(17), np.int64(8)))
2025-04-11 18:39:16,103 [INFO] Final candidates: []
2025-04-11 18:39:16,104 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,114 [INFO] Final candidates: []
2025-04-11 18:39:16,114 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,115 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:16,164 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:16,164 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(10)), (np.int64(5), np.int64(15)))
2025-04-11 18:39:16,173 [INFO] Final candidates: []
2025-04-11 18:39:16,173 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,182 [INFO] Final candidates: []
2025-04-11 18:39:16,182 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,182 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:16,412 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:16,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:16,421 [INFO] Final candidates: []
2025-04-11 18:39:16,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,430 [INFO] Final candidates: []
2025-04-11 18:39:16,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,430 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:16,532 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:16,532 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(9)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:16,541 [INFO] Final candidates: []
2025-04-11 18:39:16,541 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,550 [INFO] Final candidates: []
2025-04-11 18:39:16,550 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,550 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:16,748 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:16,748 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:16,757 [INFO] Final candidates: []
2025-04-11 18:39:16,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,765 [INFO] Final candidates: []
2025-04-11 18:39:16,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,766 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:16,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:16,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 18:39:16,832 [INFO] Final candidates: []
2025-04-11 18:39:16,832 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,841 [INFO] Final candidates: []
2025-04-11 18:39:16,841 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:16,841 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:17,098 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:17,099 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(18), np.int64(10)))
2025-04-11 18:39:17,108 [INFO] Final candidates: []
2025-04-11 18:39:17,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,117 [INFO] Final candidates: []
2025-04-11 18:39:17,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,117 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:17,208 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:17,208 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(12), np.int64(8)))
2025-04-11 18:39:17,217 [INFO] Final candidates: []
2025-04-11 18:39:17,217 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,226 [INFO] Final candidates: []
2025-04-11 18:39:17,226 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,226 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:17,446 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:17,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 18:39:17,455 [INFO] Final candidates: []
2025-04-11 18:39:17,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,464 [INFO] Final candidates: []
2025-04-11 18:39:17,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,464 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:17,675 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:17,675 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:17,684 [INFO] Final candidates: []
2025-04-11 18:39:17,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,693 [INFO] Final candidates: []
2025-04-11 18:39:17,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,693 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:17,944 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:17,944 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(6), np.int64(9)))
2025-04-11 18:39:17,953 [INFO] Final candidates: []
2025-04-11 18:39:17,953 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,962 [INFO] Final candidates: []
2025-04-11 18:39:17,962 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:17,962 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:18,065 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:18,065 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(17), np.int64(11)))
2025-04-11 18:39:18,074 [INFO] Final candidates: []
2025-04-11 18:39:18,074 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:18,083 [INFO] Final candidates: []
2025-04-11 18:39:18,083 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:18,083 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:18,140 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:18,140 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:39:18,141 [INFO] MCTS selected move: M10,J6
2025-04-11 18:39:18,141 [INFO] ===============NEW MOVE================
2025-04-11 18:39:24,016 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:39:24,025 [INFO] Final candidates: []
2025-04-11 18:39:24,025 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,027 [DEBUG] board coords: [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,028 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,028 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 9), (5, 9)]
2025-04-11 18:39:24,028 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,028 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 18:39:24,028 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,028 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 18:39:24,028 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,028 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (11, 9)]
2025-04-11 18:39:24,028 [DEBUG] check_window_intermediate_custom (only one inserted(10, 9)): For L=6, window [2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,029 [DEBUG] board coords: [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)]
2025-04-11 18:39:24,029 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 9), (5, 9)]
2025-04-11 18:39:24,029 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 0 2 2 2 2] with coords [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)] triggers candidate.
2025-04-11 18:39:24,029 [DEBUG] board coords: [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 18:39:24,029 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:39:24,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 9), (10, 9)]
2025-04-11 18:39:24,029 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 2 2 0] with coords [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 18:39:24,034 [INFO] Final candidates: [(10, 9), (5, 9), (3, 9)]
2025-04-11 18:39:24,034 [INFO] Phase defense: Collected 3unique candidate(s):[((10, 9), (5, 9)), ((10, 9), (3, 9)), ((5, 9), (3, 9))]
2025-04-11 18:39:24,034 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,034 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:39:24,034 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 9), (3, 9))
2025-04-11 18:39:24,037 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,037 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,037 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,037 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,037 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,037 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,037 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,037 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,038 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,038 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,038 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,038 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,038 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,038 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,038 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,038 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,038 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,038 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,044 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,044 [INFO] Phase win: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,044 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:39:24,052 [INFO] Final candidates: []
2025-04-11 18:39:24,052 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,053 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:39:24,053 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,056 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,056 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 9), (3, 9))
2025-04-11 18:39:24,059 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 18:39:24,059 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 18:39:24,059 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 18:39:24,059 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 18:39:24,059 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (11, 9)]
2025-04-11 18:39:24,059 [DEBUG] check_window_intermediate_custom (only one inserted(10, 9)): For L=6, window [2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,061 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,061 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 18:39:24,061 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,061 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 18:39:24,061 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (11, 9)]
2025-04-11 18:39:24,061 [DEBUG] check_window_intermediate_custom (only one inserted(10, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,066 [INFO] Final candidates: [(10, 9), (2, 9)]
2025-04-11 18:39:24,066 [INFO] Phase win: Collected 1unique candidate(s):[((10, 9), (2, 9))]
2025-04-11 18:39:24,066 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:24,074 [INFO] Final candidates: []
2025-04-11 18:39:24,074 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,074 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,074 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,074 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 9), (5, 9))
2025-04-11 18:39:24,077 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,077 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,077 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (3, 9)]
2025-04-11 18:39:24,077 [DEBUG] check_window_intermediate_custom (only one inserted(3, 9)): For L=6, window [0 0 2 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,078 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,078 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,078 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,078 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,079 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,079 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,079 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (3, 9)]
2025-04-11 18:39:24,079 [DEBUG] check_window_intermediate_custom (only one inserted(3, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,079 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,079 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,079 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,079 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,083 [INFO] Final candidates: [(11, 9), (3, 9)]
2025-04-11 18:39:24,083 [INFO] Phase win: Collected 1unique candidate(s):[((11, 9), (3, 9))]
2025-04-11 18:39:24,083 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:24,092 [INFO] Final candidates: []
2025-04-11 18:39:24,092 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,092 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,092 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(9), np.int64(13)))
2025-04-11 18:39:24,101 [INFO] Final candidates: []
2025-04-11 18:39:24,101 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,104 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,104 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,104 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,104 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,104 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,104 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,104 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,104 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,105 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,105 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,105 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,105 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,105 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,105 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,105 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,105 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,105 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,105 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,109 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,110 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,110 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,110 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,211 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,211 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,211 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:24,225 [INFO] Final candidates: []
2025-04-11 18:39:24,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,233 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,233 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,233 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,233 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,233 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,234 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,237 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,237 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,237 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,237 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,237 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,237 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,237 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,237 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,247 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,247 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,247 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,247 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,336 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,336 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,336 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 18:39:24,344 [INFO] Final candidates: []
2025-04-11 18:39:24,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,347 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,347 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,347 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,347 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,347 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,347 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,347 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,347 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,348 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,348 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,348 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,348 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,349 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,349 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,349 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,349 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,349 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,349 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,353 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,353 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,353 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,353 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:24,454 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,454 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:24,457 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:24,457 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 18:39:24,457 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (9, 8)]
2025-04-11 18:39:24,457 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:24,462 [INFO] Final candidates: [(6, 8), (9, 8)]
2025-04-11 18:39:24,462 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (9, 8))]
2025-04-11 18:39:24,462 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:24,465 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,465 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,465 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,465 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,465 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,465 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,465 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,465 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,467 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,467 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,467 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,467 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,467 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,467 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,467 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,467 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,467 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,467 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,471 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,471 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,471 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,471 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,717 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,717 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,717 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(11)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:24,725 [INFO] Final candidates: []
2025-04-11 18:39:24,725 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,728 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,729 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,729 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,729 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,729 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,729 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,729 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,729 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,730 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,730 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,730 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,730 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,730 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,730 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,730 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,730 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,730 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,730 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,735 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,735 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,735 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,735 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,830 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,831 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,831 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(2), np.int64(9)))
2025-04-11 18:39:24,839 [INFO] Final candidates: []
2025-04-11 18:39:24,839 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,842 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,842 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,842 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,843 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,843 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,843 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,843 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,844 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,844 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,848 [INFO] Final candidates: [(5, 9), (11, 9)]
2025-04-11 18:39:24,848 [INFO] Phase defense: Collected 1unique candidate(s):[((5, 9), (11, 9))]
2025-04-11 18:39:24,848 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:39:24,848 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,909 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,909 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,909 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(10)), (np.int64(3), np.int64(14)))
2025-04-11 18:39:24,918 [INFO] Final candidates: []
2025-04-11 18:39:24,918 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,921 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,921 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,921 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,921 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,921 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,921 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,921 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,921 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,922 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,922 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,922 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,922 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,922 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,922 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,922 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,922 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,922 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,922 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,927 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,927 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,927 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,927 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:24,937 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:24,937 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:24,937 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:24,945 [INFO] Final candidates: []
2025-04-11 18:39:24,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:24,948 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:24,948 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,948 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,948 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:24,948 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,948 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,948 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,949 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,950 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:24,950 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:24,950 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:24,950 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:24,950 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:24,950 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:24,950 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:24,950 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:24,950 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:24,950 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:24,954 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:24,954 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:24,954 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:24,954 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,099 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:25,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,100 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(8), np.int64(12)))
2025-04-11 18:39:25,112 [INFO] Final candidates: []
2025-04-11 18:39:25,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:25,114 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,114 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,114 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,115 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,115 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,115 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,115 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,115 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,116 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,116 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,116 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,116 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,116 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,116 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,116 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,116 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,121 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,121 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,121 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,121 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:25,167 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,167 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:25,175 [INFO] Final candidates: []
2025-04-11 18:39:25,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:25,178 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,178 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,178 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,178 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,178 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,178 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,178 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,178 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,179 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,179 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,179 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,179 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,179 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,180 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,180 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,180 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,180 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,180 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,184 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,184 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,184 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,184 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,362 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:25,362 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,362 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(11), np.int64(7)))
2025-04-11 18:39:25,370 [INFO] Final candidates: []
2025-04-11 18:39:25,370 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:25,373 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,373 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,373 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,373 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,373 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,373 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,373 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,373 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,374 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,374 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,374 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,375 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,375 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,375 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,375 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,375 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,375 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,375 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,379 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,379 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,379 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,379 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,381 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:25,381 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,381 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(8), np.int64(12)))
2025-04-11 18:39:25,389 [INFO] Final candidates: []
2025-04-11 18:39:25,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:25,392 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,392 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,392 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,392 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,392 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,392 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,392 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,392 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,393 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,393 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,393 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,393 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,394 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,394 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,394 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,394 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,394 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,394 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,398 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,398 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,398 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,398 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,490 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:25,490 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,490 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(2), np.int64(10)))
2025-04-11 18:39:25,499 [INFO] Final candidates: []
2025-04-11 18:39:25,499 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:25,501 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,501 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,501 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,502 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,502 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,502 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,502 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,502 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,503 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,503 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,503 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,503 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,503 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,503 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,503 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,503 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,508 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,508 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,508 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,508 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,671 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:25,671 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,671 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:25,674 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:25,674 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 18:39:25,674 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (9, 8)]
2025-04-11 18:39:25,674 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:25,680 [INFO] Final candidates: [(6, 8), (9, 8)]
2025-04-11 18:39:25,680 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (9, 8))]
2025-04-11 18:39:25,680 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:25,682 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,683 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,683 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,683 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,683 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,683 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,684 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,684 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,684 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,684 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,684 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,684 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,684 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,684 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,690 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,690 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,690 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,690 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,794 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:25,794 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,794 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(3), np.int64(10)))
2025-04-11 18:39:25,803 [INFO] Final candidates: []
2025-04-11 18:39:25,803 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:25,805 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,806 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,806 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,806 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,806 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,806 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,806 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,806 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,807 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,807 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,807 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,807 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,807 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,807 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,807 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,807 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,807 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,807 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,812 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,812 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,812 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,812 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:25,890 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:25,890 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:25,890 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(11), np.int64(10)))
2025-04-11 18:39:25,899 [INFO] Final candidates: []
2025-04-11 18:39:25,899 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:25,902 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:25,902 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,902 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:25,902 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,902 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,902 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,903 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:25,903 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:25,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:25,903 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:25,903 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:25,903 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:25,903 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:25,903 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:25,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:25,903 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:25,908 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:25,908 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:25,908 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:25,908 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,011 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:26,011 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,011 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(15), np.int64(9)))
2025-04-11 18:39:26,014 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:26,014 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 18:39:26,014 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (7, 8)]
2025-04-11 18:39:26,014 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:26,020 [INFO] Final candidates: [(6, 8), (7, 8)]
2025-04-11 18:39:26,020 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (7, 8))]
2025-04-11 18:39:26,020 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:26,022 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,022 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,022 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,023 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,023 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,023 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,023 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,023 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,024 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,024 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,024 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,024 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,024 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,024 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,024 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,024 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,024 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,024 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,028 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,029 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,029 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,029 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,106 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:26,106 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,106 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(2), np.int64(16)))
2025-04-11 18:39:26,115 [INFO] Final candidates: []
2025-04-11 18:39:26,115 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,117 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,117 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,117 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,118 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,119 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,119 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,119 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,119 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,123 [INFO] Final candidates: [(11, 9)]
2025-04-11 18:39:26,123 [INFO] Phase defense: Found only one candidate: (11, 9)
2025-04-11 18:39:26,123 [INFO] Phase defense: Collected 9unique candidate(s):[((11, 9), (np.int64(11), np.int64(11))), ((11, 9), (np.int64(12), np.int64(8))), ((11, 9), (np.int64(11), np.int64(10))), ((11, 9), (np.int64(12), np.int64(10))), ((11, 9), (np.int64(11), np.int64(8))), ((11, 9), (np.int64(12), np.int64(9))), ((11, 9), (np.int64(13), np.int64(9))), ((11, 9), (np.int64(11), np.int64(7))), ((11, 9), (np.int64(10), np.int64(10)))]
2025-04-11 18:39:26,123 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 18:39:26,123 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,437 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:26,438 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,438 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(10), np.int64(7)))
2025-04-11 18:39:26,446 [INFO] Final candidates: []
2025-04-11 18:39:26,446 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,449 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,449 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,449 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,449 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,449 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,449 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,449 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,449 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,450 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,450 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,450 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,450 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,450 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,450 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,450 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,450 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,450 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,450 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,455 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,455 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,455 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,455 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,533 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:26,533 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,533 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(10)), (np.int64(11), np.int64(7)))
2025-04-11 18:39:26,541 [INFO] Final candidates: []
2025-04-11 18:39:26,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,544 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,545 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,545 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,545 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,545 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,545 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,545 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,545 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,546 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,546 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,546 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,546 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,546 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,546 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,546 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,546 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,546 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,546 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,551 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,551 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,551 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,551 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,624 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:26,624 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,624 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(7), np.int64(10)))
2025-04-11 18:39:26,632 [INFO] Final candidates: []
2025-04-11 18:39:26,632 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,635 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,635 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,635 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,635 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,635 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,635 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,635 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,635 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,637 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,637 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,637 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,637 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,637 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,637 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,637 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,637 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,637 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,637 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,641 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,641 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,641 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,641 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,709 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:26,709 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,709 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(11)), (np.int64(7), np.int64(11)))
2025-04-11 18:39:26,718 [INFO] Final candidates: []
2025-04-11 18:39:26,718 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,721 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,721 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,721 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,721 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,721 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,721 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,721 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,721 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,722 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,722 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,722 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,722 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,722 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,722 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,722 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,722 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,722 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,723 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,727 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,727 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,727 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,727 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,730 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:26,730 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,730 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:26,738 [INFO] Final candidates: []
2025-04-11 18:39:26,738 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,741 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,741 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,741 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,741 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,741 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,741 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,741 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,741 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,743 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,743 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,743 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,743 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,743 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,743 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,743 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,743 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,743 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,743 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,747 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,747 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,747 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,747 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,824 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:26,824 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,824 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(7)), (np.int64(10), np.int64(10)))
2025-04-11 18:39:26,833 [INFO] Final candidates: []
2025-04-11 18:39:26,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,835 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,836 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,836 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,836 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,836 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,836 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,836 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,836 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,837 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,837 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,837 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,837 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,837 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,837 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,837 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,837 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,837 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,837 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,842 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,842 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,842 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,842 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,903 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:26,903 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,903 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(10)), (np.int64(2), np.int64(9)))
2025-04-11 18:39:26,912 [INFO] Final candidates: []
2025-04-11 18:39:26,912 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,915 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,915 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,915 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,915 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,916 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,916 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,916 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,916 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,916 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,916 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,921 [INFO] Final candidates: [(5, 9), (11, 9)]
2025-04-11 18:39:26,921 [INFO] Phase defense: Collected 1unique candidate(s):[((5, 9), (11, 9))]
2025-04-11 18:39:26,921 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:39:26,921 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:26,921 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:26,921 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:26,921 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(15), np.int64(9)))
2025-04-11 18:39:26,930 [INFO] Final candidates: []
2025-04-11 18:39:26,930 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:26,932 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:26,932 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,932 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,932 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:26,933 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,933 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,933 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,933 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,934 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:26,934 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:26,934 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:26,934 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:26,934 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:26,934 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:26,934 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:26,934 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:26,934 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:26,934 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:26,938 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:26,938 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:26,938 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:26,938 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,060 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,061 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,061 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(5), np.int64(7)))
2025-04-11 18:39:27,069 [INFO] Final candidates: []
2025-04-11 18:39:27,069 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,072 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,072 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,072 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,072 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,072 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,072 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,072 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,072 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,073 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,073 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,073 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,074 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,074 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,074 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,074 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,074 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,074 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,074 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,078 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,078 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,078 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,078 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,088 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:27,088 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,088 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(10)), (np.int64(17), np.int64(7)))
2025-04-11 18:39:27,097 [INFO] Final candidates: []
2025-04-11 18:39:27,097 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,099 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,099 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,099 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,099 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,099 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,100 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,100 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,100 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,101 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,101 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,101 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,101 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,101 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,101 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,101 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,101 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,101 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,101 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,105 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,106 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,106 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,106 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,107 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,107 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,107 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(6), np.int64(7)))
2025-04-11 18:39:27,116 [INFO] Final candidates: []
2025-04-11 18:39:27,116 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,118 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,119 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,119 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,119 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,119 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,119 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,119 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,119 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,120 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,120 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,120 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,120 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,120 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,120 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,120 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,120 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,120 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,120 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,125 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,125 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,125 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,125 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,279 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:27,279 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,279 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(12), np.int64(8)))
2025-04-11 18:39:27,287 [INFO] Final candidates: []
2025-04-11 18:39:27,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,290 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,290 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,290 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,290 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,290 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,290 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,290 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,290 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,291 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,291 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,291 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,291 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,292 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,292 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,292 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,292 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,292 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,292 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,296 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,296 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,296 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,296 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,298 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,298 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(2), np.int64(14)))
2025-04-11 18:39:27,306 [INFO] Final candidates: []
2025-04-11 18:39:27,306 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,309 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,309 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,309 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,309 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,309 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,310 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,310 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,311 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,311 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,311 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,311 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,311 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,311 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,311 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,311 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,316 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,316 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,316 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,316 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,318 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,318 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,318 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(6)), (np.int64(6), np.int64(7)))
2025-04-11 18:39:27,326 [INFO] Final candidates: []
2025-04-11 18:39:27,326 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,329 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,329 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,329 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,329 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,329 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,329 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,329 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,329 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,330 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,330 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,330 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,330 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,330 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,330 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,330 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,330 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,330 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,330 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,335 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,335 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,335 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,335 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,341 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,341 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,341 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(9), np.int64(13)))
2025-04-11 18:39:27,349 [INFO] Final candidates: []
2025-04-11 18:39:27,349 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,352 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,352 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,352 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,352 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,352 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,352 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,352 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,352 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,354 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,354 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,354 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,354 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,354 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,354 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,354 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,354 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,354 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,354 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,358 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,358 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,359 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,359 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,363 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,363 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,363 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(11)), (np.int64(2), np.int64(14)))
2025-04-11 18:39:27,371 [INFO] Final candidates: []
2025-04-11 18:39:27,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,374 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,374 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,374 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,374 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,374 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,374 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,374 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,374 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,376 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,376 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,376 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,376 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,376 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,376 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,376 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,376 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,376 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,376 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,381 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,381 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,381 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,381 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,400 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,400 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,400 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(5), np.int64(6)))
2025-04-11 18:39:27,409 [INFO] Final candidates: []
2025-04-11 18:39:27,409 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,411 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,411 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,411 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,412 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,412 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,412 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,412 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,412 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,413 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,413 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,413 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,413 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,413 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,413 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,413 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,413 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,413 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,413 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,418 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,418 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,418 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,418 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,484 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,484 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,484 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(11)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:27,493 [INFO] Final candidates: []
2025-04-11 18:39:27,493 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,496 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,496 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,496 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,496 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,496 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,496 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,497 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,497 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,497 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,497 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,497 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,497 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,497 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,497 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,502 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,502 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,502 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,502 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,582 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,583 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,583 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(2), np.int64(16)))
2025-04-11 18:39:27,593 [INFO] Final candidates: []
2025-04-11 18:39:27,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,596 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,596 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,596 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,596 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,596 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,596 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,596 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,596 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,597 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,597 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,597 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,597 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,597 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,597 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,597 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,597 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,597 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,597 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,602 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,602 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,602 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,602 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,604 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,604 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,605 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(2), np.int64(8)))
2025-04-11 18:39:27,613 [INFO] Final candidates: []
2025-04-11 18:39:27,613 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,616 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,616 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,616 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,616 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,616 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,616 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,616 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,616 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,617 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,617 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,617 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,617 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,617 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,617 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,617 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,617 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,617 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,617 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,622 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,622 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,622 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,622 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,752 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:27,752 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,752 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(12), np.int64(8)))
2025-04-11 18:39:27,755 [DEBUG] board coords: [(7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (12, 8)]
2025-04-11 18:39:27,755 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 18:39:27,755 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 8), (9, 8)]
2025-04-11 18:39:27,755 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (12, 8)] triggers candidate.
2025-04-11 18:39:27,755 [DEBUG] board coords: [(8, 8), (9, 8), (10, 8), (11, 8), (12, 8), (13, 8)]
2025-04-11 18:39:27,755 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 18:39:27,755 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (13, 8)]
2025-04-11 18:39:27,755 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 8), (9, 8), (10, 8), (11, 8), (12, 8), (13, 8)] triggers candidate.
2025-04-11 18:39:27,761 [INFO] Final candidates: [(13, 8), (9, 8), (7, 8)]
2025-04-11 18:39:27,761 [INFO] Phase win: Collected 3unique candidate(s):[((13, 8), (9, 8)), ((13, 8), (7, 8)), ((9, 8), (7, 8))]
2025-04-11 18:39:27,761 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:39:27,763 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,763 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,763 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,764 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,764 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,764 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,764 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,765 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,765 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,765 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,765 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,765 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,765 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,765 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:27,765 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:27,765 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:27,765 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:27,769 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,769 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,769 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,769 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,844 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,844 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,844 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(12), np.int64(9)))
2025-04-11 18:39:27,853 [INFO] Final candidates: []
2025-04-11 18:39:27,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,856 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,856 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,856 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,856 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,857 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,857 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,857 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,857 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,857 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,857 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,862 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,862 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,862 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,862 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,949 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:27,949 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,949 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(9)), (np.int64(8), np.int64(10)))
2025-04-11 18:39:27,957 [INFO] Final candidates: []
2025-04-11 18:39:27,957 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:27,960 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:27,960 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,960 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,960 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:27,962 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:27,962 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:27,962 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:27,962 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:27,962 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:27,962 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:27,966 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:27,966 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:27,966 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:27,966 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:27,988 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:27,988 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:27,988 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(7)), (np.int64(10), np.int64(10)))
2025-04-11 18:39:27,997 [INFO] Final candidates: []
2025-04-11 18:39:27,997 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,000 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,000 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,000 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,000 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,000 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,000 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,000 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,000 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,001 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,001 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,001 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,001 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,001 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,001 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,001 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,001 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,006 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,006 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,006 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,006 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,104 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:28,105 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,105 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(4), np.int64(7)))
2025-04-11 18:39:28,113 [INFO] Final candidates: []
2025-04-11 18:39:28,113 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,116 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,116 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,116 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,116 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,116 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,116 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,117 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,117 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,117 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,117 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,117 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,117 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,117 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,117 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,117 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,117 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,122 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,122 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,122 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,122 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,201 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:28,202 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,202 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(4), np.int64(14)))
2025-04-11 18:39:28,210 [INFO] Final candidates: []
2025-04-11 18:39:28,210 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,213 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,213 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,213 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,213 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,213 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,213 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,213 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,213 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,214 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,214 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,214 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,214 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,214 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,214 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,214 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,214 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,214 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,215 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,219 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,219 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,219 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,219 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,225 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,225 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,225 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(3), np.int64(14)))
2025-04-11 18:39:28,233 [INFO] Final candidates: []
2025-04-11 18:39:28,233 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,236 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,236 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,236 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,236 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,236 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,236 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,236 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,236 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,237 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,237 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,237 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,237 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,237 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,237 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,237 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,238 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,238 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,243 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,243 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,243 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,243 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,404 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(10)), (np.int64(11), np.int64(10)))
2025-04-11 18:39:28,412 [INFO] Final candidates: []
2025-04-11 18:39:28,412 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,415 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,415 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,415 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,415 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,415 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,415 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,415 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,416 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,417 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,417 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,417 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,417 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,417 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,417 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,417 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,417 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,417 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,417 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,421 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,421 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,421 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,421 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,424 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,424 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,424 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(2), np.int64(8)))
2025-04-11 18:39:28,433 [INFO] Final candidates: []
2025-04-11 18:39:28,433 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,436 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,436 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,436 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,436 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,436 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,436 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,436 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,436 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,438 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,438 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,438 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,438 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,438 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,438 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,438 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,438 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,438 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,438 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,442 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,442 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,442 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,442 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,508 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,509 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,509 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(8), np.int64(10)))
2025-04-11 18:39:28,517 [INFO] Final candidates: []
2025-04-11 18:39:28,517 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,520 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,520 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,520 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,520 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,520 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,520 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,520 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,520 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,521 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,521 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,521 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,521 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,521 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,521 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,521 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,521 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,521 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,521 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,526 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,526 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,526 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,526 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:39:28,526 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,620 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,621 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,621 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:28,629 [INFO] Final candidates: []
2025-04-11 18:39:28,629 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,632 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,632 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,632 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,632 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,632 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,632 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,632 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,632 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,633 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,633 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,633 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,633 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,633 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,634 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,634 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,634 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,634 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,634 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,638 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,638 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,638 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,638 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,660 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,660 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,660 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 18:39:28,668 [INFO] Final candidates: []
2025-04-11 18:39:28,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,671 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,671 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,671 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,671 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,671 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,671 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,671 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,671 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,672 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,672 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,673 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,673 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,673 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,673 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,673 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,673 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,673 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,673 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,677 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,677 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,678 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,678 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,775 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,776 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,776 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:28,784 [INFO] Final candidates: []
2025-04-11 18:39:28,784 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,787 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,787 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,787 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,787 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,787 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,787 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,788 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,788 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,788 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,788 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,788 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,788 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,788 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,788 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,793 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,793 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,793 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,793 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,808 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,808 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,808 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(5), np.int64(6)))
2025-04-11 18:39:28,816 [INFO] Final candidates: []
2025-04-11 18:39:28,816 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,819 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,819 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,819 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,819 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,819 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,819 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,820 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,820 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,820 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,820 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,820 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,821 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,821 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,821 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,821 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,821 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,825 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,825 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,825 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,825 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,890 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,890 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,890 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(16)), (np.int64(4), np.int64(10)))
2025-04-11 18:39:28,899 [INFO] Final candidates: []
2025-04-11 18:39:28,899 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,902 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,902 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,902 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,902 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,902 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,902 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,903 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,903 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,903 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,903 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,903 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,903 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,903 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,904 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,908 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,908 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,908 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,908 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,960 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,961 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,961 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(9)), (np.int64(10), np.int64(7)))
2025-04-11 18:39:28,969 [INFO] Final candidates: []
2025-04-11 18:39:28,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,972 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,972 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,972 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,972 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,972 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,972 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,972 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,972 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,973 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,973 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,973 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,973 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,973 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,973 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,973 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,973 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,973 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,973 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,978 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,978 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,978 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,978 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:28,979 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:28,979 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:28,980 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:28,988 [INFO] Final candidates: []
2025-04-11 18:39:28,988 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:28,991 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:28,991 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,991 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,991 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:28,991 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,991 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,991 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,991 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,992 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:28,992 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:28,992 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:28,992 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:28,992 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:28,992 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:28,992 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:28,992 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:28,992 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:28,992 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:28,997 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:28,997 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:28,997 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:28,997 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,090 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:29,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,091 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(10)))
2025-04-11 18:39:29,099 [INFO] Final candidates: []
2025-04-11 18:39:29,099 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:29,102 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,102 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,102 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,102 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,102 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,102 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,102 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,102 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,103 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,103 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,104 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,104 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,104 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,104 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,104 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,104 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,104 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,104 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,108 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,108 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,108 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,108 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,110 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:29,110 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,110 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(18), np.int64(9)))
2025-04-11 18:39:29,118 [INFO] Final candidates: []
2025-04-11 18:39:29,118 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:29,121 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,121 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,121 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,121 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,121 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,121 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,121 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,121 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,123 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,123 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,123 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,123 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,123 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,123 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,123 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,123 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,127 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,127 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,127 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,127 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,327 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:29,328 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,328 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:29,334 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:29,334 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 18:39:29,334 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (9, 8)]
2025-04-11 18:39:29,334 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:29,345 [INFO] Final candidates: [(6, 8), (9, 8)]
2025-04-11 18:39:29,345 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (9, 8))]
2025-04-11 18:39:29,345 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:29,350 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,350 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,350 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,351 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,353 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,353 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,353 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,354 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,362 [INFO] Final candidates: [(2, 9), (5, 9)]
2025-04-11 18:39:29,362 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (5, 9))]
2025-04-11 18:39:29,362 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:39:29,362 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,398 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:29,398 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,398 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(3), np.int64(17)))
2025-04-11 18:39:29,417 [INFO] Final candidates: []
2025-04-11 18:39:29,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:29,421 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,421 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,421 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,421 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,421 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,421 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,421 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,421 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,422 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,422 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,422 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,422 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,422 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,422 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,422 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,422 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,422 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,422 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,427 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,427 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,427 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,427 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,440 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:29,440 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,440 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(8)), (np.int64(9), np.int64(12)))
2025-04-11 18:39:29,449 [INFO] Final candidates: []
2025-04-11 18:39:29,449 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:29,451 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,451 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,451 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,452 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,452 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,452 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,452 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,452 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,453 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,453 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,453 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,453 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,453 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,453 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,453 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,453 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,453 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,453 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,457 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,457 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,457 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,457 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,459 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:29,459 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,459 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(11), np.int64(11)))
2025-04-11 18:39:29,462 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:29,462 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 18:39:29,462 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (7, 8)]
2025-04-11 18:39:29,462 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:29,468 [INFO] Final candidates: [(6, 8), (7, 8)]
2025-04-11 18:39:29,468 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (7, 8))]
2025-04-11 18:39:29,468 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:29,471 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,471 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,471 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,471 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,471 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,471 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,472 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,472 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,472 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,472 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,472 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,472 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,472 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,472 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,472 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,472 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,477 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,477 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,477 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,477 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,516 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:29,516 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,516 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(18), np.int64(10)))
2025-04-11 18:39:29,524 [INFO] Final candidates: []
2025-04-11 18:39:29,524 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:29,527 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,527 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,527 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,527 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,527 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,527 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,527 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,527 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,528 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,528 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,528 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,528 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,529 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,529 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,529 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,529 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,529 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,529 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,533 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,533 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,533 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,533 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,716 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:29,716 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,716 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(13)), (np.int64(11), np.int64(9)))
2025-04-11 18:39:29,725 [INFO] Final candidates: []
2025-04-11 18:39:29,725 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:29,727 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,727 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,727 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,727 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,729 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,729 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,729 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,729 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,733 [INFO] Final candidates: [(2, 9), (5, 9)]
2025-04-11 18:39:29,733 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (5, 9))]
2025-04-11 18:39:29,733 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:39:29,733 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,898 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:29,899 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,899 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(8)), (np.int64(17), np.int64(10)))
2025-04-11 18:39:29,907 [INFO] Final candidates: []
2025-04-11 18:39:29,907 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:29,910 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,910 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,910 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,910 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,910 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,910 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,911 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,911 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,911 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,911 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,911 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,911 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,911 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,911 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,911 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,911 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,916 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,916 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,916 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,916 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:29,917 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:29,917 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:29,917 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(8), np.int64(11)))
2025-04-11 18:39:29,920 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:29,920 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 18:39:29,920 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 8), (9, 8)]
2025-04-11 18:39:29,920 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:29,925 [INFO] Final candidates: [(9, 8), (7, 8)]
2025-04-11 18:39:29,925 [INFO] Phase win: Collected 1unique candidate(s):[((9, 8), (7, 8))]
2025-04-11 18:39:29,925 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:29,928 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:29,928 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,928 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:29,928 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,928 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,928 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,930 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:29,930 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:29,930 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:29,930 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:29,930 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:29,930 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:29,930 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:29,930 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:29,930 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:29,930 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:29,934 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:29,934 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:29,934 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:29,934 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,016 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,016 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,016 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(5), np.int64(15)))
2025-04-11 18:39:30,025 [INFO] Final candidates: []
2025-04-11 18:39:30,025 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,028 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,028 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,028 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,028 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,028 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,028 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,028 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,028 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,029 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,029 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,029 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,029 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,029 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,029 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,029 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,029 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,034 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,034 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,034 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,034 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,056 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,056 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,056 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(4), np.int64(7)))
2025-04-11 18:39:30,069 [INFO] Final candidates: []
2025-04-11 18:39:30,069 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,072 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,072 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,072 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,072 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,072 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,072 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,072 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,072 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,073 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,073 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,073 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,073 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,073 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,073 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,073 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,073 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,073 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,073 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,078 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,078 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,078 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,078 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,277 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,277 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,277 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(8), np.int64(6)))
2025-04-11 18:39:30,286 [INFO] Final candidates: []
2025-04-11 18:39:30,286 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,288 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,288 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,288 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,289 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,289 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,289 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,289 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,289 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,290 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,290 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,290 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,290 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,290 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,290 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,290 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,290 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,290 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,290 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,294 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,294 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,295 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,295 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,396 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,396 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,396 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(5), np.int64(15)))
2025-04-11 18:39:30,404 [INFO] Final candidates: []
2025-04-11 18:39:30,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,407 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,407 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,407 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,407 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,407 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,407 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,407 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,407 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,409 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,409 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,409 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,409 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,409 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,409 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,409 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,409 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,413 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,413 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,413 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,413 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,414 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,414 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,414 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(9), np.int64(10)))
2025-04-11 18:39:30,422 [INFO] Final candidates: []
2025-04-11 18:39:30,422 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,425 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,425 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,425 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,425 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,425 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,425 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,427 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,427 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,427 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,427 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,427 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,427 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,427 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,427 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,427 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,427 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,431 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,431 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,431 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,432 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,531 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,531 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,531 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(14)), (np.int64(9), np.int64(10)))
2025-04-11 18:39:30,539 [INFO] Final candidates: []
2025-04-11 18:39:30,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,542 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,542 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,542 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,542 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,542 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,543 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,543 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,543 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,544 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,544 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,544 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,544 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,544 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,544 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,544 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,544 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,544 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,544 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,548 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,548 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,548 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,548 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,702 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,702 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,702 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(3), np.int64(8)))
2025-04-11 18:39:30,710 [INFO] Final candidates: []
2025-04-11 18:39:30,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,713 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,713 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,713 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,713 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,713 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,713 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,713 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,714 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,715 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,715 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,715 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,715 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,715 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,715 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,715 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,715 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,715 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,715 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,719 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,719 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,719 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,719 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,844 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:30,845 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,845 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(12), np.int64(9)))
2025-04-11 18:39:30,853 [INFO] Final candidates: []
2025-04-11 18:39:30,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,856 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,856 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,856 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,856 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,857 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,857 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,857 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,857 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,857 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,857 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,862 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,862 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,862 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,862 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,918 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,918 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,918 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(10)), (np.int64(4), np.int64(10)))
2025-04-11 18:39:30,927 [INFO] Final candidates: []
2025-04-11 18:39:30,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,930 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,930 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,930 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,930 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,930 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,930 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,930 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,930 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,931 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,931 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,931 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,931 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,931 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,931 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,931 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,931 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,931 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,931 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,936 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,936 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,936 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,936 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,945 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,946 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,946 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(4), np.int64(11)))
2025-04-11 18:39:30,954 [INFO] Final candidates: []
2025-04-11 18:39:30,955 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,957 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,957 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,957 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,958 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,958 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,958 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,958 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,958 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,959 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,959 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,959 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,959 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,959 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,959 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,959 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,959 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,959 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,959 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,963 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:30,963 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:30,964 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:30,964 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:30,983 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:30,983 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:30,983 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(9)), (np.int64(6), np.int64(7)))
2025-04-11 18:39:30,992 [INFO] Final candidates: []
2025-04-11 18:39:30,992 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:30,994 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:30,994 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,994 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,994 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:30,994 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,994 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,995 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,995 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:30,996 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:30,996 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:30,996 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:30,996 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:30,996 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:30,996 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:30,996 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:30,996 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:30,996 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:30,996 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,000 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,000 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,000 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,000 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,051 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,051 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,052 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(7)), (np.int64(3), np.int64(17)))
2025-04-11 18:39:31,060 [INFO] Final candidates: []
2025-04-11 18:39:31,060 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,063 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,063 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,063 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,063 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,063 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,063 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,064 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,064 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,064 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,064 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,064 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,064 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,064 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,064 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,064 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,064 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,069 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,069 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,069 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,069 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,269 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,270 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,270 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(4), np.int64(11)))
2025-04-11 18:39:31,279 [INFO] Final candidates: []
2025-04-11 18:39:31,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,281 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,281 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,281 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,282 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,283 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,283 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,283 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,283 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,287 [INFO] Final candidates: [(11, 9)]
2025-04-11 18:39:31,287 [INFO] Phase defense: Found only one candidate: (11, 9)
2025-04-11 18:39:31,287 [INFO] Phase defense: Collected 9unique candidate(s):[((11, 9), (np.int64(11), np.int64(11))), ((11, 9), (np.int64(12), np.int64(8))), ((11, 9), (np.int64(11), np.int64(10))), ((11, 9), (np.int64(12), np.int64(10))), ((11, 9), (np.int64(11), np.int64(8))), ((11, 9), (np.int64(12), np.int64(9))), ((11, 9), (np.int64(13), np.int64(9))), ((11, 9), (np.int64(11), np.int64(7))), ((11, 9), (np.int64(10), np.int64(10)))]
2025-04-11 18:39:31,287 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 18:39:31,287 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,328 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,329 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,329 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(6)), (np.int64(10), np.int64(11)))
2025-04-11 18:39:31,337 [INFO] Final candidates: []
2025-04-11 18:39:31,337 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,340 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,340 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,340 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,340 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,340 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,340 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,342 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,342 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,342 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,342 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,342 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,342 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,342 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,342 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,342 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,342 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,346 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,346 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,346 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,346 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,349 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,349 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,350 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(11)), (np.int64(6), np.int64(10)))
2025-04-11 18:39:31,358 [INFO] Final candidates: []
2025-04-11 18:39:31,358 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,361 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,361 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,361 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,361 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,361 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,361 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,361 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,361 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,362 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,362 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,362 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,362 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,362 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,362 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,362 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,362 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,362 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,362 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,367 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,367 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,367 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,367 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,530 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,530 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 18:39:31,538 [INFO] Final candidates: []
2025-04-11 18:39:31,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,541 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,541 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,541 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,541 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,541 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,541 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,541 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,541 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,542 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,542 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,542 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,542 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,542 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,542 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,542 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,542 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,542 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,542 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,547 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,547 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,547 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,547 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,610 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:31,610 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,610 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(6), np.int64(11)))
2025-04-11 18:39:31,618 [INFO] Final candidates: []
2025-04-11 18:39:31,618 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,621 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,621 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,621 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,621 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,621 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,621 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,622 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,622 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,623 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,623 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,623 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,623 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,623 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,623 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,623 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,623 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,623 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,623 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,627 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,627 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,627 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,627 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,633 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,634 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,634 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(6)))
2025-04-11 18:39:31,642 [INFO] Final candidates: []
2025-04-11 18:39:31,642 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,645 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,645 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,645 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,645 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,645 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,645 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,645 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,645 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,646 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,646 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,646 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,646 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,646 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,646 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,646 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,646 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,646 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,647 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,651 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,651 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,651 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,651 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,674 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,674 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,674 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(9)), (np.int64(16), np.int64(9)))
2025-04-11 18:39:31,683 [INFO] Final candidates: []
2025-04-11 18:39:31,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,685 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,685 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,685 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,686 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,686 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,686 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,686 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,687 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,687 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,687 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,687 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,687 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,687 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,687 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,687 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,692 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,692 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,692 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,692 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,698 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(17), np.int64(11)))
2025-04-11 18:39:31,706 [INFO] Final candidates: []
2025-04-11 18:39:31,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,709 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,709 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,710 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,710 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,710 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,710 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,710 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,711 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,711 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,711 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,711 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,711 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,711 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,711 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,711 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,711 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,711 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,716 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,716 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,716 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,716 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,747 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,747 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,748 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(9)), (np.int64(16), np.int64(8)))
2025-04-11 18:39:31,756 [INFO] Final candidates: []
2025-04-11 18:39:31,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,759 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,759 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,759 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,759 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,759 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,759 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,759 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,759 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,760 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:31,760 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,760 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,760 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:31,761 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:31,761 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:31,761 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,761 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,761 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,761 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:31,765 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:31,765 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:31,765 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:31,765 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:31,987 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:31,987 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:31,987 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(16), np.int64(8)))
2025-04-11 18:39:31,996 [INFO] Final candidates: []
2025-04-11 18:39:31,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:31,999 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:31,999 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:31,999 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:31,999 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:31,999 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:31,999 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:31,999 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:31,999 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,000 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:32,000 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,000 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,000 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:32,000 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:32,000 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:32,000 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,000 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,000 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,000 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,005 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:32,005 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:32,005 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:32,005 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:32,157 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:32,157 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:32,157 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(7)))
2025-04-11 18:39:32,160 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:32,160 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 18:39:32,160 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 8), (9, 8)]
2025-04-11 18:39:32,160 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:32,166 [INFO] Final candidates: [(9, 8), (7, 8)]
2025-04-11 18:39:32,166 [INFO] Phase win: Collected 1unique candidate(s):[((9, 8), (7, 8))]
2025-04-11 18:39:32,166 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:32,169 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:32,169 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,169 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:32,169 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,169 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,169 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,170 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:32,170 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,170 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,170 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:32,170 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:32,170 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:32,170 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,170 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,170 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,170 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,175 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:32,175 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:32,175 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:32,175 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:32,257 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:32,257 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:32,257 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(7)), (np.int64(9), np.int64(12)))
2025-04-11 18:39:32,265 [INFO] Final candidates: []
2025-04-11 18:39:32,265 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:32,270 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:32,270 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,270 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:32,270 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,270 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,270 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,272 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:32,272 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,272 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:32,272 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:32,272 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:32,272 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,272 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,272 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,276 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:32,276 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:32,276 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:32,276 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:32,284 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:32,284 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:32,284 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(6)), (np.int64(5), np.int64(15)))
2025-04-11 18:39:32,292 [INFO] Final candidates: []
2025-04-11 18:39:32,292 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:32,295 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:32,295 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,295 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,295 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:32,295 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,295 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,295 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,295 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,297 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:32,297 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,297 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,297 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:32,297 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:32,297 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:32,297 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,297 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,297 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,297 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,301 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:32,301 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:32,301 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:32,301 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:32,458 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:32,458 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:32,458 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(11)))
2025-04-11 18:39:32,467 [INFO] Final candidates: []
2025-04-11 18:39:32,467 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:32,470 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:32,470 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,470 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:32,470 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,470 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,470 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,471 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:32,471 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,471 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:32,471 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:32,471 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:32,471 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,471 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,471 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,476 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:32,476 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:32,476 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:32,476 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:32,653 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:32,653 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:32,653 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(18), np.int64(8)))
2025-04-11 18:39:32,661 [INFO] Final candidates: []
2025-04-11 18:39:32,661 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:32,664 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:32,664 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,664 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:32,664 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,664 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,664 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,665 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:32,665 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,665 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,666 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:32,666 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:32,666 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:32,666 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,666 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,666 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,666 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,670 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:32,670 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:32,670 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:32,670 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:32,802 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:32,802 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:32,803 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 18:39:32,811 [INFO] Final candidates: []
2025-04-11 18:39:32,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:32,814 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:32,814 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,814 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,814 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:32,814 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,814 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,814 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,814 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,815 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:32,815 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:32,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:32,815 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:32,815 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:32,815 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:32,815 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:32,815 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:32,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:32,815 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:32,820 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:32,820 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:32,820 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:32,820 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:33,002 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:33,003 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:33,003 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(2), np.int64(15)))
2025-04-11 18:39:33,006 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:33,006 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 18:39:33,006 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 8), (9, 8)]
2025-04-11 18:39:33,006 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:33,011 [INFO] Final candidates: [(9, 8), (7, 8)]
2025-04-11 18:39:33,011 [INFO] Phase win: Collected 1unique candidate(s):[((9, 8), (7, 8))]
2025-04-11 18:39:33,011 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:39:33,014 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:33,014 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,014 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,014 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:33,015 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,015 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,015 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,015 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,016 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:33,016 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,016 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,016 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:33,016 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:33,016 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:33,016 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,016 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,016 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,016 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,021 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:33,021 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:33,021 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:33,021 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:33,037 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:33,037 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:33,037 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(7)), (np.int64(17), np.int64(10)))
2025-04-11 18:39:33,046 [INFO] Final candidates: []
2025-04-11 18:39:33,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:33,048 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:33,048 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,049 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,049 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:33,049 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,049 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,049 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,049 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,050 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:33,050 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,050 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,050 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:33,050 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:33,050 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:33,050 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,050 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,050 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,050 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,054 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:33,055 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:33,055 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:33,055 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:33,155 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:39:33,155 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:33,155 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:39:33,158 [DEBUG] board coords: [(4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8)]
2025-04-11 18:39:33,158 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 18:39:33,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 8), (6, 8)]
2025-04-11 18:39:33,158 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8)] triggers candidate.
2025-04-11 18:39:33,158 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8)] triggers candidate.
2025-04-11 18:39:33,158 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:33,158 [DEBUG] board coords: [(7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (12, 8)]
2025-04-11 18:39:33,158 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 8), (12, 8)]
2025-04-11 18:39:33,158 [DEBUG] check_window_intermediate_custom (only one inserted(11, 8)): For L=6, window [1 1 1 1 0 0] with coords [(7, 8), (8, 8), (9, 8), (10, 8), (11, 8), (12, 8)] triggers candidate.
2025-04-11 18:39:33,160 [DEBUG] board coords: [(4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)]
2025-04-11 18:39:33,160 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 18:39:33,160 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 8), (6, 8)]
2025-04-11 18:39:33,160 [DEBUG] check_window_intermediate_custom: For L=7, window [0 1 0 1 1 1 1] with coords [(4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8)] triggers candidate.
2025-04-11 18:39:33,160 [DEBUG] board coords: [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8)]
2025-04-11 18:39:33,160 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 18:39:33,160 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (11, 8)]
2025-04-11 18:39:33,160 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 1 1 1 1 0] with coords [(5, 8), (6, 8), (7, 8), (8, 8), (9, 8), (10, 8), (11, 8)] triggers candidate.
2025-04-11 18:39:33,164 [INFO] Final candidates: [(6, 8), (4, 8), (11, 8)]
2025-04-11 18:39:33,164 [INFO] Phase win: Collected 3unique candidate(s):[((6, 8), (11, 8)), ((6, 8), (4, 8)), ((4, 8), (11, 8))]
2025-04-11 18:39:33,164 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:39:33,167 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:33,167 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,167 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:33,167 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,167 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,167 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,168 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:33,169 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,169 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:33,169 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:33,169 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:33,169 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,169 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,169 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,173 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:33,173 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:33,173 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:33,173 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:33,260 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:33,261 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:39:33,261 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(3), np.int64(8)))
2025-04-11 18:39:33,269 [INFO] Final candidates: []
2025-04-11 18:39:33,269 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:39:33,272 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 18:39:33,272 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,272 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 18:39:33,272 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,272 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,272 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,273 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 18:39:33,273 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:39:33,274 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (5, 9)]
2025-04-11 18:39:33,274 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 18:39:33,274 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:39:33,274 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:39:33,274 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:39:33,274 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:39:33,274 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:39:33,274 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:39:33,278 [INFO] Final candidates: [(2, 9), (5, 9), (11, 9)]
2025-04-11 18:39:33,278 [INFO] Phase defense: Collected 3unique candidate(s):[((5, 9), (11, 9)), ((2, 9), (5, 9)), ((2, 9), (11, 9))]
2025-04-11 18:39:33,278 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:39:33,278 [INFO] Default policy: Starting random playout.
2025-04-11 18:39:33,348 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:39:33,349 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:39:33,349 [INFO] MCTS (defense candidates) selected move: K11,K4
2025-04-11 18:42:27,861 [INFO] Game terminated.
