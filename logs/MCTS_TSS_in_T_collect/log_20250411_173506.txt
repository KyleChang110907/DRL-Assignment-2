2025-04-11 17:35:17,867 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:35:17,877 [INFO] Final candidates: []
2025-04-11 17:35:17,877 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:17,886 [INFO] Final candidates: []
2025-04-11 17:35:17,887 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:17,887 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:35:17,887 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:35:17,887 [DEBUG] Tree_policy iteration 1: Expanding move (1, 14)
2025-04-11 17:35:17,896 [INFO] Final candidates: []
2025-04-11 17:35:17,896 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:17,907 [INFO] Final candidates: []
2025-04-11 17:35:17,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:17,908 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:35:17,908 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:17,949 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:17,949 [DEBUG] Tree_policy iteration 1: Expanding move (8, 17)
2025-04-11 17:35:17,958 [INFO] Final candidates: []
2025-04-11 17:35:17,958 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:17,968 [INFO] Final candidates: []
2025-04-11 17:35:17,968 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:17,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,073 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:18,073 [DEBUG] Tree_policy iteration 1: Expanding move (8, 7)
2025-04-11 17:35:18,083 [INFO] Final candidates: []
2025-04-11 17:35:18,083 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,092 [INFO] Final candidates: []
2025-04-11 17:35:18,092 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,092 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,268 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:18,268 [DEBUG] Tree_policy iteration 1: Expanding move (9, 2)
2025-04-11 17:35:18,277 [INFO] Final candidates: []
2025-04-11 17:35:18,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,287 [INFO] Final candidates: []
2025-04-11 17:35:18,287 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,287 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,371 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:18,371 [DEBUG] Tree_policy iteration 1: Expanding move (18, 5)
2025-04-11 17:35:18,381 [INFO] Final candidates: []
2025-04-11 17:35:18,381 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,390 [INFO] Final candidates: []
2025-04-11 17:35:18,390 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,391 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,414 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:18,415 [DEBUG] Tree_policy iteration 1: Expanding move (13, 1)
2025-04-11 17:35:18,424 [INFO] Final candidates: []
2025-04-11 17:35:18,424 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,434 [INFO] Final candidates: []
2025-04-11 17:35:18,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,434 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,504 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:18,504 [DEBUG] Tree_policy iteration 1: Expanding move (6, 10)
2025-04-11 17:35:18,514 [INFO] Final candidates: []
2025-04-11 17:35:18,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,523 [INFO] Final candidates: []
2025-04-11 17:35:18,523 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,523 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,661 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:18,661 [DEBUG] Tree_policy iteration 1: Expanding move (3, 10)
2025-04-11 17:35:18,671 [INFO] Final candidates: []
2025-04-11 17:35:18,671 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,680 [INFO] Final candidates: []
2025-04-11 17:35:18,680 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,680 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:18,699 [DEBUG] Tree_policy iteration 1: Expanding move (16, 14)
2025-04-11 17:35:18,709 [INFO] Final candidates: []
2025-04-11 17:35:18,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,718 [INFO] Final candidates: []
2025-04-11 17:35:18,718 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,890 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:18,890 [DEBUG] Tree_policy iteration 1: Expanding move (11, 4)
2025-04-11 17:35:18,901 [INFO] Final candidates: []
2025-04-11 17:35:18,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,911 [INFO] Final candidates: []
2025-04-11 17:35:18,911 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,911 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,940 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:18,940 [DEBUG] Tree_policy iteration 1: Expanding move (17, 11)
2025-04-11 17:35:18,950 [INFO] Final candidates: []
2025-04-11 17:35:18,950 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,960 [INFO] Final candidates: []
2025-04-11 17:35:18,960 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,960 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:18,972 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:18,972 [DEBUG] Tree_policy iteration 1: Expanding move (5, 6)
2025-04-11 17:35:18,982 [INFO] Final candidates: []
2025-04-11 17:35:18,982 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,991 [INFO] Final candidates: []
2025-04-11 17:35:18,991 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:18,991 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,001 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:19,001 [DEBUG] Tree_policy iteration 1: Expanding move (8, 3)
2025-04-11 17:35:19,011 [INFO] Final candidates: []
2025-04-11 17:35:19,011 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,020 [INFO] Final candidates: []
2025-04-11 17:35:19,020 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,020 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,071 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:19,071 [DEBUG] Tree_policy iteration 1: Expanding move (8, 9)
2025-04-11 17:35:19,081 [INFO] Final candidates: []
2025-04-11 17:35:19,081 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,091 [INFO] Final candidates: []
2025-04-11 17:35:19,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,092 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,146 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:19,146 [DEBUG] Tree_policy iteration 1: Expanding move (5, 10)
2025-04-11 17:35:19,155 [INFO] Final candidates: []
2025-04-11 17:35:19,155 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,165 [INFO] Final candidates: []
2025-04-11 17:35:19,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,234 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:19,234 [DEBUG] Tree_policy iteration 1: Expanding move (11, 11)
2025-04-11 17:35:19,243 [INFO] Final candidates: []
2025-04-11 17:35:19,243 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,253 [INFO] Final candidates: []
2025-04-11 17:35:19,253 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,253 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,371 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:19,371 [DEBUG] Tree_policy iteration 1: Expanding move (4, 5)
2025-04-11 17:35:19,381 [INFO] Final candidates: []
2025-04-11 17:35:19,381 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,390 [INFO] Final candidates: []
2025-04-11 17:35:19,390 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,390 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,436 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:19,436 [DEBUG] Tree_policy iteration 1: Expanding move (16, 12)
2025-04-11 17:35:19,446 [INFO] Final candidates: []
2025-04-11 17:35:19,446 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,455 [INFO] Final candidates: []
2025-04-11 17:35:19,455 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,455 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,497 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:19,497 [DEBUG] Tree_policy iteration 1: Expanding move (16, 16)
2025-04-11 17:35:19,508 [INFO] Final candidates: []
2025-04-11 17:35:19,508 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,518 [INFO] Final candidates: []
2025-04-11 17:35:19,518 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,551 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:19,551 [DEBUG] Tree_policy iteration 1: Expanding move (1, 9)
2025-04-11 17:35:19,561 [INFO] Final candidates: []
2025-04-11 17:35:19,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,570 [INFO] Final candidates: []
2025-04-11 17:35:19,570 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,704 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:19,704 [DEBUG] Tree_policy iteration 1: Expanding move (6, 1)
2025-04-11 17:35:19,714 [INFO] Final candidates: []
2025-04-11 17:35:19,714 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,723 [INFO] Final candidates: []
2025-04-11 17:35:19,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,723 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,794 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:19,794 [DEBUG] Tree_policy iteration 1: Expanding move (3, 2)
2025-04-11 17:35:19,803 [INFO] Final candidates: []
2025-04-11 17:35:19,803 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,813 [INFO] Final candidates: []
2025-04-11 17:35:19,813 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,826 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:19,826 [DEBUG] Tree_policy iteration 1: Expanding move (12, 18)
2025-04-11 17:35:19,835 [INFO] Final candidates: []
2025-04-11 17:35:19,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,845 [INFO] Final candidates: []
2025-04-11 17:35:19,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:19,845 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:19,981 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:19,981 [DEBUG] Tree_policy iteration 1: Expanding move (17, 9)
2025-04-11 17:35:19,991 [INFO] Final candidates: []
2025-04-11 17:35:19,991 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,000 [INFO] Final candidates: []
2025-04-11 17:35:20,000 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,001 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,065 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:20,065 [DEBUG] Tree_policy iteration 1: Expanding move (2, 11)
2025-04-11 17:35:20,074 [INFO] Final candidates: []
2025-04-11 17:35:20,074 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,084 [INFO] Final candidates: []
2025-04-11 17:35:20,084 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,084 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,112 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:20,112 [DEBUG] Tree_policy iteration 1: Expanding move (6, 17)
2025-04-11 17:35:20,121 [INFO] Final candidates: []
2025-04-11 17:35:20,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,131 [INFO] Final candidates: []
2025-04-11 17:35:20,131 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,360 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:20,360 [DEBUG] Tree_policy iteration 1: Expanding move (18, 6)
2025-04-11 17:35:20,370 [INFO] Final candidates: []
2025-04-11 17:35:20,370 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,379 [INFO] Final candidates: []
2025-04-11 17:35:20,379 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,379 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,449 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:20,449 [DEBUG] Tree_policy iteration 1: Expanding move (14, 16)
2025-04-11 17:35:20,459 [INFO] Final candidates: []
2025-04-11 17:35:20,459 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,468 [INFO] Final candidates: []
2025-04-11 17:35:20,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,588 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:20,588 [DEBUG] Tree_policy iteration 1: Expanding move (12, 12)
2025-04-11 17:35:20,598 [INFO] Final candidates: []
2025-04-11 17:35:20,598 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,607 [INFO] Final candidates: []
2025-04-11 17:35:20,607 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,607 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,703 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:20,703 [DEBUG] Tree_policy iteration 1: Expanding move (0, 8)
2025-04-11 17:35:20,713 [INFO] Final candidates: []
2025-04-11 17:35:20,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,723 [INFO] Final candidates: []
2025-04-11 17:35:20,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,723 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,777 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:20,777 [DEBUG] Tree_policy iteration 1: Expanding move (16, 15)
2025-04-11 17:35:20,786 [INFO] Final candidates: []
2025-04-11 17:35:20,786 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,795 [INFO] Final candidates: []
2025-04-11 17:35:20,796 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,796 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,814 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:20,815 [DEBUG] Tree_policy iteration 1: Expanding move (14, 6)
2025-04-11 17:35:20,824 [INFO] Final candidates: []
2025-04-11 17:35:20,824 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,833 [INFO] Final candidates: []
2025-04-11 17:35:20,833 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,834 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,863 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:20,863 [DEBUG] Tree_policy iteration 1: Expanding move (9, 4)
2025-04-11 17:35:20,873 [INFO] Final candidates: []
2025-04-11 17:35:20,873 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,882 [INFO] Final candidates: []
2025-04-11 17:35:20,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:20,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:20,959 [DEBUG] Tree_policy iteration 1: Expanding move (4, 16)
2025-04-11 17:35:20,968 [INFO] Final candidates: []
2025-04-11 17:35:20,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,978 [INFO] Final candidates: []
2025-04-11 17:35:20,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:20,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,012 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:21,012 [DEBUG] Tree_policy iteration 1: Expanding move (3, 14)
2025-04-11 17:35:21,021 [INFO] Final candidates: []
2025-04-11 17:35:21,021 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,031 [INFO] Final candidates: []
2025-04-11 17:35:21,031 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,031 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,035 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:21,035 [DEBUG] Tree_policy iteration 1: Expanding move (17, 5)
2025-04-11 17:35:21,045 [INFO] Final candidates: []
2025-04-11 17:35:21,045 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,054 [INFO] Final candidates: []
2025-04-11 17:35:21,054 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:21,313 [DEBUG] Tree_policy iteration 1: Expanding move (5, 12)
2025-04-11 17:35:21,323 [INFO] Final candidates: []
2025-04-11 17:35:21,323 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,332 [INFO] Final candidates: []
2025-04-11 17:35:21,332 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,332 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,487 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:21,487 [DEBUG] Tree_policy iteration 1: Expanding move (2, 0)
2025-04-11 17:35:21,497 [INFO] Final candidates: []
2025-04-11 17:35:21,497 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,506 [INFO] Final candidates: []
2025-04-11 17:35:21,506 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,565 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:21,565 [DEBUG] Tree_policy iteration 1: Expanding move (17, 15)
2025-04-11 17:35:21,574 [INFO] Final candidates: []
2025-04-11 17:35:21,574 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,583 [INFO] Final candidates: []
2025-04-11 17:35:21,583 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,584 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,616 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:21,617 [DEBUG] Tree_policy iteration 1: Expanding move (15, 17)
2025-04-11 17:35:21,626 [INFO] Final candidates: []
2025-04-11 17:35:21,626 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,635 [INFO] Final candidates: []
2025-04-11 17:35:21,635 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,635 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,708 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:21,708 [DEBUG] Tree_policy iteration 1: Expanding move (2, 13)
2025-04-11 17:35:21,718 [INFO] Final candidates: []
2025-04-11 17:35:21,718 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,727 [INFO] Final candidates: []
2025-04-11 17:35:21,727 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,727 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,748 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:21,748 [DEBUG] Tree_policy iteration 1: Expanding move (10, 18)
2025-04-11 17:35:21,758 [INFO] Final candidates: []
2025-04-11 17:35:21,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,768 [INFO] Final candidates: []
2025-04-11 17:35:21,768 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,800 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:21,801 [DEBUG] Tree_policy iteration 1: Expanding move (13, 4)
2025-04-11 17:35:21,810 [INFO] Final candidates: []
2025-04-11 17:35:21,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,819 [INFO] Final candidates: []
2025-04-11 17:35:21,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,845 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:21,846 [DEBUG] Tree_policy iteration 1: Expanding move (6, 0)
2025-04-11 17:35:21,855 [INFO] Final candidates: []
2025-04-11 17:35:21,855 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,864 [INFO] Final candidates: []
2025-04-11 17:35:21,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,865 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:21,894 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:21,894 [DEBUG] Tree_policy iteration 1: Expanding move (10, 12)
2025-04-11 17:35:21,903 [INFO] Final candidates: []
2025-04-11 17:35:21,904 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,913 [INFO] Final candidates: []
2025-04-11 17:35:21,913 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:21,913 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,000 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:22,000 [DEBUG] Tree_policy iteration 1: Expanding move (1, 8)
2025-04-11 17:35:22,010 [INFO] Final candidates: []
2025-04-11 17:35:22,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,020 [INFO] Final candidates: []
2025-04-11 17:35:22,020 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,020 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,098 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:22,098 [DEBUG] Tree_policy iteration 1: Expanding move (0, 15)
2025-04-11 17:35:22,108 [INFO] Final candidates: []
2025-04-11 17:35:22,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,117 [INFO] Final candidates: []
2025-04-11 17:35:22,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,117 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,193 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:22,194 [DEBUG] Tree_policy iteration 1: Expanding move (13, 2)
2025-04-11 17:35:22,203 [INFO] Final candidates: []
2025-04-11 17:35:22,203 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,213 [INFO] Final candidates: []
2025-04-11 17:35:22,213 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,213 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,273 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:22,273 [DEBUG] Tree_policy iteration 1: Expanding move (12, 16)
2025-04-11 17:35:22,283 [INFO] Final candidates: []
2025-04-11 17:35:22,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,292 [INFO] Final candidates: []
2025-04-11 17:35:22,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,410 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:22,411 [DEBUG] Tree_policy iteration 1: Expanding move (15, 11)
2025-04-11 17:35:22,420 [INFO] Final candidates: []
2025-04-11 17:35:22,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,429 [INFO] Final candidates: []
2025-04-11 17:35:22,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,448 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:22,448 [DEBUG] Tree_policy iteration 1: Expanding move (6, 13)
2025-04-11 17:35:22,457 [INFO] Final candidates: []
2025-04-11 17:35:22,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,466 [INFO] Final candidates: []
2025-04-11 17:35:22,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,467 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:35:22,467 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,496 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:22,497 [DEBUG] Tree_policy iteration 1: Expanding move (3, 1)
2025-04-11 17:35:22,507 [INFO] Final candidates: []
2025-04-11 17:35:22,507 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,517 [INFO] Final candidates: []
2025-04-11 17:35:22,517 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,517 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,561 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:22,561 [DEBUG] Tree_policy iteration 1: Expanding move (4, 10)
2025-04-11 17:35:22,570 [INFO] Final candidates: []
2025-04-11 17:35:22,570 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,580 [INFO] Final candidates: []
2025-04-11 17:35:22,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,580 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,672 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:22,672 [DEBUG] Tree_policy iteration 1: Expanding move (2, 8)
2025-04-11 17:35:22,681 [INFO] Final candidates: []
2025-04-11 17:35:22,681 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,691 [INFO] Final candidates: []
2025-04-11 17:35:22,691 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,741 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:22,742 [DEBUG] Tree_policy iteration 1: Expanding move (7, 13)
2025-04-11 17:35:22,751 [INFO] Final candidates: []
2025-04-11 17:35:22,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,761 [INFO] Final candidates: []
2025-04-11 17:35:22,761 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:22,906 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:22,907 [DEBUG] Tree_policy iteration 1: Expanding move (5, 2)
2025-04-11 17:35:22,916 [INFO] Final candidates: []
2025-04-11 17:35:22,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,925 [INFO] Final candidates: []
2025-04-11 17:35:22,925 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:22,926 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,072 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:23,072 [DEBUG] Tree_policy iteration 1: Expanding move (15, 15)
2025-04-11 17:35:23,082 [INFO] Final candidates: []
2025-04-11 17:35:23,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,091 [INFO] Final candidates: []
2025-04-11 17:35:23,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,091 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,119 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:23,119 [DEBUG] Tree_policy iteration 1: Expanding move (15, 18)
2025-04-11 17:35:23,129 [INFO] Final candidates: []
2025-04-11 17:35:23,129 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,138 [INFO] Final candidates: []
2025-04-11 17:35:23,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,138 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:23,219 [DEBUG] Tree_policy iteration 1: Expanding move (0, 9)
2025-04-11 17:35:23,228 [INFO] Final candidates: []
2025-04-11 17:35:23,228 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,237 [INFO] Final candidates: []
2025-04-11 17:35:23,238 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,238 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,283 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:23,283 [DEBUG] Tree_policy iteration 1: Expanding move (14, 4)
2025-04-11 17:35:23,292 [INFO] Final candidates: []
2025-04-11 17:35:23,292 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,301 [INFO] Final candidates: []
2025-04-11 17:35:23,301 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,448 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:23,449 [DEBUG] Tree_policy iteration 1: Expanding move (3, 15)
2025-04-11 17:35:23,458 [INFO] Final candidates: []
2025-04-11 17:35:23,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,467 [INFO] Final candidates: []
2025-04-11 17:35:23,467 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,467 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,480 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:23,480 [DEBUG] Tree_policy iteration 1: Expanding move (17, 10)
2025-04-11 17:35:23,490 [INFO] Final candidates: []
2025-04-11 17:35:23,490 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,499 [INFO] Final candidates: []
2025-04-11 17:35:23,499 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,499 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,668 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:23,668 [DEBUG] Tree_policy iteration 1: Expanding move (1, 17)
2025-04-11 17:35:23,678 [INFO] Final candidates: []
2025-04-11 17:35:23,678 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,687 [INFO] Final candidates: []
2025-04-11 17:35:23,687 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,687 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,744 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:23,744 [DEBUG] Tree_policy iteration 1: Expanding move (13, 6)
2025-04-11 17:35:23,754 [INFO] Final candidates: []
2025-04-11 17:35:23,754 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,763 [INFO] Final candidates: []
2025-04-11 17:35:23,763 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,763 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,809 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:23,809 [DEBUG] Tree_policy iteration 1: Expanding move (6, 18)
2025-04-11 17:35:23,819 [INFO] Final candidates: []
2025-04-11 17:35:23,819 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,828 [INFO] Final candidates: []
2025-04-11 17:35:23,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,828 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:23,969 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:23,969 [DEBUG] Tree_policy iteration 1: Expanding move (12, 17)
2025-04-11 17:35:23,979 [INFO] Final candidates: []
2025-04-11 17:35:23,979 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,988 [INFO] Final candidates: []
2025-04-11 17:35:23,988 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:23,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,007 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:24,007 [DEBUG] Tree_policy iteration 1: Expanding move (12, 0)
2025-04-11 17:35:24,017 [INFO] Final candidates: []
2025-04-11 17:35:24,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,026 [INFO] Final candidates: []
2025-04-11 17:35:24,026 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,027 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,194 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:24,194 [DEBUG] Tree_policy iteration 1: Expanding move (4, 12)
2025-04-11 17:35:24,204 [INFO] Final candidates: []
2025-04-11 17:35:24,204 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,213 [INFO] Final candidates: []
2025-04-11 17:35:24,213 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,213 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,306 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:24,306 [DEBUG] Tree_policy iteration 1: Expanding move (0, 6)
2025-04-11 17:35:24,315 [INFO] Final candidates: []
2025-04-11 17:35:24,316 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,325 [INFO] Final candidates: []
2025-04-11 17:35:24,325 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,325 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:24,380 [DEBUG] Tree_policy iteration 1: Expanding move (3, 4)
2025-04-11 17:35:24,390 [INFO] Final candidates: []
2025-04-11 17:35:24,390 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,399 [INFO] Final candidates: []
2025-04-11 17:35:24,399 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,400 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,522 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:24,523 [DEBUG] Tree_policy iteration 1: Expanding move (4, 1)
2025-04-11 17:35:24,532 [INFO] Final candidates: []
2025-04-11 17:35:24,532 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,541 [INFO] Final candidates: []
2025-04-11 17:35:24,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,542 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,682 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:24,683 [DEBUG] Tree_policy iteration 1: Expanding move (14, 18)
2025-04-11 17:35:24,692 [INFO] Final candidates: []
2025-04-11 17:35:24,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,701 [INFO] Final candidates: []
2025-04-11 17:35:24,701 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,702 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,835 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:24,835 [DEBUG] Tree_policy iteration 1: Expanding move (1, 16)
2025-04-11 17:35:24,844 [INFO] Final candidates: []
2025-04-11 17:35:24,844 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,854 [INFO] Final candidates: []
2025-04-11 17:35:24,854 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,854 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,879 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:24,879 [DEBUG] Tree_policy iteration 1: Expanding move (2, 7)
2025-04-11 17:35:24,888 [INFO] Final candidates: []
2025-04-11 17:35:24,888 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,897 [INFO] Final candidates: []
2025-04-11 17:35:24,897 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:24,969 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:24,969 [DEBUG] Tree_policy iteration 1: Expanding move (13, 9)
2025-04-11 17:35:24,979 [INFO] Final candidates: []
2025-04-11 17:35:24,979 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,988 [INFO] Final candidates: []
2025-04-11 17:35:24,988 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:24,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,048 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:25,049 [DEBUG] Tree_policy iteration 1: Expanding move (6, 14)
2025-04-11 17:35:25,058 [INFO] Final candidates: []
2025-04-11 17:35:25,058 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,068 [INFO] Final candidates: []
2025-04-11 17:35:25,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,068 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:25,125 [DEBUG] Tree_policy iteration 1: Expanding move (4, 2)
2025-04-11 17:35:25,134 [INFO] Final candidates: []
2025-04-11 17:35:25,134 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,144 [INFO] Final candidates: []
2025-04-11 17:35:25,144 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,144 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,194 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:25,195 [DEBUG] Tree_policy iteration 1: Expanding move (15, 13)
2025-04-11 17:35:25,204 [INFO] Final candidates: []
2025-04-11 17:35:25,204 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,213 [INFO] Final candidates: []
2025-04-11 17:35:25,213 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,213 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,305 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:25,306 [DEBUG] Tree_policy iteration 1: Expanding move (16, 17)
2025-04-11 17:35:25,315 [INFO] Final candidates: []
2025-04-11 17:35:25,315 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,324 [INFO] Final candidates: []
2025-04-11 17:35:25,324 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,324 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,410 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:25,410 [DEBUG] Tree_policy iteration 1: Expanding move (6, 3)
2025-04-11 17:35:25,419 [INFO] Final candidates: []
2025-04-11 17:35:25,419 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,429 [INFO] Final candidates: []
2025-04-11 17:35:25,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,439 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:25,439 [DEBUG] Tree_policy iteration 1: Expanding move (17, 16)
2025-04-11 17:35:25,448 [INFO] Final candidates: []
2025-04-11 17:35:25,448 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,457 [INFO] Final candidates: []
2025-04-11 17:35:25,457 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,458 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,544 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:25,544 [DEBUG] Tree_policy iteration 1: Expanding move (10, 6)
2025-04-11 17:35:25,554 [INFO] Final candidates: []
2025-04-11 17:35:25,554 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,563 [INFO] Final candidates: []
2025-04-11 17:35:25,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,563 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,790 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:25,790 [DEBUG] Tree_policy iteration 1: Expanding move (16, 5)
2025-04-11 17:35:25,799 [INFO] Final candidates: []
2025-04-11 17:35:25,799 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,809 [INFO] Final candidates: []
2025-04-11 17:35:25,809 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,809 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,819 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:25,819 [DEBUG] Tree_policy iteration 1: Expanding move (8, 2)
2025-04-11 17:35:25,828 [INFO] Final candidates: []
2025-04-11 17:35:25,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,838 [INFO] Final candidates: []
2025-04-11 17:35:25,838 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,838 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:25,902 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:25,902 [DEBUG] Tree_policy iteration 1: Expanding move (6, 7)
2025-04-11 17:35:25,912 [INFO] Final candidates: []
2025-04-11 17:35:25,912 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,921 [INFO] Final candidates: []
2025-04-11 17:35:25,921 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:25,921 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:26,183 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:26,183 [DEBUG] Tree_policy iteration 1: Expanding move (0, 17)
2025-04-11 17:35:26,192 [INFO] Final candidates: []
2025-04-11 17:35:26,192 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,202 [INFO] Final candidates: []
2025-04-11 17:35:26,202 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:26,289 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:26,289 [DEBUG] Tree_policy iteration 1: Expanding move (12, 10)
2025-04-11 17:35:26,300 [INFO] Final candidates: []
2025-04-11 17:35:26,300 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,309 [INFO] Final candidates: []
2025-04-11 17:35:26,309 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,309 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:26,461 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:26,461 [DEBUG] Tree_policy iteration 1: Expanding move (15, 16)
2025-04-11 17:35:26,470 [INFO] Final candidates: []
2025-04-11 17:35:26,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,479 [INFO] Final candidates: []
2025-04-11 17:35:26,479 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,480 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:26,522 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:26,522 [DEBUG] Tree_policy iteration 1: Expanding move (18, 8)
2025-04-11 17:35:26,533 [INFO] Final candidates: []
2025-04-11 17:35:26,533 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,543 [INFO] Final candidates: []
2025-04-11 17:35:26,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:26,661 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:26,661 [DEBUG] Tree_policy iteration 1: Expanding move (11, 1)
2025-04-11 17:35:26,670 [INFO] Final candidates: []
2025-04-11 17:35:26,670 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,680 [INFO] Final candidates: []
2025-04-11 17:35:26,680 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,680 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:26,847 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:26,847 [DEBUG] Tree_policy iteration 1: Expanding move (15, 1)
2025-04-11 17:35:26,856 [INFO] Final candidates: []
2025-04-11 17:35:26,856 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,866 [INFO] Final candidates: []
2025-04-11 17:35:26,866 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:26,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,003 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:27,003 [DEBUG] Tree_policy iteration 1: Expanding move (5, 9)
2025-04-11 17:35:27,012 [INFO] Final candidates: []
2025-04-11 17:35:27,012 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,021 [INFO] Final candidates: []
2025-04-11 17:35:27,021 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,021 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,123 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:27,123 [DEBUG] Tree_policy iteration 1: Expanding move (15, 2)
2025-04-11 17:35:27,133 [INFO] Final candidates: []
2025-04-11 17:35:27,133 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,142 [INFO] Final candidates: []
2025-04-11 17:35:27,142 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,142 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,156 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:27,156 [DEBUG] Tree_policy iteration 1: Expanding move (17, 8)
2025-04-11 17:35:27,166 [INFO] Final candidates: []
2025-04-11 17:35:27,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,175 [INFO] Final candidates: []
2025-04-11 17:35:27,175 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:27,274 [DEBUG] Tree_policy iteration 1: Expanding move (16, 11)
2025-04-11 17:35:27,283 [INFO] Final candidates: []
2025-04-11 17:35:27,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,292 [INFO] Final candidates: []
2025-04-11 17:35:27,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,298 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:27,298 [DEBUG] Tree_policy iteration 1: Expanding move (8, 15)
2025-04-11 17:35:27,308 [INFO] Final candidates: []
2025-04-11 17:35:27,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,317 [INFO] Final candidates: []
2025-04-11 17:35:27,317 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:27,385 [DEBUG] Tree_policy iteration 1: Expanding move (10, 4)
2025-04-11 17:35:27,394 [INFO] Final candidates: []
2025-04-11 17:35:27,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,404 [INFO] Final candidates: []
2025-04-11 17:35:27,404 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,487 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:27,488 [DEBUG] Tree_policy iteration 1: Expanding move (16, 4)
2025-04-11 17:35:27,497 [INFO] Final candidates: []
2025-04-11 17:35:27,497 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,506 [INFO] Final candidates: []
2025-04-11 17:35:27,506 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,514 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:27,514 [DEBUG] Tree_policy iteration 1: Expanding move (1, 15)
2025-04-11 17:35:27,523 [INFO] Final candidates: []
2025-04-11 17:35:27,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,532 [INFO] Final candidates: []
2025-04-11 17:35:27,532 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,533 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,610 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:27,610 [DEBUG] Tree_policy iteration 1: Expanding move (16, 9)
2025-04-11 17:35:27,619 [INFO] Final candidates: []
2025-04-11 17:35:27,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,629 [INFO] Final candidates: []
2025-04-11 17:35:27,629 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:27,629 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:27,703 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:27,703 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:35:27,704 [INFO] MCTS selected move: P2
2025-04-11 17:35:27,704 [INFO] ===============NEW MOVE================
2025-04-11 17:35:35,562 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:35:35,571 [INFO] Final candidates: []
2025-04-11 17:35:35,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,580 [INFO] Final candidates: []
2025-04-11 17:35:35,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,580 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:35:35,581 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:35:35,581 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(9)))
2025-04-11 17:35:35,590 [INFO] Final candidates: []
2025-04-11 17:35:35,590 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,599 [INFO] Final candidates: []
2025-04-11 17:35:35,599 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,599 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:35:35,599 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:35,714 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:35,714 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:35,724 [INFO] Final candidates: []
2025-04-11 17:35:35,724 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,734 [INFO] Final candidates: []
2025-04-11 17:35:35,734 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,734 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:35,927 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:35,927 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(2), np.int64(15)))
2025-04-11 17:35:35,937 [INFO] Final candidates: []
2025-04-11 17:35:35,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,945 [INFO] Final candidates: []
2025-04-11 17:35:35,945 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:35,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,168 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:36,168 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(1), np.int64(12)))
2025-04-11 17:35:36,177 [INFO] Final candidates: []
2025-04-11 17:35:36,177 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,186 [INFO] Final candidates: []
2025-04-11 17:35:36,186 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,186 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,252 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:36,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:36,261 [INFO] Final candidates: []
2025-04-11 17:35:36,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,270 [INFO] Final candidates: []
2025-04-11 17:35:36,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,270 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,343 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:36,343 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(7), np.int64(9)))
2025-04-11 17:35:36,352 [INFO] Final candidates: []
2025-04-11 17:35:36,352 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,361 [INFO] Final candidates: []
2025-04-11 17:35:36,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,361 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,495 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:36,495 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(7), np.int64(11)))
2025-04-11 17:35:36,504 [INFO] Final candidates: []
2025-04-11 17:35:36,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,513 [INFO] Final candidates: []
2025-04-11 17:35:36,513 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,574 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:36,574 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:36,583 [INFO] Final candidates: []
2025-04-11 17:35:36,583 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,592 [INFO] Final candidates: []
2025-04-11 17:35:36,592 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,592 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:36,694 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 17:35:36,703 [INFO] Final candidates: []
2025-04-11 17:35:36,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,712 [INFO] Final candidates: []
2025-04-11 17:35:36,712 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,813 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:36,814 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(9), np.int64(13)))
2025-04-11 17:35:36,823 [INFO] Final candidates: []
2025-04-11 17:35:36,823 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,832 [INFO] Final candidates: []
2025-04-11 17:35:36,832 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,833 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:36,961 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:36,961 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 17:35:36,970 [INFO] Final candidates: []
2025-04-11 17:35:36,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,979 [INFO] Final candidates: []
2025-04-11 17:35:36,979 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:36,980 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,158 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:37,158 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:37,167 [INFO] Final candidates: []
2025-04-11 17:35:37,167 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,176 [INFO] Final candidates: []
2025-04-11 17:35:37,176 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,177 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,323 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:37,324 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(10), np.int64(11)))
2025-04-11 17:35:37,333 [INFO] Final candidates: []
2025-04-11 17:35:37,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,342 [INFO] Final candidates: []
2025-04-11 17:35:37,342 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,342 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:37,454 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:37,463 [INFO] Final candidates: []
2025-04-11 17:35:37,463 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,472 [INFO] Final candidates: []
2025-04-11 17:35:37,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,472 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,478 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:37,478 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:37,488 [INFO] Final candidates: []
2025-04-11 17:35:37,488 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,496 [INFO] Final candidates: []
2025-04-11 17:35:37,496 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,497 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,570 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:37,571 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:37,580 [INFO] Final candidates: []
2025-04-11 17:35:37,580 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,589 [INFO] Final candidates: []
2025-04-11 17:35:37,589 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,589 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,661 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:37,661 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:37,671 [INFO] Final candidates: []
2025-04-11 17:35:37,671 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,680 [INFO] Final candidates: []
2025-04-11 17:35:37,680 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,680 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,743 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:37,743 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(9)))
2025-04-11 17:35:37,753 [INFO] Final candidates: []
2025-04-11 17:35:37,753 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,762 [INFO] Final candidates: []
2025-04-11 17:35:37,762 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,762 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,832 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:37,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:37,842 [INFO] Final candidates: []
2025-04-11 17:35:37,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,851 [INFO] Final candidates: []
2025-04-11 17:35:37,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:37,932 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:37,932 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(11), np.int64(9)))
2025-04-11 17:35:37,941 [INFO] Final candidates: []
2025-04-11 17:35:37,941 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,950 [INFO] Final candidates: []
2025-04-11 17:35:37,950 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:37,950 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,030 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:38,030 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(11)))
2025-04-11 17:35:38,039 [INFO] Final candidates: []
2025-04-11 17:35:38,039 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,048 [INFO] Final candidates: []
2025-04-11 17:35:38,048 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,048 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,171 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:38,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:38,181 [INFO] Final candidates: []
2025-04-11 17:35:38,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,190 [INFO] Final candidates: []
2025-04-11 17:35:38,190 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,451 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:38,451 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(8), np.int64(8)))
2025-04-11 17:35:38,460 [INFO] Final candidates: []
2025-04-11 17:35:38,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,469 [INFO] Final candidates: []
2025-04-11 17:35:38,469 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,469 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,568 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:38,569 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(11), np.int64(9)))
2025-04-11 17:35:38,578 [INFO] Final candidates: []
2025-04-11 17:35:38,578 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,587 [INFO] Final candidates: []
2025-04-11 17:35:38,587 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,587 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,673 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:38,673 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 17:35:38,682 [INFO] Final candidates: []
2025-04-11 17:35:38,682 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,691 [INFO] Final candidates: []
2025-04-11 17:35:38,691 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,807 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:38,807 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(13)), (np.int64(9), np.int64(12)))
2025-04-11 17:35:38,808 [DEBUG] board coords: [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13)]
2025-04-11 17:35:38,808 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:35:38,808 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (9, 10)]
2025-04-11 17:35:38,808 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13)] triggers candidate.
2025-04-11 17:35:38,808 [DEBUG] board coords: [(9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14)]
2025-04-11 17:35:38,808 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:35:38,808 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 10), (9, 14)]
2025-04-11 17:35:38,808 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14)] triggers candidate.
2025-04-11 17:35:38,817 [INFO] Final candidates: [(9, 10), (9, 8), (9, 14)]
2025-04-11 17:35:38,817 [INFO] Phase win: Collected 3unique candidate(s):[((9, 10), (9, 8)), ((9, 10), (9, 14)), ((9, 8), (9, 14))]
2025-04-11 17:35:38,817 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:35:38,826 [INFO] Final candidates: []
2025-04-11 17:35:38,826 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,899 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:38,900 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(11), np.int64(9)))
2025-04-11 17:35:38,909 [INFO] Final candidates: []
2025-04-11 17:35:38,909 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,918 [INFO] Final candidates: []
2025-04-11 17:35:38,918 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:38,975 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:38,975 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(3), np.int64(14)))
2025-04-11 17:35:38,984 [INFO] Final candidates: []
2025-04-11 17:35:38,984 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,993 [INFO] Final candidates: []
2025-04-11 17:35:38,993 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:38,993 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:39,168 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:39,168 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(11), np.int64(11)))
2025-04-11 17:35:39,178 [INFO] Final candidates: []
2025-04-11 17:35:39,178 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,187 [INFO] Final candidates: []
2025-04-11 17:35:39,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:39,198 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:39,198 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:39,207 [INFO] Final candidates: []
2025-04-11 17:35:39,207 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,216 [INFO] Final candidates: []
2025-04-11 17:35:39,216 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,216 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:39,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:39,248 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(0), np.int64(13)))
2025-04-11 17:35:39,257 [INFO] Final candidates: []
2025-04-11 17:35:39,257 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,266 [INFO] Final candidates: []
2025-04-11 17:35:39,266 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,266 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:39,507 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:39,507 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(11), np.int64(9)))
2025-04-11 17:35:39,517 [INFO] Final candidates: []
2025-04-11 17:35:39,517 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,525 [INFO] Final candidates: []
2025-04-11 17:35:39,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,526 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:39,572 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:39,572 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(13)), (np.int64(0), np.int64(13)))
2025-04-11 17:35:39,581 [INFO] Final candidates: []
2025-04-11 17:35:39,581 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,591 [INFO] Final candidates: []
2025-04-11 17:35:39,591 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,591 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:39,619 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:39,619 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(7), np.int64(9)))
2025-04-11 17:35:39,629 [INFO] Final candidates: []
2025-04-11 17:35:39,629 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,637 [INFO] Final candidates: []
2025-04-11 17:35:39,637 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,638 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:39,766 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:39,766 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:39,776 [INFO] Final candidates: []
2025-04-11 17:35:39,776 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,785 [INFO] Final candidates: []
2025-04-11 17:35:39,785 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:39,785 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,011 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:40,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:40,021 [INFO] Final candidates: []
2025-04-11 17:35:40,021 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,029 [INFO] Final candidates: []
2025-04-11 17:35:40,029 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,030 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,153 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:40,153 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(8), np.int64(10)))
2025-04-11 17:35:40,162 [INFO] Final candidates: []
2025-04-11 17:35:40,162 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,171 [INFO] Final candidates: []
2025-04-11 17:35:40,171 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,171 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,232 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:40,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(1), np.int64(12)))
2025-04-11 17:35:40,242 [INFO] Final candidates: []
2025-04-11 17:35:40,242 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,251 [INFO] Final candidates: []
2025-04-11 17:35:40,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,251 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,312 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:40,312 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:40,322 [INFO] Final candidates: []
2025-04-11 17:35:40,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,330 [INFO] Final candidates: []
2025-04-11 17:35:40,330 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,331 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,394 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:40,394 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(8), np.int64(11)))
2025-04-11 17:35:40,404 [INFO] Final candidates: []
2025-04-11 17:35:40,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,413 [INFO] Final candidates: []
2025-04-11 17:35:40,413 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,413 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,517 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:40,517 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:40,527 [INFO] Final candidates: []
2025-04-11 17:35:40,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,535 [INFO] Final candidates: []
2025-04-11 17:35:40,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,536 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,638 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:40,638 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(11)))
2025-04-11 17:35:40,647 [INFO] Final candidates: []
2025-04-11 17:35:40,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,656 [INFO] Final candidates: []
2025-04-11 17:35:40,657 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,657 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:40,736 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:40,745 [INFO] Final candidates: []
2025-04-11 17:35:40,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,754 [INFO] Final candidates: []
2025-04-11 17:35:40,754 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,754 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,785 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:40,785 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(3), np.int64(14)))
2025-04-11 17:35:40,794 [INFO] Final candidates: []
2025-04-11 17:35:40,794 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,803 [INFO] Final candidates: []
2025-04-11 17:35:40,803 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,803 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:40,889 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(7), np.int64(11)))
2025-04-11 17:35:40,898 [INFO] Final candidates: []
2025-04-11 17:35:40,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,907 [INFO] Final candidates: []
2025-04-11 17:35:40,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:40,963 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:40,963 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:40,973 [INFO] Final candidates: []
2025-04-11 17:35:40,973 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,982 [INFO] Final candidates: []
2025-04-11 17:35:40,982 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:40,982 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:41,099 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(9), np.int64(10)))
2025-04-11 17:35:41,109 [INFO] Final candidates: []
2025-04-11 17:35:41,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,117 [INFO] Final candidates: []
2025-04-11 17:35:41,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,167 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:41,167 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:41,177 [INFO] Final candidates: []
2025-04-11 17:35:41,177 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,185 [INFO] Final candidates: []
2025-04-11 17:35:41,185 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,186 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,231 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:41,231 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(2), np.int64(15)))
2025-04-11 17:35:41,241 [INFO] Final candidates: []
2025-04-11 17:35:41,241 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,251 [INFO] Final candidates: []
2025-04-11 17:35:41,252 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,252 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,360 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:41,360 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:41,369 [INFO] Final candidates: []
2025-04-11 17:35:41,369 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,378 [INFO] Final candidates: []
2025-04-11 17:35:41,378 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:41,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(10), np.int64(11)))
2025-04-11 17:35:41,503 [INFO] Final candidates: []
2025-04-11 17:35:41,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,512 [INFO] Final candidates: []
2025-04-11 17:35:41,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,512 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:35:41,512 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,667 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:41,667 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:41,677 [INFO] Final candidates: []
2025-04-11 17:35:41,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,686 [INFO] Final candidates: []
2025-04-11 17:35:41,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,686 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,736 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:41,737 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:41,746 [INFO] Final candidates: []
2025-04-11 17:35:41,746 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,755 [INFO] Final candidates: []
2025-04-11 17:35:41,755 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,755 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,833 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:41,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:41,844 [INFO] Final candidates: []
2025-04-11 17:35:41,844 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,853 [INFO] Final candidates: []
2025-04-11 17:35:41,853 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,853 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:41,911 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:41,912 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(0), np.int64(13)))
2025-04-11 17:35:41,921 [INFO] Final candidates: []
2025-04-11 17:35:41,921 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,930 [INFO] Final candidates: []
2025-04-11 17:35:41,930 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:41,930 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:42,168 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:42,169 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 17:35:42,178 [INFO] Final candidates: []
2025-04-11 17:35:42,178 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,187 [INFO] Final candidates: []
2025-04-11 17:35:42,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,188 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:42,282 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:42,282 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 17:35:42,291 [INFO] Final candidates: []
2025-04-11 17:35:42,291 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,300 [INFO] Final candidates: []
2025-04-11 17:35:42,300 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:42,430 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:42,430 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(1), np.int64(12)))
2025-04-11 17:35:42,440 [INFO] Final candidates: []
2025-04-11 17:35:42,440 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,449 [INFO] Final candidates: []
2025-04-11 17:35:42,449 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,449 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:42,507 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:42,507 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(9)))
2025-04-11 17:35:42,516 [INFO] Final candidates: []
2025-04-11 17:35:42,516 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,526 [INFO] Final candidates: []
2025-04-11 17:35:42,526 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,526 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:42,595 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:42,595 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 17:35:42,605 [INFO] Final candidates: []
2025-04-11 17:35:42,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,613 [INFO] Final candidates: []
2025-04-11 17:35:42,613 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,614 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:42,644 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:42,644 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:42,654 [INFO] Final candidates: []
2025-04-11 17:35:42,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,663 [INFO] Final candidates: []
2025-04-11 17:35:42,663 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,663 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:42,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:42,909 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:42,918 [INFO] Final candidates: []
2025-04-11 17:35:42,918 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,927 [INFO] Final candidates: []
2025-04-11 17:35:42,927 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:42,927 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,010 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:43,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:43,020 [INFO] Final candidates: []
2025-04-11 17:35:43,020 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,030 [INFO] Final candidates: []
2025-04-11 17:35:43,030 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,030 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,149 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:43,150 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:43,159 [INFO] Final candidates: []
2025-04-11 17:35:43,159 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,168 [INFO] Final candidates: []
2025-04-11 17:35:43,168 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,168 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,207 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:43,208 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(9), np.int64(13)))
2025-04-11 17:35:43,217 [INFO] Final candidates: []
2025-04-11 17:35:43,217 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,226 [INFO] Final candidates: []
2025-04-11 17:35:43,226 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,226 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,376 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:43,376 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(0), np.int64(13)))
2025-04-11 17:35:43,385 [INFO] Final candidates: []
2025-04-11 17:35:43,385 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,395 [INFO] Final candidates: []
2025-04-11 17:35:43,395 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,436 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:43,436 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:43,447 [INFO] Final candidates: []
2025-04-11 17:35:43,447 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,456 [INFO] Final candidates: []
2025-04-11 17:35:43,456 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,456 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,641 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:43,642 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(2), np.int64(15)))
2025-04-11 17:35:43,651 [INFO] Final candidates: []
2025-04-11 17:35:43,651 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,660 [INFO] Final candidates: []
2025-04-11 17:35:43,660 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,660 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,815 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:43,815 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(9), np.int64(13)))
2025-04-11 17:35:43,825 [INFO] Final candidates: []
2025-04-11 17:35:43,825 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,834 [INFO] Final candidates: []
2025-04-11 17:35:43,834 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,834 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:43,921 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:43,921 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(2), np.int64(14)))
2025-04-11 17:35:43,930 [INFO] Final candidates: []
2025-04-11 17:35:43,930 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,939 [INFO] Final candidates: []
2025-04-11 17:35:43,939 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:43,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:44,157 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:44,157 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(9), np.int64(13)))
2025-04-11 17:35:44,166 [INFO] Final candidates: []
2025-04-11 17:35:44,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,175 [INFO] Final candidates: []
2025-04-11 17:35:44,175 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:44,450 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:44,450 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 17:35:44,460 [INFO] Final candidates: []
2025-04-11 17:35:44,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,469 [INFO] Final candidates: []
2025-04-11 17:35:44,469 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,470 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:44,604 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:44,604 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:44,614 [INFO] Final candidates: []
2025-04-11 17:35:44,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,623 [INFO] Final candidates: []
2025-04-11 17:35:44,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,623 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:44,752 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:44,752 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:44,761 [INFO] Final candidates: []
2025-04-11 17:35:44,761 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,770 [INFO] Final candidates: []
2025-04-11 17:35:44,770 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,770 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:44,854 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:44,854 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(7), np.int64(9)))
2025-04-11 17:35:44,864 [INFO] Final candidates: []
2025-04-11 17:35:44,864 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,873 [INFO] Final candidates: []
2025-04-11 17:35:44,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,873 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:44,914 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:44,914 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:44,924 [INFO] Final candidates: []
2025-04-11 17:35:44,924 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,932 [INFO] Final candidates: []
2025-04-11 17:35:44,932 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:44,933 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:45,003 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:45,003 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:45,012 [INFO] Final candidates: []
2025-04-11 17:35:45,012 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,021 [INFO] Final candidates: []
2025-04-11 17:35:45,021 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,022 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:45,169 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:45,169 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:45,179 [INFO] Final candidates: []
2025-04-11 17:35:45,179 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,187 [INFO] Final candidates: []
2025-04-11 17:35:45,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:45,364 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:45,364 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:45,374 [INFO] Final candidates: []
2025-04-11 17:35:45,374 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,383 [INFO] Final candidates: []
2025-04-11 17:35:45,383 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:45,495 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:45,495 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:45,504 [INFO] Final candidates: []
2025-04-11 17:35:45,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,513 [INFO] Final candidates: []
2025-04-11 17:35:45,513 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:45,575 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:45,575 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:45,585 [INFO] Final candidates: []
2025-04-11 17:35:45,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,594 [INFO] Final candidates: []
2025-04-11 17:35:45,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,594 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:45,749 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:45,749 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:45,758 [INFO] Final candidates: []
2025-04-11 17:35:45,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,767 [INFO] Final candidates: []
2025-04-11 17:35:45,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:45,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:45,888 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:45,898 [INFO] Final candidates: []
2025-04-11 17:35:45,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,907 [INFO] Final candidates: []
2025-04-11 17:35:45,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:45,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,077 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:46,077 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(8), np.int64(11)))
2025-04-11 17:35:46,087 [INFO] Final candidates: []
2025-04-11 17:35:46,087 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,095 [INFO] Final candidates: []
2025-04-11 17:35:46,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,096 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,176 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:46,177 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(9), np.int64(12)))
2025-04-11 17:35:46,186 [INFO] Final candidates: []
2025-04-11 17:35:46,186 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,195 [INFO] Final candidates: []
2025-04-11 17:35:46,195 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,195 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,343 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:46,343 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(7), np.int64(11)))
2025-04-11 17:35:46,352 [INFO] Final candidates: []
2025-04-11 17:35:46,352 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,361 [INFO] Final candidates: []
2025-04-11 17:35:46,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,361 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,518 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:46,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 17:35:46,528 [INFO] Final candidates: []
2025-04-11 17:35:46,528 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,536 [INFO] Final candidates: []
2025-04-11 17:35:46,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,537 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,560 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:46,560 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:46,570 [INFO] Final candidates: []
2025-04-11 17:35:46,570 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,579 [INFO] Final candidates: []
2025-04-11 17:35:46,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,579 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,627 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:46,627 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(8), np.int64(10)))
2025-04-11 17:35:46,636 [INFO] Final candidates: []
2025-04-11 17:35:46,636 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,645 [INFO] Final candidates: []
2025-04-11 17:35:46,645 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,815 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:46,815 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(7), np.int64(11)))
2025-04-11 17:35:46,824 [INFO] Final candidates: []
2025-04-11 17:35:46,824 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,834 [INFO] Final candidates: []
2025-04-11 17:35:46,834 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,834 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:46,965 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:46,965 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:46,974 [INFO] Final candidates: []
2025-04-11 17:35:46,974 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,984 [INFO] Final candidates: []
2025-04-11 17:35:46,984 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:46,985 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:47,103 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:47,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:47,113 [INFO] Final candidates: []
2025-04-11 17:35:47,113 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,122 [INFO] Final candidates: []
2025-04-11 17:35:47,122 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:47,271 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:47,272 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(11), np.int64(11)))
2025-04-11 17:35:47,281 [INFO] Final candidates: []
2025-04-11 17:35:47,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,290 [INFO] Final candidates: []
2025-04-11 17:35:47,290 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:47,352 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:47,353 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(8), np.int64(8)))
2025-04-11 17:35:47,362 [INFO] Final candidates: []
2025-04-11 17:35:47,362 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,371 [INFO] Final candidates: []
2025-04-11 17:35:47,371 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:47,507 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:47,507 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 17:35:47,516 [INFO] Final candidates: []
2025-04-11 17:35:47,516 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,525 [INFO] Final candidates: []
2025-04-11 17:35:47,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,525 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:47,677 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:47,677 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(8), np.int64(10)))
2025-04-11 17:35:47,687 [INFO] Final candidates: []
2025-04-11 17:35:47,687 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,696 [INFO] Final candidates: []
2025-04-11 17:35:47,696 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:47,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:47,887 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:47,897 [INFO] Final candidates: []
2025-04-11 17:35:47,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,905 [INFO] Final candidates: []
2025-04-11 17:35:47,905 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,906 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:47,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:47,972 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:47,981 [INFO] Final candidates: []
2025-04-11 17:35:47,981 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,990 [INFO] Final candidates: []
2025-04-11 17:35:47,990 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:47,990 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:48,101 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:48,101 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(10), np.int64(10)))
2025-04-11 17:35:48,110 [INFO] Final candidates: []
2025-04-11 17:35:48,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:48,119 [INFO] Final candidates: []
2025-04-11 17:35:48,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:48,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:48,188 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:48,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(1), np.int64(15)))
2025-04-11 17:35:48,199 [INFO] Final candidates: []
2025-04-11 17:35:48,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:48,208 [INFO] Final candidates: []
2025-04-11 17:35:48,208 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:48,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:48,313 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:48,313 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:35:48,313 [INFO] MCTS selected move: H10,K8
2025-04-11 17:35:48,313 [INFO] ===============NEW MOVE================
2025-04-11 17:35:52,180 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:35:52,189 [INFO] Final candidates: []
2025-04-11 17:35:52,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,198 [INFO] Final candidates: []
2025-04-11 17:35:52,198 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,198 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:35:52,199 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:35:52,199 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(10), np.int64(14)))
2025-04-11 17:35:52,208 [INFO] Final candidates: []
2025-04-11 17:35:52,208 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,216 [INFO] Final candidates: []
2025-04-11 17:35:52,216 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,217 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:35:52,217 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:52,300 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:52,300 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(10), np.int64(14)))
2025-04-11 17:35:52,309 [INFO] Final candidates: []
2025-04-11 17:35:52,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,318 [INFO] Final candidates: []
2025-04-11 17:35:52,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:52,576 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:52,577 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:52,585 [INFO] Final candidates: []
2025-04-11 17:35:52,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,594 [INFO] Final candidates: []
2025-04-11 17:35:52,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,594 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:52,740 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:52,741 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(11)), (np.int64(13), np.int64(13)))
2025-04-11 17:35:52,749 [INFO] Final candidates: []
2025-04-11 17:35:52,749 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,758 [INFO] Final candidates: []
2025-04-11 17:35:52,758 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,758 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:52,885 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:52,885 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:52,894 [INFO] Final candidates: []
2025-04-11 17:35:52,894 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,902 [INFO] Final candidates: []
2025-04-11 17:35:52,902 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:52,933 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:52,933 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(6)))
2025-04-11 17:35:52,942 [INFO] Final candidates: []
2025-04-11 17:35:52,942 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,951 [INFO] Final candidates: []
2025-04-11 17:35:52,951 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:52,951 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:52,992 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:52,993 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(14)), (np.int64(9), np.int64(15)))
2025-04-11 17:35:53,001 [INFO] Final candidates: []
2025-04-11 17:35:53,001 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,010 [INFO] Final candidates: []
2025-04-11 17:35:53,010 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,010 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:53,118 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:53,119 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(13)), (np.int64(5), np.int64(9)))
2025-04-11 17:35:53,127 [INFO] Final candidates: []
2025-04-11 17:35:53,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,136 [INFO] Final candidates: []
2025-04-11 17:35:53,136 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:53,216 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:53,216 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:35:53,225 [INFO] Final candidates: []
2025-04-11 17:35:53,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,234 [INFO] Final candidates: []
2025-04-11 17:35:53,234 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,234 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:53,334 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:53,334 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(12), np.int64(11)))
2025-04-11 17:35:53,343 [INFO] Final candidates: []
2025-04-11 17:35:53,343 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,351 [INFO] Final candidates: []
2025-04-11 17:35:53,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:53,477 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:53,477 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:53,487 [INFO] Final candidates: []
2025-04-11 17:35:53,487 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,496 [INFO] Final candidates: []
2025-04-11 17:35:53,496 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,496 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:53,537 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:53,537 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(13)), (np.int64(10), np.int64(8)))
2025-04-11 17:35:53,546 [INFO] Final candidates: []
2025-04-11 17:35:53,546 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,555 [INFO] Final candidates: []
2025-04-11 17:35:53,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,555 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:53,807 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:53,807 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(10), np.int64(7)))
2025-04-11 17:35:53,816 [INFO] Final candidates: []
2025-04-11 17:35:53,816 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,824 [INFO] Final candidates: []
2025-04-11 17:35:53,824 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,825 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:53,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:53,971 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(13), np.int64(10)))
2025-04-11 17:35:53,980 [INFO] Final candidates: []
2025-04-11 17:35:53,980 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,988 [INFO] Final candidates: []
2025-04-11 17:35:53,988 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:53,989 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:54,171 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:54,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(3), np.int64(14)))
2025-04-11 17:35:54,180 [INFO] Final candidates: []
2025-04-11 17:35:54,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,189 [INFO] Final candidates: []
2025-04-11 17:35:54,189 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:54,328 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:54,329 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(14), np.int64(12)))
2025-04-11 17:35:54,338 [INFO] Final candidates: []
2025-04-11 17:35:54,338 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,346 [INFO] Final candidates: []
2025-04-11 17:35:54,346 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,347 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:54,442 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:54,443 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(8), np.int64(15)))
2025-04-11 17:35:54,452 [INFO] Final candidates: []
2025-04-11 17:35:54,452 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,460 [INFO] Final candidates: []
2025-04-11 17:35:54,460 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,461 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:54,690 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:54,690 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:54,699 [INFO] Final candidates: []
2025-04-11 17:35:54,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,707 [INFO] Final candidates: []
2025-04-11 17:35:54,707 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,708 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:54,833 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:54,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(10), np.int64(15)))
2025-04-11 17:35:54,842 [INFO] Final candidates: []
2025-04-11 17:35:54,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,851 [INFO] Final candidates: []
2025-04-11 17:35:54,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:54,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:55,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:55,166 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(2), np.int64(15)))
2025-04-11 17:35:55,174 [INFO] Final candidates: []
2025-04-11 17:35:55,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,183 [INFO] Final candidates: []
2025-04-11 17:35:55,183 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,184 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:55,398 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:55,398 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:55,408 [INFO] Final candidates: []
2025-04-11 17:35:55,408 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,416 [INFO] Final candidates: []
2025-04-11 17:35:55,416 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,417 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:55,547 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:55,547 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(6), np.int64(9)))
2025-04-11 17:35:55,556 [INFO] Final candidates: []
2025-04-11 17:35:55,556 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,566 [INFO] Final candidates: []
2025-04-11 17:35:55,566 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,566 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:55,739 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:55,740 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:55,748 [INFO] Final candidates: []
2025-04-11 17:35:55,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,757 [INFO] Final candidates: []
2025-04-11 17:35:55,757 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,757 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:55,860 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:55,860 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(12)), (np.int64(6), np.int64(9)))
2025-04-11 17:35:55,869 [INFO] Final candidates: []
2025-04-11 17:35:55,869 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,877 [INFO] Final candidates: []
2025-04-11 17:35:55,878 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:55,878 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,032 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:56,032 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:56,041 [INFO] Final candidates: []
2025-04-11 17:35:56,041 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,050 [INFO] Final candidates: []
2025-04-11 17:35:56,050 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,050 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,191 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:56,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(8), np.int64(14)))
2025-04-11 17:35:56,200 [INFO] Final candidates: []
2025-04-11 17:35:56,200 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,209 [INFO] Final candidates: []
2025-04-11 17:35:56,209 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,209 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,322 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:56,322 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(6), np.int64(9)))
2025-04-11 17:35:56,331 [INFO] Final candidates: []
2025-04-11 17:35:56,331 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,340 [INFO] Final candidates: []
2025-04-11 17:35:56,340 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,340 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,485 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:56,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:56,495 [INFO] Final candidates: []
2025-04-11 17:35:56,495 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,504 [INFO] Final candidates: []
2025-04-11 17:35:56,504 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,504 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,530 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:56,530 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(11), np.int64(9)))
2025-04-11 17:35:56,539 [INFO] Final candidates: []
2025-04-11 17:35:56,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,547 [INFO] Final candidates: []
2025-04-11 17:35:56,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,701 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:56,702 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:56,710 [INFO] Final candidates: []
2025-04-11 17:35:56,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,719 [INFO] Final candidates: []
2025-04-11 17:35:56,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,777 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:56,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(9), np.int64(12)))
2025-04-11 17:35:56,785 [INFO] Final candidates: []
2025-04-11 17:35:56,786 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,794 [INFO] Final candidates: []
2025-04-11 17:35:56,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:56,936 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:56,936 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:56,946 [INFO] Final candidates: []
2025-04-11 17:35:56,946 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,955 [INFO] Final candidates: []
2025-04-11 17:35:56,955 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:56,955 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,081 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:57,081 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(9), np.int64(13)))
2025-04-11 17:35:57,090 [INFO] Final candidates: []
2025-04-11 17:35:57,090 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,098 [INFO] Final candidates: []
2025-04-11 17:35:57,098 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,099 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,261 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:57,262 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(14)), (np.int64(2), np.int64(13)))
2025-04-11 17:35:57,271 [INFO] Final candidates: []
2025-04-11 17:35:57,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,279 [INFO] Final candidates: []
2025-04-11 17:35:57,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,421 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:57,422 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(9), np.int64(12)))
2025-04-11 17:35:57,430 [INFO] Final candidates: []
2025-04-11 17:35:57,430 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,439 [INFO] Final candidates: []
2025-04-11 17:35:57,439 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,440 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,544 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:57,544 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:35:57,553 [INFO] Final candidates: []
2025-04-11 17:35:57,553 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,562 [INFO] Final candidates: []
2025-04-11 17:35:57,562 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,562 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,616 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:57,616 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(7), np.int64(14)))
2025-04-11 17:35:57,625 [INFO] Final candidates: []
2025-04-11 17:35:57,625 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,633 [INFO] Final candidates: []
2025-04-11 17:35:57,633 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,634 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,742 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:57,742 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(12)), (np.int64(10), np.int64(7)))
2025-04-11 17:35:57,751 [INFO] Final candidates: []
2025-04-11 17:35:57,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,760 [INFO] Final candidates: []
2025-04-11 17:35:57,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,760 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,764 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:57,764 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 17:35:57,773 [INFO] Final candidates: []
2025-04-11 17:35:57,773 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,781 [INFO] Final candidates: []
2025-04-11 17:35:57,781 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,782 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:57,871 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:57,871 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(7), np.int64(14)))
2025-04-11 17:35:57,880 [INFO] Final candidates: []
2025-04-11 17:35:57,880 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,889 [INFO] Final candidates: []
2025-04-11 17:35:57,889 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:57,889 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:58,034 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:58,034 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(13), np.int64(14)))
2025-04-11 17:35:58,043 [INFO] Final candidates: []
2025-04-11 17:35:58,043 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,052 [INFO] Final candidates: []
2025-04-11 17:35:58,052 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,052 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:58,108 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:58,108 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(14)), (np.int64(8), np.int64(14)))
2025-04-11 17:35:58,117 [INFO] Final candidates: []
2025-04-11 17:35:58,117 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,126 [INFO] Final candidates: []
2025-04-11 17:35:58,126 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:58,423 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:58,424 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(7), np.int64(8)))
2025-04-11 17:35:58,432 [INFO] Final candidates: []
2025-04-11 17:35:58,432 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,441 [INFO] Final candidates: []
2025-04-11 17:35:58,442 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,442 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:58,659 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:58,659 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(13), np.int64(13)))
2025-04-11 17:35:58,668 [INFO] Final candidates: []
2025-04-11 17:35:58,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,676 [INFO] Final candidates: []
2025-04-11 17:35:58,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,677 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:58,829 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:58,829 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(10), np.int64(13)))
2025-04-11 17:35:58,838 [INFO] Final candidates: []
2025-04-11 17:35:58,838 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,847 [INFO] Final candidates: []
2025-04-11 17:35:58,847 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:58,847 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:59,107 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:59,107 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(6), np.int64(8)))
2025-04-11 17:35:59,116 [INFO] Final candidates: []
2025-04-11 17:35:59,116 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,125 [INFO] Final candidates: []
2025-04-11 17:35:59,125 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:59,349 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:59,350 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(1), np.int64(16)))
2025-04-11 17:35:59,358 [INFO] Final candidates: []
2025-04-11 17:35:59,358 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,367 [INFO] Final candidates: []
2025-04-11 17:35:59,367 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,367 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:59,474 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:59,474 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(14)))
2025-04-11 17:35:59,483 [INFO] Final candidates: []
2025-04-11 17:35:59,483 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,492 [INFO] Final candidates: []
2025-04-11 17:35:59,492 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,492 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:59,658 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:35:59,659 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(14)), (np.int64(10), np.int64(11)))
2025-04-11 17:35:59,667 [INFO] Final candidates: []
2025-04-11 17:35:59,667 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,676 [INFO] Final candidates: []
2025-04-11 17:35:59,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,676 [INFO] Default policy: Starting random playout.
2025-04-11 17:35:59,886 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:35:59,886 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(0), np.int64(15)))
2025-04-11 17:35:59,895 [INFO] Final candidates: []
2025-04-11 17:35:59,895 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,904 [INFO] Final candidates: []
2025-04-11 17:35:59,904 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:35:59,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:00,035 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:00,036 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(14)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:00,044 [INFO] Final candidates: []
2025-04-11 17:36:00,044 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,053 [INFO] Final candidates: []
2025-04-11 17:36:00,053 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,053 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:36:00,054 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:00,119 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:00,119 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(1), np.int64(12)))
2025-04-11 17:36:00,128 [INFO] Final candidates: []
2025-04-11 17:36:00,128 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,136 [INFO] Final candidates: []
2025-04-11 17:36:00,136 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,137 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:00,272 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:00,272 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(11)), (np.int64(10), np.int64(7)))
2025-04-11 17:36:00,281 [INFO] Final candidates: []
2025-04-11 17:36:00,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,291 [INFO] Final candidates: []
2025-04-11 17:36:00,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,291 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:00,480 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:00,481 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(9), np.int64(10)))
2025-04-11 17:36:00,489 [INFO] Final candidates: []
2025-04-11 17:36:00,489 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,498 [INFO] Final candidates: []
2025-04-11 17:36:00,498 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,499 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:00,733 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:00,733 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(13)), (np.int64(8), np.int64(10)))
2025-04-11 17:36:00,742 [INFO] Final candidates: []
2025-04-11 17:36:00,742 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,750 [INFO] Final candidates: []
2025-04-11 17:36:00,751 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,751 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:00,934 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:00,934 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(10), np.int64(10)))
2025-04-11 17:36:00,943 [INFO] Final candidates: []
2025-04-11 17:36:00,943 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,952 [INFO] Final candidates: []
2025-04-11 17:36:00,952 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:00,952 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:01,063 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:01,064 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(14)), (np.int64(13), np.int64(14)))
2025-04-11 17:36:01,073 [INFO] Final candidates: []
2025-04-11 17:36:01,073 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,082 [INFO] Final candidates: []
2025-04-11 17:36:01,082 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,082 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:01,166 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:01,166 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(0), np.int64(14)))
2025-04-11 17:36:01,175 [INFO] Final candidates: []
2025-04-11 17:36:01,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,183 [INFO] Final candidates: []
2025-04-11 17:36:01,183 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,184 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:01,477 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:01,478 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(10), np.int64(15)))
2025-04-11 17:36:01,487 [INFO] Final candidates: []
2025-04-11 17:36:01,487 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,495 [INFO] Final candidates: []
2025-04-11 17:36:01,495 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,496 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:01,649 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:01,649 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(14), np.int64(11)))
2025-04-11 17:36:01,658 [INFO] Final candidates: []
2025-04-11 17:36:01,658 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,667 [INFO] Final candidates: []
2025-04-11 17:36:01,667 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,667 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:01,788 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:01,789 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(13)), (np.int64(10), np.int64(7)))
2025-04-11 17:36:01,797 [INFO] Final candidates: []
2025-04-11 17:36:01,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,806 [INFO] Final candidates: []
2025-04-11 17:36:01,806 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:01,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:02,109 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:02,109 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(7), np.int64(8)))
2025-04-11 17:36:02,118 [INFO] Final candidates: []
2025-04-11 17:36:02,118 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,126 [INFO] Final candidates: []
2025-04-11 17:36:02,127 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:02,254 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:02,254 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:02,263 [INFO] Final candidates: []
2025-04-11 17:36:02,263 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,272 [INFO] Final candidates: []
2025-04-11 17:36:02,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,273 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:02,478 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:02,478 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(8), np.int64(8)))
2025-04-11 17:36:02,485 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:36:02,485 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:02,485 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:36:02,485 [DEBUG] check_window_intermediate_custom (only one inserted(6, 10)): For L=6, window [0 0 1 1 1 1] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:36:02,486 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(6, 10), (7, 9), (8, 8), (9, 7), (10, 6), (11, 5)] triggers candidate.
2025-04-11 17:36:02,486 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:02,486 [DEBUG] board coords: [(7, 9), (8, 8), (9, 7), (10, 6), (11, 5), (12, 4)]
2025-04-11 17:36:02,486 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:36:02,486 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (12, 4)]
2025-04-11 17:36:02,486 [DEBUG] check_window_intermediate_custom (only one inserted(11, 5)): For L=6, window [1 1 1 1 0 0] with coords [(7, 9), (8, 8), (9, 7), (10, 6), (11, 5), (12, 4)] triggers candidate.
2025-04-11 17:36:02,487 [INFO] Final candidates: [(6, 10), (11, 5)]
2025-04-11 17:36:02,487 [INFO] Phase win: Collected 1unique candidate(s):[((6, 10), (11, 5))]
2025-04-11 17:36:02,487 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:02,496 [INFO] Final candidates: []
2025-04-11 17:36:02,496 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,496 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:02,762 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:02,762 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(12)), (np.int64(7), np.int64(11)))
2025-04-11 17:36:02,771 [INFO] Final candidates: []
2025-04-11 17:36:02,771 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,780 [INFO] Final candidates: []
2025-04-11 17:36:02,780 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:02,828 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:02,828 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 17:36:02,837 [INFO] Final candidates: []
2025-04-11 17:36:02,837 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,846 [INFO] Final candidates: []
2025-04-11 17:36:02,846 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,846 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:02,950 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:02,950 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:36:02,959 [INFO] Final candidates: []
2025-04-11 17:36:02,959 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,967 [INFO] Final candidates: []
2025-04-11 17:36:02,967 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:02,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:03,009 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:03,010 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(13), np.int64(14)))
2025-04-11 17:36:03,018 [INFO] Final candidates: []
2025-04-11 17:36:03,018 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,027 [INFO] Final candidates: []
2025-04-11 17:36:03,027 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,028 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:03,168 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:03,169 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(8), np.int64(13)))
2025-04-11 17:36:03,177 [INFO] Final candidates: []
2025-04-11 17:36:03,177 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,186 [INFO] Final candidates: []
2025-04-11 17:36:03,186 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,186 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:03,295 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:03,295 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(14)), (np.int64(13), np.int64(11)))
2025-04-11 17:36:03,304 [INFO] Final candidates: []
2025-04-11 17:36:03,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,313 [INFO] Final candidates: []
2025-04-11 17:36:03,313 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:03,395 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:03,395 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:03,404 [INFO] Final candidates: []
2025-04-11 17:36:03,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,413 [INFO] Final candidates: []
2025-04-11 17:36:03,413 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,413 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:03,539 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:03,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 17:36:03,548 [INFO] Final candidates: []
2025-04-11 17:36:03,548 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,558 [INFO] Final candidates: []
2025-04-11 17:36:03,558 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,558 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:03,641 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:03,641 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(13)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:03,650 [INFO] Final candidates: []
2025-04-11 17:36:03,650 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,659 [INFO] Final candidates: []
2025-04-11 17:36:03,659 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,659 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:03,870 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:03,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(14), np.int64(13)))
2025-04-11 17:36:03,879 [INFO] Final candidates: []
2025-04-11 17:36:03,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,888 [INFO] Final candidates: []
2025-04-11 17:36:03,888 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:03,888 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,050 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:04,051 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(8), np.int64(10)))
2025-04-11 17:36:04,059 [INFO] Final candidates: []
2025-04-11 17:36:04,060 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,068 [INFO] Final candidates: []
2025-04-11 17:36:04,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,069 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,263 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:04,263 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(8), np.int64(10)))
2025-04-11 17:36:04,272 [INFO] Final candidates: []
2025-04-11 17:36:04,272 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,281 [INFO] Final candidates: []
2025-04-11 17:36:04,281 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,281 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,368 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:04,368 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(13)), (np.int64(13), np.int64(13)))
2025-04-11 17:36:04,377 [INFO] Final candidates: []
2025-04-11 17:36:04,377 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,385 [INFO] Final candidates: []
2025-04-11 17:36:04,385 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,386 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:04,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(10), np.int64(12)))
2025-04-11 17:36:04,462 [INFO] Final candidates: []
2025-04-11 17:36:04,462 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,471 [INFO] Final candidates: []
2025-04-11 17:36:04,471 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,472 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,580 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:04,581 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(8)))
2025-04-11 17:36:04,589 [INFO] Final candidates: []
2025-04-11 17:36:04,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,598 [INFO] Final candidates: []
2025-04-11 17:36:04,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,598 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,720 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:04,720 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(1), np.int64(15)))
2025-04-11 17:36:04,728 [INFO] Final candidates: []
2025-04-11 17:36:04,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,737 [INFO] Final candidates: []
2025-04-11 17:36:04,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,780 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:04,781 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(9), np.int64(10)))
2025-04-11 17:36:04,789 [INFO] Final candidates: []
2025-04-11 17:36:04,789 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,798 [INFO] Final candidates: []
2025-04-11 17:36:04,798 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:04,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:04,999 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:05,000 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(12)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:05,008 [INFO] Final candidates: []
2025-04-11 17:36:05,008 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,017 [INFO] Final candidates: []
2025-04-11 17:36:05,017 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,017 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:05,227 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:05,227 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(9), np.int64(10)))
2025-04-11 17:36:05,236 [INFO] Final candidates: []
2025-04-11 17:36:05,236 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,245 [INFO] Final candidates: []
2025-04-11 17:36:05,245 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,245 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:05,538 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:05,538 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(15)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:05,547 [INFO] Final candidates: []
2025-04-11 17:36:05,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,555 [INFO] Final candidates: []
2025-04-11 17:36:05,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:05,645 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:05,645 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(2), np.int64(14)))
2025-04-11 17:36:05,655 [INFO] Final candidates: []
2025-04-11 17:36:05,655 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,665 [INFO] Final candidates: []
2025-04-11 17:36:05,665 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:05,808 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:05,808 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(9), np.int64(8)))
2025-04-11 17:36:05,817 [INFO] Final candidates: []
2025-04-11 17:36:05,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,826 [INFO] Final candidates: []
2025-04-11 17:36:05,826 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:05,959 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:05,959 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(13)), (np.int64(8), np.int64(12)))
2025-04-11 17:36:05,968 [INFO] Final candidates: []
2025-04-11 17:36:05,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,976 [INFO] Final candidates: []
2025-04-11 17:36:05,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:05,977 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:06,287 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:06,288 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 17:36:06,296 [INFO] Final candidates: []
2025-04-11 17:36:06,296 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,305 [INFO] Final candidates: []
2025-04-11 17:36:06,305 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:06,465 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:06,465 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(7), np.int64(10)))
2025-04-11 17:36:06,474 [INFO] Final candidates: []
2025-04-11 17:36:06,474 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,482 [INFO] Final candidates: []
2025-04-11 17:36:06,482 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,483 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:06,520 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:06,520 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(7), np.int64(14)))
2025-04-11 17:36:06,529 [INFO] Final candidates: []
2025-04-11 17:36:06,529 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,537 [INFO] Final candidates: []
2025-04-11 17:36:06,538 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:06,590 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:06,590 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 17:36:06,599 [INFO] Final candidates: []
2025-04-11 17:36:06,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,607 [INFO] Final candidates: []
2025-04-11 17:36:06,607 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,608 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:06,786 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:06,786 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(6)), (np.int64(7), np.int64(14)))
2025-04-11 17:36:06,795 [INFO] Final candidates: []
2025-04-11 17:36:06,795 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,804 [INFO] Final candidates: []
2025-04-11 17:36:06,804 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,804 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:06,947 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:06,947 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(14), np.int64(11)))
2025-04-11 17:36:06,956 [INFO] Final candidates: []
2025-04-11 17:36:06,956 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,964 [INFO] Final candidates: []
2025-04-11 17:36:06,964 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:06,965 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:07,008 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:07,008 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(10), np.int64(12)))
2025-04-11 17:36:07,017 [INFO] Final candidates: []
2025-04-11 17:36:07,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,026 [INFO] Final candidates: []
2025-04-11 17:36:07,026 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:07,191 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:07,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(9), np.int64(10)))
2025-04-11 17:36:07,200 [INFO] Final candidates: []
2025-04-11 17:36:07,200 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,209 [INFO] Final candidates: []
2025-04-11 17:36:07,209 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,209 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:07,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:07,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:36:07,503 [INFO] Final candidates: []
2025-04-11 17:36:07,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,512 [INFO] Final candidates: []
2025-04-11 17:36:07,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,512 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:07,594 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:07,594 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(13), np.int64(10)))
2025-04-11 17:36:07,603 [INFO] Final candidates: []
2025-04-11 17:36:07,603 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,612 [INFO] Final candidates: []
2025-04-11 17:36:07,612 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,612 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:07,827 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:07,827 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(9), np.int64(15)))
2025-04-11 17:36:07,836 [INFO] Final candidates: []
2025-04-11 17:36:07,836 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,845 [INFO] Final candidates: []
2025-04-11 17:36:07,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:07,845 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:08,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:08,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(12)), (np.int64(7), np.int64(11)))
2025-04-11 17:36:08,123 [INFO] Final candidates: []
2025-04-11 17:36:08,123 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:08,133 [INFO] Final candidates: []
2025-04-11 17:36:08,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:08,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:08,196 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:08,197 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(1), np.int64(12)))
2025-04-11 17:36:08,205 [INFO] Final candidates: []
2025-04-11 17:36:08,205 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:08,214 [INFO] Final candidates: []
2025-04-11 17:36:08,214 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:08,215 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:08,430 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:08,431 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:36:08,431 [INFO] MCTS selected move: Q11,P11
2025-04-11 17:36:08,431 [INFO] ===============NEW MOVE================
2025-04-11 17:36:12,595 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:36:12,604 [INFO] Final candidates: []
2025-04-11 17:36:12,604 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:12,605 [DEBUG] board coords: [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13)]
2025-04-11 17:36:12,605 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:36:12,605 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (9, 10)]
2025-04-11 17:36:12,605 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13)] triggers candidate.
2025-04-11 17:36:12,605 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15)] triggers candidate.
2025-04-11 17:36:12,605 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:12,605 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)]
2025-04-11 17:36:12,605 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,605 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 15), (9, 16)]
2025-04-11 17:36:12,605 [DEBUG] check_window_intermediate_custom (only one inserted(9, 15)): For L=6, window [2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:12,606 [DEBUG] board coords: [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14)]
2025-04-11 17:36:12,606 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:36:12,606 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (9, 10)]
2025-04-11 17:36:12,606 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 0 2 2 2 2] with coords [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14)] triggers candidate.
2025-04-11 17:36:12,606 [DEBUG] board coords: [(9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15)]
2025-04-11 17:36:12,606 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:12,606 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 10), (9, 15)]
2025-04-11 17:36:12,606 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 2 2 0] with coords [(9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15)] triggers candidate.
2025-04-11 17:36:12,613 [INFO] Final candidates: [(9, 10), (9, 8), (9, 15)]
2025-04-11 17:36:12,613 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 10), (9, 15)), ((9, 10), (9, 8)), ((9, 8), (9, 15))]
2025-04-11 17:36:12,613 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:12,613 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:36:12,613 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 10), (9, 8))
2025-04-11 17:36:12,614 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)]
2025-04-11 17:36:12,614 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,614 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 15), (9, 16)]
2025-04-11 17:36:12,614 [DEBUG] check_window_intermediate_custom (only one inserted(9, 15)): For L=6, window [2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:12,615 [DEBUG] board coords: [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)]
2025-04-11 17:36:12,615 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,615 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 15), (9, 16)]
2025-04-11 17:36:12,615 [DEBUG] check_window_intermediate_custom (only one inserted(9, 15)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:12,622 [INFO] Final candidates: [(9, 15)]
2025-04-11 17:36:12,622 [INFO] Phase win: Found only one candidate: (9, 15)
2025-04-11 17:36:12,622 [INFO] Phase win: Collected 8unique candidate(s):[((9, 15), (np.int64(8), np.int64(14))), ((9, 15), (np.int64(8), np.int64(16))), ((9, 15), (np.int64(9), np.int64(17))), ((9, 15), (np.int64(11), np.int64(15))), ((9, 15), (np.int64(8), np.int64(15))), ((9, 15), (np.int64(9), np.int64(16))), ((9, 15), (np.int64(10), np.int64(16))), ((9, 15), (np.int64(7), np.int64(15)))]
2025-04-11 17:36:12,622 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 17:36:12,631 [INFO] Final candidates: []
2025-04-11 17:36:12,631 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:12,631 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:36:12,631 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:12,631 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:12,631 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 8), (9, 15))
2025-04-11 17:36:12,632 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,632 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,632 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,632 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,633 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:12,633 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:12,633 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,633 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,633 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,633 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,640 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:12,640 [INFO] Phase win: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:12,640 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:12,649 [INFO] Final candidates: []
2025-04-11 17:36:12,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:12,649 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:12,732 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:12,733 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 10), (9, 15))
2025-04-11 17:36:12,733 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,733 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,733 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,733 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,735 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,735 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,735 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,735 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,742 [INFO] Final candidates: [(9, 16), (9, 8)]
2025-04-11 17:36:12,742 [INFO] Phase win: Collected 1unique candidate(s):[((9, 16), (9, 8))]
2025-04-11 17:36:12,742 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:12,751 [INFO] Final candidates: []
2025-04-11 17:36:12,751 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:12,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:12,752 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:12,752 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:12,752 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:36:12,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:12,752 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:12,752 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:12,752 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(14)), (np.int64(9), np.int64(10)))
2025-04-11 17:36:12,760 [INFO] Final candidates: []
2025-04-11 17:36:12,760 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:12,761 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,761 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,761 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,761 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,762 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,762 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,762 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,762 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,769 [INFO] Final candidates: [(9, 16)]
2025-04-11 17:36:12,769 [INFO] Phase defense: Found only one candidate: (9, 16)
2025-04-11 17:36:12,769 [INFO] Phase defense: Collected 9unique candidate(s):[((9, 16), (np.int64(8), np.int64(16))), ((9, 16), (np.int64(9), np.int64(17))), ((9, 16), (np.int64(11), np.int64(16))), ((9, 16), (np.int64(7), np.int64(16))), ((9, 16), (np.int64(10), np.int64(17))), ((9, 16), (np.int64(8), np.int64(15))), ((9, 16), (np.int64(8), np.int64(17))), ((9, 16), (np.int64(10), np.int64(16))), ((9, 16), (np.int64(9), np.int64(18)))]
2025-04-11 17:36:12,769 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 17:36:12,769 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:12,839 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:12,839 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:12,839 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(6), np.int64(8)))
2025-04-11 17:36:12,847 [INFO] Final candidates: []
2025-04-11 17:36:12,847 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:12,848 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,848 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,848 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,848 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,849 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:12,849 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:12,849 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,849 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,849 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,849 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,856 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:12,856 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:12,856 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:12,856 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:12,922 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:12,923 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:12,923 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(9), np.int64(10)))
2025-04-11 17:36:12,931 [INFO] Final candidates: []
2025-04-11 17:36:12,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:12,932 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,932 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,932 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,932 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,933 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:12,933 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:12,933 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:12,933 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:12,940 [INFO] Final candidates: [(9, 16)]
2025-04-11 17:36:12,940 [INFO] Phase defense: Found only one candidate: (9, 16)
2025-04-11 17:36:12,940 [INFO] Phase defense: Collected 9unique candidate(s):[((9, 16), (np.int64(8), np.int64(16))), ((9, 16), (np.int64(9), np.int64(17))), ((9, 16), (np.int64(11), np.int64(16))), ((9, 16), (np.int64(7), np.int64(16))), ((9, 16), (np.int64(10), np.int64(17))), ((9, 16), (np.int64(8), np.int64(15))), ((9, 16), (np.int64(8), np.int64(17))), ((9, 16), (np.int64(10), np.int64(16))), ((9, 16), (np.int64(9), np.int64(18)))]
2025-04-11 17:36:12,940 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 17:36:12,940 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:13,103 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,103 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(11)), (np.int64(9), np.int64(6)))
2025-04-11 17:36:13,111 [INFO] Final candidates: []
2025-04-11 17:36:13,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,112 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,112 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,112 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,112 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,113 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:13,113 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:13,113 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,113 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,113 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,113 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,120 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:13,120 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:13,120 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:13,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:13,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,122 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(14)), (np.int64(8), np.int64(7)))
2025-04-11 17:36:13,130 [INFO] Final candidates: []
2025-04-11 17:36:13,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,131 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,131 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,131 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,132 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:13,132 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:13,132 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,132 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,132 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,132 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,139 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:13,139 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:13,139 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:13,139 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,318 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:13,318 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,318 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(8)), (np.int64(9), np.int64(16)))
2025-04-11 17:36:13,326 [INFO] Final candidates: []
2025-04-11 17:36:13,326 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,335 [INFO] Final candidates: [(9, 10)]
2025-04-11 17:36:13,335 [INFO] Phase defense: Found only one candidate: (9, 10)
2025-04-11 17:36:13,335 [INFO] Phase defense: Collected 8unique candidate(s):[((9, 10), (np.int64(8), np.int64(10))), ((9, 10), (np.int64(10), np.int64(9))), ((9, 10), (np.int64(10), np.int64(11))), ((9, 10), (np.int64(11), np.int64(10))), ((9, 10), (np.int64(7), np.int64(10))), ((9, 10), (np.int64(8), np.int64(11))), ((9, 10), (np.int64(8), np.int64(9))), ((9, 10), (np.int64(10), np.int64(10)))]
2025-04-11 17:36:13,335 [INFO] Phase 2 (defense): 8 candidate(s) found.
2025-04-11 17:36:13,335 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,534 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:13,534 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,534 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(9)), (np.int64(10), np.int64(7)))
2025-04-11 17:36:13,543 [INFO] Final candidates: []
2025-04-11 17:36:13,543 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,543 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,543 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,543 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,543 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,544 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:13,545 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:13,545 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,545 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,545 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,545 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,551 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:13,551 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:13,551 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:13,551 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,646 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:13,646 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,646 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(12), np.int64(14)))
2025-04-11 17:36:13,655 [INFO] Final candidates: []
2025-04-11 17:36:13,655 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,655 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,655 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,655 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,655 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,657 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:13,657 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:13,657 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,657 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,657 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,657 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,663 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:13,663 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:13,663 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:13,663 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,669 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:13,669 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,670 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(13)), (np.int64(8), np.int64(10)))
2025-04-11 17:36:13,678 [INFO] Final candidates: []
2025-04-11 17:36:13,678 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,678 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,678 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,678 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,678 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,680 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:13,680 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:13,680 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,680 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,680 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,680 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,686 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:13,687 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:13,687 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:13,687 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,854 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:13,854 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,854 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 17:36:13,862 [INFO] Final candidates: []
2025-04-11 17:36:13,862 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,863 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,863 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,863 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,863 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,864 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:13,864 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:13,864 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:13,864 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:13,864 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:13,864 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:13,871 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:13,871 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:13,871 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:13,871 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,874 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:13,874 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,874 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(16)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:13,883 [INFO] Final candidates: []
2025-04-11 17:36:13,883 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,891 [INFO] Final candidates: [(9, 10)]
2025-04-11 17:36:13,891 [INFO] Phase defense: Found only one candidate: (9, 10)
2025-04-11 17:36:13,892 [INFO] Phase defense: Collected 8unique candidate(s):[((9, 10), (np.int64(8), np.int64(10))), ((9, 10), (np.int64(10), np.int64(9))), ((9, 10), (np.int64(10), np.int64(11))), ((9, 10), (np.int64(11), np.int64(10))), ((9, 10), (np.int64(7), np.int64(10))), ((9, 10), (np.int64(8), np.int64(11))), ((9, 10), (np.int64(8), np.int64(9))), ((9, 10), (np.int64(10), np.int64(10)))]
2025-04-11 17:36:13,892 [INFO] Phase 2 (defense): 8 candidate(s) found.
2025-04-11 17:36:13,892 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:13,978 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:13,978 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:13,978 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(9), np.int64(17)))
2025-04-11 17:36:13,986 [INFO] Final candidates: []
2025-04-11 17:36:13,986 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:13,988 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:13,988 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:13,995 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:13,995 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:13,995 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:13,995 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,047 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:14,047 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,048 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(12)), (np.int64(11), np.int64(7)))
2025-04-11 17:36:14,056 [INFO] Final candidates: []
2025-04-11 17:36:14,056 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,057 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,057 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,057 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,057 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,058 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,058 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,058 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,058 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,058 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,058 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,065 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,065 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,065 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,065 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,065 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:14,065 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,066 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(12)), (np.int64(10), np.int64(17)))
2025-04-11 17:36:14,074 [INFO] Final candidates: []
2025-04-11 17:36:14,074 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,074 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,074 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,074 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,074 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,076 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,076 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,076 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,076 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,076 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,076 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,082 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,082 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,082 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,082 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,085 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:14,085 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,085 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(13)), (np.int64(9), np.int64(6)))
2025-04-11 17:36:14,093 [INFO] Final candidates: []
2025-04-11 17:36:14,093 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,094 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,094 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,094 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,094 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,095 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,095 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,095 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,095 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,095 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,096 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,102 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,102 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,102 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,102 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,352 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:14,352 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,352 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(10)), (np.int64(7), np.int64(11)))
2025-04-11 17:36:14,361 [INFO] Final candidates: []
2025-04-11 17:36:14,361 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,361 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,361 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,361 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,361 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,363 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,363 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,363 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,363 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,363 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,363 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,370 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,370 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,370 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,370 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,377 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:14,378 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,378 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(9)), (np.int64(8), np.int64(16)))
2025-04-11 17:36:14,386 [INFO] Final candidates: []
2025-04-11 17:36:14,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,386 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,387 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,387 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,387 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,388 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,388 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,388 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,388 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,388 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,395 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,395 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,395 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,459 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:14,460 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,460 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(11)), (np.int64(12), np.int64(14)))
2025-04-11 17:36:14,468 [INFO] Final candidates: []
2025-04-11 17:36:14,468 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,469 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,469 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,469 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,469 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,470 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,470 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,470 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,470 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,470 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,477 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,477 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,477 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,583 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:14,583 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,583 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(10)))
2025-04-11 17:36:14,591 [INFO] Final candidates: []
2025-04-11 17:36:14,591 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,592 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,592 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,592 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,592 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,593 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,593 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,593 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,593 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,593 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,593 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,600 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,600 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,600 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,729 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:14,729 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,729 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(3), np.int64(14)))
2025-04-11 17:36:14,738 [INFO] Final candidates: []
2025-04-11 17:36:14,738 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,739 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,739 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,739 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,739 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,740 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,740 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,740 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,740 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,740 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,740 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,747 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,747 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,747 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,747 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,839 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:14,839 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,839 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(15)), (np.int64(9), np.int64(6)))
2025-04-11 17:36:14,847 [INFO] Final candidates: []
2025-04-11 17:36:14,847 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,848 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,848 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,848 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,848 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,849 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,849 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,849 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,849 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,849 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,849 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,856 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,856 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,856 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,856 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:14,918 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:14,918 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:14,919 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(12)), (np.int64(5), np.int64(9)))
2025-04-11 17:36:14,927 [INFO] Final candidates: []
2025-04-11 17:36:14,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:14,927 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,927 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,928 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,929 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:14,929 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:14,929 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:14,929 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:14,929 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:14,929 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:14,936 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:14,936 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:14,936 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:14,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,069 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,069 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,070 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(12)), (np.int64(10), np.int64(16)))
2025-04-11 17:36:15,078 [INFO] Final candidates: []
2025-04-11 17:36:15,078 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,078 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,078 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,079 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,079 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,080 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,080 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,080 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,080 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,080 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,080 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,087 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,087 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,087 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,087 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,098 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,098 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(2), np.int64(15)))
2025-04-11 17:36:15,106 [INFO] Final candidates: []
2025-04-11 17:36:15,106 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,107 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,107 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,107 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,108 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,108 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,108 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,108 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,108 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,108 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,115 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,115 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,115 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,115 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,149 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,149 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,149 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(11)), (np.int64(10), np.int64(7)))
2025-04-11 17:36:15,157 [INFO] Final candidates: []
2025-04-11 17:36:15,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,158 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,158 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,158 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,159 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,159 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,159 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,159 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,159 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,159 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,166 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,166 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,166 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,166 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,255 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,255 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,255 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(11), np.int64(9)))
2025-04-11 17:36:15,265 [INFO] Final candidates: []
2025-04-11 17:36:15,265 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,266 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,266 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,266 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,266 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,267 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,267 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,267 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,267 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,267 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,267 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,274 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,274 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,274 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,274 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,395 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,395 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,396 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(12)), (np.int64(8), np.int64(13)))
2025-04-11 17:36:15,404 [INFO] Final candidates: []
2025-04-11 17:36:15,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,404 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,404 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,404 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,405 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,406 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,406 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,406 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,406 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,406 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,406 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,412 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,412 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,412 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,413 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,414 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,414 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,414 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(13)), (np.int64(9), np.int64(5)))
2025-04-11 17:36:15,423 [INFO] Final candidates: []
2025-04-11 17:36:15,423 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,423 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,423 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,423 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,423 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,425 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,425 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,425 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,425 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,425 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,431 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,431 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,431 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,431 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,483 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,484 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,484 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(10), np.int64(11)))
2025-04-11 17:36:15,492 [INFO] Final candidates: []
2025-04-11 17:36:15,492 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,493 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,493 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,493 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,493 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,494 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,494 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,494 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,494 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,494 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,494 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,501 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,502 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,502 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,554 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,554 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(12)), (np.int64(13), np.int64(13)))
2025-04-11 17:36:15,562 [INFO] Final candidates: []
2025-04-11 17:36:15,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,562 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,563 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,563 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,563 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,564 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,564 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,564 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,564 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,564 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,564 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,571 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,571 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,571 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,671 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,671 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,671 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(6), np.int64(8)))
2025-04-11 17:36:15,679 [INFO] Final candidates: []
2025-04-11 17:36:15,679 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,680 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,680 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,680 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,680 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,682 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,682 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,682 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,682 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,682 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,682 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,688 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,689 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,689 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,689 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,701 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,701 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(14)), (np.int64(11), np.int64(13)))
2025-04-11 17:36:15,709 [INFO] Final candidates: []
2025-04-11 17:36:15,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,710 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,710 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,710 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,710 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,711 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,711 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,711 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,711 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,711 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,711 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,718 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,718 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,718 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,802 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,803 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,803 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(12)), (np.int64(7), np.int64(12)))
2025-04-11 17:36:15,811 [INFO] Final candidates: []
2025-04-11 17:36:15,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,812 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,812 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,812 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,812 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,813 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,813 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,813 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,813 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,813 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,813 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,820 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,820 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,820 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:15,943 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:15,944 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:15,944 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(12), np.int64(14)))
2025-04-11 17:36:15,952 [INFO] Final candidates: []
2025-04-11 17:36:15,952 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:15,953 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,953 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,953 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,953 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,954 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:15,954 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:15,954 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:15,954 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:15,954 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:15,954 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:15,961 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:15,961 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:15,961 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:15,961 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,016 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:16,016 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,016 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:16,024 [INFO] Final candidates: []
2025-04-11 17:36:16,024 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,025 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,025 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,025 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,025 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,026 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,026 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,026 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,026 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,026 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,026 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,033 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,033 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,033 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,033 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,224 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,225 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,225 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(17)), (np.int64(10), np.int64(16)))
2025-04-11 17:36:16,226 [DEBUG] board coords: [(10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17)]
2025-04-11 17:36:16,226 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:16,226 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (10, 13)]
2025-04-11 17:36:16,226 [DEBUG] check_window_intermediate_custom (only one inserted(10, 13)): For L=6, window [0 0 1 1 1 1] with coords [(10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17)] triggers candidate.
2025-04-11 17:36:16,226 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18)] triggers candidate.
2025-04-11 17:36:16,226 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,233 [INFO] Final candidates: [(10, 18), (10, 13)]
2025-04-11 17:36:16,233 [INFO] Phase win: Collected 1unique candidate(s):[((10, 18), (10, 13))]
2025-04-11 17:36:16,233 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:16,234 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,234 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,234 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,234 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,235 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,235 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,235 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,235 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,235 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,235 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,242 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,242 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,242 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,243 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,243 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,243 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(13)), (np.int64(7), np.int64(14)))
2025-04-11 17:36:16,251 [INFO] Final candidates: []
2025-04-11 17:36:16,251 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,252 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,252 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,252 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,252 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,253 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,253 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,253 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,253 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,253 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,253 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,260 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,260 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,260 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,464 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,465 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,465 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(7), np.int64(14)))
2025-04-11 17:36:16,473 [INFO] Final candidates: []
2025-04-11 17:36:16,473 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,474 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,474 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,474 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,474 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,475 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,475 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,475 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,475 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,475 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,475 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,482 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,482 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,482 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,482 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,483 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,483 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,483 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(9)), (np.int64(11), np.int64(15)))
2025-04-11 17:36:16,491 [INFO] Final candidates: []
2025-04-11 17:36:16,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,492 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,492 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,492 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,492 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,493 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,493 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,493 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,493 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,493 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,493 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,500 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,500 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,500 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,500 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,502 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,502 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,502 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(8), np.int64(15)))
2025-04-11 17:36:16,510 [INFO] Final candidates: []
2025-04-11 17:36:16,510 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,511 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,511 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,511 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,512 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,512 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,512 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,512 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,512 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,519 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,519 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,519 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,529 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,529 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(8), np.int64(7)))
2025-04-11 17:36:16,537 [INFO] Final candidates: []
2025-04-11 17:36:16,537 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,538 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,538 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,538 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,538 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,539 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,539 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,539 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,539 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,539 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,539 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,546 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,546 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,546 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,546 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,554 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,554 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,554 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:36:16,562 [INFO] Final candidates: []
2025-04-11 17:36:16,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,563 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,563 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,563 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,563 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,564 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,564 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,564 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,564 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,564 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,564 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,571 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,571 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,571 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,633 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:16,633 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,633 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(12)), (np.int64(10), np.int64(16)))
2025-04-11 17:36:16,641 [INFO] Final candidates: []
2025-04-11 17:36:16,641 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,642 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,642 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,642 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,642 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,643 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,643 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,643 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,643 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,643 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,643 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,650 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,650 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,650 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,650 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,675 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,675 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,675 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(8), np.int64(16)))
2025-04-11 17:36:16,683 [INFO] Final candidates: []
2025-04-11 17:36:16,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,684 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,684 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,684 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,685 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,685 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,685 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,685 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,685 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,685 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,692 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,692 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,692 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,692 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,738 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,740 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,740 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:16,748 [INFO] Final candidates: []
2025-04-11 17:36:16,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,749 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,749 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,749 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,749 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,750 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,750 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,750 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,750 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,750 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,750 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,757 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,757 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,757 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,757 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:16,782 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:16,783 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:16,783 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:16,791 [INFO] Final candidates: []
2025-04-11 17:36:16,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:16,792 [DEBUG] board coords: [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,792 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,792 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,792 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=6, window [2 2 2 2 0 0] with coords [(9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,793 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:16,793 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:16,793 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)]
2025-04-11 17:36:16,793 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:16,793 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 16), (9, 17)]
2025-04-11 17:36:16,793 [DEBUG] check_window_intermediate_custom (only one inserted(9, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17)] triggers candidate.
2025-04-11 17:36:16,800 [INFO] Final candidates: [(9, 10), (9, 16)]
2025-04-11 17:36:16,800 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 10), (9, 16))]
2025-04-11 17:36:16,800 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:16,800 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:17,049 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:17,049 [INFO] MCTS: Search finished. Best move selected with 2 visits.
2025-04-11 17:36:17,049 [INFO] MCTS (defense candidates) selected move: L10,J10
2025-04-11 17:36:26,208 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:36:26,216 [INFO] Final candidates: []
2025-04-11 17:36:26,216 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,217 [DEBUG] board coords: [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)]
2025-04-11 17:36:26,217 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:26,217 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 15), (9, 16)]
2025-04-11 17:36:26,217 [DEBUG] check_window_intermediate_custom (only one inserted(9, 15)): For L=6, window [2 2 2 2 0 0] with coords [(9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16)] triggers candidate.
2025-04-11 17:36:26,225 [INFO] Final candidates: [(9, 15)]
2025-04-11 17:36:26,225 [INFO] Phase defense: Found only one candidate: (9, 15)
2025-04-11 17:36:26,225 [INFO] Phase defense: Collected 8unique candidate(s):[((9, 15), (np.int64(8), np.int64(14))), ((9, 15), (np.int64(8), np.int64(16))), ((9, 15), (np.int64(9), np.int64(17))), ((9, 15), (np.int64(11), np.int64(15))), ((9, 15), (np.int64(8), np.int64(15))), ((9, 15), (np.int64(9), np.int64(16))), ((9, 15), (np.int64(10), np.int64(16))), ((9, 15), (np.int64(7), np.int64(15)))]
2025-04-11 17:36:26,225 [INFO] Phase 2 (defense): 8 candidate(s) found.
2025-04-11 17:36:26,225 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:36:26,225 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(8), np.int64(14)))
2025-04-11 17:36:26,233 [INFO] Final candidates: []
2025-04-11 17:36:26,233 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,242 [INFO] Final candidates: []
2025-04-11 17:36:26,242 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,242 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:36:26,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:26,285 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:26,285 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(9), np.int64(17)))
2025-04-11 17:36:26,294 [INFO] Final candidates: []
2025-04-11 17:36:26,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,302 [INFO] Final candidates: []
2025-04-11 17:36:26,302 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:26,461 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:26,461 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(10), np.int64(16)))
2025-04-11 17:36:26,469 [INFO] Final candidates: []
2025-04-11 17:36:26,469 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,478 [INFO] Final candidates: []
2025-04-11 17:36:26,479 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:26,669 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:26,669 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(11), np.int64(15)))
2025-04-11 17:36:26,677 [INFO] Final candidates: []
2025-04-11 17:36:26,678 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,686 [INFO] Final candidates: []
2025-04-11 17:36:26,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,686 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:26,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:26,694 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(8), np.int64(15)))
2025-04-11 17:36:26,703 [INFO] Final candidates: []
2025-04-11 17:36:26,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,711 [INFO] Final candidates: []
2025-04-11 17:36:26,711 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:26,865 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:26,866 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(7), np.int64(15)))
2025-04-11 17:36:26,874 [INFO] Final candidates: []
2025-04-11 17:36:26,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,882 [INFO] Final candidates: []
2025-04-11 17:36:26,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:26,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,039 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:27,039 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(8), np.int64(16)))
2025-04-11 17:36:27,049 [INFO] Final candidates: []
2025-04-11 17:36:27,049 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,057 [INFO] Final candidates: []
2025-04-11 17:36:27,057 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,058 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,101 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:27,101 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 15), (np.int64(9), np.int64(16)))
2025-04-11 17:36:27,109 [INFO] Final candidates: []
2025-04-11 17:36:27,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,117 [INFO] Final candidates: []
2025-04-11 17:36:27,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,169 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:27,169 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:27,169 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(13)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:27,177 [INFO] Final candidates: []
2025-04-11 17:36:27,177 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,185 [INFO] Final candidates: []
2025-04-11 17:36:27,185 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,186 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,254 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:27,254 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:27,254 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(6), np.int64(8)))
2025-04-11 17:36:27,263 [INFO] Final candidates: []
2025-04-11 17:36:27,263 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,271 [INFO] Final candidates: []
2025-04-11 17:36:27,271 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,271 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,364 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:27,365 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:27,365 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(11)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:27,373 [INFO] Final candidates: []
2025-04-11 17:36:27,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,381 [INFO] Final candidates: []
2025-04-11 17:36:27,381 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,494 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:27,494 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:27,495 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:27,503 [INFO] Final candidates: []
2025-04-11 17:36:27,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,511 [INFO] Final candidates: []
2025-04-11 17:36:27,511 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,512 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,741 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:27,741 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:27,741 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(5), np.int64(16)))
2025-04-11 17:36:27,749 [INFO] Final candidates: []
2025-04-11 17:36:27,749 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,757 [INFO] Final candidates: []
2025-04-11 17:36:27,757 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,758 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:27,906 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:27,906 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:27,907 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(13)), (np.int64(8), np.int64(10)))
2025-04-11 17:36:27,915 [INFO] Final candidates: []
2025-04-11 17:36:27,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,923 [INFO] Final candidates: []
2025-04-11 17:36:27,923 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:27,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:28,026 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:28,026 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:28,026 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(12), np.int64(14)))
2025-04-11 17:36:28,034 [INFO] Final candidates: []
2025-04-11 17:36:28,034 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,042 [INFO] Final candidates: []
2025-04-11 17:36:28,042 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,043 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:28,241 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:28,241 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:28,241 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(14), np.int64(11)))
2025-04-11 17:36:28,249 [INFO] Final candidates: []
2025-04-11 17:36:28,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,258 [INFO] Final candidates: []
2025-04-11 17:36:28,258 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,258 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:28,456 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:28,456 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:28,456 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(5), np.int64(16)))
2025-04-11 17:36:28,464 [INFO] Final candidates: []
2025-04-11 17:36:28,464 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,472 [INFO] Final candidates: []
2025-04-11 17:36:28,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:28,767 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:28,767 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:28,767 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(9)))
2025-04-11 17:36:28,775 [INFO] Final candidates: []
2025-04-11 17:36:28,775 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,783 [INFO] Final candidates: []
2025-04-11 17:36:28,783 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,784 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:28,914 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:28,914 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:28,915 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(7), np.int64(7)))
2025-04-11 17:36:28,923 [INFO] Final candidates: []
2025-04-11 17:36:28,923 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,931 [INFO] Final candidates: []
2025-04-11 17:36:28,931 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:28,932 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:29,105 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:29,105 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:29,105 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(16)), (np.int64(11), np.int64(8)))
2025-04-11 17:36:29,113 [INFO] Final candidates: []
2025-04-11 17:36:29,113 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,122 [INFO] Final candidates: []
2025-04-11 17:36:29,122 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:29,205 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:29,205 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:29,206 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(17)), (np.int64(8), np.int64(6)))
2025-04-11 17:36:29,214 [INFO] Final candidates: []
2025-04-11 17:36:29,215 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,223 [INFO] Final candidates: []
2025-04-11 17:36:29,223 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,224 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:29,365 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:29,366 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:29,366 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(14)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:29,374 [INFO] Final candidates: []
2025-04-11 17:36:29,374 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,382 [INFO] Final candidates: []
2025-04-11 17:36:29,382 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:29,424 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:29,424 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:29,424 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(8), np.int64(10)))
2025-04-11 17:36:29,433 [INFO] Final candidates: []
2025-04-11 17:36:29,433 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,441 [INFO] Final candidates: []
2025-04-11 17:36:29,441 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,442 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:29,655 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:29,656 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:29,656 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(13), np.int64(11)))
2025-04-11 17:36:29,664 [INFO] Final candidates: []
2025-04-11 17:36:29,664 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,672 [INFO] Final candidates: []
2025-04-11 17:36:29,672 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,673 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:29,820 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:29,820 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:29,820 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(16)), (np.int64(6), np.int64(15)))
2025-04-11 17:36:29,829 [INFO] Final candidates: []
2025-04-11 17:36:29,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,837 [INFO] Final candidates: []
2025-04-11 17:36:29,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:29,904 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:29,904 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:29,904 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(10), np.int64(8)))
2025-04-11 17:36:29,912 [INFO] Final candidates: []
2025-04-11 17:36:29,912 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,921 [INFO] Final candidates: []
2025-04-11 17:36:29,921 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:29,921 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,001 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:30,001 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,001 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(2), np.int64(15)))
2025-04-11 17:36:30,009 [INFO] Final candidates: []
2025-04-11 17:36:30,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,017 [INFO] Final candidates: []
2025-04-11 17:36:30,017 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,018 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,062 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:30,062 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,063 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(10)), (np.int64(9), np.int64(6)))
2025-04-11 17:36:30,071 [INFO] Final candidates: []
2025-04-11 17:36:30,071 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,079 [INFO] Final candidates: []
2025-04-11 17:36:30,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,080 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,143 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:30,143 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,143 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(13)), (np.int64(7), np.int64(15)))
2025-04-11 17:36:30,153 [INFO] Final candidates: []
2025-04-11 17:36:30,153 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,161 [INFO] Final candidates: []
2025-04-11 17:36:30,161 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,308 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:30,308 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,308 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(13), np.int64(13)))
2025-04-11 17:36:30,317 [INFO] Final candidates: []
2025-04-11 17:36:30,317 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,325 [INFO] Final candidates: []
2025-04-11 17:36:30,325 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,325 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,520 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:30,521 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,521 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(9)), (np.int64(10), np.int64(17)))
2025-04-11 17:36:30,529 [INFO] Final candidates: []
2025-04-11 17:36:30,529 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,537 [INFO] Final candidates: []
2025-04-11 17:36:30,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,627 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:30,628 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,628 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(11), np.int64(12)))
2025-04-11 17:36:30,631 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:36:30,631 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:30,631 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (12, 12)]
2025-04-11 17:36:30,631 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:36:30,636 [INFO] Final candidates: [(12, 12), (10, 12)]
2025-04-11 17:36:30,636 [INFO] Phase win: Collected 1unique candidate(s):[((12, 12), (10, 12))]
2025-04-11 17:36:30,636 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:30,644 [INFO] Final candidates: []
2025-04-11 17:36:30,644 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,724 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:30,724 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,725 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(11), np.int64(10)))
2025-04-11 17:36:30,733 [INFO] Final candidates: []
2025-04-11 17:36:30,733 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,741 [INFO] Final candidates: []
2025-04-11 17:36:30,741 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,741 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:30,920 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:30,920 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:30,920 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(11), np.int64(12)))
2025-04-11 17:36:30,923 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)]
2025-04-11 17:36:30,923 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:30,924 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 12), (10, 12)]
2025-04-11 17:36:30,924 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:36:30,924 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:36:30,924 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:36:30,924 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (12, 12)]
2025-04-11 17:36:30,924 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:36:30,924 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:36:30,924 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:30,924 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (12, 12)]
2025-04-11 17:36:30,924 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:36:30,925 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:36:30,925 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:30,925 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (12, 12)]
2025-04-11 17:36:30,925 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 0 2 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:36:30,929 [INFO] Final candidates: [(6, 12), (12, 12), (10, 12)]
2025-04-11 17:36:30,929 [INFO] Phase win: Collected 3unique candidate(s):[((6, 12), (10, 12)), ((6, 12), (12, 12)), ((12, 12), (10, 12))]
2025-04-11 17:36:30,929 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:36:30,937 [INFO] Final candidates: []
2025-04-11 17:36:30,937 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:30,938 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:31,111 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:31,111 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:31,111 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(7)), (np.int64(11), np.int64(12)))
2025-04-11 17:36:31,115 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:36:31,115 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:31,115 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (12, 12)]
2025-04-11 17:36:31,115 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:36:31,120 [INFO] Final candidates: [(12, 12), (10, 12)]
2025-04-11 17:36:31,120 [INFO] Phase win: Collected 1unique candidate(s):[((12, 12), (10, 12))]
2025-04-11 17:36:31,120 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:31,128 [INFO] Final candidates: []
2025-04-11 17:36:31,128 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:31,372 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:31,372 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:31,372 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(0), np.int64(13)))
2025-04-11 17:36:31,380 [INFO] Final candidates: []
2025-04-11 17:36:31,380 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,389 [INFO] Final candidates: []
2025-04-11 17:36:31,389 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,389 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:31,507 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:31,507 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:31,507 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(8)), (np.int64(10), np.int64(11)))
2025-04-11 17:36:31,516 [INFO] Final candidates: []
2025-04-11 17:36:31,516 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,524 [INFO] Final candidates: []
2025-04-11 17:36:31,524 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,524 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:31,645 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:31,646 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:31,646 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(12)), (np.int64(6), np.int64(8)))
2025-04-11 17:36:31,654 [INFO] Final candidates: []
2025-04-11 17:36:31,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,662 [INFO] Final candidates: []
2025-04-11 17:36:31,662 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,663 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:31,831 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:31,831 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:31,831 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(10), np.int64(12)))
2025-04-11 17:36:31,834 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:36:31,834 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:36:31,834 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:36:31,834 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:36:31,839 [INFO] Final candidates: [(11, 12), (12, 12)]
2025-04-11 17:36:31,839 [INFO] Phase win: Collected 1unique candidate(s):[((11, 12), (12, 12))]
2025-04-11 17:36:31,839 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:31,847 [INFO] Final candidates: []
2025-04-11 17:36:31,847 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:31,922 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:31,923 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:31,923 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(15)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:31,931 [INFO] Final candidates: []
2025-04-11 17:36:31,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,939 [INFO] Final candidates: []
2025-04-11 17:36:31,939 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:31,940 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,004 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:32,004 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,004 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(14), np.int64(12)))
2025-04-11 17:36:32,013 [INFO] Final candidates: []
2025-04-11 17:36:32,013 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,021 [INFO] Final candidates: []
2025-04-11 17:36:32,021 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,021 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,252 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:32,252 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,252 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(8), np.int64(8)))
2025-04-11 17:36:32,260 [INFO] Final candidates: []
2025-04-11 17:36:32,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,269 [INFO] Final candidates: []
2025-04-11 17:36:32,269 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,269 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,398 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:32,399 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,399 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(10)), (np.int64(15), np.int64(12)))
2025-04-11 17:36:32,407 [INFO] Final candidates: []
2025-04-11 17:36:32,407 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,415 [INFO] Final candidates: []
2025-04-11 17:36:32,415 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,415 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,462 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:32,463 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,463 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(10), np.int64(7)))
2025-04-11 17:36:32,471 [INFO] Final candidates: []
2025-04-11 17:36:32,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,479 [INFO] Final candidates: []
2025-04-11 17:36:32,480 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,480 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,505 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:32,505 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,505 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(7), np.int64(13)))
2025-04-11 17:36:32,512 [DEBUG] board coords: [(4, 16), (5, 15), (6, 14), (7, 13), (8, 12), (9, 11)]
2025-04-11 17:36:32,512 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:36:32,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 16), (6, 14)]
2025-04-11 17:36:32,512 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(4, 16), (5, 15), (6, 14), (7, 13), (8, 12), (9, 11)] triggers candidate.
2025-04-11 17:36:32,512 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10)]
2025-04-11 17:36:32,512 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:32,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 14), (10, 10)]
2025-04-11 17:36:32,512 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10)] triggers candidate.
2025-04-11 17:36:32,514 [INFO] Final candidates: [(10, 10), (4, 16), (6, 14)]
2025-04-11 17:36:32,514 [INFO] Phase win: Collected 3unique candidate(s):[((10, 10), (4, 16)), ((10, 10), (6, 14)), ((4, 16), (6, 14))]
2025-04-11 17:36:32,514 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:36:32,522 [INFO] Final candidates: []
2025-04-11 17:36:32,522 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,523 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,546 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:32,546 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,546 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(13)), (np.int64(11), np.int64(17)))
2025-04-11 17:36:32,554 [INFO] Final candidates: []
2025-04-11 17:36:32,554 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,563 [INFO] Final candidates: []
2025-04-11 17:36:32,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,564 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,697 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:32,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,697 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(13), np.int64(10)))
2025-04-11 17:36:32,705 [INFO] Final candidates: []
2025-04-11 17:36:32,705 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,713 [INFO] Final candidates: []
2025-04-11 17:36:32,713 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,714 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:32,808 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:32,808 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:32,808 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(16)), (np.int64(8), np.int64(7)))
2025-04-11 17:36:32,817 [INFO] Final candidates: []
2025-04-11 17:36:32,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,825 [INFO] Final candidates: []
2025-04-11 17:36:32,825 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:32,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:33,030 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:33,030 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:33,030 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(9)), (np.int64(11), np.int64(13)))
2025-04-11 17:36:33,038 [INFO] Final candidates: []
2025-04-11 17:36:33,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:33,046 [INFO] Final candidates: []
2025-04-11 17:36:33,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:33,047 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:33,131 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:33,132 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:33,132 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(11), np.int64(7)))
2025-04-11 17:36:33,140 [INFO] Final candidates: []
2025-04-11 17:36:33,140 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:33,148 [INFO] Final candidates: []
2025-04-11 17:36:33,148 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:33,148 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:33,310 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:33,310 [INFO] MCTS: Search finished. Best move selected with 8 visits.
2025-04-11 17:36:33,310 [INFO] MCTS (defense candidates) selected move: Q10,Q12
2025-04-11 17:36:36,791 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:36:36,800 [INFO] Final candidates: []
2025-04-11 17:36:36,800 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:36,806 [DEBUG] board coords: [(3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:36,806 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:36,806 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 17), (7, 13)]
2025-04-11 17:36:36,807 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:36,807 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10)]
2025-04-11 17:36:36,807 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,807 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (10, 10)]
2025-04-11 17:36:36,807 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10)] triggers candidate.
2025-04-11 17:36:36,808 [DEBUG] board coords: [(3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12), (9, 11)]
2025-04-11 17:36:36,808 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:36:36,808 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 17), (7, 13)]
2025-04-11 17:36:36,808 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 0 2 2] with coords [(3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12), (9, 11)] triggers candidate.
2025-04-11 17:36:36,808 [DEBUG] board coords: [(4, 16), (5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10)]
2025-04-11 17:36:36,808 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,808 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (10, 10)]
2025-04-11 17:36:36,808 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 0 2 2 0] with coords [(4, 16), (5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10)] triggers candidate.
2025-04-11 17:36:36,808 [INFO] Final candidates: [(10, 10), (7, 13), (3, 17)]
2025-04-11 17:36:36,808 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (3, 17)), ((10, 10), (3, 17)), ((10, 10), (7, 13))]
2025-04-11 17:36:36,809 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:36,809 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:36:36,809 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 10), (7, 13))
2025-04-11 17:36:36,815 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)]
2025-04-11 17:36:36,815 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:36:36,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (3, 17)]
2025-04-11 17:36:36,815 [DEBUG] check_window_intermediate_custom (only one inserted(3, 17)): For L=6, window [0 0 2 2 2 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:36,816 [DEBUG] board coords: [(7, 13), (8, 12), (9, 11), (10, 10), (11, 9), (12, 8)]
2025-04-11 17:36:36,816 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:36,816 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 8)]
2025-04-11 17:36:36,816 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 13), (8, 12), (9, 11), (10, 10), (11, 9), (12, 8)] triggers candidate.
2025-04-11 17:36:36,816 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:36,816 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:36:36,816 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (3, 17)]
2025-04-11 17:36:36,816 [DEBUG] check_window_intermediate_custom (only one inserted(3, 17)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:36,817 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9), (12, 8)]
2025-04-11 17:36:36,817 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:36,817 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 8)]
2025-04-11 17:36:36,817 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9), (12, 8)] triggers candidate.
2025-04-11 17:36:36,817 [INFO] Final candidates: [(11, 9), (3, 17)]
2025-04-11 17:36:36,817 [INFO] Phase win: Collected 1unique candidate(s):[((11, 9), (3, 17))]
2025-04-11 17:36:36,817 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:36,825 [INFO] Final candidates: []
2025-04-11 17:36:36,825 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:36,826 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:36:36,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:36,826 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:36,826 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 10), (3, 17))
2025-04-11 17:36:36,833 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:36,833 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:36,833 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,833 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,833 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:36,833 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,834 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:36,834 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:36,834 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:36,834 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:36,834 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,834 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,834 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:36,834 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,835 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:36,835 [INFO] Phase win: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:36,835 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:36:36,843 [INFO] Final candidates: []
2025-04-11 17:36:36,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:36,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:36,845 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:36,845 [DEBUG] Tree_policy iteration 1: Expanding move ((7, 13), (3, 17))
2025-04-11 17:36:36,852 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,852 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:36,852 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 10), (11, 9)]
2025-04-11 17:36:36,852 [DEBUG] check_window_intermediate_custom (only one inserted(10, 10)): For L=6, window [2 2 2 2 0 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,853 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,853 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:36:36,853 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 10), (11, 9)]
2025-04-11 17:36:36,853 [DEBUG] check_window_intermediate_custom (only one inserted(10, 10)): For L=7, window [2 2 2 2 2 0 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,854 [INFO] Final candidates: [(10, 10), (2, 18)]
2025-04-11 17:36:36,854 [INFO] Phase win: Collected 1unique candidate(s):[((10, 10), (2, 18))]
2025-04-11 17:36:36,854 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:36,862 [INFO] Final candidates: []
2025-04-11 17:36:36,862 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:36,863 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:36,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:36,863 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:36,863 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:36:36,863 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:36,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:36,863 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:36,863 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(14)), (np.int64(13), np.int64(13)))
2025-04-11 17:36:36,871 [INFO] Final candidates: []
2025-04-11 17:36:36,871 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:36,878 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:36,879 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:36,879 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,879 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,879 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:36,879 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,880 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:36,880 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:36,880 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:36,880 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:36,880 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,880 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,880 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:36,880 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,881 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:36,881 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:36,881 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:36,881 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:36,912 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:36,912 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:36,912 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(16)), (np.int64(1), np.int64(17)))
2025-04-11 17:36:36,920 [INFO] Final candidates: []
2025-04-11 17:36:36,920 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:36,927 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:36,927 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:36,927 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,927 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:36,927 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,928 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:36,928 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:36,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:36,928 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:36,928 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:36,928 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:36,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:36,928 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:36,929 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:36,929 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:36,929 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:36,929 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:36,989 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:36,989 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:36,989 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(2), np.int64(17)))
2025-04-11 17:36:36,997 [INFO] Final candidates: []
2025-04-11 17:36:36,997 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,004 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,004 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,004 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,004 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,004 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,004 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,005 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,005 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,005 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,005 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,005 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,005 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,005 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,005 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,006 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,006 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,006 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,006 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,072 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,072 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,072 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:37,076 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:37,076 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:37,076 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:36:37,076 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:37,076 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:37,076 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,076 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:36:37,076 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:36:37,076 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:36:37,076 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:36:37,081 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:36:37,081 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:36:37,081 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:37,088 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,088 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,088 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,088 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,088 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,088 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,089 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,089 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,089 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,089 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,089 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,089 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,089 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,089 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,089 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,090 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,090 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,090 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,159 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,159 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,159 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(3), np.int64(15)))
2025-04-11 17:36:37,167 [INFO] Final candidates: []
2025-04-11 17:36:37,167 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,174 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,174 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,174 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,174 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,174 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,174 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,175 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,175 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,175 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,175 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,175 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,175 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,175 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,175 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,176 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,176 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,176 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,176 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,220 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,220 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,220 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(13), np.int64(13)))
2025-04-11 17:36:37,229 [INFO] Final candidates: []
2025-04-11 17:36:37,229 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,235 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,235 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,235 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,235 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,235 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,235 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,236 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,236 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,236 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,236 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,236 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,237 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,237 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,237 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,237 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,237 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,306 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:37,307 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,307 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(11)), (np.int64(0), np.int64(15)))
2025-04-11 17:36:37,315 [INFO] Final candidates: []
2025-04-11 17:36:37,315 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,321 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,321 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,322 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,322 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,322 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,322 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,322 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,322 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,322 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,322 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,323 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,323 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,323 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,323 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,323 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,323 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,323 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,323 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,327 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,327 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,327 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(8), np.int64(8)))
2025-04-11 17:36:37,335 [INFO] Final candidates: []
2025-04-11 17:36:37,335 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,342 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,342 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,342 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,342 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,342 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,342 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,343 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,343 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,343 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,343 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,343 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,343 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,343 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,343 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,344 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,344 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,344 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,344 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,393 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,393 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,393 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(16)), (np.int64(10), np.int64(13)))
2025-04-11 17:36:37,401 [INFO] Final candidates: []
2025-04-11 17:36:37,401 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,408 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,408 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,408 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,408 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,408 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,408 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,409 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,409 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,409 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,409 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,409 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,409 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,410 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,410 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,410 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,410 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,613 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,613 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,613 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(10)), (np.int64(2), np.int64(16)))
2025-04-11 17:36:37,621 [INFO] Final candidates: []
2025-04-11 17:36:37,621 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,627 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,627 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,628 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,628 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,628 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,628 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,628 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,628 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,628 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,628 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,629 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,629 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,629 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,629 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,629 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,629 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,629 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,629 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,736 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,737 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(8), np.int64(15)))
2025-04-11 17:36:37,740 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:37,740 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:37,740 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:36:37,740 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:37,740 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:37,740 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,740 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:36:37,740 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:36:37,740 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:36:37,740 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:36:37,745 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:36:37,745 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:36:37,745 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:37,752 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,752 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,752 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,752 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,752 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,753 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,753 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,753 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,753 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,753 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,753 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,753 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,753 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,754 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,754 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,754 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,754 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:37,897 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:37,897 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:37,898 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(6), np.int64(16)))
2025-04-11 17:36:37,905 [INFO] Final candidates: []
2025-04-11 17:36:37,906 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:37,912 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:37,912 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:37,913 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,913 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,913 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,913 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,913 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:37,913 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:37,913 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:37,913 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:37,914 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:37,914 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:37,914 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:37,914 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:37,914 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:37,914 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:37,914 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:37,914 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,057 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:38,057 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,057 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(11)), (np.int64(13), np.int64(13)))
2025-04-11 17:36:38,065 [INFO] Final candidates: []
2025-04-11 17:36:38,065 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:38,072 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:38,072 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:38,073 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,073 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,073 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,073 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,073 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:38,073 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:38,073 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:38,073 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:38,074 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,074 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,074 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,074 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,074 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:38,074 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:38,074 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:38,074 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,189 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:38,189 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,189 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(17)), (np.int64(11), np.int64(12)))
2025-04-11 17:36:38,197 [INFO] Final candidates: []
2025-04-11 17:36:38,197 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:38,204 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:38,204 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:38,204 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,204 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,204 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,204 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,205 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:38,205 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:38,205 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:38,205 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:38,205 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,205 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,205 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,205 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,206 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:38,206 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:38,206 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:38,206 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,305 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:38,306 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,306 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(13), np.int64(10)))
2025-04-11 17:36:38,314 [INFO] Final candidates: []
2025-04-11 17:36:38,314 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:38,320 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:38,320 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:38,321 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,321 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,321 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,321 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,321 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:38,321 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:38,321 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:38,321 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:38,322 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,322 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,322 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,322 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,322 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:38,322 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:38,322 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:38,322 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,360 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:38,360 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,360 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(15)), (np.int64(2), np.int64(14)))
2025-04-11 17:36:38,363 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:38,363 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:38,363 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 15), (8, 15)]
2025-04-11 17:36:38,363 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:38,368 [INFO] Final candidates: [(7, 15), (8, 15)]
2025-04-11 17:36:38,368 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (8, 15))]
2025-04-11 17:36:38,368 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:38,375 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:38,375 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:38,375 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,375 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,375 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,375 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,376 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:38,376 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:38,376 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:38,376 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:38,376 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,376 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,376 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,376 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,376 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:38,377 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:38,377 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:38,377 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,649 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:38,649 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,649 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(10)), (np.int64(2), np.int64(18)))
2025-04-11 17:36:38,657 [INFO] Final candidates: []
2025-04-11 17:36:38,657 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:38,664 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,664 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,664 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,665 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,665 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,665 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,665 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,666 [INFO] Final candidates: [(11, 9), (7, 13)]
2025-04-11 17:36:38,666 [INFO] Phase defense: Collected 1unique candidate(s):[((11, 9), (7, 13))]
2025-04-11 17:36:38,666 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:38,666 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,666 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:38,667 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,667 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(7), np.int64(15)))
2025-04-11 17:36:38,670 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:38,670 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:38,670 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (8, 15)]
2025-04-11 17:36:38,670 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:38,670 [DEBUG] board coords: [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)]
2025-04-11 17:36:38,670 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:36:38,670 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:36:38,670 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:38,675 [INFO] Final candidates: [(8, 15), (6, 15), (12, 15)]
2025-04-11 17:36:38,675 [INFO] Phase win: Collected 3unique candidate(s):[((8, 15), (12, 15)), ((6, 15), (12, 15)), ((8, 15), (6, 15))]
2025-04-11 17:36:38,675 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:36:38,681 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:38,682 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:38,682 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,682 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,682 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,682 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,683 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:38,683 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:38,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:38,683 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:38,683 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,683 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,683 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,683 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:38,683 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:38,683 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:38,683 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,892 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:38,892 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,892 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(10)), (np.int64(14), np.int64(11)))
2025-04-11 17:36:38,900 [INFO] Final candidates: []
2025-04-11 17:36:38,900 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:38,906 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:38,906 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:38,907 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,907 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,907 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,907 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,908 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:38,908 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:38,908 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:38,908 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:38,908 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,908 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,908 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,908 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,909 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:38,909 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:38,909 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:38,909 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:38,968 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:38,968 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:38,968 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(14), np.int64(11)))
2025-04-11 17:36:38,977 [INFO] Final candidates: []
2025-04-11 17:36:38,977 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:38,983 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:38,983 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:38,984 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,984 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,984 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,984 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,984 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:38,984 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:38,984 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:38,984 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:38,985 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:38,985 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:38,985 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:38,985 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:38,985 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:38,985 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:38,985 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:38,985 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,051 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,051 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,051 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(9)), (np.int64(10), np.int64(11)))
2025-04-11 17:36:39,059 [INFO] Final candidates: []
2025-04-11 17:36:39,059 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,066 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,066 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,066 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,066 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,066 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,066 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,067 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,067 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,067 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,067 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,067 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,067 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,067 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,067 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,068 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,068 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,068 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,068 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,245 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:39,245 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,246 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(12), np.int64(13)))
2025-04-11 17:36:39,254 [INFO] Final candidates: []
2025-04-11 17:36:39,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,260 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,260 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,261 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,261 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,261 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,261 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,261 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,261 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,261 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,261 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,262 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,262 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,262 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,262 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,262 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,262 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,262 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,262 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,295 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,296 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(8), np.int64(6)))
2025-04-11 17:36:39,303 [INFO] Final candidates: []
2025-04-11 17:36:39,303 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,310 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,310 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,310 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,310 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,310 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,311 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,311 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,311 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,311 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,311 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,311 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,312 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,312 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,312 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,470 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,470 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,471 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(12)), (np.int64(7), np.int64(15)))
2025-04-11 17:36:39,474 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:39,474 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:39,474 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (8, 15)]
2025-04-11 17:36:39,474 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:39,474 [DEBUG] board coords: [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)]
2025-04-11 17:36:39,474 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:36:39,474 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:36:39,474 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:39,479 [INFO] Final candidates: [(8, 15), (6, 15), (12, 15)]
2025-04-11 17:36:39,479 [INFO] Phase win: Collected 3unique candidate(s):[((8, 15), (12, 15)), ((6, 15), (12, 15)), ((8, 15), (6, 15))]
2025-04-11 17:36:39,479 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:36:39,486 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,486 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,486 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,486 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,486 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,486 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,487 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,487 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,487 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,487 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,487 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,487 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,487 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,487 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,488 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,488 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,488 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,488 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,546 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:39,546 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,547 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(14)), (np.int64(3), np.int64(16)))
2025-04-11 17:36:39,555 [INFO] Final candidates: []
2025-04-11 17:36:39,555 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,562 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,562 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,562 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,562 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,562 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,562 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,563 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,563 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,563 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,563 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,563 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,563 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,563 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,563 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,564 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,564 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,564 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,564 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,688 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,688 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,688 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(14)), (np.int64(14), np.int64(12)))
2025-04-11 17:36:39,697 [INFO] Final candidates: []
2025-04-11 17:36:39,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,703 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,703 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,703 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,704 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,704 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,704 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,704 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,704 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,705 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,705 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,705 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,705 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,705 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,705 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,705 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,707 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,708 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,708 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(5), np.int64(16)))
2025-04-11 17:36:39,716 [INFO] Final candidates: []
2025-04-11 17:36:39,716 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,722 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,722 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,722 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,722 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,722 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,722 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,723 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,723 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,723 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,723 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,723 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,723 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,724 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,724 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,724 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,724 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,724 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,749 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,749 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,749 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(8), np.int64(15)))
2025-04-11 17:36:39,752 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:39,752 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:39,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:36:39,752 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:39,752 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:39,752 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,752 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:36:39,752 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:36:39,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:36:39,752 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:36:39,757 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:36:39,757 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:36:39,757 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:39,765 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,765 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,765 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,765 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,765 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,766 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,766 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,766 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,766 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,766 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,767 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,767 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,767 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,767 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,767 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,767 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,767 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,833 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,833 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,834 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(10), np.int64(16)))
2025-04-11 17:36:39,842 [INFO] Final candidates: []
2025-04-11 17:36:39,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,849 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,849 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,849 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,849 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,849 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,849 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,850 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,850 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,850 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,850 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,850 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,850 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,850 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,850 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,851 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,851 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,851 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,903 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:39,904 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,904 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(11), np.int64(17)))
2025-04-11 17:36:39,912 [INFO] Final candidates: []
2025-04-11 17:36:39,912 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,919 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,919 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,919 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,919 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,919 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,919 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,920 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,920 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,920 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,920 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,920 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,920 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,920 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,920 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,921 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,921 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,921 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,921 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:39,967 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:39,967 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:39,967 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(5), np.int64(17)))
2025-04-11 17:36:39,976 [INFO] Final candidates: []
2025-04-11 17:36:39,976 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:39,982 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:39,982 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:39,982 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,982 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,982 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,983 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,983 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:39,983 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:39,983 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:39,983 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:39,984 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:39,984 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:39,984 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:39,984 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:39,984 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:39,984 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:39,984 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:39,984 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,128 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:40,128 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,128 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(8), np.int64(7)))
2025-04-11 17:36:40,136 [INFO] Final candidates: []
2025-04-11 17:36:40,136 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,142 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,143 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,143 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,143 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,143 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,143 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,144 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,144 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,144 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,144 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,144 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,144 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,144 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,144 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,144 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,144 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,144 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,145 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,240 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:40,241 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,241 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(10), np.int64(8)))
2025-04-11 17:36:40,249 [INFO] Final candidates: []
2025-04-11 17:36:40,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,256 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,256 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,256 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,256 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,256 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,256 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,257 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,257 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,257 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,257 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,257 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,257 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,257 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,257 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,258 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,258 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,258 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,258 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,306 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:40,306 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,306 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(3), np.int64(16)))
2025-04-11 17:36:40,314 [INFO] Final candidates: []
2025-04-11 17:36:40,315 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,321 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,321 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,321 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,321 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,321 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,321 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,322 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,322 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,322 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,322 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,322 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,322 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,323 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,323 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,323 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,323 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,323 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,323 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,460 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:40,460 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,460 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(6)))
2025-04-11 17:36:40,468 [INFO] Final candidates: []
2025-04-11 17:36:40,468 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,475 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,475 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,475 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,475 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,475 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,475 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,476 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,476 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,476 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,476 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,476 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,476 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,476 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,476 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,477 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,477 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,477 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,637 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:40,637 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,637 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(14)), (np.int64(10), np.int64(16)))
2025-04-11 17:36:40,645 [INFO] Final candidates: []
2025-04-11 17:36:40,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,652 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,652 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,652 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,652 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,652 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,652 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,653 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,653 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,653 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,653 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,653 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,653 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,653 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,654 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,654 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,654 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,654 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,743 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:40,744 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,744 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(0), np.int64(13)))
2025-04-11 17:36:40,753 [INFO] Final candidates: []
2025-04-11 17:36:40,753 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,760 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,760 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,760 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,760 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,760 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,760 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,761 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,761 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,761 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,761 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,761 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,761 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,761 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,761 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,761 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,761 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,762 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,762 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,764 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:40,764 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,764 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(12), np.int64(16)))
2025-04-11 17:36:40,772 [INFO] Final candidates: []
2025-04-11 17:36:40,772 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,778 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,778 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,779 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,779 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,779 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,779 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,779 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,779 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,779 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,780 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,780 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,780 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,780 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,780 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,780 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,780 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,780 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,932 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:40,932 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,933 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(13)), (np.int64(6), np.int64(9)))
2025-04-11 17:36:40,941 [INFO] Final candidates: []
2025-04-11 17:36:40,941 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:40,947 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:40,947 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:40,948 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,948 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,948 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,948 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,948 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:40,948 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:40,948 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:40,948 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:40,949 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:40,949 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:40,949 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:40,949 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:40,949 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:40,949 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:40,949 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:40,949 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:40,986 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:40,986 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:40,986 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(13)), (np.int64(15), np.int64(12)))
2025-04-11 17:36:40,994 [INFO] Final candidates: []
2025-04-11 17:36:40,994 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:41,001 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:41,001 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,001 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,001 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,001 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,002 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:41,002 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:41,002 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:41,002 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:41,002 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,002 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,002 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,002 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,003 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:41,003 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:41,003 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:41,003 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:41,152 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:41,152 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:41,152 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(14)), (np.int64(5), np.int64(17)))
2025-04-11 17:36:41,160 [INFO] Final candidates: []
2025-04-11 17:36:41,161 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:41,168 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:41,168 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,168 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,168 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,168 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,169 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:41,169 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:41,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:41,169 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:41,169 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,169 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,169 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,170 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:41,170 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:41,170 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:41,170 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:41,297 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:41,297 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:41,297 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(12)), (np.int64(8), np.int64(10)))
2025-04-11 17:36:41,306 [INFO] Final candidates: []
2025-04-11 17:36:41,306 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:41,312 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:41,312 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,313 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,313 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,313 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,313 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,313 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:41,313 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:41,313 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:41,314 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:41,314 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,314 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,314 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,314 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,314 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:41,314 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:41,314 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:41,314 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:41,477 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:41,477 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:41,477 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(2), np.int64(16)))
2025-04-11 17:36:41,480 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:41,480 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:41,480 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:36:41,480 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:41,480 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:41,481 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,481 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:36:41,481 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:36:41,481 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:36:41,481 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:36:41,486 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:36:41,486 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:36:41,486 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:41,492 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:41,492 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,492 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,492 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,493 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,493 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,493 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:41,493 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:41,493 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:41,493 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:41,494 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,494 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,494 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,494 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,494 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:41,494 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:41,494 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:41,494 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:41,673 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:41,673 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:41,673 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(11), np.int64(9)))
2025-04-11 17:36:41,681 [INFO] Final candidates: []
2025-04-11 17:36:41,681 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:41,688 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:41,688 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,689 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:41,689 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:41,689 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:41,689 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:41,690 [INFO] Final candidates: [(7, 13), (2, 18)]
2025-04-11 17:36:41,690 [INFO] Phase defense: Collected 1unique candidate(s):[((7, 13), (2, 18))]
2025-04-11 17:36:41,690 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:36:41,690 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:41,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:41,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:41,700 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(14)), (np.int64(8), np.int64(15)))
2025-04-11 17:36:41,703 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:41,703 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:41,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:36:41,703 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:41,703 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:41,703 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,703 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:36:41,703 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:36:41,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:36:41,703 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:36:41,708 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:36:41,708 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:36:41,708 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:41,715 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:41,715 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,716 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,716 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,716 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,716 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,717 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:41,717 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:41,717 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:41,717 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:41,717 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,717 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,717 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,717 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,717 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:41,718 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:41,718 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:41,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:41,875 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:41,875 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:36:41,876 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(11)), (np.int64(3), np.int64(18)))
2025-04-11 17:36:41,884 [INFO] Final candidates: []
2025-04-11 17:36:41,884 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:41,890 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13)] triggers candidate.
2025-04-11 17:36:41,890 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:41,891 [DEBUG] board coords: [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,891 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,891 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,891 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,891 [DEBUG] board coords: [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)]
2025-04-11 17:36:41,891 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:36:41,891 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 18), (7, 13)]
2025-04-11 17:36:41,891 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 18), (3, 17), (4, 16), (5, 15), (6, 14), (7, 13), (8, 12)] triggers candidate.
2025-04-11 17:36:41,892 [DEBUG] board coords: [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)]
2025-04-11 17:36:41,892 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:36:41,892 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 13), (11, 9)]
2025-04-11 17:36:41,892 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(5, 15), (6, 14), (7, 13), (8, 12), (9, 11), (10, 10), (11, 9)] triggers candidate.
2025-04-11 17:36:41,892 [INFO] Final candidates: [(11, 9), (7, 13), (2, 18)]
2025-04-11 17:36:41,893 [INFO] Phase defense: Collected 3unique candidate(s):[((7, 13), (2, 18)), ((11, 9), (7, 13)), ((11, 9), (2, 18))]
2025-04-11 17:36:41,893 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:36:41,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:41,941 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:41,941 [INFO] MCTS: Search finished. Best move selected with 2 visits.
2025-04-11 17:36:41,941 [INFO] MCTS (defense candidates) selected move: L11,O8
2025-04-11 17:36:55,964 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:36:55,972 [INFO] Final candidates: []
2025-04-11 17:36:55,972 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:55,980 [INFO] Final candidates: []
2025-04-11 17:36:55,980 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:55,980 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:36:55,981 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:36:55,981 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(12), np.int64(10)))
2025-04-11 17:36:55,989 [INFO] Final candidates: []
2025-04-11 17:36:55,989 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:55,997 [INFO] Final candidates: []
2025-04-11 17:36:55,997 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:55,998 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:36:55,998 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:56,077 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:56,078 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(1), np.int64(12)))
2025-04-11 17:36:56,085 [INFO] Final candidates: []
2025-04-11 17:36:56,085 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,093 [INFO] Final candidates: []
2025-04-11 17:36:56,093 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,094 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:56,137 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:56,138 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(10), np.int64(17)))
2025-04-11 17:36:56,146 [INFO] Final candidates: []
2025-04-11 17:36:56,146 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,153 [INFO] Final candidates: []
2025-04-11 17:36:56,153 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,154 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:56,371 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:56,371 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(3), np.int64(2)))
2025-04-11 17:36:56,379 [INFO] Final candidates: []
2025-04-11 17:36:56,379 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,387 [INFO] Final candidates: []
2025-04-11 17:36:56,387 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,388 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:56,570 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:56,570 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(6)), (np.int64(5), np.int64(17)))
2025-04-11 17:36:56,578 [INFO] Final candidates: []
2025-04-11 17:36:56,578 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,586 [INFO] Final candidates: []
2025-04-11 17:36:56,586 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,586 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:56,685 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:56,685 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(2)), (np.int64(7), np.int64(8)))
2025-04-11 17:36:56,693 [INFO] Final candidates: []
2025-04-11 17:36:56,693 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,701 [INFO] Final candidates: []
2025-04-11 17:36:56,701 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,702 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:56,961 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:56,961 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(4), np.int64(3)))
2025-04-11 17:36:56,969 [INFO] Final candidates: []
2025-04-11 17:36:56,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,977 [INFO] Final candidates: []
2025-04-11 17:36:56,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:56,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:57,172 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:57,172 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(11)))
2025-04-11 17:36:57,180 [INFO] Final candidates: []
2025-04-11 17:36:57,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,188 [INFO] Final candidates: []
2025-04-11 17:36:57,188 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,189 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:57,340 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:57,340 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(12), np.int64(16)))
2025-04-11 17:36:57,348 [INFO] Final candidates: []
2025-04-11 17:36:57,348 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,356 [INFO] Final candidates: []
2025-04-11 17:36:57,356 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,357 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:57,533 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:57,533 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(10), np.int64(17)))
2025-04-11 17:36:57,542 [INFO] Final candidates: []
2025-04-11 17:36:57,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,550 [INFO] Final candidates: []
2025-04-11 17:36:57,550 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,551 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:57,689 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:57,689 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(13)), (np.int64(4), np.int64(13)))
2025-04-11 17:36:57,697 [INFO] Final candidates: []
2025-04-11 17:36:57,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,705 [INFO] Final candidates: []
2025-04-11 17:36:57,705 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:57,763 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:57,764 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(3), np.int64(4)))
2025-04-11 17:36:57,772 [INFO] Final candidates: []
2025-04-11 17:36:57,772 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,780 [INFO] Final candidates: []
2025-04-11 17:36:57,780 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,781 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:57,806 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:57,806 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(8), np.int64(16)))
2025-04-11 17:36:57,809 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:57,809 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:57,809 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:36:57,810 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:57,810 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:57,810 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:36:57,810 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:36:57,810 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:36:57,810 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:36:57,810 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:36:57,815 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:36:57,815 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:36:57,815 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:57,823 [INFO] Final candidates: []
2025-04-11 17:36:57,823 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:57,823 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:58,054 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:58,055 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(5), np.int64(14)))
2025-04-11 17:36:58,063 [INFO] Final candidates: []
2025-04-11 17:36:58,063 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,070 [INFO] Final candidates: []
2025-04-11 17:36:58,070 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,071 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:58,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:58,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(1)), (np.int64(3), np.int64(16)))
2025-04-11 17:36:58,111 [INFO] Final candidates: []
2025-04-11 17:36:58,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,119 [INFO] Final candidates: []
2025-04-11 17:36:58,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:58,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:58,220 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(7), np.int64(15)))
2025-04-11 17:36:58,223 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:36:58,223 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:36:58,223 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (8, 15)]
2025-04-11 17:36:58,223 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:36:58,223 [DEBUG] board coords: [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)]
2025-04-11 17:36:58,223 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:36:58,223 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:36:58,223 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:36:58,228 [INFO] Final candidates: [(8, 15), (6, 15), (12, 15)]
2025-04-11 17:36:58,228 [INFO] Phase win: Collected 3unique candidate(s):[((8, 15), (12, 15)), ((6, 15), (12, 15)), ((8, 15), (6, 15))]
2025-04-11 17:36:58,228 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:36:58,236 [INFO] Final candidates: []
2025-04-11 17:36:58,236 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:58,464 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:58,465 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(10), np.int64(12)))
2025-04-11 17:36:58,465 [DEBUG] board coords: [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)]
2025-04-11 17:36:58,465 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:36:58,465 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (10, 13)]
2025-04-11 17:36:58,465 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)] triggers candidate.
2025-04-11 17:36:58,473 [INFO] Final candidates: [(10, 11), (10, 13)]
2025-04-11 17:36:58,473 [INFO] Phase win: Collected 1unique candidate(s):[((10, 11), (10, 13))]
2025-04-11 17:36:58,473 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:36:58,481 [INFO] Final candidates: []
2025-04-11 17:36:58,481 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,481 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:58,612 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:58,612 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(10), np.int64(9)))
2025-04-11 17:36:58,621 [INFO] Final candidates: []
2025-04-11 17:36:58,621 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,629 [INFO] Final candidates: []
2025-04-11 17:36:58,629 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,629 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:58,742 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:58,743 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(16)), (np.int64(6), np.int64(16)))
2025-04-11 17:36:58,751 [INFO] Final candidates: []
2025-04-11 17:36:58,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,758 [INFO] Final candidates: []
2025-04-11 17:36:58,758 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,762 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:58,934 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:58,934 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(5), np.int64(13)))
2025-04-11 17:36:58,943 [INFO] Final candidates: []
2025-04-11 17:36:58,943 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,950 [INFO] Final candidates: []
2025-04-11 17:36:58,950 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:58,951 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:59,181 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:59,181 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(12)))
2025-04-11 17:36:59,190 [INFO] Final candidates: []
2025-04-11 17:36:59,190 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,197 [INFO] Final candidates: []
2025-04-11 17:36:59,197 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,201 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:59,325 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:59,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(12)))
2025-04-11 17:36:59,333 [INFO] Final candidates: []
2025-04-11 17:36:59,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,341 [INFO] Final candidates: []
2025-04-11 17:36:59,341 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,342 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:59,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:59,562 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(16)), (np.int64(12), np.int64(11)))
2025-04-11 17:36:59,570 [INFO] Final candidates: []
2025-04-11 17:36:59,570 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,578 [INFO] Final candidates: []
2025-04-11 17:36:59,578 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,579 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:59,728 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:36:59,729 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(10)), (np.int64(11), np.int64(12)))
2025-04-11 17:36:59,737 [INFO] Final candidates: []
2025-04-11 17:36:59,737 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,744 [INFO] Final candidates: []
2025-04-11 17:36:59,744 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,745 [INFO] Default policy: Starting random playout.
2025-04-11 17:36:59,913 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:36:59,913 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(7), np.int64(11)))
2025-04-11 17:36:59,921 [INFO] Final candidates: []
2025-04-11 17:36:59,922 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,931 [INFO] Final candidates: []
2025-04-11 17:36:59,931 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:36:59,931 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,061 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:00,061 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(3), np.int64(4)))
2025-04-11 17:37:00,069 [INFO] Final candidates: []
2025-04-11 17:37:00,069 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,077 [INFO] Final candidates: []
2025-04-11 17:37:00,077 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,078 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,189 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:00,190 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(11), np.int64(7)))
2025-04-11 17:37:00,197 [INFO] Final candidates: []
2025-04-11 17:37:00,197 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,205 [INFO] Final candidates: []
2025-04-11 17:37:00,205 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,206 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,298 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:00,299 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(11), np.int64(8)))
2025-04-11 17:37:00,307 [INFO] Final candidates: []
2025-04-11 17:37:00,307 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,314 [INFO] Final candidates: []
2025-04-11 17:37:00,314 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,315 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,379 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:00,380 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(2), np.int64(3)))
2025-04-11 17:37:00,388 [INFO] Final candidates: []
2025-04-11 17:37:00,388 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,396 [INFO] Final candidates: []
2025-04-11 17:37:00,397 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,397 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,531 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:00,531 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(11), np.int64(8)))
2025-04-11 17:37:00,539 [INFO] Final candidates: []
2025-04-11 17:37:00,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,547 [INFO] Final candidates: []
2025-04-11 17:37:00,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,547 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,654 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:00,654 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(8), np.int64(8)))
2025-04-11 17:37:00,662 [INFO] Final candidates: []
2025-04-11 17:37:00,662 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,670 [INFO] Final candidates: []
2025-04-11 17:37:00,670 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,671 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,759 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:00,759 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(12), np.int64(16)))
2025-04-11 17:37:00,767 [INFO] Final candidates: []
2025-04-11 17:37:00,767 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,775 [INFO] Final candidates: []
2025-04-11 17:37:00,775 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,776 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,882 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:00,882 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(2), np.int64(4)))
2025-04-11 17:37:00,890 [INFO] Final candidates: []
2025-04-11 17:37:00,890 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,898 [INFO] Final candidates: []
2025-04-11 17:37:00,898 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,899 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:00,956 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:00,956 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(12), np.int64(10)))
2025-04-11 17:37:00,964 [INFO] Final candidates: []
2025-04-11 17:37:00,964 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,972 [INFO] Final candidates: []
2025-04-11 17:37:00,972 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:00,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:01,143 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:01,143 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(11)))
2025-04-11 17:37:01,144 [DEBUG] board coords: [(10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14)]
2025-04-11 17:37:01,144 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:01,144 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (10, 13)]
2025-04-11 17:37:01,144 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14)] triggers candidate.
2025-04-11 17:37:01,144 [DEBUG] board coords: [(10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16)]
2025-04-11 17:37:01,144 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:37:01,144 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 13), (10, 16)]
2025-04-11 17:37:01,144 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16)] triggers candidate.
2025-04-11 17:37:01,145 [DEBUG] board coords: [(10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)]
2025-04-11 17:37:01,145 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:37:01,145 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (10, 13)]
2025-04-11 17:37:01,146 [DEBUG] check_window_intermediate_custom: For L=7, window [0 1 1 1 0 1 1] with coords [(10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)] triggers candidate.
2025-04-11 17:37:01,146 [DEBUG] board coords: [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16)]
2025-04-11 17:37:01,146 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:37:01,146 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 13), (10, 16)]
2025-04-11 17:37:01,146 [DEBUG] check_window_intermediate_custom: For L=7, window [1 1 1 0 1 1 0] with coords [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16)] triggers candidate.
2025-04-11 17:37:01,152 [INFO] Final candidates: [(10, 9), (10, 16), (10, 13)]
2025-04-11 17:37:01,152 [INFO] Phase win: Collected 3unique candidate(s):[((10, 16), (10, 13)), ((10, 9), (10, 16)), ((10, 9), (10, 13))]
2025-04-11 17:37:01,152 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:01,160 [INFO] Final candidates: []
2025-04-11 17:37:01,160 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:01,160 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:01,438 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:01,438 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(12)), (np.int64(0), np.int64(15)))
2025-04-11 17:37:01,447 [INFO] Final candidates: []
2025-04-11 17:37:01,447 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:01,455 [INFO] Final candidates: []
2025-04-11 17:37:01,455 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:01,455 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:01,620 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:01,620 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(12)), (np.int64(2), np.int64(16)))
2025-04-11 17:37:01,628 [INFO] Final candidates: []
2025-04-11 17:37:01,628 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:01,636 [INFO] Final candidates: []
2025-04-11 17:37:01,636 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:01,637 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:01,838 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:01,838 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(3), np.int64(11)))
2025-04-11 17:37:01,842 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:37:01,842 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:37:01,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:37:01,842 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:37:01,842 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:37:01,842 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:01,842 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:37:01,842 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:37:01,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:37:01,842 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:37:01,847 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:37:01,847 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:37:01,847 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:01,855 [INFO] Final candidates: []
2025-04-11 17:37:01,855 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:01,860 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:02,170 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:02,170 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:37:02,178 [INFO] Final candidates: []
2025-04-11 17:37:02,178 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,186 [INFO] Final candidates: []
2025-04-11 17:37:02,186 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:02,301 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:02,301 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(3), np.int64(12)))
2025-04-11 17:37:02,309 [INFO] Final candidates: []
2025-04-11 17:37:02,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,318 [INFO] Final candidates: []
2025-04-11 17:37:02,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:02,525 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:02,525 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(12)), (np.int64(0), np.int64(15)))
2025-04-11 17:37:02,533 [INFO] Final candidates: []
2025-04-11 17:37:02,533 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,541 [INFO] Final candidates: []
2025-04-11 17:37:02,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,542 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:02,789 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:02,790 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(4), np.int64(17)))
2025-04-11 17:37:02,798 [INFO] Final candidates: []
2025-04-11 17:37:02,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,806 [INFO] Final candidates: []
2025-04-11 17:37:02,806 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:02,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:03,178 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:03,179 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(4), np.int64(3)))
2025-04-11 17:37:03,186 [INFO] Final candidates: []
2025-04-11 17:37:03,187 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,194 [INFO] Final candidates: []
2025-04-11 17:37:03,194 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,195 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:03,330 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:03,330 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(3), np.int64(11)))
2025-04-11 17:37:03,339 [INFO] Final candidates: []
2025-04-11 17:37:03,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,346 [INFO] Final candidates: []
2025-04-11 17:37:03,346 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,347 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:03,463 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:03,464 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(7), np.int64(10)))
2025-04-11 17:37:03,471 [INFO] Final candidates: []
2025-04-11 17:37:03,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,482 [INFO] Final candidates: []
2025-04-11 17:37:03,482 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,483 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:03,728 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:03,728 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(8), np.int64(10)))
2025-04-11 17:37:03,736 [INFO] Final candidates: []
2025-04-11 17:37:03,736 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,744 [INFO] Final candidates: []
2025-04-11 17:37:03,744 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,745 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:03,953 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:03,953 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(4), np.int64(18)))
2025-04-11 17:37:03,962 [INFO] Final candidates: []
2025-04-11 17:37:03,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,969 [INFO] Final candidates: []
2025-04-11 17:37:03,969 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:03,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:04,037 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:04,037 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(15)), (np.int64(4), np.int64(14)))
2025-04-11 17:37:04,046 [INFO] Final candidates: []
2025-04-11 17:37:04,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,054 [INFO] Final candidates: []
2025-04-11 17:37:04,054 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:04,144 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:04,144 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(11), np.int64(17)))
2025-04-11 17:37:04,152 [INFO] Final candidates: []
2025-04-11 17:37:04,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,160 [INFO] Final candidates: []
2025-04-11 17:37:04,160 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,161 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:04,339 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:04,339 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(11)), (np.int64(7), np.int64(8)))
2025-04-11 17:37:04,348 [INFO] Final candidates: []
2025-04-11 17:37:04,348 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,355 [INFO] Final candidates: []
2025-04-11 17:37:04,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,356 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:04,548 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:04,549 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(7), np.int64(15)))
2025-04-11 17:37:04,552 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:37:04,552 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:37:04,552 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (8, 15)]
2025-04-11 17:37:04,553 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:37:04,553 [DEBUG] board coords: [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)]
2025-04-11 17:37:04,553 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:37:04,553 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:37:04,553 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:37:04,558 [INFO] Final candidates: [(8, 15), (6, 15), (12, 15)]
2025-04-11 17:37:04,558 [INFO] Phase win: Collected 3unique candidate(s):[((8, 15), (12, 15)), ((6, 15), (12, 15)), ((8, 15), (6, 15))]
2025-04-11 17:37:04,558 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:04,565 [INFO] Final candidates: []
2025-04-11 17:37:04,565 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,566 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:37:04,566 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:04,713 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:04,713 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(1)), (np.int64(13), np.int64(14)))
2025-04-11 17:37:04,721 [INFO] Final candidates: []
2025-04-11 17:37:04,721 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,729 [INFO] Final candidates: []
2025-04-11 17:37:04,729 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,730 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:04,785 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:04,785 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(4), np.int64(2)))
2025-04-11 17:37:04,793 [INFO] Final candidates: []
2025-04-11 17:37:04,793 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,801 [INFO] Final candidates: []
2025-04-11 17:37:04,801 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:04,802 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:05,016 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:05,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(13)), (np.int64(8), np.int64(14)))
2025-04-11 17:37:05,025 [INFO] Final candidates: []
2025-04-11 17:37:05,025 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,033 [INFO] Final candidates: []
2025-04-11 17:37:05,033 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,034 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:05,334 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:05,335 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(13), np.int64(15)))
2025-04-11 17:37:05,338 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:37:05,338 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:05,338 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:37:05,338 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:37:05,338 [DEBUG] board coords: [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)]
2025-04-11 17:37:05,338 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:37:05,338 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (14, 15)]
2025-04-11 17:37:05,338 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)] triggers candidate.
2025-04-11 17:37:05,343 [INFO] Final candidates: [(8, 15), (14, 15), (12, 15)]
2025-04-11 17:37:05,343 [INFO] Phase win: Collected 3unique candidate(s):[((14, 15), (12, 15)), ((8, 15), (14, 15)), ((8, 15), (12, 15))]
2025-04-11 17:37:05,343 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:05,350 [INFO] Final candidates: []
2025-04-11 17:37:05,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,351 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:05,568 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:05,568 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(3)), (np.int64(2), np.int64(16)))
2025-04-11 17:37:05,576 [INFO] Final candidates: []
2025-04-11 17:37:05,576 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,584 [INFO] Final candidates: []
2025-04-11 17:37:05,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,585 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:05,729 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:05,729 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(10), np.int64(13)))
2025-04-11 17:37:05,730 [DEBUG] board coords: [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)]
2025-04-11 17:37:05,730 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:37:05,730 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (10, 12)]
2025-04-11 17:37:05,730 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)] triggers candidate.
2025-04-11 17:37:05,737 [INFO] Final candidates: [(10, 11), (10, 12)]
2025-04-11 17:37:05,737 [INFO] Phase win: Collected 1unique candidate(s):[((10, 11), (10, 12))]
2025-04-11 17:37:05,737 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:05,745 [INFO] Final candidates: []
2025-04-11 17:37:05,745 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,745 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:05,895 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:05,895 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(4), np.int64(10)))
2025-04-11 17:37:05,903 [INFO] Final candidates: []
2025-04-11 17:37:05,903 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,912 [INFO] Final candidates: []
2025-04-11 17:37:05,912 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:05,912 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:06,016 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:06,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(11), np.int64(11)))
2025-04-11 17:37:06,026 [INFO] Final candidates: []
2025-04-11 17:37:06,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,034 [INFO] Final candidates: []
2025-04-11 17:37:06,034 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,034 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:06,259 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:06,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(10), np.int64(16)))
2025-04-11 17:37:06,267 [INFO] Final candidates: []
2025-04-11 17:37:06,268 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,275 [INFO] Final candidates: []
2025-04-11 17:37:06,275 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,276 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:06,416 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:06,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(6), np.int64(9)))
2025-04-11 17:37:06,424 [INFO] Final candidates: []
2025-04-11 17:37:06,424 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,432 [INFO] Final candidates: []
2025-04-11 17:37:06,432 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,433 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:06,521 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:06,521 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(10), np.int64(9)))
2025-04-11 17:37:06,529 [INFO] Final candidates: []
2025-04-11 17:37:06,529 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,537 [INFO] Final candidates: []
2025-04-11 17:37:06,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:06,584 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:06,585 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(11)), (np.int64(10), np.int64(11)))
2025-04-11 17:37:06,585 [DEBUG] board coords: [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)]
2025-04-11 17:37:06,585 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:37:06,585 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (10, 13)]
2025-04-11 17:37:06,585 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 0 1 1] with coords [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)] triggers candidate.
2025-04-11 17:37:06,593 [INFO] Final candidates: [(10, 12), (10, 13)]
2025-04-11 17:37:06,593 [INFO] Phase win: Collected 1unique candidate(s):[((10, 12), (10, 13))]
2025-04-11 17:37:06,593 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:06,601 [INFO] Final candidates: []
2025-04-11 17:37:06,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:06,686 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:06,686 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(2)), (np.int64(2), np.int64(12)))
2025-04-11 17:37:06,694 [INFO] Final candidates: []
2025-04-11 17:37:06,694 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,702 [INFO] Final candidates: []
2025-04-11 17:37:06,702 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,703 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:06,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:06,909 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(8), np.int64(16)))
2025-04-11 17:37:06,917 [INFO] Final candidates: []
2025-04-11 17:37:06,917 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,925 [INFO] Final candidates: []
2025-04-11 17:37:06,925 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:06,926 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,158 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:07,159 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(12)))
2025-04-11 17:37:07,166 [INFO] Final candidates: []
2025-04-11 17:37:07,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,174 [INFO] Final candidates: []
2025-04-11 17:37:07,174 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,257 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:07,257 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(11), np.int64(17)))
2025-04-11 17:37:07,265 [INFO] Final candidates: []
2025-04-11 17:37:07,265 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,273 [INFO] Final candidates: []
2025-04-11 17:37:07,273 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,274 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,335 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:07,336 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(6), np.int64(9)))
2025-04-11 17:37:07,344 [INFO] Final candidates: []
2025-04-11 17:37:07,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,352 [INFO] Final candidates: []
2025-04-11 17:37:07,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,450 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:07,451 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:37:07,459 [INFO] Final candidates: []
2025-04-11 17:37:07,459 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,467 [INFO] Final candidates: []
2025-04-11 17:37:07,467 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,467 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,620 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:07,621 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(12), np.int64(11)))
2025-04-11 17:37:07,629 [INFO] Final candidates: []
2025-04-11 17:37:07,629 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,637 [INFO] Final candidates: []
2025-04-11 17:37:07,637 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,637 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:07,701 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(3)), (np.int64(5), np.int64(13)))
2025-04-11 17:37:07,709 [INFO] Final candidates: []
2025-04-11 17:37:07,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,716 [INFO] Final candidates: []
2025-04-11 17:37:07,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,783 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:07,783 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(12), np.int64(12)))
2025-04-11 17:37:07,784 [DEBUG] board coords: [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)]
2025-04-11 17:37:07,784 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:37:07,784 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (10, 13)]
2025-04-11 17:37:07,784 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15)] triggers candidate.
2025-04-11 17:37:07,792 [INFO] Final candidates: [(10, 11), (10, 13)]
2025-04-11 17:37:07,792 [INFO] Phase win: Collected 1unique candidate(s):[((10, 11), (10, 13))]
2025-04-11 17:37:07,792 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:07,799 [INFO] Final candidates: []
2025-04-11 17:37:07,799 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,800 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:07,817 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:07,817 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(8), np.int64(6)))
2025-04-11 17:37:07,827 [INFO] Final candidates: []
2025-04-11 17:37:07,827 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,834 [INFO] Final candidates: []
2025-04-11 17:37:07,834 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:07,835 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:08,007 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:08,007 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(12), np.int64(11)))
2025-04-11 17:37:08,015 [INFO] Final candidates: []
2025-04-11 17:37:08,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,023 [INFO] Final candidates: []
2025-04-11 17:37:08,023 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,024 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:08,285 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:08,285 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(4), np.int64(18)))
2025-04-11 17:37:08,293 [INFO] Final candidates: []
2025-04-11 17:37:08,293 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,301 [INFO] Final candidates: []
2025-04-11 17:37:08,301 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:08,433 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:08,434 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(3), np.int64(1)))
2025-04-11 17:37:08,442 [INFO] Final candidates: []
2025-04-11 17:37:08,442 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,450 [INFO] Final candidates: []
2025-04-11 17:37:08,450 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,450 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:08,508 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:08,508 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(12), np.int64(14)))
2025-04-11 17:37:08,516 [INFO] Final candidates: []
2025-04-11 17:37:08,516 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,524 [INFO] Final candidates: []
2025-04-11 17:37:08,524 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,525 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:08,589 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:08,589 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(10), np.int64(17)))
2025-04-11 17:37:08,597 [INFO] Final candidates: []
2025-04-11 17:37:08,597 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,605 [INFO] Final candidates: []
2025-04-11 17:37:08,605 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,605 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:08,689 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:08,689 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(6), np.int64(13)))
2025-04-11 17:37:08,697 [INFO] Final candidates: []
2025-04-11 17:37:08,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,705 [INFO] Final candidates: []
2025-04-11 17:37:08,705 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:08,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:08,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(16)), (np.int64(6), np.int64(10)))
2025-04-11 17:37:08,878 [INFO] Final candidates: []
2025-04-11 17:37:08,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,886 [INFO] Final candidates: []
2025-04-11 17:37:08,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:08,887 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:09,008 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:09,008 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(15)))
2025-04-11 17:37:09,011 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:37:09,011 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:37:09,011 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (8, 15)]
2025-04-11 17:37:09,012 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:37:09,012 [DEBUG] board coords: [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)]
2025-04-11 17:37:09,012 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:37:09,012 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:37:09,012 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:37:09,017 [INFO] Final candidates: [(8, 15), (6, 15), (12, 15)]
2025-04-11 17:37:09,017 [INFO] Phase win: Collected 3unique candidate(s):[((8, 15), (12, 15)), ((6, 15), (12, 15)), ((8, 15), (6, 15))]
2025-04-11 17:37:09,017 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:09,025 [INFO] Final candidates: []
2025-04-11 17:37:09,025 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,031 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:09,119 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:09,119 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(12)), (np.int64(13), np.int64(13)))
2025-04-11 17:37:09,127 [INFO] Final candidates: []
2025-04-11 17:37:09,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,136 [INFO] Final candidates: []
2025-04-11 17:37:09,136 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,137 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:09,245 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:09,245 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(12)), (np.int64(2), np.int64(14)))
2025-04-11 17:37:09,253 [INFO] Final candidates: []
2025-04-11 17:37:09,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,262 [INFO] Final candidates: []
2025-04-11 17:37:09,263 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,263 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:09,355 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:09,355 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(4), np.int64(3)))
2025-04-11 17:37:09,363 [INFO] Final candidates: []
2025-04-11 17:37:09,363 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,371 [INFO] Final candidates: []
2025-04-11 17:37:09,371 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:09,585 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:09,585 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(10), np.int64(9)))
2025-04-11 17:37:09,593 [INFO] Final candidates: []
2025-04-11 17:37:09,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,601 [INFO] Final candidates: []
2025-04-11 17:37:09,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,602 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:09,873 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:09,874 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(13)), (np.int64(8), np.int64(14)))
2025-04-11 17:37:09,882 [INFO] Final candidates: []
2025-04-11 17:37:09,882 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,890 [INFO] Final candidates: []
2025-04-11 17:37:09,890 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,890 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:09,926 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:09,926 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(13), np.int64(14)))
2025-04-11 17:37:09,934 [INFO] Final candidates: []
2025-04-11 17:37:09,934 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,942 [INFO] Final candidates: []
2025-04-11 17:37:09,942 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:09,943 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:10,093 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:10,093 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(4), np.int64(4)))
2025-04-11 17:37:10,101 [INFO] Final candidates: []
2025-04-11 17:37:10,101 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,109 [INFO] Final candidates: []
2025-04-11 17:37:10,109 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,110 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:10,170 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:10,170 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(10), np.int64(16)))
2025-04-11 17:37:10,173 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:37:10,173 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:37:10,173 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (7, 15)]
2025-04-11 17:37:10,173 [DEBUG] check_window_intermediate_custom (only one inserted(7, 15)): For L=6, window [0 0 1 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:37:10,173 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:37:10,173 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:10,173 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:37:10,173 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:37:10,173 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (13, 15)]
2025-04-11 17:37:10,173 [DEBUG] check_window_intermediate_custom (only one inserted(12, 15)): For L=6, window [1 1 1 1 0 0] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:37:10,178 [INFO] Final candidates: [(7, 15), (12, 15)]
2025-04-11 17:37:10,178 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (12, 15))]
2025-04-11 17:37:10,178 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:10,186 [INFO] Final candidates: []
2025-04-11 17:37:10,186 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:10,275 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:10,276 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(15)), (np.int64(11), np.int64(8)))
2025-04-11 17:37:10,279 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:37:10,279 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:37:10,279 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 15), (8, 15)]
2025-04-11 17:37:10,279 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:37:10,284 [INFO] Final candidates: [(7, 15), (8, 15)]
2025-04-11 17:37:10,284 [INFO] Phase win: Collected 1unique candidate(s):[((7, 15), (8, 15))]
2025-04-11 17:37:10,284 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:10,292 [INFO] Final candidates: []
2025-04-11 17:37:10,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:10,456 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:10,456 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(11), np.int64(11)))
2025-04-11 17:37:10,464 [INFO] Final candidates: []
2025-04-11 17:37:10,464 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,472 [INFO] Final candidates: []
2025-04-11 17:37:10,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:10,600 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:10,600 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(13)), (np.int64(9), np.int64(5)))
2025-04-11 17:37:10,608 [INFO] Final candidates: []
2025-04-11 17:37:10,608 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,616 [INFO] Final candidates: []
2025-04-11 17:37:10,616 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,617 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:10,744 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:10,744 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(13), np.int64(11)))
2025-04-11 17:37:10,752 [INFO] Final candidates: []
2025-04-11 17:37:10,752 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,760 [INFO] Final candidates: []
2025-04-11 17:37:10,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:10,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:10,997 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:10,997 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(6), np.int64(8)))
2025-04-11 17:37:11,005 [INFO] Final candidates: []
2025-04-11 17:37:11,005 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,013 [INFO] Final candidates: []
2025-04-11 17:37:11,013 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,014 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:11,172 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:11,172 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(2), np.int64(14)))
2025-04-11 17:37:11,180 [INFO] Final candidates: []
2025-04-11 17:37:11,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,188 [INFO] Final candidates: []
2025-04-11 17:37:11,188 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,189 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:11,411 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:11,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(12)), (np.int64(3), np.int64(14)))
2025-04-11 17:37:11,420 [INFO] Final candidates: []
2025-04-11 17:37:11,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,428 [INFO] Final candidates: []
2025-04-11 17:37:11,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:11,499 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:11,499 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(13), np.int64(15)))
2025-04-11 17:37:11,503 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:37:11,503 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:11,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:37:11,503 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:37:11,503 [DEBUG] board coords: [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)]
2025-04-11 17:37:11,503 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:37:11,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (14, 15)]
2025-04-11 17:37:11,503 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)] triggers candidate.
2025-04-11 17:37:11,508 [INFO] Final candidates: [(8, 15), (14, 15), (12, 15)]
2025-04-11 17:37:11,508 [INFO] Phase win: Collected 3unique candidate(s):[((14, 15), (12, 15)), ((8, 15), (14, 15)), ((8, 15), (12, 15))]
2025-04-11 17:37:11,508 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:11,516 [INFO] Final candidates: []
2025-04-11 17:37:11,516 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,516 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:11,829 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:11,829 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(1)), (np.int64(2), np.int64(3)))
2025-04-11 17:37:11,837 [INFO] Final candidates: []
2025-04-11 17:37:11,837 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,845 [INFO] Final candidates: []
2025-04-11 17:37:11,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:11,845 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:12,026 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:12,026 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(13)), (np.int64(3), np.int64(4)))
2025-04-11 17:37:12,034 [INFO] Final candidates: []
2025-04-11 17:37:12,034 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:12,042 [INFO] Final candidates: []
2025-04-11 17:37:12,042 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:12,043 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:12,199 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:12,199 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:37:12,207 [INFO] Final candidates: []
2025-04-11 17:37:12,207 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:12,215 [INFO] Final candidates: []
2025-04-11 17:37:12,215 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:12,215 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:12,302 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:12,303 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:37:12,303 [INFO] MCTS selected move: H12,L13
2025-04-11 17:37:12,303 [INFO] ===============NEW MOVE================
2025-04-11 17:37:20,235 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:37:20,243 [INFO] Final candidates: []
2025-04-11 17:37:20,243 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,246 [DEBUG] board coords: [(3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,246 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,246 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (5, 12)]
2025-04-11 17:37:20,246 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,246 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12)] triggers candidate.
2025-04-11 17:37:20,246 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:20,246 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)]
2025-04-11 17:37:20,246 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,246 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (11, 12)]
2025-04-11 17:37:20,246 [DEBUG] check_window_intermediate_custom (only one inserted(10, 12)): For L=6, window [2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,248 [DEBUG] board coords: [(3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12), (9, 12)]
2025-04-11 17:37:20,248 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,248 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (5, 12)]
2025-04-11 17:37:20,248 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 0 2 2 2 2] with coords [(3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12), (9, 12)] triggers candidate.
2025-04-11 17:37:20,248 [DEBUG] board coords: [(4, 12), (5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12)]
2025-04-11 17:37:20,248 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:37:20,248 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 12), (10, 12)]
2025-04-11 17:37:20,248 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 2 2 0] with coords [(4, 12), (5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12)] triggers candidate.
2025-04-11 17:37:20,252 [INFO] Final candidates: [(3, 12), (10, 12), (5, 12)]
2025-04-11 17:37:20,252 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 12), (10, 12)), ((3, 12), (5, 12)), ((10, 12), (5, 12))]
2025-04-11 17:37:20,252 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:37:20,252 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:37:20,252 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 12), (10, 12))
2025-04-11 17:37:20,255 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,255 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,255 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,255 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,255 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,255 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,255 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,255 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,255 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,255 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,255 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,255 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,256 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,256 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,256 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,256 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,256 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,256 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:20,256 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,256 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,256 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,256 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,257 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,257 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,257 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,257 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,260 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:20,260 [INFO] Phase win: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:20,260 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 17:37:20,268 [INFO] Final candidates: []
2025-04-11 17:37:20,268 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,269 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:37:20,269 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:20,385 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:20,385 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 12), (5, 12))
2025-04-11 17:37:20,388 [DEBUG] board coords: [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12)]
2025-04-11 17:37:20,388 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 12), (2, 12)]
2025-04-11 17:37:20,388 [DEBUG] check_window_intermediate_custom (only one inserted(2, 12)): For L=6, window [0 0 2 2 2 2] with coords [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12)] triggers candidate.
2025-04-11 17:37:20,388 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)]
2025-04-11 17:37:20,388 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (11, 12)]
2025-04-11 17:37:20,389 [DEBUG] check_window_intermediate_custom (only one inserted(10, 12)): For L=6, window [2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,390 [DEBUG] board coords: [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,390 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,390 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 12), (2, 12)]
2025-04-11 17:37:20,390 [DEBUG] check_window_intermediate_custom (only one inserted(2, 12)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,390 [DEBUG] board coords: [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)]
2025-04-11 17:37:20,390 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,390 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 12), (11, 12)]
2025-04-11 17:37:20,390 [DEBUG] check_window_intermediate_custom (only one inserted(10, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,394 [INFO] Final candidates: [(10, 12), (2, 12)]
2025-04-11 17:37:20,394 [INFO] Phase win: Collected 1unique candidate(s):[((10, 12), (2, 12))]
2025-04-11 17:37:20,394 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:20,401 [INFO] Final candidates: []
2025-04-11 17:37:20,401 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:20,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:20,402 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 12), (5, 12))
2025-04-11 17:37:20,405 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,405 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,405 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (3, 12)]
2025-04-11 17:37:20,405 [DEBUG] check_window_intermediate_custom (only one inserted(3, 12)): For L=6, window [0 0 2 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,406 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,406 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,406 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,406 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,406 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,406 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,406 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,406 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,407 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,407 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,407 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (3, 12)]
2025-04-11 17:37:20,407 [DEBUG] check_window_intermediate_custom (only one inserted(3, 12)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,407 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,407 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,407 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,407 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,407 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,407 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,407 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,407 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,411 [INFO] Final candidates: [(3, 12), (12, 12), (11, 12)]
2025-04-11 17:37:20,411 [INFO] Phase win: Collected 3unique candidate(s):[((3, 12), (12, 12)), ((12, 12), (11, 12)), ((3, 12), (11, 12))]
2025-04-11 17:37:20,411 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:20,419 [INFO] Final candidates: []
2025-04-11 17:37:20,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,420 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:20,420 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:20,420 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:20,420 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(3), np.int64(4)))
2025-04-11 17:37:20,427 [INFO] Final candidates: []
2025-04-11 17:37:20,427 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,430 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,430 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,430 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,430 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,430 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,430 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,430 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,430 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,430 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,430 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,430 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,430 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,431 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,431 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,431 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,431 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,432 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,432 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:20,432 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,432 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,432 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,432 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,432 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,432 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,432 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,432 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,435 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:20,435 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:20,435 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:20,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:20,639 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:20,639 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:20,639 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 17:37:20,642 [DEBUG] board coords: [(8, 10), (9, 10), (10, 10), (11, 10), (12, 10), (13, 10)]
2025-04-11 17:37:20,642 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:37:20,642 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 10), (11, 10)]
2025-04-11 17:37:20,642 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(8, 10), (9, 10), (10, 10), (11, 10), (12, 10), (13, 10)] triggers candidate.
2025-04-11 17:37:20,642 [DEBUG] board coords: [(9, 10), (10, 10), (11, 10), (12, 10), (13, 10), (14, 10)]
2025-04-11 17:37:20,642 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:37:20,642 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (14, 10)]
2025-04-11 17:37:20,642 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(9, 10), (10, 10), (11, 10), (12, 10), (13, 10), (14, 10)] triggers candidate.
2025-04-11 17:37:20,647 [INFO] Final candidates: [(8, 10), (11, 10), (14, 10)]
2025-04-11 17:37:20,647 [INFO] Phase win: Collected 3unique candidate(s):[((11, 10), (14, 10)), ((8, 10), (11, 10)), ((8, 10), (14, 10))]
2025-04-11 17:37:20,647 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:20,650 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,650 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,650 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,650 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,650 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,650 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,650 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,650 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,650 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,650 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,650 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,650 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,651 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,651 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,651 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,651 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,651 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:20,651 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,651 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,651 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,651 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,651 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,651 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,655 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:20,655 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:20,655 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:20,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:20,854 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:20,854 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:20,855 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(12), np.int64(8)))
2025-04-11 17:37:20,862 [INFO] Final candidates: []
2025-04-11 17:37:20,862 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,865 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,865 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,865 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,865 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,865 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,865 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,865 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,865 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,866 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,866 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,866 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,866 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,867 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,867 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,867 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,867 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,867 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,867 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:20,867 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,867 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,867 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,867 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,867 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,867 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,867 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,867 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,871 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:20,871 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:20,871 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:20,871 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:20,876 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:20,877 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:20,877 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(13)), (np.int64(8), np.int64(7)))
2025-04-11 17:37:20,884 [INFO] Final candidates: []
2025-04-11 17:37:20,884 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,887 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,887 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,887 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,887 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,887 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,888 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,888 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,888 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,888 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,888 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,889 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,889 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,889 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,889 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,889 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,889 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:20,889 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,889 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,889 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,889 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,889 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,889 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,889 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,889 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,893 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:20,893 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:20,893 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:20,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:20,975 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:20,976 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:20,976 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(12), np.int64(9)))
2025-04-11 17:37:20,983 [INFO] Final candidates: []
2025-04-11 17:37:20,983 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:20,986 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:20,986 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,986 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,986 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:20,986 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,986 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,986 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,987 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,987 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,987 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,987 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,987 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,988 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:20,988 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:20,988 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:20,988 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:20,988 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:20,988 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:20,988 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:20,988 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:20,988 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,988 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:20,988 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:20,988 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:20,988 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:20,988 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:20,992 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:20,992 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:20,992 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:20,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,002 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,002 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,002 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(2), np.int64(15)))
2025-04-11 17:37:21,010 [INFO] Final candidates: []
2025-04-11 17:37:21,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,013 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,013 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,013 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,013 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,013 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,013 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,013 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,013 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,013 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,013 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,013 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,013 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,014 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,014 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,014 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,014 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,014 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,014 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,014 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,014 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,014 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,014 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,015 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,015 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,015 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,015 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,018 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,018 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,019 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,019 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,082 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,082 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,082 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(11)), (np.int64(7), np.int64(15)))
2025-04-11 17:37:21,085 [DEBUG] board coords: [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)]
2025-04-11 17:37:21,085 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:37:21,085 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 15), (8, 15)]
2025-04-11 17:37:21,085 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(6, 15), (7, 15), (8, 15), (9, 15), (10, 15), (11, 15)] triggers candidate.
2025-04-11 17:37:21,085 [DEBUG] board coords: [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)]
2025-04-11 17:37:21,085 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:37:21,085 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:37:21,085 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 15), (8, 15), (9, 15), (10, 15), (11, 15), (12, 15)] triggers candidate.
2025-04-11 17:37:21,090 [INFO] Final candidates: [(8, 15), (6, 15), (12, 15)]
2025-04-11 17:37:21,090 [INFO] Phase win: Collected 3unique candidate(s):[((8, 15), (12, 15)), ((6, 15), (12, 15)), ((8, 15), (6, 15))]
2025-04-11 17:37:21,090 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:21,093 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,093 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,093 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,093 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,093 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,093 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,093 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,093 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,093 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,093 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,093 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,093 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,094 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,094 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,094 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,094 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,094 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,094 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,094 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,094 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,094 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,094 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,094 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,094 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,094 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,094 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,098 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,098 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,098 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,098 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,177 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,177 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,177 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(10), np.int64(11)))
2025-04-11 17:37:21,186 [INFO] Final candidates: []
2025-04-11 17:37:21,186 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,190 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,190 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,190 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,190 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,190 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,190 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,190 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,190 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,191 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,191 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,191 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,191 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,192 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,192 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,192 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,192 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,192 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,192 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,192 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,192 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,192 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,192 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,192 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,192 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,192 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,192 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,196 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,196 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,196 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,196 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,225 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,226 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,226 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(4), np.int64(14)))
2025-04-11 17:37:21,234 [INFO] Final candidates: []
2025-04-11 17:37:21,234 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,237 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,237 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,237 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,237 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,237 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,237 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,237 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,237 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,237 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,238 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,238 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,238 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,238 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,238 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,238 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,238 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,238 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,238 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,238 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,238 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,238 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,238 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,238 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,242 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,242 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,242 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,315 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,315 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,316 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(3), np.int64(4)))
2025-04-11 17:37:21,323 [INFO] Final candidates: []
2025-04-11 17:37:21,323 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,326 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,326 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,326 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,326 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,326 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,326 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,326 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,326 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,326 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,326 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,326 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,326 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,327 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,327 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,327 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,328 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,328 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,328 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,328 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,328 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,328 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,328 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,328 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,331 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,331 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,331 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,332 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,343 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,344 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,344 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(1), np.int64(15)))
2025-04-11 17:37:21,351 [INFO] Final candidates: []
2025-04-11 17:37:21,351 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,354 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,354 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,354 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,354 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,354 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,354 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,354 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,355 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,355 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,355 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,355 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,355 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,356 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,356 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,356 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,356 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,356 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,356 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,356 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,356 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,356 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,356 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,356 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,356 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,356 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,356 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,360 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,360 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,360 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,360 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,402 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:21,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,402 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(3)), (np.int64(5), np.int64(17)))
2025-04-11 17:37:21,410 [INFO] Final candidates: []
2025-04-11 17:37:21,410 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,412 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,412 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,413 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,413 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,413 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,413 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,413 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,413 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,413 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,413 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,413 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,413 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,414 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,414 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,414 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,414 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,414 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,414 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,414 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,414 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,414 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,414 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,414 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,414 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,414 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,414 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,418 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,418 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,418 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,418 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,494 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,494 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(13), np.int64(7)))
2025-04-11 17:37:21,502 [INFO] Final candidates: []
2025-04-11 17:37:21,502 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,505 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,505 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,505 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,505 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,505 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,505 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,505 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,505 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,505 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,505 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,505 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,505 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,506 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,506 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,506 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,506 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,506 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,506 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,506 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,506 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,506 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,506 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,506 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,506 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,506 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,506 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,510 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,510 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,510 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,510 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,582 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,582 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,582 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(16)))
2025-04-11 17:37:21,590 [INFO] Final candidates: []
2025-04-11 17:37:21,590 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,593 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,593 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,593 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,593 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,593 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,593 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,593 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,593 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,593 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,593 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,593 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,593 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,594 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,594 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,594 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,594 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,594 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,594 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,594 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,594 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,594 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,594 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,594 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,594 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,594 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,594 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,598 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,598 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,598 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,598 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,690 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:21,690 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,690 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(16)), (np.int64(4), np.int64(11)))
2025-04-11 17:37:21,698 [INFO] Final candidates: []
2025-04-11 17:37:21,698 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,701 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,701 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,701 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,701 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,702 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,702 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,702 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,702 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,702 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,702 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,702 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,702 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,703 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,703 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,703 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,703 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,703 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,703 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,703 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,703 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,703 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,703 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,703 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,707 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,707 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,707 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,707 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:21,850 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:21,850 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:21,850 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(13)), (np.int64(8), np.int64(13)))
2025-04-11 17:37:21,858 [INFO] Final candidates: []
2025-04-11 17:37:21,858 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:21,861 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:21,861 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,861 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,861 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:21,861 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,861 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,861 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,861 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,861 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,861 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,861 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,861 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,862 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:21,862 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:21,862 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:21,862 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:21,862 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:21,862 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:21,862 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:21,862 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:21,862 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,863 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:21,863 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:21,863 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:21,863 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:21,863 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:21,866 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:21,866 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:21,866 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:21,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,009 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:22,009 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,009 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(16)), (np.int64(0), np.int64(13)))
2025-04-11 17:37:22,017 [INFO] Final candidates: []
2025-04-11 17:37:22,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,020 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,020 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,020 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,020 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,020 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,020 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,020 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,020 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,020 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,020 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,020 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,020 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,021 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,021 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,021 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,021 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,021 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,021 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,021 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,021 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,021 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,021 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,022 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,025 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,025 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,025 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,049 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,049 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,049 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(11)), (np.int64(8), np.int64(16)))
2025-04-11 17:37:22,057 [INFO] Final candidates: []
2025-04-11 17:37:22,057 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,060 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,060 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,060 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,060 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,060 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,060 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,060 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,060 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,060 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,060 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,060 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,060 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,061 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,061 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,061 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,061 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,061 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,061 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,061 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,061 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,061 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,061 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,061 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,065 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,065 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,065 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,065 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,220 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,220 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,220 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(8)), (np.int64(13), np.int64(13)))
2025-04-11 17:37:22,228 [INFO] Final candidates: []
2025-04-11 17:37:22,228 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,231 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,231 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,231 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,231 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,231 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,231 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,231 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,231 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,231 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,232 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,232 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,232 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,232 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,232 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,232 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,232 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,232 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,232 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,232 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,233 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,233 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,233 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,236 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,236 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,236 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,236 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,460 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,460 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,460 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(10)), (np.int64(6), np.int64(9)))
2025-04-11 17:37:22,463 [DEBUG] board coords: [(9, 10), (10, 10), (11, 10), (12, 10), (13, 10), (14, 10)]
2025-04-11 17:37:22,463 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:22,463 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (13, 10)]
2025-04-11 17:37:22,463 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(9, 10), (10, 10), (11, 10), (12, 10), (13, 10), (14, 10)] triggers candidate.
2025-04-11 17:37:22,468 [INFO] Final candidates: [(13, 10), (11, 10)]
2025-04-11 17:37:22,468 [INFO] Phase win: Collected 1unique candidate(s):[((13, 10), (11, 10))]
2025-04-11 17:37:22,468 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:22,471 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,471 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,471 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,471 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,471 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,471 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,471 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,471 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,471 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,472 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,472 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,472 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,472 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,472 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,472 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,472 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,472 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,472 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,472 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,472 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,472 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,472 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,472 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,476 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,476 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,476 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,476 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,485 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,486 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,486 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(10)), (np.int64(12), np.int64(9)))
2025-04-11 17:37:22,494 [INFO] Final candidates: []
2025-04-11 17:37:22,494 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,497 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,497 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,497 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,497 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,497 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,497 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,497 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,497 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,497 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,498 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,498 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,498 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,498 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,498 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,498 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,498 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,498 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,498 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,498 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,498 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,498 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,498 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,498 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,502 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,502 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,502 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,503 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,503 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,503 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(3), np.int64(11)))
2025-04-11 17:37:22,511 [INFO] Final candidates: []
2025-04-11 17:37:22,511 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,514 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,514 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,514 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,514 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,514 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,514 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,514 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,514 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,514 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,514 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,514 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,514 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,515 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,515 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,515 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,515 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,515 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,515 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,515 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,515 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,515 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,515 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,515 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,515 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,515 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,515 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,519 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,519 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,519 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,599 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,599 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,599 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(10), np.int64(7)))
2025-04-11 17:37:22,607 [INFO] Final candidates: []
2025-04-11 17:37:22,607 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,609 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,609 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,609 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,610 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,610 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,610 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,610 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,610 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,610 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,610 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,610 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,610 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,611 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,611 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,611 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,611 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,611 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,611 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,611 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,611 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,611 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,611 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,611 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,611 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,611 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,611 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,615 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,615 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,615 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,615 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,616 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,616 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,616 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(2)))
2025-04-11 17:37:22,624 [INFO] Final candidates: []
2025-04-11 17:37:22,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,627 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,627 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,627 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,627 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,627 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,627 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,627 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,627 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,627 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,628 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,628 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,628 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,628 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,628 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,628 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,628 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,628 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,628 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,628 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,628 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,628 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,628 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,628 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,632 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,632 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,632 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,632 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,662 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,662 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,662 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(11)), (np.int64(6), np.int64(11)))
2025-04-11 17:37:22,670 [INFO] Final candidates: []
2025-04-11 17:37:22,670 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,672 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,672 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,672 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,673 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,673 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,673 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,673 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,673 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,673 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,673 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,673 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,673 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,674 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,674 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,674 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,674 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,674 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,674 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,674 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,674 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,674 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,674 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,674 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,674 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,674 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,674 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,678 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,678 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,678 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,678 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,722 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:22,722 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,723 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(16)), (np.int64(5), np.int64(17)))
2025-04-11 17:37:22,731 [INFO] Final candidates: []
2025-04-11 17:37:22,731 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,733 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,734 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,734 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,734 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,734 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,734 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,734 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,734 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,734 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,734 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,734 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,734 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,735 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,735 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,735 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,735 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,735 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,735 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,735 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,735 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,735 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,735 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,735 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,735 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,735 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,735 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,739 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,739 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,739 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,739 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,751 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,751 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,751 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(14), np.int64(12)))
2025-04-11 17:37:22,759 [INFO] Final candidates: []
2025-04-11 17:37:22,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,762 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,762 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,762 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,762 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,762 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,762 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,762 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,762 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,762 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,762 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,762 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,762 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,763 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,763 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,763 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,763 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,763 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,763 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,763 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,763 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,763 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,763 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,763 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,767 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,767 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,767 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,789 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:22,790 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,790 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(16)), (np.int64(12), np.int64(11)))
2025-04-11 17:37:22,797 [INFO] Final candidates: []
2025-04-11 17:37:22,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:22,800 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,800 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,800 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,800 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,800 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,800 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,800 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,801 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,801 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,801 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,801 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,801 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,802 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,802 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,802 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,802 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,802 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,802 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,802 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,802 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,802 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,802 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,802 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,802 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,802 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,802 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,806 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,806 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,806 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:22,942 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:22,942 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:22,942 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(10)), (np.int64(11), np.int64(6)))
2025-04-11 17:37:22,945 [DEBUG] board coords: [(8, 10), (9, 10), (10, 10), (11, 10), (12, 10), (13, 10)]
2025-04-11 17:37:22,945 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:37:22,945 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 10), (11, 10)]
2025-04-11 17:37:22,945 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(8, 10), (9, 10), (10, 10), (11, 10), (12, 10), (13, 10)] triggers candidate.
2025-04-11 17:37:22,945 [DEBUG] board coords: [(9, 10), (10, 10), (11, 10), (12, 10), (13, 10), (14, 10)]
2025-04-11 17:37:22,945 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:37:22,945 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (14, 10)]
2025-04-11 17:37:22,945 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(9, 10), (10, 10), (11, 10), (12, 10), (13, 10), (14, 10)] triggers candidate.
2025-04-11 17:37:22,950 [INFO] Final candidates: [(8, 10), (11, 10), (14, 10)]
2025-04-11 17:37:22,950 [INFO] Phase win: Collected 3unique candidate(s):[((11, 10), (14, 10)), ((8, 10), (11, 10)), ((8, 10), (14, 10))]
2025-04-11 17:37:22,950 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:22,953 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:22,953 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,953 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,953 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:22,953 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,953 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,953 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,953 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,953 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,953 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,953 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,953 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,954 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:22,954 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:22,954 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:22,954 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:22,954 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:22,954 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:22,954 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:22,954 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:22,954 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,955 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:22,955 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:22,955 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:22,955 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:22,955 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:22,958 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:22,958 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:22,958 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:22,958 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,132 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:23,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,133 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(16)), (np.int64(6), np.int64(9)))
2025-04-11 17:37:23,140 [INFO] Final candidates: []
2025-04-11 17:37:23,140 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:23,143 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,143 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,143 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,143 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,143 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,143 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,143 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,143 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,143 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,143 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,143 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,143 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,144 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,144 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,144 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,144 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,144 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,144 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,145 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,145 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,145 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,145 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,145 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,145 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,145 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,145 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,149 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,149 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,149 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,149 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,213 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:23,213 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,214 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(10), np.int64(8)))
2025-04-11 17:37:23,216 [DEBUG] board coords: [(7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (12, 10)]
2025-04-11 17:37:23,216 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:23,216 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 10), (11, 10)]
2025-04-11 17:37:23,216 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (12, 10)] triggers candidate.
2025-04-11 17:37:23,222 [INFO] Final candidates: [(8, 10), (11, 10)]
2025-04-11 17:37:23,222 [INFO] Phase win: Collected 1unique candidate(s):[((8, 10), (11, 10))]
2025-04-11 17:37:23,222 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:37:23,224 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,224 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,224 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,225 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,225 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,225 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,225 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,225 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,225 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,225 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,225 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,225 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,226 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,226 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,226 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,226 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,226 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,226 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,226 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,226 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,226 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,226 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,226 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,226 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,226 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,226 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,230 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,230 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,230 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,230 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,315 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:23,315 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,315 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(3)), (np.int64(2), np.int64(14)))
2025-04-11 17:37:23,323 [INFO] Final candidates: []
2025-04-11 17:37:23,323 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:23,326 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,326 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,326 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,326 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,326 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,326 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,326 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,326 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,326 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,326 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,326 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,326 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,327 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,327 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,327 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,327 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,327 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,327 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,327 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,327 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,327 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,327 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,327 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,331 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,331 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,331 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,331 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,458 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:23,458 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,458 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(5), np.int64(11)))
2025-04-11 17:37:23,466 [INFO] Final candidates: []
2025-04-11 17:37:23,466 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:23,469 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,469 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,469 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,469 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,469 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,469 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,469 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,469 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,469 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,469 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,469 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,469 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,470 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,470 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,470 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,470 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,470 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,470 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,470 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,470 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,470 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,470 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,470 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,474 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,474 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,474 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,474 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,614 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:23,614 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,614 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(13), np.int64(15)))
2025-04-11 17:37:23,617 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:37:23,617 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:23,617 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:37:23,618 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:37:23,618 [DEBUG] board coords: [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)]
2025-04-11 17:37:23,618 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:37:23,618 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (14, 15)]
2025-04-11 17:37:23,618 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)] triggers candidate.
2025-04-11 17:37:23,622 [INFO] Final candidates: [(8, 15), (14, 15), (12, 15)]
2025-04-11 17:37:23,622 [INFO] Phase win: Collected 3unique candidate(s):[((14, 15), (12, 15)), ((8, 15), (14, 15)), ((8, 15), (12, 15))]
2025-04-11 17:37:23,622 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:23,625 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,625 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,625 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,625 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,625 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,625 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,625 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,625 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,625 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,625 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,625 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,625 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,626 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,626 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,626 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,626 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,627 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,627 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,627 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,627 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,627 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,627 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,627 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,627 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,630 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,630 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,630 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,630 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,671 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:23,672 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,672 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(2), np.int64(16)))
2025-04-11 17:37:23,680 [INFO] Final candidates: []
2025-04-11 17:37:23,680 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:23,683 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,683 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,683 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,683 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,683 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,683 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,683 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,683 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,683 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,684 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,684 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,684 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,684 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,684 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,684 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,684 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,684 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,684 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,684 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,684 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,688 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,688 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,688 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,688 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,701 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:23,701 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,701 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(10), np.int64(16)))
2025-04-11 17:37:23,709 [INFO] Final candidates: []
2025-04-11 17:37:23,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:23,712 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,712 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,712 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,712 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,713 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,713 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,713 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,713 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,713 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,713 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,713 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,713 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,714 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,714 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,714 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,714 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,714 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,714 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,714 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,714 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,714 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,714 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,714 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,714 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,714 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,714 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,718 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,718 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,718 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,867 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:23,867 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,867 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(1), np.int64(13)))
2025-04-11 17:37:23,875 [INFO] Final candidates: []
2025-04-11 17:37:23,875 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:23,878 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,878 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,878 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,878 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,878 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,878 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,878 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,878 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,878 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,878 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,878 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,878 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,879 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,879 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,879 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,879 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,879 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,879 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,879 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,879 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,879 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,879 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,879 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,879 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,879 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,879 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,883 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,883 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,883 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:23,886 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:23,886 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:23,887 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(13), np.int64(15)))
2025-04-11 17:37:23,889 [DEBUG] board coords: [(7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (12, 10)]
2025-04-11 17:37:23,889 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:23,889 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 10), (11, 10)]
2025-04-11 17:37:23,889 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (12, 10)] triggers candidate.
2025-04-11 17:37:23,890 [DEBUG] board coords: [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)]
2025-04-11 17:37:23,890 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:37:23,890 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 15), (12, 15)]
2025-04-11 17:37:23,890 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(8, 15), (9, 15), (10, 15), (11, 15), (12, 15), (13, 15)] triggers candidate.
2025-04-11 17:37:23,890 [DEBUG] board coords: [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)]
2025-04-11 17:37:23,890 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:37:23,890 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 15), (14, 15)]
2025-04-11 17:37:23,890 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(9, 15), (10, 15), (11, 15), (12, 15), (13, 15), (14, 15)] triggers candidate.
2025-04-11 17:37:23,895 [INFO] Final candidates: [(11, 10), (8, 10), (12, 15), (8, 15), (14, 15)]
2025-04-11 17:37:23,895 [INFO] Phase win: Collected 10unique candidate(s):[((8, 10), (8, 15)), ((11, 10), (12, 15)), ((11, 10), (8, 15)), ((12, 15), (14, 15)), ((11, 10), (8, 10)), ((8, 10), (14, 15)), ((11, 10), (14, 15)), ((8, 15), (14, 15)), ((12, 15), (8, 15)), ((8, 10), (12, 15))]
2025-04-11 17:37:23,895 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:37:23,898 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:23,898 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,898 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,898 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:23,898 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,898 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,898 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,898 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,898 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,898 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,898 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,898 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,899 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:23,899 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:23,899 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:23,899 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:23,899 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:23,899 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:23,899 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:23,899 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:23,899 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,899 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:23,899 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:23,899 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:23,899 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:23,899 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:23,903 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:23,903 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:23,903 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:23,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:24,167 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,167 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(4), np.int64(13)))
2025-04-11 17:37:24,175 [INFO] Final candidates: []
2025-04-11 17:37:24,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,179 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,179 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,179 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,179 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,179 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,179 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,179 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,179 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,179 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,179 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,179 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,179 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,181 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,181 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,181 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,181 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,181 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,181 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,181 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,181 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,181 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,181 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,181 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,185 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,185 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,185 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,185 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,258 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:24,258 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,258 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(4)), (np.int64(10), np.int64(11)))
2025-04-11 17:37:24,266 [INFO] Final candidates: []
2025-04-11 17:37:24,266 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,269 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,269 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,269 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,269 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,269 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,269 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,269 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,269 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,269 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,269 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,269 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,269 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,270 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,270 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,270 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,270 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,270 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,270 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,270 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,270 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,270 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,270 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,270 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,274 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,274 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,274 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,274 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,474 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:24,474 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,474 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(16)), (np.int64(1), np.int64(3)))
2025-04-11 17:37:24,482 [INFO] Final candidates: []
2025-04-11 17:37:24,482 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,485 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,485 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,485 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,485 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,485 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,485 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,485 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,485 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,485 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,485 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,485 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,485 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,486 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,486 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,486 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,486 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,486 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,486 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,486 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,486 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,486 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,486 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,486 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,486 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,486 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,486 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,490 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,490 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,490 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,490 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,566 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:24,566 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,566 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(6), np.int64(16)))
2025-04-11 17:37:24,574 [INFO] Final candidates: []
2025-04-11 17:37:24,574 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,577 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,577 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,577 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,577 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,577 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,577 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,577 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,577 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,577 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,577 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,577 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,577 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,578 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,578 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,578 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,578 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,578 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,578 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,578 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,578 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,578 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,579 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,579 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,579 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,579 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,579 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,582 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,582 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,582 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,582 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,585 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:24,585 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,585 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(9)))
2025-04-11 17:37:24,593 [INFO] Final candidates: []
2025-04-11 17:37:24,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,596 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,596 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,596 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,596 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,596 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,596 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,596 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,596 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,596 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,598 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,598 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,598 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,599 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,599 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,599 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,599 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,600 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,600 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,600 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,600 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,600 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,600 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,600 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,600 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,600 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,600 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,603 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,603 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,604 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,604 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,657 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:24,658 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,658 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(1)), (np.int64(5), np.int64(13)))
2025-04-11 17:37:24,665 [INFO] Final candidates: []
2025-04-11 17:37:24,665 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,668 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,668 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,668 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,668 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,668 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,668 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,668 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,669 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,669 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,669 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,669 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,669 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,670 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,670 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,670 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,670 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,670 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,670 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,670 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,670 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,670 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,670 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,670 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,670 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,670 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,670 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,674 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,674 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,674 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,674 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,675 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:24,675 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,675 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(12), np.int64(7)))
2025-04-11 17:37:24,683 [INFO] Final candidates: []
2025-04-11 17:37:24,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,686 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,686 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,686 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,686 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,686 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,686 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,686 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,686 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,686 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,687 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,687 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,687 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,687 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,687 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,687 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,687 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,687 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,687 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,687 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,687 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,691 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,691 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,691 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,692 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:24,692 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,692 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(5)), (np.int64(0), np.int64(13)))
2025-04-11 17:37:24,700 [INFO] Final candidates: []
2025-04-11 17:37:24,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,703 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,703 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,703 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,703 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,703 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,703 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,703 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,703 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,703 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,704 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,704 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,704 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,704 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,704 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,704 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,704 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,704 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,704 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,704 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,704 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,708 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,708 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,708 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,708 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,929 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:24,929 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:37:24,929 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 17:37:24,937 [INFO] Final candidates: []
2025-04-11 17:37:24,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:24,940 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:37:24,940 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,940 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,940 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:37:24,940 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,940 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,940 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,940 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [2 2 2 2 0 0] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,940 [DEBUG] board coords: [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,940 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,940 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,940 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,941 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)]
2025-04-11 17:37:24,941 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:24,941 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (5, 12)]
2025-04-11 17:37:24,941 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12)] triggers candidate.
2025-04-11 17:37:24,941 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)] triggers candidate.
2025-04-11 17:37:24,941 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:37:24,941 [DEBUG] board coords: [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)]
2025-04-11 17:37:24,941 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:37:24,941 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,941 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12)] triggers candidate.
2025-04-11 17:37:24,941 [DEBUG] board coords: [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)]
2025-04-11 17:37:24,941 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:37:24,941 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 12)]
2025-04-11 17:37:24,941 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 0 2] with coords [(7, 12), (8, 12), (9, 12), (10, 12), (11, 12), (12, 12), (13, 12)] triggers candidate.
2025-04-11 17:37:24,945 [INFO] Final candidates: [(11, 12), (12, 12), (5, 12), (2, 12)]
2025-04-11 17:37:24,945 [INFO] Phase defense: Collected 6unique candidate(s):[((12, 12), (5, 12)), ((11, 12), (2, 12)), ((11, 12), (5, 12)), ((5, 12), (2, 12)), ((12, 12), (2, 12)), ((11, 12), (12, 12))]
2025-04-11 17:37:24,945 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:37:24,945 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:24,990 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:24,991 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:37:24,991 [INFO] MCTS (defense candidates) selected move: N4,N11
2025-04-11 17:37:38,386 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:37:38,395 [INFO] Final candidates: []
2025-04-11 17:37:38,395 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,405 [INFO] Final candidates: []
2025-04-11 17:37:38,405 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,405 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:37:38,405 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:37:38,405 [DEBUG] Tree_policy iteration 1: Expanding move (2, 14)
2025-04-11 17:37:38,414 [INFO] Final candidates: []
2025-04-11 17:37:38,414 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,424 [INFO] Final candidates: []
2025-04-11 17:37:38,424 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,424 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:37:38,424 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:38,429 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:38,429 [DEBUG] Tree_policy iteration 1: Expanding move (0, 12)
2025-04-11 17:37:38,438 [INFO] Final candidates: []
2025-04-11 17:37:38,438 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,448 [INFO] Final candidates: []
2025-04-11 17:37:38,448 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,448 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:38,583 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:38,583 [DEBUG] Tree_policy iteration 1: Expanding move (12, 17)
2025-04-11 17:37:38,592 [INFO] Final candidates: []
2025-04-11 17:37:38,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,601 [INFO] Final candidates: []
2025-04-11 17:37:38,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,602 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:38,611 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:38,611 [DEBUG] Tree_policy iteration 1: Expanding move (13, 3)
2025-04-11 17:37:38,621 [INFO] Final candidates: []
2025-04-11 17:37:38,621 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,630 [INFO] Final candidates: []
2025-04-11 17:37:38,630 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,631 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:38,760 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:38,760 [DEBUG] Tree_policy iteration 1: Expanding move (2, 12)
2025-04-11 17:37:38,769 [INFO] Final candidates: []
2025-04-11 17:37:38,769 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,778 [INFO] Final candidates: []
2025-04-11 17:37:38,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,779 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:38,810 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:38,810 [DEBUG] Tree_policy iteration 1: Expanding move (17, 6)
2025-04-11 17:37:38,819 [INFO] Final candidates: []
2025-04-11 17:37:38,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,829 [INFO] Final candidates: []
2025-04-11 17:37:38,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:38,979 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:38,979 [DEBUG] Tree_policy iteration 1: Expanding move (6, 3)
2025-04-11 17:37:38,989 [INFO] Final candidates: []
2025-04-11 17:37:38,989 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,998 [INFO] Final candidates: []
2025-04-11 17:37:38,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:38,999 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:39,199 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:39,199 [DEBUG] Tree_policy iteration 1: Expanding move (8, 18)
2025-04-11 17:37:39,208 [INFO] Final candidates: []
2025-04-11 17:37:39,208 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,218 [INFO] Final candidates: []
2025-04-11 17:37:39,218 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,218 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:39,442 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:39,442 [DEBUG] Tree_policy iteration 1: Expanding move (10, 18)
2025-04-11 17:37:39,452 [INFO] Final candidates: []
2025-04-11 17:37:39,452 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,462 [INFO] Final candidates: []
2025-04-11 17:37:39,463 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,463 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:39,572 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:39,572 [DEBUG] Tree_policy iteration 1: Expanding move (12, 14)
2025-04-11 17:37:39,582 [INFO] Final candidates: []
2025-04-11 17:37:39,582 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,591 [INFO] Final candidates: []
2025-04-11 17:37:39,591 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,591 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:39,677 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:39,677 [DEBUG] Tree_policy iteration 1: Expanding move (6, 6)
2025-04-11 17:37:39,686 [INFO] Final candidates: []
2025-04-11 17:37:39,686 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,695 [INFO] Final candidates: []
2025-04-11 17:37:39,695 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:39,862 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:39,862 [DEBUG] Tree_policy iteration 1: Expanding move (2, 15)
2025-04-11 17:37:39,872 [INFO] Final candidates: []
2025-04-11 17:37:39,872 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,881 [INFO] Final candidates: []
2025-04-11 17:37:39,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,881 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:39,974 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:39,974 [DEBUG] Tree_policy iteration 1: Expanding move (13, 17)
2025-04-11 17:37:39,984 [INFO] Final candidates: []
2025-04-11 17:37:39,984 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,993 [INFO] Final candidates: []
2025-04-11 17:37:39,993 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:39,994 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,187 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:40,187 [DEBUG] Tree_policy iteration 1: Expanding move (1, 9)
2025-04-11 17:37:40,197 [INFO] Final candidates: []
2025-04-11 17:37:40,197 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,206 [INFO] Final candidates: []
2025-04-11 17:37:40,206 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,206 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,343 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:40,344 [DEBUG] Tree_policy iteration 1: Expanding move (16, 0)
2025-04-11 17:37:40,353 [INFO] Final candidates: []
2025-04-11 17:37:40,353 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,363 [INFO] Final candidates: []
2025-04-11 17:37:40,363 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,363 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,371 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:40,371 [DEBUG] Tree_policy iteration 1: Expanding move (7, 12)
2025-04-11 17:37:40,380 [INFO] Final candidates: []
2025-04-11 17:37:40,380 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,390 [INFO] Final candidates: []
2025-04-11 17:37:40,390 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,390 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,511 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:40,511 [DEBUG] Tree_policy iteration 1: Expanding move (14, 15)
2025-04-11 17:37:40,521 [INFO] Final candidates: []
2025-04-11 17:37:40,521 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,531 [INFO] Final candidates: []
2025-04-11 17:37:40,531 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,532 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,645 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:40,645 [DEBUG] Tree_policy iteration 1: Expanding move (0, 7)
2025-04-11 17:37:40,655 [INFO] Final candidates: []
2025-04-11 17:37:40,655 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,664 [INFO] Final candidates: []
2025-04-11 17:37:40,664 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,664 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,716 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:40,716 [DEBUG] Tree_policy iteration 1: Expanding move (3, 1)
2025-04-11 17:37:40,726 [INFO] Final candidates: []
2025-04-11 17:37:40,726 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,735 [INFO] Final candidates: []
2025-04-11 17:37:40,735 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,735 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,774 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:40,774 [DEBUG] Tree_policy iteration 1: Expanding move (11, 13)
2025-04-11 17:37:40,783 [INFO] Final candidates: []
2025-04-11 17:37:40,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,792 [INFO] Final candidates: []
2025-04-11 17:37:40,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,792 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,878 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:40,878 [DEBUG] Tree_policy iteration 1: Expanding move (18, 3)
2025-04-11 17:37:40,887 [INFO] Final candidates: []
2025-04-11 17:37:40,887 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,897 [INFO] Final candidates: []
2025-04-11 17:37:40,897 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:40,917 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:40,917 [DEBUG] Tree_policy iteration 1: Expanding move (11, 10)
2025-04-11 17:37:40,926 [INFO] Final candidates: []
2025-04-11 17:37:40,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,936 [INFO] Final candidates: []
2025-04-11 17:37:40,936 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:40,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,038 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:41,038 [DEBUG] Tree_policy iteration 1: Expanding move (9, 8)
2025-04-11 17:37:41,048 [INFO] Final candidates: []
2025-04-11 17:37:41,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,057 [INFO] Final candidates: []
2025-04-11 17:37:41,057 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,057 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,119 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:41,119 [DEBUG] Tree_policy iteration 1: Expanding move (5, 9)
2025-04-11 17:37:41,129 [INFO] Final candidates: []
2025-04-11 17:37:41,129 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,138 [INFO] Final candidates: []
2025-04-11 17:37:41,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,138 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,178 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:41,178 [DEBUG] Tree_policy iteration 1: Expanding move (16, 17)
2025-04-11 17:37:41,187 [INFO] Final candidates: []
2025-04-11 17:37:41,187 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,199 [INFO] Final candidates: []
2025-04-11 17:37:41,199 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,199 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,300 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:41,300 [DEBUG] Tree_policy iteration 1: Expanding move (6, 14)
2025-04-11 17:37:41,310 [INFO] Final candidates: []
2025-04-11 17:37:41,310 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,319 [INFO] Final candidates: []
2025-04-11 17:37:41,319 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,416 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:41,416 [DEBUG] Tree_policy iteration 1: Expanding move (9, 0)
2025-04-11 17:37:41,426 [INFO] Final candidates: []
2025-04-11 17:37:41,426 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,435 [INFO] Final candidates: []
2025-04-11 17:37:41,435 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,435 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,628 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:41,628 [DEBUG] Tree_policy iteration 1: Expanding move (7, 0)
2025-04-11 17:37:41,637 [INFO] Final candidates: []
2025-04-11 17:37:41,637 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,646 [INFO] Final candidates: []
2025-04-11 17:37:41,646 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,646 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,682 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:41,683 [DEBUG] Tree_policy iteration 1: Expanding move (0, 15)
2025-04-11 17:37:41,692 [INFO] Final candidates: []
2025-04-11 17:37:41,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,701 [INFO] Final candidates: []
2025-04-11 17:37:41,701 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,781 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:41,781 [DEBUG] Tree_policy iteration 1: Expanding move (16, 1)
2025-04-11 17:37:41,791 [INFO] Final candidates: []
2025-04-11 17:37:41,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,800 [INFO] Final candidates: []
2025-04-11 17:37:41,800 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,800 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,854 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:41,854 [DEBUG] Tree_policy iteration 1: Expanding move (11, 17)
2025-04-11 17:37:41,865 [INFO] Final candidates: []
2025-04-11 17:37:41,865 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,876 [INFO] Final candidates: []
2025-04-11 17:37:41,876 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:41,876 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:41,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:41,989 [DEBUG] Tree_policy iteration 1: Expanding move (13, 7)
2025-04-11 17:37:42,000 [INFO] Final candidates: []
2025-04-11 17:37:42,000 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,010 [INFO] Final candidates: []
2025-04-11 17:37:42,010 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,010 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,086 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:42,086 [DEBUG] Tree_policy iteration 1: Expanding move (6, 13)
2025-04-11 17:37:42,098 [INFO] Final candidates: []
2025-04-11 17:37:42,098 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,108 [INFO] Final candidates: []
2025-04-11 17:37:42,108 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:42,259 [DEBUG] Tree_policy iteration 1: Expanding move (8, 1)
2025-04-11 17:37:42,269 [INFO] Final candidates: []
2025-04-11 17:37:42,269 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,278 [INFO] Final candidates: []
2025-04-11 17:37:42,278 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,278 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,335 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:42,335 [DEBUG] Tree_policy iteration 1: Expanding move (18, 6)
2025-04-11 17:37:42,344 [INFO] Final candidates: []
2025-04-11 17:37:42,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,354 [INFO] Final candidates: []
2025-04-11 17:37:42,354 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,354 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,465 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:42,465 [DEBUG] Tree_policy iteration 1: Expanding move (17, 17)
2025-04-11 17:37:42,475 [INFO] Final candidates: []
2025-04-11 17:37:42,475 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,484 [INFO] Final candidates: []
2025-04-11 17:37:42,484 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,502 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:42,502 [DEBUG] Tree_policy iteration 1: Expanding move (13, 0)
2025-04-11 17:37:42,512 [INFO] Final candidates: []
2025-04-11 17:37:42,512 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,521 [INFO] Final candidates: []
2025-04-11 17:37:42,521 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,521 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,600 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:42,600 [DEBUG] Tree_policy iteration 1: Expanding move (10, 0)
2025-04-11 17:37:42,609 [INFO] Final candidates: []
2025-04-11 17:37:42,610 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,619 [INFO] Final candidates: []
2025-04-11 17:37:42,619 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,619 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,625 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:42,625 [DEBUG] Tree_policy iteration 1: Expanding move (17, 18)
2025-04-11 17:37:42,634 [INFO] Final candidates: []
2025-04-11 17:37:42,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,644 [INFO] Final candidates: []
2025-04-11 17:37:42,644 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,644 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,657 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:42,657 [DEBUG] Tree_policy iteration 1: Expanding move (14, 0)
2025-04-11 17:37:42,666 [INFO] Final candidates: []
2025-04-11 17:37:42,666 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,675 [INFO] Final candidates: []
2025-04-11 17:37:42,675 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,675 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:42,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:42,888 [DEBUG] Tree_policy iteration 1: Expanding move (6, 2)
2025-04-11 17:37:42,898 [INFO] Final candidates: []
2025-04-11 17:37:42,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,907 [INFO] Final candidates: []
2025-04-11 17:37:42,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:42,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,093 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:43,093 [DEBUG] Tree_policy iteration 1: Expanding move (13, 14)
2025-04-11 17:37:43,103 [INFO] Final candidates: []
2025-04-11 17:37:43,103 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,113 [INFO] Final candidates: []
2025-04-11 17:37:43,113 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,113 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,200 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:43,200 [DEBUG] Tree_policy iteration 1: Expanding move (0, 11)
2025-04-11 17:37:43,209 [INFO] Final candidates: []
2025-04-11 17:37:43,209 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,219 [INFO] Final candidates: []
2025-04-11 17:37:43,219 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,219 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,250 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:43,250 [DEBUG] Tree_policy iteration 1: Expanding move (9, 2)
2025-04-11 17:37:43,259 [INFO] Final candidates: []
2025-04-11 17:37:43,259 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,268 [INFO] Final candidates: []
2025-04-11 17:37:43,268 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,268 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:43,385 [DEBUG] Tree_policy iteration 1: Expanding move (6, 15)
2025-04-11 17:37:43,395 [INFO] Final candidates: []
2025-04-11 17:37:43,395 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,404 [INFO] Final candidates: []
2025-04-11 17:37:43,404 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,450 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:43,450 [DEBUG] Tree_policy iteration 1: Expanding move (2, 16)
2025-04-11 17:37:43,461 [INFO] Final candidates: []
2025-04-11 17:37:43,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,471 [INFO] Final candidates: []
2025-04-11 17:37:43,471 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,486 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:43,486 [DEBUG] Tree_policy iteration 1: Expanding move (6, 1)
2025-04-11 17:37:43,495 [INFO] Final candidates: []
2025-04-11 17:37:43,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,505 [INFO] Final candidates: []
2025-04-11 17:37:43,505 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,621 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:43,621 [DEBUG] Tree_policy iteration 1: Expanding move (2, 9)
2025-04-11 17:37:43,631 [INFO] Final candidates: []
2025-04-11 17:37:43,631 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,640 [INFO] Final candidates: []
2025-04-11 17:37:43,640 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,640 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,705 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:43,706 [DEBUG] Tree_policy iteration 1: Expanding move (10, 15)
2025-04-11 17:37:43,715 [INFO] Final candidates: []
2025-04-11 17:37:43,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,724 [INFO] Final candidates: []
2025-04-11 17:37:43,724 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,725 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,742 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:43,742 [DEBUG] Tree_policy iteration 1: Expanding move (12, 11)
2025-04-11 17:37:43,752 [INFO] Final candidates: []
2025-04-11 17:37:43,752 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,761 [INFO] Final candidates: []
2025-04-11 17:37:43,761 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:43,914 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:43,914 [DEBUG] Tree_policy iteration 1: Expanding move (6, 9)
2025-04-11 17:37:43,923 [INFO] Final candidates: []
2025-04-11 17:37:43,923 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,933 [INFO] Final candidates: []
2025-04-11 17:37:43,933 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:43,933 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:37:43,933 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,142 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:44,142 [DEBUG] Tree_policy iteration 1: Expanding move (3, 12)
2025-04-11 17:37:44,152 [INFO] Final candidates: []
2025-04-11 17:37:44,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,161 [INFO] Final candidates: []
2025-04-11 17:37:44,161 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,215 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:44,216 [DEBUG] Tree_policy iteration 1: Expanding move (12, 3)
2025-04-11 17:37:44,225 [INFO] Final candidates: []
2025-04-11 17:37:44,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,234 [INFO] Final candidates: []
2025-04-11 17:37:44,234 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,235 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,309 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:44,309 [DEBUG] Tree_policy iteration 1: Expanding move (6, 11)
2025-04-11 17:37:44,319 [INFO] Final candidates: []
2025-04-11 17:37:44,319 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,328 [INFO] Final candidates: []
2025-04-11 17:37:44,328 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,328 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,422 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:44,422 [DEBUG] Tree_policy iteration 1: Expanding move (13, 8)
2025-04-11 17:37:44,431 [INFO] Final candidates: []
2025-04-11 17:37:44,431 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,441 [INFO] Final candidates: []
2025-04-11 17:37:44,441 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,457 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:44,458 [DEBUG] Tree_policy iteration 1: Expanding move (17, 12)
2025-04-11 17:37:44,467 [INFO] Final candidates: []
2025-04-11 17:37:44,467 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,477 [INFO] Final candidates: []
2025-04-11 17:37:44,477 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,506 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:44,506 [DEBUG] Tree_policy iteration 1: Expanding move (9, 13)
2025-04-11 17:37:44,516 [INFO] Final candidates: []
2025-04-11 17:37:44,516 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,525 [INFO] Final candidates: []
2025-04-11 17:37:44,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,525 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,567 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:44,567 [DEBUG] Tree_policy iteration 1: Expanding move (18, 7)
2025-04-11 17:37:44,576 [INFO] Final candidates: []
2025-04-11 17:37:44,576 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,585 [INFO] Final candidates: []
2025-04-11 17:37:44,585 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,586 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,701 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:44,701 [DEBUG] Tree_policy iteration 1: Expanding move (2, 5)
2025-04-11 17:37:44,710 [INFO] Final candidates: []
2025-04-11 17:37:44,711 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,720 [INFO] Final candidates: []
2025-04-11 17:37:44,720 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,898 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:44,898 [DEBUG] Tree_policy iteration 1: Expanding move (0, 17)
2025-04-11 17:37:44,908 [INFO] Final candidates: []
2025-04-11 17:37:44,908 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,918 [INFO] Final candidates: []
2025-04-11 17:37:44,918 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:44,972 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:44,972 [DEBUG] Tree_policy iteration 1: Expanding move (5, 1)
2025-04-11 17:37:44,982 [INFO] Final candidates: []
2025-04-11 17:37:44,982 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,991 [INFO] Final candidates: []
2025-04-11 17:37:44,991 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:44,991 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,068 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:45,068 [DEBUG] Tree_policy iteration 1: Expanding move (8, 13)
2025-04-11 17:37:45,079 [INFO] Final candidates: []
2025-04-11 17:37:45,079 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,089 [INFO] Final candidates: []
2025-04-11 17:37:45,089 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,089 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,100 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:45,100 [DEBUG] Tree_policy iteration 1: Expanding move (8, 14)
2025-04-11 17:37:45,110 [INFO] Final candidates: []
2025-04-11 17:37:45,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,119 [INFO] Final candidates: []
2025-04-11 17:37:45,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,256 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:45,256 [DEBUG] Tree_policy iteration 1: Expanding move (18, 10)
2025-04-11 17:37:45,266 [INFO] Final candidates: []
2025-04-11 17:37:45,266 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,275 [INFO] Final candidates: []
2025-04-11 17:37:45,275 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,275 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:45,319 [DEBUG] Tree_policy iteration 1: Expanding move (11, 1)
2025-04-11 17:37:45,329 [INFO] Final candidates: []
2025-04-11 17:37:45,329 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,338 [INFO] Final candidates: []
2025-04-11 17:37:45,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,437 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:45,437 [DEBUG] Tree_policy iteration 1: Expanding move (12, 2)
2025-04-11 17:37:45,447 [INFO] Final candidates: []
2025-04-11 17:37:45,447 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,456 [INFO] Final candidates: []
2025-04-11 17:37:45,456 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,456 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,629 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:45,629 [DEBUG] Tree_policy iteration 1: Expanding move (7, 18)
2025-04-11 17:37:45,638 [INFO] Final candidates: []
2025-04-11 17:37:45,638 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,648 [INFO] Final candidates: []
2025-04-11 17:37:45,648 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,648 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,826 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:45,826 [DEBUG] Tree_policy iteration 1: Expanding move (14, 7)
2025-04-11 17:37:45,836 [INFO] Final candidates: []
2025-04-11 17:37:45,836 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,845 [INFO] Final candidates: []
2025-04-11 17:37:45,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,846 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:45,886 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:45,887 [DEBUG] Tree_policy iteration 1: Expanding move (13, 12)
2025-04-11 17:37:45,897 [INFO] Final candidates: []
2025-04-11 17:37:45,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,907 [INFO] Final candidates: []
2025-04-11 17:37:45,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:45,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,030 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:46,030 [DEBUG] Tree_policy iteration 1: Expanding move (4, 7)
2025-04-11 17:37:46,039 [INFO] Final candidates: []
2025-04-11 17:37:46,040 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,049 [INFO] Final candidates: []
2025-04-11 17:37:46,049 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,049 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,099 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:46,099 [DEBUG] Tree_policy iteration 1: Expanding move (4, 11)
2025-04-11 17:37:46,109 [INFO] Final candidates: []
2025-04-11 17:37:46,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,118 [INFO] Final candidates: []
2025-04-11 17:37:46,118 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,206 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:46,206 [DEBUG] Tree_policy iteration 1: Expanding move (4, 12)
2025-04-11 17:37:46,215 [INFO] Final candidates: []
2025-04-11 17:37:46,215 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,225 [INFO] Final candidates: []
2025-04-11 17:37:46,225 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,225 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,443 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:46,443 [DEBUG] Tree_policy iteration 1: Expanding move (4, 0)
2025-04-11 17:37:46,453 [INFO] Final candidates: []
2025-04-11 17:37:46,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,462 [INFO] Final candidates: []
2025-04-11 17:37:46,462 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,462 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:46,529 [DEBUG] Tree_policy iteration 1: Expanding move (9, 3)
2025-04-11 17:37:46,538 [INFO] Final candidates: []
2025-04-11 17:37:46,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,547 [INFO] Final candidates: []
2025-04-11 17:37:46,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:46,553 [DEBUG] Tree_policy iteration 1: Expanding move (5, 16)
2025-04-11 17:37:46,563 [INFO] Final candidates: []
2025-04-11 17:37:46,563 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,572 [INFO] Final candidates: []
2025-04-11 17:37:46,572 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,572 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,596 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:46,596 [DEBUG] Tree_policy iteration 1: Expanding move (4, 18)
2025-04-11 17:37:46,605 [INFO] Final candidates: []
2025-04-11 17:37:46,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,614 [INFO] Final candidates: []
2025-04-11 17:37:46,614 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,614 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,657 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:46,657 [DEBUG] Tree_policy iteration 1: Expanding move (7, 10)
2025-04-11 17:37:46,667 [INFO] Final candidates: []
2025-04-11 17:37:46,667 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,676 [INFO] Final candidates: []
2025-04-11 17:37:46,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,676 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,806 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:46,806 [DEBUG] Tree_policy iteration 1: Expanding move (1, 6)
2025-04-11 17:37:46,817 [INFO] Final candidates: []
2025-04-11 17:37:46,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,827 [INFO] Final candidates: []
2025-04-11 17:37:46,827 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,828 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,902 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:46,902 [DEBUG] Tree_policy iteration 1: Expanding move (11, 6)
2025-04-11 17:37:46,914 [INFO] Final candidates: []
2025-04-11 17:37:46,914 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,923 [INFO] Final candidates: []
2025-04-11 17:37:46,923 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,923 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,938 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:46,938 [DEBUG] Tree_policy iteration 1: Expanding move (12, 1)
2025-04-11 17:37:46,947 [INFO] Final candidates: []
2025-04-11 17:37:46,947 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,956 [INFO] Final candidates: []
2025-04-11 17:37:46,956 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:46,964 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:46,964 [DEBUG] Tree_policy iteration 1: Expanding move (9, 6)
2025-04-11 17:37:46,973 [INFO] Final candidates: []
2025-04-11 17:37:46,973 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,982 [INFO] Final candidates: []
2025-04-11 17:37:46,982 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:46,983 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,028 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:47,028 [DEBUG] Tree_policy iteration 1: Expanding move (11, 2)
2025-04-11 17:37:47,038 [INFO] Final candidates: []
2025-04-11 17:37:47,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,047 [INFO] Final candidates: []
2025-04-11 17:37:47,047 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,047 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,139 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:47,139 [DEBUG] Tree_policy iteration 1: Expanding move (1, 17)
2025-04-11 17:37:47,148 [INFO] Final candidates: []
2025-04-11 17:37:47,148 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,158 [INFO] Final candidates: []
2025-04-11 17:37:47,158 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,216 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:47,216 [DEBUG] Tree_policy iteration 1: Expanding move (17, 0)
2025-04-11 17:37:47,226 [INFO] Final candidates: []
2025-04-11 17:37:47,226 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,237 [INFO] Final candidates: []
2025-04-11 17:37:47,237 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,294 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:47,294 [DEBUG] Tree_policy iteration 1: Expanding move (3, 3)
2025-04-11 17:37:47,304 [INFO] Final candidates: []
2025-04-11 17:37:47,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,313 [INFO] Final candidates: []
2025-04-11 17:37:47,313 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,449 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:47,449 [DEBUG] Tree_policy iteration 1: Expanding move (13, 15)
2025-04-11 17:37:47,458 [INFO] Final candidates: []
2025-04-11 17:37:47,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,468 [INFO] Final candidates: []
2025-04-11 17:37:47,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,483 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:47,483 [DEBUG] Tree_policy iteration 1: Expanding move (4, 17)
2025-04-11 17:37:47,493 [INFO] Final candidates: []
2025-04-11 17:37:47,493 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,503 [INFO] Final candidates: []
2025-04-11 17:37:47,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,503 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,517 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:47,517 [DEBUG] Tree_policy iteration 1: Expanding move (11, 8)
2025-04-11 17:37:47,526 [INFO] Final candidates: []
2025-04-11 17:37:47,526 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,536 [INFO] Final candidates: []
2025-04-11 17:37:47,536 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,536 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,584 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:47,584 [DEBUG] Tree_policy iteration 1: Expanding move (17, 10)
2025-04-11 17:37:47,593 [INFO] Final candidates: []
2025-04-11 17:37:47,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,603 [INFO] Final candidates: []
2025-04-11 17:37:47,603 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,849 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:47,849 [DEBUG] Tree_policy iteration 1: Expanding move (6, 8)
2025-04-11 17:37:47,865 [INFO] Final candidates: []
2025-04-11 17:37:47,865 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,877 [INFO] Final candidates: []
2025-04-11 17:37:47,877 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,877 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:47,978 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:47,978 [DEBUG] Tree_policy iteration 1: Expanding move (0, 5)
2025-04-11 17:37:47,987 [INFO] Final candidates: []
2025-04-11 17:37:47,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,997 [INFO] Final candidates: []
2025-04-11 17:37:47,997 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:47,997 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:48,089 [DEBUG] Tree_policy iteration 1: Expanding move (4, 8)
2025-04-11 17:37:48,099 [INFO] Final candidates: []
2025-04-11 17:37:48,099 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,108 [INFO] Final candidates: []
2025-04-11 17:37:48,108 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,202 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:48,202 [DEBUG] Tree_policy iteration 1: Expanding move (7, 1)
2025-04-11 17:37:48,211 [INFO] Final candidates: []
2025-04-11 17:37:48,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,220 [INFO] Final candidates: []
2025-04-11 17:37:48,220 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,221 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:48,319 [DEBUG] Tree_policy iteration 1: Expanding move (5, 4)
2025-04-11 17:37:48,329 [INFO] Final candidates: []
2025-04-11 17:37:48,329 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,338 [INFO] Final candidates: []
2025-04-11 17:37:48,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,338 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,346 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:48,347 [DEBUG] Tree_policy iteration 1: Expanding move (11, 0)
2025-04-11 17:37:48,356 [INFO] Final candidates: []
2025-04-11 17:37:48,356 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,366 [INFO] Final candidates: []
2025-04-11 17:37:48,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,366 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,539 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:48,539 [DEBUG] Tree_policy iteration 1: Expanding move (5, 5)
2025-04-11 17:37:48,548 [INFO] Final candidates: []
2025-04-11 17:37:48,548 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,557 [INFO] Final candidates: []
2025-04-11 17:37:48,557 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,557 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,584 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:48,584 [DEBUG] Tree_policy iteration 1: Expanding move (11, 15)
2025-04-11 17:37:48,594 [INFO] Final candidates: []
2025-04-11 17:37:48,594 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,603 [INFO] Final candidates: []
2025-04-11 17:37:48,603 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,666 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:48,666 [DEBUG] Tree_policy iteration 1: Expanding move (15, 0)
2025-04-11 17:37:48,675 [INFO] Final candidates: []
2025-04-11 17:37:48,675 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,685 [INFO] Final candidates: []
2025-04-11 17:37:48,685 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:48,748 [DEBUG] Tree_policy iteration 1: Expanding move (16, 14)
2025-04-11 17:37:48,759 [INFO] Final candidates: []
2025-04-11 17:37:48,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,768 [INFO] Final candidates: []
2025-04-11 17:37:48,768 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,825 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:48,825 [DEBUG] Tree_policy iteration 1: Expanding move (14, 6)
2025-04-11 17:37:48,834 [INFO] Final candidates: []
2025-04-11 17:37:48,834 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,844 [INFO] Final candidates: []
2025-04-11 17:37:48,844 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:48,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:48,890 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:48,890 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:37:48,890 [INFO] MCTS selected move: P3
2025-04-11 17:37:48,890 [INFO] ===============NEW MOVE================
2025-04-11 17:37:53,750 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:37:53,759 [INFO] Final candidates: []
2025-04-11 17:37:53,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:53,770 [INFO] Final candidates: []
2025-04-11 17:37:53,770 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:53,770 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:37:53,770 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:37:53,770 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(9)))
2025-04-11 17:37:53,782 [INFO] Final candidates: []
2025-04-11 17:37:53,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:53,793 [INFO] Final candidates: []
2025-04-11 17:37:53,793 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:53,793 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:37:53,793 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:53,891 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:53,891 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(2), np.int64(10)))
2025-04-11 17:37:53,900 [INFO] Final candidates: []
2025-04-11 17:37:53,900 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:53,909 [INFO] Final candidates: []
2025-04-11 17:37:53,909 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:53,909 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:54,089 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(3), np.int64(8)))
2025-04-11 17:37:54,099 [INFO] Final candidates: []
2025-04-11 17:37:54,099 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,108 [INFO] Final candidates: []
2025-04-11 17:37:54,108 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,147 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:54,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(6), np.int64(8)))
2025-04-11 17:37:54,156 [INFO] Final candidates: []
2025-04-11 17:37:54,156 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,165 [INFO] Final candidates: []
2025-04-11 17:37:54,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,214 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:54,214 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(4), np.int64(10)))
2025-04-11 17:37:54,224 [INFO] Final candidates: []
2025-04-11 17:37:54,224 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,233 [INFO] Final candidates: []
2025-04-11 17:37:54,233 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,234 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,426 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:54,426 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(1), np.int64(13)))
2025-04-11 17:37:54,435 [INFO] Final candidates: []
2025-04-11 17:37:54,435 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,445 [INFO] Final candidates: []
2025-04-11 17:37:54,446 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,446 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,533 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:54,533 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(0), np.int64(14)))
2025-04-11 17:37:54,542 [INFO] Final candidates: []
2025-04-11 17:37:54,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,553 [INFO] Final candidates: []
2025-04-11 17:37:54,553 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,553 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,579 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:54,579 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(3), np.int64(11)))
2025-04-11 17:37:54,588 [INFO] Final candidates: []
2025-04-11 17:37:54,588 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,597 [INFO] Final candidates: []
2025-04-11 17:37:54,597 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,597 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,613 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:54,613 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(3), np.int64(14)))
2025-04-11 17:37:54,622 [INFO] Final candidates: []
2025-04-11 17:37:54,622 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,631 [INFO] Final candidates: []
2025-04-11 17:37:54,631 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,631 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:54,856 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:54,856 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(3), np.int64(11)))
2025-04-11 17:37:54,866 [INFO] Final candidates: []
2025-04-11 17:37:54,866 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,876 [INFO] Final candidates: []
2025-04-11 17:37:54,876 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:54,877 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,017 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:55,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(13)))
2025-04-11 17:37:55,026 [INFO] Final candidates: []
2025-04-11 17:37:55,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,036 [INFO] Final candidates: []
2025-04-11 17:37:55,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,171 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:55,172 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:37:55,181 [INFO] Final candidates: []
2025-04-11 17:37:55,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,190 [INFO] Final candidates: []
2025-04-11 17:37:55,190 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,272 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:55,272 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(5), np.int64(11)))
2025-04-11 17:37:55,281 [INFO] Final candidates: []
2025-04-11 17:37:55,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,290 [INFO] Final candidates: []
2025-04-11 17:37:55,290 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,417 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:55,417 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(3), np.int64(11)))
2025-04-11 17:37:55,427 [INFO] Final candidates: []
2025-04-11 17:37:55,427 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,436 [INFO] Final candidates: []
2025-04-11 17:37:55,436 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,566 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:55,566 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(3), np.int64(14)))
2025-04-11 17:37:55,575 [INFO] Final candidates: []
2025-04-11 17:37:55,575 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,584 [INFO] Final candidates: []
2025-04-11 17:37:55,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,584 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,728 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:55,728 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(5), np.int64(7)))
2025-04-11 17:37:55,738 [INFO] Final candidates: []
2025-04-11 17:37:55,738 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,747 [INFO] Final candidates: []
2025-04-11 17:37:55,747 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,747 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,871 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:55,871 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(4), np.int64(14)))
2025-04-11 17:37:55,883 [INFO] Final candidates: []
2025-04-11 17:37:55,883 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,892 [INFO] Final candidates: []
2025-04-11 17:37:55,892 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:55,892 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:55,993 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:55,993 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(4), np.int64(14)))
2025-04-11 17:37:56,002 [INFO] Final candidates: []
2025-04-11 17:37:56,002 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,011 [INFO] Final candidates: []
2025-04-11 17:37:56,011 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,011 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,062 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:56,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(8)))
2025-04-11 17:37:56,071 [INFO] Final candidates: []
2025-04-11 17:37:56,071 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,080 [INFO] Final candidates: []
2025-04-11 17:37:56,080 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,080 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,111 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:56,111 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(2), np.int64(15)))
2025-04-11 17:37:56,121 [INFO] Final candidates: []
2025-04-11 17:37:56,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,130 [INFO] Final candidates: []
2025-04-11 17:37:56,130 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,148 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,149 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(6), np.int64(9)))
2025-04-11 17:37:56,152 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:37:56,152 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:37:56,152 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (4, 9)]
2025-04-11 17:37:56,152 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:37:56,152 [DEBUG] board coords: [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 17:37:56,152 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:37:56,152 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 9), (8, 9)]
2025-04-11 17:37:56,152 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:37:56,158 [INFO] Final candidates: [(4, 9), (2, 9), (8, 9)]
2025-04-11 17:37:56,158 [INFO] Phase win: Collected 3unique candidate(s):[((4, 9), (8, 9)), ((2, 9), (8, 9)), ((4, 9), (2, 9))]
2025-04-11 17:37:56,158 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:56,167 [INFO] Final candidates: []
2025-04-11 17:37:56,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,167 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,202 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,202 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(4), np.int64(8)))
2025-04-11 17:37:56,212 [INFO] Final candidates: []
2025-04-11 17:37:56,213 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,222 [INFO] Final candidates: []
2025-04-11 17:37:56,222 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,242 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,243 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(2), np.int64(12)))
2025-04-11 17:37:56,252 [INFO] Final candidates: []
2025-04-11 17:37:56,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,261 [INFO] Final candidates: []
2025-04-11 17:37:56,261 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,261 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,270 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:56,270 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(2), np.int64(12)))
2025-04-11 17:37:56,279 [INFO] Final candidates: []
2025-04-11 17:37:56,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,288 [INFO] Final candidates: []
2025-04-11 17:37:56,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,288 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,355 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,355 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(2), np.int64(9)))
2025-04-11 17:37:56,364 [INFO] Final candidates: []
2025-04-11 17:37:56,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,373 [INFO] Final candidates: []
2025-04-11 17:37:56,373 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,373 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,410 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,410 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(5), np.int64(11)))
2025-04-11 17:37:56,420 [INFO] Final candidates: []
2025-04-11 17:37:56,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,430 [INFO] Final candidates: []
2025-04-11 17:37:56,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,472 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,473 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(8)))
2025-04-11 17:37:56,482 [INFO] Final candidates: []
2025-04-11 17:37:56,482 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,491 [INFO] Final candidates: []
2025-04-11 17:37:56,491 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,491 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,510 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(2), np.int64(9)))
2025-04-11 17:37:56,519 [INFO] Final candidates: []
2025-04-11 17:37:56,519 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,528 [INFO] Final candidates: []
2025-04-11 17:37:56,528 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,528 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,540 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:56,540 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(3), np.int64(14)))
2025-04-11 17:37:56,551 [INFO] Final candidates: []
2025-04-11 17:37:56,551 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,560 [INFO] Final candidates: []
2025-04-11 17:37:56,560 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,560 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,716 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,716 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(7), np.int64(9)))
2025-04-11 17:37:56,719 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:37:56,719 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:37:56,719 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (6, 9)]
2025-04-11 17:37:56,719 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:37:56,719 [DEBUG] board coords: [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 17:37:56,719 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:37:56,719 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 9), (8, 9)]
2025-04-11 17:37:56,719 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:37:56,725 [INFO] Final candidates: [(2, 9), (8, 9), (6, 9)]
2025-04-11 17:37:56,725 [INFO] Phase win: Collected 3unique candidate(s):[((2, 9), (6, 9)), ((2, 9), (8, 9)), ((8, 9), (6, 9))]
2025-04-11 17:37:56,725 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:37:56,734 [INFO] Final candidates: []
2025-04-11 17:37:56,734 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,734 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,798 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,798 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(5), np.int64(8)))
2025-04-11 17:37:56,807 [INFO] Final candidates: []
2025-04-11 17:37:56,807 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,816 [INFO] Final candidates: []
2025-04-11 17:37:56,816 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:56,883 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:56,883 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(1), np.int64(15)))
2025-04-11 17:37:56,893 [INFO] Final candidates: []
2025-04-11 17:37:56,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,902 [INFO] Final candidates: []
2025-04-11 17:37:56,902 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:56,902 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,022 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:57,022 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 17:37:57,032 [INFO] Final candidates: []
2025-04-11 17:37:57,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,041 [INFO] Final candidates: []
2025-04-11 17:37:57,041 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,041 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,162 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:57,162 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(4), np.int64(8)))
2025-04-11 17:37:57,172 [INFO] Final candidates: []
2025-04-11 17:37:57,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,182 [INFO] Final candidates: []
2025-04-11 17:37:57,182 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,182 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,225 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:57,225 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(2), np.int64(16)))
2025-04-11 17:37:57,234 [INFO] Final candidates: []
2025-04-11 17:37:57,234 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,243 [INFO] Final candidates: []
2025-04-11 17:37:57,243 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,243 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,315 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:57,315 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(5), np.int64(11)))
2025-04-11 17:37:57,326 [INFO] Final candidates: []
2025-04-11 17:37:57,326 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,335 [INFO] Final candidates: []
2025-04-11 17:37:57,335 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,336 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,496 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:57,497 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(2), np.int64(8)))
2025-04-11 17:37:57,508 [INFO] Final candidates: []
2025-04-11 17:37:57,508 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,518 [INFO] Final candidates: []
2025-04-11 17:37:57,518 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,666 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:57,666 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(2), np.int64(13)))
2025-04-11 17:37:57,676 [INFO] Final candidates: []
2025-04-11 17:37:57,676 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,685 [INFO] Final candidates: []
2025-04-11 17:37:57,685 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,721 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:57,721 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(5), np.int64(11)))
2025-04-11 17:37:57,731 [INFO] Final candidates: []
2025-04-11 17:37:57,731 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,739 [INFO] Final candidates: []
2025-04-11 17:37:57,739 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,740 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,826 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:57,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(6), np.int64(10)))
2025-04-11 17:37:57,835 [INFO] Final candidates: []
2025-04-11 17:37:57,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,844 [INFO] Final candidates: []
2025-04-11 17:37:57,844 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:57,895 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:57,895 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(2), np.int64(9)))
2025-04-11 17:37:57,904 [INFO] Final candidates: []
2025-04-11 17:37:57,904 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,913 [INFO] Final candidates: []
2025-04-11 17:37:57,913 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:57,913 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,031 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:58,031 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(5), np.int64(7)))
2025-04-11 17:37:58,040 [INFO] Final candidates: []
2025-04-11 17:37:58,040 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,050 [INFO] Final candidates: []
2025-04-11 17:37:58,050 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,051 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,164 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:58,165 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(2), np.int64(13)))
2025-04-11 17:37:58,174 [INFO] Final candidates: []
2025-04-11 17:37:58,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,183 [INFO] Final candidates: []
2025-04-11 17:37:58,183 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,184 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,332 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:58,332 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(2), np.int64(10)))
2025-04-11 17:37:58,341 [INFO] Final candidates: []
2025-04-11 17:37:58,341 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,350 [INFO] Final candidates: []
2025-04-11 17:37:58,350 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,351 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,394 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:58,394 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(2), np.int64(15)))
2025-04-11 17:37:58,404 [INFO] Final candidates: []
2025-04-11 17:37:58,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,413 [INFO] Final candidates: []
2025-04-11 17:37:58,413 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,414 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,486 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:58,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(3), np.int64(14)))
2025-04-11 17:37:58,496 [INFO] Final candidates: []
2025-04-11 17:37:58,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,505 [INFO] Final candidates: []
2025-04-11 17:37:58,505 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,678 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:58,678 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(7), np.int64(9)))
2025-04-11 17:37:58,688 [INFO] Final candidates: []
2025-04-11 17:37:58,688 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,697 [INFO] Final candidates: []
2025-04-11 17:37:58,697 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,763 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:58,763 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(4), np.int64(14)))
2025-04-11 17:37:58,773 [INFO] Final candidates: []
2025-04-11 17:37:58,773 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,782 [INFO] Final candidates: []
2025-04-11 17:37:58,782 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,782 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,861 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:58,861 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 17:37:58,870 [INFO] Final candidates: []
2025-04-11 17:37:58,870 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,879 [INFO] Final candidates: []
2025-04-11 17:37:58,879 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:58,879 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:58,982 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:58,983 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(10)))
2025-04-11 17:37:58,992 [INFO] Final candidates: []
2025-04-11 17:37:58,992 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,001 [INFO] Final candidates: []
2025-04-11 17:37:59,001 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,001 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,024 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:59,024 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(3), np.int64(10)))
2025-04-11 17:37:59,034 [INFO] Final candidates: []
2025-04-11 17:37:59,034 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,043 [INFO] Final candidates: []
2025-04-11 17:37:59,043 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,043 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:37:59,043 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,201 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:59,201 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(2), np.int64(10)))
2025-04-11 17:37:59,211 [INFO] Final candidates: []
2025-04-11 17:37:59,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,220 [INFO] Final candidates: []
2025-04-11 17:37:59,220 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,260 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:59,260 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 17:37:59,270 [INFO] Final candidates: []
2025-04-11 17:37:59,270 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,279 [INFO] Final candidates: []
2025-04-11 17:37:59,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,279 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,370 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:59,370 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 17:37:59,379 [INFO] Final candidates: []
2025-04-11 17:37:59,379 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,388 [INFO] Final candidates: []
2025-04-11 17:37:59,388 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,388 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,635 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:59,635 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(3), np.int64(8)))
2025-04-11 17:37:59,644 [INFO] Final candidates: []
2025-04-11 17:37:59,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,653 [INFO] Final candidates: []
2025-04-11 17:37:59,653 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:37:59,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(5), np.int64(8)))
2025-04-11 17:37:59,707 [INFO] Final candidates: []
2025-04-11 17:37:59,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,716 [INFO] Final candidates: []
2025-04-11 17:37:59,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,716 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,818 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:59,818 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(2), np.int64(10)))
2025-04-11 17:37:59,828 [INFO] Final candidates: []
2025-04-11 17:37:59,828 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,836 [INFO] Final candidates: []
2025-04-11 17:37:59,836 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:37:59,958 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:37:59,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(5), np.int64(11)))
2025-04-11 17:37:59,967 [INFO] Final candidates: []
2025-04-11 17:37:59,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,976 [INFO] Final candidates: []
2025-04-11 17:37:59,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:37:59,976 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,191 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:00,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(4), np.int64(10)))
2025-04-11 17:38:00,201 [INFO] Final candidates: []
2025-04-11 17:38:00,201 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,210 [INFO] Final candidates: []
2025-04-11 17:38:00,210 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,210 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,251 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:00,251 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(3), np.int64(14)))
2025-04-11 17:38:00,260 [INFO] Final candidates: []
2025-04-11 17:38:00,260 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,269 [INFO] Final candidates: []
2025-04-11 17:38:00,269 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,269 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,317 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:00,317 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:00,327 [INFO] Final candidates: []
2025-04-11 17:38:00,327 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,337 [INFO] Final candidates: []
2025-04-11 17:38:00,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,408 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:00,408 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:00,417 [INFO] Final candidates: []
2025-04-11 17:38:00,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,427 [INFO] Final candidates: []
2025-04-11 17:38:00,427 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,427 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,510 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:00,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:00,520 [INFO] Final candidates: []
2025-04-11 17:38:00,520 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,529 [INFO] Final candidates: []
2025-04-11 17:38:00,529 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,529 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,596 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:00,596 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(6), np.int64(10)))
2025-04-11 17:38:00,605 [INFO] Final candidates: []
2025-04-11 17:38:00,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,614 [INFO] Final candidates: []
2025-04-11 17:38:00,614 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,614 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,644 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:00,644 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:00,654 [INFO] Final candidates: []
2025-04-11 17:38:00,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,663 [INFO] Final candidates: []
2025-04-11 17:38:00,663 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,663 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,722 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:00,722 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:00,731 [INFO] Final candidates: []
2025-04-11 17:38:00,731 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,740 [INFO] Final candidates: []
2025-04-11 17:38:00,740 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,740 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,904 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:00,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:00,914 [INFO] Final candidates: []
2025-04-11 17:38:00,914 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,922 [INFO] Final candidates: []
2025-04-11 17:38:00,922 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,923 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:00,953 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:00,953 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:00,965 [INFO] Final candidates: []
2025-04-11 17:38:00,965 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,974 [INFO] Final candidates: []
2025-04-11 17:38:00,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:00,974 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,220 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:01,221 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(3), np.int64(11)))
2025-04-11 17:38:01,230 [INFO] Final candidates: []
2025-04-11 17:38:01,230 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,239 [INFO] Final candidates: []
2025-04-11 17:38:01,239 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,239 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,286 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:01,286 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(3), np.int64(15)))
2025-04-11 17:38:01,296 [INFO] Final candidates: []
2025-04-11 17:38:01,296 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,304 [INFO] Final candidates: []
2025-04-11 17:38:01,304 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,364 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:01,365 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(3), np.int64(15)))
2025-04-11 17:38:01,374 [INFO] Final candidates: []
2025-04-11 17:38:01,374 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,383 [INFO] Final candidates: []
2025-04-11 17:38:01,383 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,408 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:01,408 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:01,417 [INFO] Final candidates: []
2025-04-11 17:38:01,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,428 [INFO] Final candidates: []
2025-04-11 17:38:01,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,428 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,445 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:01,445 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:01,454 [INFO] Final candidates: []
2025-04-11 17:38:01,454 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,463 [INFO] Final candidates: []
2025-04-11 17:38:01,463 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,464 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,508 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:01,508 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:01,517 [INFO] Final candidates: []
2025-04-11 17:38:01,517 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,526 [INFO] Final candidates: []
2025-04-11 17:38:01,526 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,526 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,585 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:01,585 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:01,595 [INFO] Final candidates: []
2025-04-11 17:38:01,595 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,604 [INFO] Final candidates: []
2025-04-11 17:38:01,604 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,604 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,735 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:01,735 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:01,745 [INFO] Final candidates: []
2025-04-11 17:38:01,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,754 [INFO] Final candidates: []
2025-04-11 17:38:01,754 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,754 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,858 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:01,859 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:01,869 [INFO] Final candidates: []
2025-04-11 17:38:01,869 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,878 [INFO] Final candidates: []
2025-04-11 17:38:01,878 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,878 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:01,931 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:01,931 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:01,940 [INFO] Final candidates: []
2025-04-11 17:38:01,940 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,949 [INFO] Final candidates: []
2025-04-11 17:38:01,949 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:01,949 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:02,133 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:02,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:02,143 [INFO] Final candidates: []
2025-04-11 17:38:02,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,152 [INFO] Final candidates: []
2025-04-11 17:38:02,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:02,336 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:02,336 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(3), np.int64(11)))
2025-04-11 17:38:02,345 [INFO] Final candidates: []
2025-04-11 17:38:02,345 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,355 [INFO] Final candidates: []
2025-04-11 17:38:02,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,356 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:02,636 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:02,636 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:02,645 [INFO] Final candidates: []
2025-04-11 17:38:02,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,654 [INFO] Final candidates: []
2025-04-11 17:38:02,654 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:02,738 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:02,738 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(4), np.int64(8)))
2025-04-11 17:38:02,747 [INFO] Final candidates: []
2025-04-11 17:38:02,747 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,756 [INFO] Final candidates: []
2025-04-11 17:38:02,756 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,757 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:02,973 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:02,973 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(3), np.int64(15)))
2025-04-11 17:38:02,982 [INFO] Final candidates: []
2025-04-11 17:38:02,982 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,992 [INFO] Final candidates: []
2025-04-11 17:38:02,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:02,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,082 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:03,082 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:03,092 [INFO] Final candidates: []
2025-04-11 17:38:03,092 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,102 [INFO] Final candidates: []
2025-04-11 17:38:03,102 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,102 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,259 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:03,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:03,270 [INFO] Final candidates: []
2025-04-11 17:38:03,270 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,280 [INFO] Final candidates: []
2025-04-11 17:38:03,280 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,513 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:03,513 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:03,522 [INFO] Final candidates: []
2025-04-11 17:38:03,522 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,531 [INFO] Final candidates: []
2025-04-11 17:38:03,531 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,531 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,630 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:03,630 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:38:03,640 [INFO] Final candidates: []
2025-04-11 17:38:03,640 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,649 [INFO] Final candidates: []
2025-04-11 17:38:03,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,649 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,719 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:03,719 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:03,728 [INFO] Final candidates: []
2025-04-11 17:38:03,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,737 [INFO] Final candidates: []
2025-04-11 17:38:03,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,737 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,798 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:03,798 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:03,807 [INFO] Final candidates: []
2025-04-11 17:38:03,807 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,816 [INFO] Final candidates: []
2025-04-11 17:38:03,816 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:03,842 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:03,851 [INFO] Final candidates: []
2025-04-11 17:38:03,851 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,860 [INFO] Final candidates: []
2025-04-11 17:38:03,860 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,860 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:03,959 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:03,959 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:03,968 [INFO] Final candidates: []
2025-04-11 17:38:03,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,977 [INFO] Final candidates: []
2025-04-11 17:38:03,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:03,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,066 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:04,067 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:04,076 [INFO] Final candidates: []
2025-04-11 17:38:04,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,085 [INFO] Final candidates: []
2025-04-11 17:38:04,085 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,086 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,117 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:04,117 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(11)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:04,127 [INFO] Final candidates: []
2025-04-11 17:38:04,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,135 [INFO] Final candidates: []
2025-04-11 17:38:04,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,273 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:04,273 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:04,282 [INFO] Final candidates: []
2025-04-11 17:38:04,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,291 [INFO] Final candidates: []
2025-04-11 17:38:04,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,413 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:04,414 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:04,423 [INFO] Final candidates: []
2025-04-11 17:38:04,423 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,432 [INFO] Final candidates: []
2025-04-11 17:38:04,432 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,433 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,456 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:04,457 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(6), np.int64(10)))
2025-04-11 17:38:04,466 [INFO] Final candidates: []
2025-04-11 17:38:04,466 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,475 [INFO] Final candidates: []
2025-04-11 17:38:04,475 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,475 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,538 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:04,538 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:04,547 [INFO] Final candidates: []
2025-04-11 17:38:04,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,556 [INFO] Final candidates: []
2025-04-11 17:38:04,556 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,557 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,599 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:04,599 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 17:38:04,608 [INFO] Final candidates: []
2025-04-11 17:38:04,608 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,617 [INFO] Final candidates: []
2025-04-11 17:38:04,617 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,617 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,705 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:04,705 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(2), np.int64(9)))
2025-04-11 17:38:04,715 [INFO] Final candidates: []
2025-04-11 17:38:04,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,724 [INFO] Final candidates: []
2025-04-11 17:38:04,724 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,724 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:04,884 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:04,885 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(4), np.int64(10)))
2025-04-11 17:38:04,894 [INFO] Final candidates: []
2025-04-11 17:38:04,894 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,903 [INFO] Final candidates: []
2025-04-11 17:38:04,903 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:04,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:05,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:05,123 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:38:05,123 [INFO] MCTS selected move: O4,K2
2025-04-11 17:38:05,123 [INFO] ===============NEW MOVE================
2025-04-11 17:38:07,605 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:38:07,614 [INFO] Final candidates: []
2025-04-11 17:38:07,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,623 [INFO] Final candidates: []
2025-04-11 17:38:07,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,623 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:38:07,624 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:38:07,624 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:07,633 [INFO] Final candidates: []
2025-04-11 17:38:07,634 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,643 [INFO] Final candidates: []
2025-04-11 17:38:07,643 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,643 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:38:07,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:07,760 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:07,760 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(2), np.int64(16)))
2025-04-11 17:38:07,769 [INFO] Final candidates: []
2025-04-11 17:38:07,769 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,778 [INFO] Final candidates: []
2025-04-11 17:38:07,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:07,974 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:07,974 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(0), np.int64(10)))
2025-04-11 17:38:07,984 [INFO] Final candidates: []
2025-04-11 17:38:07,984 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,993 [INFO] Final candidates: []
2025-04-11 17:38:07,993 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:07,993 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:08,064 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:08,064 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:08,073 [INFO] Final candidates: []
2025-04-11 17:38:08,073 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,082 [INFO] Final candidates: []
2025-04-11 17:38:08,082 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,083 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:08,180 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:08,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:08,189 [INFO] Final candidates: []
2025-04-11 17:38:08,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,197 [INFO] Final candidates: []
2025-04-11 17:38:08,197 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,198 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:08,325 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:08,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:08,334 [INFO] Final candidates: []
2025-04-11 17:38:08,334 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,343 [INFO] Final candidates: []
2025-04-11 17:38:08,343 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,343 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:08,570 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:08,570 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(11)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:08,579 [INFO] Final candidates: []
2025-04-11 17:38:08,579 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,588 [INFO] Final candidates: []
2025-04-11 17:38:08,588 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,588 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:08,641 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:08,642 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(2), np.int64(9)))
2025-04-11 17:38:08,650 [INFO] Final candidates: []
2025-04-11 17:38:08,650 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,659 [INFO] Final candidates: []
2025-04-11 17:38:08,659 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,660 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:08,756 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:08,756 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(9), np.int64(14)))
2025-04-11 17:38:08,765 [INFO] Final candidates: []
2025-04-11 17:38:08,765 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,774 [INFO] Final candidates: []
2025-04-11 17:38:08,774 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,774 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:08,865 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:08,866 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(8), np.int64(8)))
2025-04-11 17:38:08,874 [INFO] Final candidates: []
2025-04-11 17:38:08,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,883 [INFO] Final candidates: []
2025-04-11 17:38:08,883 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:08,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:09,087 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:09,087 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(4), np.int64(10)))
2025-04-11 17:38:09,096 [INFO] Final candidates: []
2025-04-11 17:38:09,096 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,105 [INFO] Final candidates: []
2025-04-11 17:38:09,105 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,105 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:09,244 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:09,245 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(9), np.int64(16)))
2025-04-11 17:38:09,254 [INFO] Final candidates: []
2025-04-11 17:38:09,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,262 [INFO] Final candidates: []
2025-04-11 17:38:09,262 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,263 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:09,334 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:09,335 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(2), np.int64(10)))
2025-04-11 17:38:09,343 [INFO] Final candidates: []
2025-04-11 17:38:09,343 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,352 [INFO] Final candidates: []
2025-04-11 17:38:09,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,353 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:09,438 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:09,438 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(0), np.int64(8)))
2025-04-11 17:38:09,447 [INFO] Final candidates: []
2025-04-11 17:38:09,447 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,456 [INFO] Final candidates: []
2025-04-11 17:38:09,456 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,456 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:09,614 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:09,615 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(7)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:09,624 [INFO] Final candidates: []
2025-04-11 17:38:09,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,635 [INFO] Final candidates: []
2025-04-11 17:38:09,635 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,635 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:09,666 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:09,666 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(0), np.int64(8)))
2025-04-11 17:38:09,675 [INFO] Final candidates: []
2025-04-11 17:38:09,675 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,684 [INFO] Final candidates: []
2025-04-11 17:38:09,684 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,684 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:09,876 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:09,876 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(7), np.int64(8)))
2025-04-11 17:38:09,885 [INFO] Final candidates: []
2025-04-11 17:38:09,885 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,894 [INFO] Final candidates: []
2025-04-11 17:38:09,894 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:09,895 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,007 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:10,007 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:10,016 [INFO] Final candidates: []
2025-04-11 17:38:10,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,025 [INFO] Final candidates: []
2025-04-11 17:38:10,025 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:10,132 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:10,141 [INFO] Final candidates: []
2025-04-11 17:38:10,141 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,150 [INFO] Final candidates: []
2025-04-11 17:38:10,150 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,150 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:10,299 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(15)))
2025-04-11 17:38:10,307 [INFO] Final candidates: []
2025-04-11 17:38:10,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,316 [INFO] Final candidates: []
2025-04-11 17:38:10,316 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,443 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:10,444 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(5), np.int64(7)))
2025-04-11 17:38:10,453 [INFO] Final candidates: []
2025-04-11 17:38:10,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,461 [INFO] Final candidates: []
2025-04-11 17:38:10,462 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,462 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,603 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:10,603 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(10), np.int64(14)))
2025-04-11 17:38:10,612 [INFO] Final candidates: []
2025-04-11 17:38:10,612 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,621 [INFO] Final candidates: []
2025-04-11 17:38:10,621 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,621 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,835 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:10,836 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:10,844 [INFO] Final candidates: []
2025-04-11 17:38:10,844 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,854 [INFO] Final candidates: []
2025-04-11 17:38:10,854 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,854 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,870 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:10,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(6), np.int64(10)))
2025-04-11 17:38:10,879 [INFO] Final candidates: []
2025-04-11 17:38:10,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,888 [INFO] Final candidates: []
2025-04-11 17:38:10,889 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,889 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:10,918 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:10,918 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:10,927 [INFO] Final candidates: []
2025-04-11 17:38:10,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,936 [INFO] Final candidates: []
2025-04-11 17:38:10,936 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:10,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:11,134 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:11,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(9), np.int64(13)))
2025-04-11 17:38:11,143 [INFO] Final candidates: []
2025-04-11 17:38:11,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,154 [INFO] Final candidates: []
2025-04-11 17:38:11,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,154 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:11,269 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:11,269 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:11,278 [INFO] Final candidates: []
2025-04-11 17:38:11,278 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,287 [INFO] Final candidates: []
2025-04-11 17:38:11,287 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,287 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:11,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:11,552 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(1), np.int64(10)))
2025-04-11 17:38:11,561 [INFO] Final candidates: []
2025-04-11 17:38:11,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,570 [INFO] Final candidates: []
2025-04-11 17:38:11,570 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:11,704 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:11,704 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:11,713 [INFO] Final candidates: []
2025-04-11 17:38:11,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,722 [INFO] Final candidates: []
2025-04-11 17:38:11,722 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,722 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:11,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:11,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(8)), (np.int64(10), np.int64(14)))
2025-04-11 17:38:11,880 [INFO] Final candidates: []
2025-04-11 17:38:11,880 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,889 [INFO] Final candidates: []
2025-04-11 17:38:11,889 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:11,889 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,134 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:12,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(6), np.int64(10)))
2025-04-11 17:38:12,143 [INFO] Final candidates: []
2025-04-11 17:38:12,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,152 [INFO] Final candidates: []
2025-04-11 17:38:12,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,188 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:12,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:12,199 [INFO] Final candidates: []
2025-04-11 17:38:12,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,207 [INFO] Final candidates: []
2025-04-11 17:38:12,208 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,256 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:12,256 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(14)))
2025-04-11 17:38:12,265 [INFO] Final candidates: []
2025-04-11 17:38:12,265 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,274 [INFO] Final candidates: []
2025-04-11 17:38:12,274 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,274 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,375 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:12,375 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:12,384 [INFO] Final candidates: []
2025-04-11 17:38:12,384 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,393 [INFO] Final candidates: []
2025-04-11 17:38:12,393 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,393 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,543 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:12,543 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:12,552 [INFO] Final candidates: []
2025-04-11 17:38:12,552 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,561 [INFO] Final candidates: []
2025-04-11 17:38:12,561 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,562 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,663 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:12,663 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(1), np.int64(8)))
2025-04-11 17:38:12,672 [INFO] Final candidates: []
2025-04-11 17:38:12,672 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,681 [INFO] Final candidates: []
2025-04-11 17:38:12,681 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,682 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,732 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:12,732 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(10), np.int64(15)))
2025-04-11 17:38:12,741 [INFO] Final candidates: []
2025-04-11 17:38:12,741 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,751 [INFO] Final candidates: []
2025-04-11 17:38:12,752 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:12,835 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:12,835 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:12,845 [INFO] Final candidates: []
2025-04-11 17:38:12,845 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,855 [INFO] Final candidates: []
2025-04-11 17:38:12,855 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:12,855 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:13,059 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:13,059 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:13,068 [INFO] Final candidates: []
2025-04-11 17:38:13,068 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,077 [INFO] Final candidates: []
2025-04-11 17:38:13,077 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,077 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:13,145 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:13,145 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(16)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:13,154 [INFO] Final candidates: []
2025-04-11 17:38:13,154 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,163 [INFO] Final candidates: []
2025-04-11 17:38:13,163 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,163 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:13,273 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:13,273 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:13,282 [INFO] Final candidates: []
2025-04-11 17:38:13,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,291 [INFO] Final candidates: []
2025-04-11 17:38:13,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,291 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:13,510 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:13,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(9), np.int64(8)))
2025-04-11 17:38:13,519 [INFO] Final candidates: []
2025-04-11 17:38:13,519 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,527 [INFO] Final candidates: []
2025-04-11 17:38:13,528 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,528 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:13,575 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:13,576 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:13,585 [INFO] Final candidates: []
2025-04-11 17:38:13,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,595 [INFO] Final candidates: []
2025-04-11 17:38:13,595 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,595 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:13,904 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:13,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(15)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:13,913 [INFO] Final candidates: []
2025-04-11 17:38:13,913 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,922 [INFO] Final candidates: []
2025-04-11 17:38:13,922 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:13,922 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:14,017 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:14,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(1), np.int64(11)))
2025-04-11 17:38:14,026 [INFO] Final candidates: []
2025-04-11 17:38:14,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,035 [INFO] Final candidates: []
2025-04-11 17:38:14,035 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,035 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:14,136 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:14,136 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(4), np.int64(13)))
2025-04-11 17:38:14,145 [INFO] Final candidates: []
2025-04-11 17:38:14,145 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,154 [INFO] Final candidates: []
2025-04-11 17:38:14,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,155 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:14,404 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:14,404 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(7), np.int64(8)))
2025-04-11 17:38:14,413 [INFO] Final candidates: []
2025-04-11 17:38:14,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,422 [INFO] Final candidates: []
2025-04-11 17:38:14,422 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,423 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:14,556 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:14,556 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:14,565 [INFO] Final candidates: []
2025-04-11 17:38:14,565 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,574 [INFO] Final candidates: []
2025-04-11 17:38:14,574 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,575 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:14,633 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:14,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(7), np.int64(10)))
2025-04-11 17:38:14,643 [INFO] Final candidates: []
2025-04-11 17:38:14,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,651 [INFO] Final candidates: []
2025-04-11 17:38:14,651 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,652 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:14,747 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:14,747 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:14,756 [INFO] Final candidates: []
2025-04-11 17:38:14,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,765 [INFO] Final candidates: []
2025-04-11 17:38:14,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:14,765 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,001 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:15,001 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:15,010 [INFO] Final candidates: []
2025-04-11 17:38:15,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,019 [INFO] Final candidates: []
2025-04-11 17:38:15,019 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,019 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:38:15,019 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,116 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:15,116 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:15,124 [INFO] Final candidates: []
2025-04-11 17:38:15,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,133 [INFO] Final candidates: []
2025-04-11 17:38:15,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,230 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:15,230 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:15,239 [INFO] Final candidates: []
2025-04-11 17:38:15,239 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,247 [INFO] Final candidates: []
2025-04-11 17:38:15,247 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,248 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,374 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:15,374 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:15,383 [INFO] Final candidates: []
2025-04-11 17:38:15,383 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,392 [INFO] Final candidates: []
2025-04-11 17:38:15,392 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,422 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:15,422 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(0), np.int64(8)))
2025-04-11 17:38:15,431 [INFO] Final candidates: []
2025-04-11 17:38:15,431 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,440 [INFO] Final candidates: []
2025-04-11 17:38:15,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,440 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,537 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:15,537 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:15,546 [INFO] Final candidates: []
2025-04-11 17:38:15,546 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,555 [INFO] Final candidates: []
2025-04-11 17:38:15,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,691 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:15,691 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(2), np.int64(16)))
2025-04-11 17:38:15,700 [INFO] Final candidates: []
2025-04-11 17:38:15,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,709 [INFO] Final candidates: []
2025-04-11 17:38:15,709 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,791 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:15,791 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:15,798 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:38:15,798 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:38:15,798 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (1, 15)]
2025-04-11 17:38:15,798 [DEBUG] check_window_intermediate_custom (only one inserted(1, 15)): For L=6, window [0 0 1 1 1 1] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:38:15,798 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:38:15,798 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:38:15,798 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:15,798 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:38:15,798 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 10), (7, 9)]
2025-04-11 17:38:15,798 [DEBUG] check_window_intermediate_custom (only one inserted(6, 10)): For L=6, window [1 1 1 1 0 0] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:15,800 [INFO] Final candidates: [(6, 10), (1, 15)]
2025-04-11 17:38:15,800 [INFO] Phase win: Collected 1unique candidate(s):[((6, 10), (1, 15))]
2025-04-11 17:38:15,800 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:15,809 [INFO] Final candidates: []
2025-04-11 17:38:15,809 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,809 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:15,928 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:15,928 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:15,937 [INFO] Final candidates: []
2025-04-11 17:38:15,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,946 [INFO] Final candidates: []
2025-04-11 17:38:15,946 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:15,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:16,047 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:16,047 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:16,056 [INFO] Final candidates: []
2025-04-11 17:38:16,056 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,065 [INFO] Final candidates: []
2025-04-11 17:38:16,065 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,066 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:16,169 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:16,169 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:16,178 [INFO] Final candidates: []
2025-04-11 17:38:16,178 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,187 [INFO] Final candidates: []
2025-04-11 17:38:16,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:16,318 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:16,318 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:16,327 [INFO] Final candidates: []
2025-04-11 17:38:16,327 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,335 [INFO] Final candidates: []
2025-04-11 17:38:16,336 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,336 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:16,474 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:16,474 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(10), np.int64(16)))
2025-04-11 17:38:16,484 [INFO] Final candidates: []
2025-04-11 17:38:16,484 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,493 [INFO] Final candidates: []
2025-04-11 17:38:16,493 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,493 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:16,551 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:16,551 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(13)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:16,560 [INFO] Final candidates: []
2025-04-11 17:38:16,560 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,571 [INFO] Final candidates: []
2025-04-11 17:38:16,571 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:16,763 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:16,764 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:16,772 [INFO] Final candidates: []
2025-04-11 17:38:16,773 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,782 [INFO] Final candidates: []
2025-04-11 17:38:16,782 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,782 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:16,937 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:16,937 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(8), np.int64(14)))
2025-04-11 17:38:16,946 [INFO] Final candidates: []
2025-04-11 17:38:16,946 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,955 [INFO] Final candidates: []
2025-04-11 17:38:16,955 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:16,955 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,026 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:17,026 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(10), np.int64(16)))
2025-04-11 17:38:17,035 [INFO] Final candidates: []
2025-04-11 17:38:17,035 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,044 [INFO] Final candidates: []
2025-04-11 17:38:17,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,044 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,153 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:17,153 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(4), np.int64(13)))
2025-04-11 17:38:17,162 [INFO] Final candidates: []
2025-04-11 17:38:17,162 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,171 [INFO] Final candidates: []
2025-04-11 17:38:17,171 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,171 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,346 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:17,347 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(11)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:17,355 [INFO] Final candidates: []
2025-04-11 17:38:17,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,364 [INFO] Final candidates: []
2025-04-11 17:38:17,364 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,365 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,384 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:17,384 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(2), np.int64(10)))
2025-04-11 17:38:17,393 [INFO] Final candidates: []
2025-04-11 17:38:17,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,402 [INFO] Final candidates: []
2025-04-11 17:38:17,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,486 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:17,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(10), np.int64(16)))
2025-04-11 17:38:17,495 [INFO] Final candidates: []
2025-04-11 17:38:17,495 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,504 [INFO] Final candidates: []
2025-04-11 17:38:17,504 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,504 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,639 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:17,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(2), np.int64(8)))
2025-04-11 17:38:17,648 [INFO] Final candidates: []
2025-04-11 17:38:17,648 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,657 [INFO] Final candidates: []
2025-04-11 17:38:17,657 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,657 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,774 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:17,774 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(2), np.int64(9)))
2025-04-11 17:38:17,783 [INFO] Final candidates: []
2025-04-11 17:38:17,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,792 [INFO] Final candidates: []
2025-04-11 17:38:17,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,792 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:17,882 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:17,882 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(1), np.int64(8)))
2025-04-11 17:38:17,892 [INFO] Final candidates: []
2025-04-11 17:38:17,892 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,901 [INFO] Final candidates: []
2025-04-11 17:38:17,901 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:17,901 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:18,030 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:18,030 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(1), np.int64(15)))
2025-04-11 17:38:18,039 [INFO] Final candidates: []
2025-04-11 17:38:18,039 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,048 [INFO] Final candidates: []
2025-04-11 17:38:18,048 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,048 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:18,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:18,099 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(1), np.int64(8)))
2025-04-11 17:38:18,108 [INFO] Final candidates: []
2025-04-11 17:38:18,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,117 [INFO] Final candidates: []
2025-04-11 17:38:18,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:18,337 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:18,337 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:18,347 [INFO] Final candidates: []
2025-04-11 17:38:18,347 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,357 [INFO] Final candidates: []
2025-04-11 17:38:18,357 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,357 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:18,447 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:18,448 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(4), np.int64(13)))
2025-04-11 17:38:18,457 [INFO] Final candidates: []
2025-04-11 17:38:18,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,465 [INFO] Final candidates: []
2025-04-11 17:38:18,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,466 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:18,609 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:18,609 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(1), np.int64(10)))
2025-04-11 17:38:18,618 [INFO] Final candidates: []
2025-04-11 17:38:18,618 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,627 [INFO] Final candidates: []
2025-04-11 17:38:18,627 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,628 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:18,830 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:18,831 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(8), np.int64(8)))
2025-04-11 17:38:18,839 [INFO] Final candidates: []
2025-04-11 17:38:18,839 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,848 [INFO] Final candidates: []
2025-04-11 17:38:18,848 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,849 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:18,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:18,970 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:18,980 [INFO] Final candidates: []
2025-04-11 17:38:18,980 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,989 [INFO] Final candidates: []
2025-04-11 17:38:18,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:18,989 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:19,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:19,077 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:19,086 [INFO] Final candidates: []
2025-04-11 17:38:19,086 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,095 [INFO] Final candidates: []
2025-04-11 17:38:19,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,095 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:19,210 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:19,210 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:19,219 [INFO] Final candidates: []
2025-04-11 17:38:19,219 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,227 [INFO] Final candidates: []
2025-04-11 17:38:19,228 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,228 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:19,436 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:19,437 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(7), np.int64(8)))
2025-04-11 17:38:19,446 [INFO] Final candidates: []
2025-04-11 17:38:19,446 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,455 [INFO] Final candidates: []
2025-04-11 17:38:19,455 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,455 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:19,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:19,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(13)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:19,539 [INFO] Final candidates: []
2025-04-11 17:38:19,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,549 [INFO] Final candidates: []
2025-04-11 17:38:19,549 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,549 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:19,674 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:19,674 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(7), np.int64(8)))
2025-04-11 17:38:19,683 [INFO] Final candidates: []
2025-04-11 17:38:19,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,691 [INFO] Final candidates: []
2025-04-11 17:38:19,691 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,692 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:19,775 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:19,775 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(1), np.int64(7)))
2025-04-11 17:38:19,785 [INFO] Final candidates: []
2025-04-11 17:38:19,785 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,794 [INFO] Final candidates: []
2025-04-11 17:38:19,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:19,895 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:19,895 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(1), np.int64(10)))
2025-04-11 17:38:19,904 [INFO] Final candidates: []
2025-04-11 17:38:19,904 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,913 [INFO] Final candidates: []
2025-04-11 17:38:19,913 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:19,913 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:20,081 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:20,081 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(4), np.int64(13)))
2025-04-11 17:38:20,090 [INFO] Final candidates: []
2025-04-11 17:38:20,090 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,099 [INFO] Final candidates: []
2025-04-11 17:38:20,099 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,099 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:20,149 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:20,149 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:20,158 [INFO] Final candidates: []
2025-04-11 17:38:20,158 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,167 [INFO] Final candidates: []
2025-04-11 17:38:20,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,167 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:20,369 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:20,370 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(0), np.int64(9)))
2025-04-11 17:38:20,378 [INFO] Final candidates: []
2025-04-11 17:38:20,378 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,387 [INFO] Final candidates: []
2025-04-11 17:38:20,387 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,388 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:20,634 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:20,634 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:20,643 [INFO] Final candidates: []
2025-04-11 17:38:20,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,652 [INFO] Final candidates: []
2025-04-11 17:38:20,652 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,652 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:20,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:20,695 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:20,703 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:38:20,703 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:38:20,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (4, 12)]
2025-04-11 17:38:20,703 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:38:20,703 [DEBUG] board coords: [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:38:20,703 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:38:20,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 12), (6, 10)]
2025-04-11 17:38:20,703 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:38:20,705 [INFO] Final candidates: [(4, 12), (6, 10), (0, 16)]
2025-04-11 17:38:20,705 [INFO] Phase win: Collected 3unique candidate(s):[((4, 12), (0, 16)), ((6, 10), (0, 16)), ((4, 12), (6, 10))]
2025-04-11 17:38:20,705 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:38:20,714 [INFO] Final candidates: []
2025-04-11 17:38:20,714 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,714 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:20,918 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:20,918 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:20,927 [INFO] Final candidates: []
2025-04-11 17:38:20,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,936 [INFO] Final candidates: []
2025-04-11 17:38:20,936 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:20,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:21,041 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:21,041 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(8), np.int64(14)))
2025-04-11 17:38:21,052 [INFO] Final candidates: []
2025-04-11 17:38:21,052 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,061 [INFO] Final candidates: []
2025-04-11 17:38:21,061 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,061 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:21,222 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:21,222 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(8)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:21,231 [INFO] Final candidates: []
2025-04-11 17:38:21,231 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,239 [INFO] Final candidates: []
2025-04-11 17:38:21,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,240 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:21,261 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:21,261 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(7), np.int64(9)))
2025-04-11 17:38:21,270 [INFO] Final candidates: []
2025-04-11 17:38:21,270 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,279 [INFO] Final candidates: []
2025-04-11 17:38:21,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:21,436 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:21,436 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:21,445 [INFO] Final candidates: []
2025-04-11 17:38:21,445 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,454 [INFO] Final candidates: []
2025-04-11 17:38:21,454 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,455 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:21,745 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:21,746 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(2), np.int64(16)))
2025-04-11 17:38:21,755 [INFO] Final candidates: []
2025-04-11 17:38:21,755 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,766 [INFO] Final candidates: []
2025-04-11 17:38:21,766 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:21,833 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:21,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:21,842 [INFO] Final candidates: []
2025-04-11 17:38:21,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,851 [INFO] Final candidates: []
2025-04-11 17:38:21,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:21,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:21,943 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:21,943 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:38:21,943 [INFO] MCTS selected move: Q9,K8
2025-04-11 17:38:21,943 [INFO] ===============NEW MOVE================
2025-04-11 17:38:29,745 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:38:29,753 [INFO] Final candidates: []
2025-04-11 17:38:29,753 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:29,762 [INFO] Final candidates: []
2025-04-11 17:38:29,762 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:29,762 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:38:29,763 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:38:29,763 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:29,763 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:38:29,763 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:38:29,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 11)]
2025-04-11 17:38:29,763 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:38:29,763 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:29,763 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:38:29,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (5, 14)]
2025-04-11 17:38:29,763 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:29,772 [INFO] Final candidates: [(5, 14), (5, 11), (5, 8)]
2025-04-11 17:38:29,772 [INFO] Phase win: Collected 3unique candidate(s):[((5, 11), (5, 8)), ((5, 14), (5, 11)), ((5, 14), (5, 8))]
2025-04-11 17:38:29,772 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:38:29,780 [INFO] Final candidates: []
2025-04-11 17:38:29,780 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:29,781 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:38:29,781 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:29,954 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:29,954 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(0), np.int64(9)))
2025-04-11 17:38:29,963 [INFO] Final candidates: []
2025-04-11 17:38:29,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:29,972 [INFO] Final candidates: []
2025-04-11 17:38:29,972 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:29,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:30,061 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:30,061 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:30,070 [INFO] Final candidates: []
2025-04-11 17:38:30,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,079 [INFO] Final candidates: []
2025-04-11 17:38:30,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,079 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:30,321 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:30,321 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(10), np.int64(15)))
2025-04-11 17:38:30,330 [INFO] Final candidates: []
2025-04-11 17:38:30,330 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,339 [INFO] Final candidates: []
2025-04-11 17:38:30,339 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:30,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:30,385 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(7), np.int64(14)))
2025-04-11 17:38:30,394 [INFO] Final candidates: []
2025-04-11 17:38:30,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,402 [INFO] Final candidates: []
2025-04-11 17:38:30,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:30,545 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:30,545 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(17)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:30,555 [INFO] Final candidates: []
2025-04-11 17:38:30,555 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,563 [INFO] Final candidates: []
2025-04-11 17:38:30,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,564 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:30,780 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:30,781 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(15)), (np.int64(4), np.int64(11)))
2025-04-11 17:38:30,791 [INFO] Final candidates: []
2025-04-11 17:38:30,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,799 [INFO] Final candidates: []
2025-04-11 17:38:30,799 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:30,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:30,971 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(8)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:30,980 [INFO] Final candidates: []
2025-04-11 17:38:30,980 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,988 [INFO] Final candidates: []
2025-04-11 17:38:30,988 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:30,989 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:31,278 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:31,278 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:31,287 [INFO] Final candidates: []
2025-04-11 17:38:31,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,295 [INFO] Final candidates: []
2025-04-11 17:38:31,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:31,369 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:31,369 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(10)))
2025-04-11 17:38:31,378 [INFO] Final candidates: []
2025-04-11 17:38:31,378 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,386 [INFO] Final candidates: []
2025-04-11 17:38:31,386 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,387 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:31,489 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:31,489 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(10)))
2025-04-11 17:38:31,498 [INFO] Final candidates: []
2025-04-11 17:38:31,498 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,506 [INFO] Final candidates: []
2025-04-11 17:38:31,506 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,507 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:31,579 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:31,579 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(8), np.int64(17)))
2025-04-11 17:38:31,588 [INFO] Final candidates: []
2025-04-11 17:38:31,588 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,597 [INFO] Final candidates: []
2025-04-11 17:38:31,597 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,597 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:31,869 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:31,869 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:31,878 [INFO] Final candidates: []
2025-04-11 17:38:31,878 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,886 [INFO] Final candidates: []
2025-04-11 17:38:31,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:31,886 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,001 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:32,001 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:32,011 [INFO] Final candidates: []
2025-04-11 17:38:32,011 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,020 [INFO] Final candidates: []
2025-04-11 17:38:32,020 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,020 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,113 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:32,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:32,114 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:32,114 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:38:32,114 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 11)]
2025-04-11 17:38:32,114 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:32,123 [INFO] Final candidates: [(5, 10), (5, 11)]
2025-04-11 17:38:32,123 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 11))]
2025-04-11 17:38:32,123 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:32,131 [INFO] Final candidates: []
2025-04-11 17:38:32,131 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,145 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:32,146 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(8), np.int64(13)))
2025-04-11 17:38:32,154 [INFO] Final candidates: []
2025-04-11 17:38:32,155 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,163 [INFO] Final candidates: []
2025-04-11 17:38:32,163 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,163 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,288 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:32,289 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(5), np.int64(14)))
2025-04-11 17:38:32,289 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:32,289 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:38:32,289 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 11)]
2025-04-11 17:38:32,289 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:32,298 [INFO] Final candidates: [(5, 10), (5, 11)]
2025-04-11 17:38:32,298 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 11))]
2025-04-11 17:38:32,298 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:32,306 [INFO] Final candidates: []
2025-04-11 17:38:32,306 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,357 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:32,357 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(3), np.int64(14)))
2025-04-11 17:38:32,366 [INFO] Final candidates: []
2025-04-11 17:38:32,366 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,374 [INFO] Final candidates: []
2025-04-11 17:38:32,374 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,375 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,396 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:32,396 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:32,405 [INFO] Final candidates: []
2025-04-11 17:38:32,405 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,413 [INFO] Final candidates: []
2025-04-11 17:38:32,413 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,413 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,523 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:32,523 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(5), np.int64(14)))
2025-04-11 17:38:32,523 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:32,523 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:38:32,523 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 11)]
2025-04-11 17:38:32,524 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:32,532 [INFO] Final candidates: [(5, 10), (5, 11)]
2025-04-11 17:38:32,532 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 11))]
2025-04-11 17:38:32,532 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:32,541 [INFO] Final candidates: []
2025-04-11 17:38:32,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,541 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,573 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:32,574 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(4), np.int64(8)))
2025-04-11 17:38:32,582 [INFO] Final candidates: []
2025-04-11 17:38:32,583 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,591 [INFO] Final candidates: []
2025-04-11 17:38:32,591 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,591 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,606 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:32,607 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:32,615 [INFO] Final candidates: []
2025-04-11 17:38:32,615 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,624 [INFO] Final candidates: []
2025-04-11 17:38:32,624 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,706 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:32,706 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(8)), (np.int64(7), np.int64(7)))
2025-04-11 17:38:32,715 [INFO] Final candidates: []
2025-04-11 17:38:32,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,723 [INFO] Final candidates: []
2025-04-11 17:38:32,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,723 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:32,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:32,748 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(1), np.int64(8)))
2025-04-11 17:38:32,757 [INFO] Final candidates: []
2025-04-11 17:38:32,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,766 [INFO] Final candidates: []
2025-04-11 17:38:32,766 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:32,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,008 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:33,008 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:33,017 [INFO] Final candidates: []
2025-04-11 17:38:33,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,026 [INFO] Final candidates: []
2025-04-11 17:38:33,026 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:33,132 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(4), np.int64(8)))
2025-04-11 17:38:33,141 [INFO] Final candidates: []
2025-04-11 17:38:33,141 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,149 [INFO] Final candidates: []
2025-04-11 17:38:33,149 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,150 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,219 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:33,219 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(1), np.int64(8)))
2025-04-11 17:38:33,228 [INFO] Final candidates: []
2025-04-11 17:38:33,228 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,236 [INFO] Final candidates: []
2025-04-11 17:38:33,236 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,396 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:33,396 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:33,405 [INFO] Final candidates: []
2025-04-11 17:38:33,405 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,414 [INFO] Final candidates: []
2025-04-11 17:38:33,414 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,414 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,543 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:33,543 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:33,552 [INFO] Final candidates: []
2025-04-11 17:38:33,552 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,561 [INFO] Final candidates: []
2025-04-11 17:38:33,561 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,561 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,658 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:33,658 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:33,667 [INFO] Final candidates: []
2025-04-11 17:38:33,667 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,675 [INFO] Final candidates: []
2025-04-11 17:38:33,675 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,676 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,714 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:33,714 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(8), np.int64(14)))
2025-04-11 17:38:33,723 [INFO] Final candidates: []
2025-04-11 17:38:33,723 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,732 [INFO] Final candidates: []
2025-04-11 17:38:33,732 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,733 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,776 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:33,776 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:33,785 [INFO] Final candidates: []
2025-04-11 17:38:33,785 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,793 [INFO] Final candidates: []
2025-04-11 17:38:33,793 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:33,894 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:33,894 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:33,903 [INFO] Final candidates: []
2025-04-11 17:38:33,903 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,917 [INFO] Final candidates: []
2025-04-11 17:38:33,917 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:33,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,033 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:34,033 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(9), np.int64(10)))
2025-04-11 17:38:34,042 [INFO] Final candidates: []
2025-04-11 17:38:34,042 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,051 [INFO] Final candidates: []
2025-04-11 17:38:34,051 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,051 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:34,122 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(15)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:34,131 [INFO] Final candidates: []
2025-04-11 17:38:34,131 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,140 [INFO] Final candidates: []
2025-04-11 17:38:34,140 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,140 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,204 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:34,204 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:34,213 [INFO] Final candidates: []
2025-04-11 17:38:34,213 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,222 [INFO] Final candidates: []
2025-04-11 17:38:34,222 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,345 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:34,346 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 17:38:34,354 [INFO] Final candidates: []
2025-04-11 17:38:34,354 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,363 [INFO] Final candidates: []
2025-04-11 17:38:34,363 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,363 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,541 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:34,541 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:34,550 [INFO] Final candidates: []
2025-04-11 17:38:34,550 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,559 [INFO] Final candidates: []
2025-04-11 17:38:34,559 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,560 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,619 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:34,619 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(13)), (np.int64(3), np.int64(11)))
2025-04-11 17:38:34,628 [INFO] Final candidates: []
2025-04-11 17:38:34,628 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,637 [INFO] Final candidates: []
2025-04-11 17:38:34,637 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,637 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:34,701 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(6), np.int64(10)))
2025-04-11 17:38:34,709 [INFO] Final candidates: []
2025-04-11 17:38:34,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,718 [INFO] Final candidates: []
2025-04-11 17:38:34,718 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,775 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:34,775 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:34,784 [INFO] Final candidates: []
2025-04-11 17:38:34,784 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,792 [INFO] Final candidates: []
2025-04-11 17:38:34,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,792 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,832 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:34,832 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:34,841 [INFO] Final candidates: []
2025-04-11 17:38:34,841 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,849 [INFO] Final candidates: []
2025-04-11 17:38:34,849 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,849 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:34,978 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:34,978 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(14)))
2025-04-11 17:38:34,987 [INFO] Final candidates: []
2025-04-11 17:38:34,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,995 [INFO] Final candidates: []
2025-04-11 17:38:34,995 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:34,996 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,011 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(1), np.int64(10)))
2025-04-11 17:38:35,020 [INFO] Final candidates: []
2025-04-11 17:38:35,020 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,028 [INFO] Final candidates: []
2025-04-11 17:38:35,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,028 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,077 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:35,086 [INFO] Final candidates: []
2025-04-11 17:38:35,086 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,095 [INFO] Final candidates: []
2025-04-11 17:38:35,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,095 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,255 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,255 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(10), np.int64(16)))
2025-04-11 17:38:35,264 [INFO] Final candidates: []
2025-04-11 17:38:35,264 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,272 [INFO] Final candidates: []
2025-04-11 17:38:35,273 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,273 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,343 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,343 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:35,352 [INFO] Final candidates: []
2025-04-11 17:38:35,352 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,361 [INFO] Final candidates: []
2025-04-11 17:38:35,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,361 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,552 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:35,561 [INFO] Final candidates: []
2025-04-11 17:38:35,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,569 [INFO] Final candidates: []
2025-04-11 17:38:35,569 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,582 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,582 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(5), np.int64(14)))
2025-04-11 17:38:35,582 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:35,582 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:38:35,582 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 11)]
2025-04-11 17:38:35,582 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:35,591 [INFO] Final candidates: [(5, 10), (5, 11)]
2025-04-11 17:38:35,591 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 11))]
2025-04-11 17:38:35,591 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:35,599 [INFO] Final candidates: []
2025-04-11 17:38:35,599 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,599 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:35,707 [INFO] Final candidates: []
2025-04-11 17:38:35,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,717 [INFO] Final candidates: []
2025-04-11 17:38:35,717 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,843 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,843 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:35,843 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:38:35,843 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:38:35,843 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 10)]
2025-04-11 17:38:35,843 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:38:35,843 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:35,843 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:38:35,843 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 14)]
2025-04-11 17:38:35,844 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:35,852 [INFO] Final candidates: [(5, 14), (5, 10), (5, 8)]
2025-04-11 17:38:35,852 [INFO] Phase win: Collected 3unique candidate(s):[((5, 10), (5, 8)), ((5, 14), (5, 8)), ((5, 14), (5, 10))]
2025-04-11 17:38:35,852 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:38:35,860 [INFO] Final candidates: []
2025-04-11 17:38:35,860 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,861 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:38:35,861 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:35,944 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:35,944 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:35,953 [INFO] Final candidates: []
2025-04-11 17:38:35,953 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,961 [INFO] Final candidates: []
2025-04-11 17:38:35,961 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:35,961 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,007 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:36,008 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(11), np.int64(15)))
2025-04-11 17:38:36,016 [INFO] Final candidates: []
2025-04-11 17:38:36,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,025 [INFO] Final candidates: []
2025-04-11 17:38:36,025 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,189 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:36,190 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:36,190 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:38:36,190 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:38:36,190 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 11)]
2025-04-11 17:38:36,190 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:38:36,190 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:36,190 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:38:36,190 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (5, 14)]
2025-04-11 17:38:36,190 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:36,199 [INFO] Final candidates: [(5, 14), (5, 11), (5, 8)]
2025-04-11 17:38:36,199 [INFO] Phase win: Collected 3unique candidate(s):[((5, 11), (5, 8)), ((5, 14), (5, 11)), ((5, 14), (5, 8))]
2025-04-11 17:38:36,199 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:38:36,207 [INFO] Final candidates: []
2025-04-11 17:38:36,207 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,317 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:36,317 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:36,326 [INFO] Final candidates: []
2025-04-11 17:38:36,326 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,334 [INFO] Final candidates: []
2025-04-11 17:38:36,334 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,335 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,411 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:36,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(0), np.int64(10)))
2025-04-11 17:38:36,420 [INFO] Final candidates: []
2025-04-11 17:38:36,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,429 [INFO] Final candidates: []
2025-04-11 17:38:36,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,535 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:36,535 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(9)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:36,544 [INFO] Final candidates: []
2025-04-11 17:38:36,544 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,553 [INFO] Final candidates: []
2025-04-11 17:38:36,553 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,553 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,610 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:36,610 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(10), np.int64(15)))
2025-04-11 17:38:36,619 [INFO] Final candidates: []
2025-04-11 17:38:36,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,627 [INFO] Final candidates: []
2025-04-11 17:38:36,627 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,628 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,720 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:36,720 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(9), np.int64(13)))
2025-04-11 17:38:36,729 [INFO] Final candidates: []
2025-04-11 17:38:36,729 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,738 [INFO] Final candidates: []
2025-04-11 17:38:36,738 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:36,867 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:36,867 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:36,868 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:38:36,868 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:38:36,868 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 11)]
2025-04-11 17:38:36,868 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:38:36,876 [INFO] Final candidates: [(5, 10), (5, 11)]
2025-04-11 17:38:36,876 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 11))]
2025-04-11 17:38:36,876 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:36,885 [INFO] Final candidates: []
2025-04-11 17:38:36,885 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:36,885 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,001 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:37,001 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(8), np.int64(14)))
2025-04-11 17:38:37,010 [INFO] Final candidates: []
2025-04-11 17:38:37,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,018 [INFO] Final candidates: []
2025-04-11 17:38:37,018 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,018 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,133 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:37,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(10), np.int64(15)))
2025-04-11 17:38:37,142 [INFO] Final candidates: []
2025-04-11 17:38:37,142 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,151 [INFO] Final candidates: []
2025-04-11 17:38:37,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,151 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,233 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:37,233 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(1), np.int64(11)))
2025-04-11 17:38:37,242 [INFO] Final candidates: []
2025-04-11 17:38:37,242 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,251 [INFO] Final candidates: []
2025-04-11 17:38:37,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,251 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:37,311 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(13)))
2025-04-11 17:38:37,320 [INFO] Final candidates: []
2025-04-11 17:38:37,320 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,330 [INFO] Final candidates: []
2025-04-11 17:38:37,330 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,374 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:37,374 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(0), np.int64(9)))
2025-04-11 17:38:37,383 [INFO] Final candidates: []
2025-04-11 17:38:37,383 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,392 [INFO] Final candidates: []
2025-04-11 17:38:37,392 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,449 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:37,449 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:37,458 [INFO] Final candidates: []
2025-04-11 17:38:37,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,466 [INFO] Final candidates: []
2025-04-11 17:38:37,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,467 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,732 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:37,733 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:37,741 [INFO] Final candidates: []
2025-04-11 17:38:37,741 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,750 [INFO] Final candidates: []
2025-04-11 17:38:37,750 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,750 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,889 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:37,890 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(1), np.int64(10)))
2025-04-11 17:38:37,898 [INFO] Final candidates: []
2025-04-11 17:38:37,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,907 [INFO] Final candidates: []
2025-04-11 17:38:37,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:37,963 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:37,963 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:37,972 [INFO] Final candidates: []
2025-04-11 17:38:37,972 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,980 [INFO] Final candidates: []
2025-04-11 17:38:37,980 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:37,981 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:38,032 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:38,033 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:38,042 [INFO] Final candidates: []
2025-04-11 17:38:38,042 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,050 [INFO] Final candidates: []
2025-04-11 17:38:38,050 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,050 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:38,161 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:38,161 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:38,162 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:38:38,162 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:38:38,162 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 11)]
2025-04-11 17:38:38,162 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:38:38,171 [INFO] Final candidates: [(5, 10), (5, 11)]
2025-04-11 17:38:38,171 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 11))]
2025-04-11 17:38:38,171 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:38,179 [INFO] Final candidates: []
2025-04-11 17:38:38,179 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,179 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:38,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:38,296 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:38,305 [INFO] Final candidates: []
2025-04-11 17:38:38,305 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,313 [INFO] Final candidates: []
2025-04-11 17:38:38,313 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:38,504 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:38,504 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(1), np.int64(7)))
2025-04-11 17:38:38,513 [INFO] Final candidates: []
2025-04-11 17:38:38,513 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,521 [INFO] Final candidates: []
2025-04-11 17:38:38,521 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,522 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:38,584 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:38,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:38,593 [INFO] Final candidates: []
2025-04-11 17:38:38,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,601 [INFO] Final candidates: []
2025-04-11 17:38:38,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,602 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:38,776 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:38,776 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(3), np.int64(14)))
2025-04-11 17:38:38,777 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:38:38,777 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:38:38,777 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 11)]
2025-04-11 17:38:38,777 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:38:38,777 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:38,777 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:38:38,777 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (5, 14)]
2025-04-11 17:38:38,777 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:38,785 [INFO] Final candidates: [(5, 14), (5, 11), (5, 8)]
2025-04-11 17:38:38,785 [INFO] Phase win: Collected 3unique candidate(s):[((5, 11), (5, 8)), ((5, 14), (5, 11)), ((5, 14), (5, 8))]
2025-04-11 17:38:38,786 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:38:38,794 [INFO] Final candidates: []
2025-04-11 17:38:38,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:38,938 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:38,938 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:38,947 [INFO] Final candidates: []
2025-04-11 17:38:38,947 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,956 [INFO] Final candidates: []
2025-04-11 17:38:38,956 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:38,956 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:39,090 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(13)), (np.int64(7), np.int64(11)))
2025-04-11 17:38:39,098 [INFO] Final candidates: []
2025-04-11 17:38:39,098 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,107 [INFO] Final candidates: []
2025-04-11 17:38:39,107 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,107 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,230 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:39,230 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(8), np.int64(14)))
2025-04-11 17:38:39,239 [INFO] Final candidates: []
2025-04-11 17:38:39,239 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,248 [INFO] Final candidates: []
2025-04-11 17:38:39,248 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,248 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,486 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:39,487 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(0), np.int64(9)))
2025-04-11 17:38:39,496 [INFO] Final candidates: []
2025-04-11 17:38:39,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,504 [INFO] Final candidates: []
2025-04-11 17:38:39,504 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,504 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,528 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:39,528 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:39,537 [INFO] Final candidates: []
2025-04-11 17:38:39,537 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,545 [INFO] Final candidates: []
2025-04-11 17:38:39,545 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,545 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,681 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:39,681 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(1), np.int64(8)))
2025-04-11 17:38:39,690 [INFO] Final candidates: []
2025-04-11 17:38:39,690 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,699 [INFO] Final candidates: []
2025-04-11 17:38:39,699 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,765 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:39,765 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(15)), (np.int64(9), np.int64(14)))
2025-04-11 17:38:39,774 [INFO] Final candidates: []
2025-04-11 17:38:39,774 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,782 [INFO] Final candidates: []
2025-04-11 17:38:39,782 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,782 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,848 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:39,848 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(1), np.int64(15)))
2025-04-11 17:38:39,857 [INFO] Final candidates: []
2025-04-11 17:38:39,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,865 [INFO] Final candidates: []
2025-04-11 17:38:39,865 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:39,901 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:39,901 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:39,910 [INFO] Final candidates: []
2025-04-11 17:38:39,910 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,918 [INFO] Final candidates: []
2025-04-11 17:38:39,918 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:39,919 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,000 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:40,000 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:40,009 [INFO] Final candidates: []
2025-04-11 17:38:40,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,017 [INFO] Final candidates: []
2025-04-11 17:38:40,017 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,017 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,252 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:40,253 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:40,262 [INFO] Final candidates: []
2025-04-11 17:38:40,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,271 [INFO] Final candidates: []
2025-04-11 17:38:40,271 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,272 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:40,295 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(8), np.int64(13)))
2025-04-11 17:38:40,304 [INFO] Final candidates: []
2025-04-11 17:38:40,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,312 [INFO] Final candidates: []
2025-04-11 17:38:40,312 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:40,380 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(4), np.int64(14)))
2025-04-11 17:38:40,389 [INFO] Final candidates: []
2025-04-11 17:38:40,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,397 [INFO] Final candidates: []
2025-04-11 17:38:40,397 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,398 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,469 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:40,469 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:40,470 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:38:40,470 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:38:40,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 10)]
2025-04-11 17:38:40,470 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:38:40,470 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:38:40,470 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:38:40,470 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 14)]
2025-04-11 17:38:40,470 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:38:40,479 [INFO] Final candidates: [(5, 14), (5, 10), (5, 8)]
2025-04-11 17:38:40,479 [INFO] Phase win: Collected 3unique candidate(s):[((5, 10), (5, 8)), ((5, 14), (5, 8)), ((5, 14), (5, 10))]
2025-04-11 17:38:40,479 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:38:40,487 [INFO] Final candidates: []
2025-04-11 17:38:40,487 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,487 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,636 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:40,636 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(3), np.int64(15)))
2025-04-11 17:38:40,645 [INFO] Final candidates: []
2025-04-11 17:38:40,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,655 [INFO] Final candidates: []
2025-04-11 17:38:40,655 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,767 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:40,767 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(3), np.int64(15)))
2025-04-11 17:38:40,776 [INFO] Final candidates: []
2025-04-11 17:38:40,776 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,784 [INFO] Final candidates: []
2025-04-11 17:38:40,784 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,784 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:40,917 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:40,917 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:40,927 [INFO] Final candidates: []
2025-04-11 17:38:40,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,935 [INFO] Final candidates: []
2025-04-11 17:38:40,935 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:40,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,057 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:41,057 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(7), np.int64(16)))
2025-04-11 17:38:41,066 [INFO] Final candidates: []
2025-04-11 17:38:41,066 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,075 [INFO] Final candidates: []
2025-04-11 17:38:41,075 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,076 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:41,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:41,111 [INFO] Final candidates: []
2025-04-11 17:38:41,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,120 [INFO] Final candidates: []
2025-04-11 17:38:41,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,184 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:41,184 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(3), np.int64(15)))
2025-04-11 17:38:41,193 [INFO] Final candidates: []
2025-04-11 17:38:41,193 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,201 [INFO] Final candidates: []
2025-04-11 17:38:41,201 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,325 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:41,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(0), np.int64(10)))
2025-04-11 17:38:41,335 [INFO] Final candidates: []
2025-04-11 17:38:41,335 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,343 [INFO] Final candidates: []
2025-04-11 17:38:41,343 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,343 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:41,380 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(3), np.int64(8)))
2025-04-11 17:38:41,389 [INFO] Final candidates: []
2025-04-11 17:38:41,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,398 [INFO] Final candidates: []
2025-04-11 17:38:41,398 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,398 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,442 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:41,442 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:41,451 [INFO] Final candidates: []
2025-04-11 17:38:41,451 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,459 [INFO] Final candidates: []
2025-04-11 17:38:41,459 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,459 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,595 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:41,595 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:41,605 [INFO] Final candidates: []
2025-04-11 17:38:41,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,613 [INFO] Final candidates: []
2025-04-11 17:38:41,613 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,614 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,685 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:41,685 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(11)))
2025-04-11 17:38:41,694 [INFO] Final candidates: []
2025-04-11 17:38:41,694 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,703 [INFO] Final candidates: []
2025-04-11 17:38:41,703 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:41,703 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:41,754 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:41,754 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:38:41,754 [INFO] MCTS selected move: L6,M8
2025-04-11 17:38:41,754 [INFO] ===============NEW MOVE================
2025-04-11 17:38:48,881 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:38:48,889 [INFO] Final candidates: []
2025-04-11 17:38:48,889 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:48,898 [INFO] Final candidates: []
2025-04-11 17:38:48,898 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:48,898 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:38:48,898 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:38:48,898 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(4), np.int64(12)))
2025-04-11 17:38:48,905 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:48,905 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)]
2025-04-11 17:38:48,905 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:38:48,905 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:48,907 [INFO] Final candidates: [(5, 11), (6, 10)]
2025-04-11 17:38:48,907 [INFO] Phase win: Collected 1unique candidate(s):[((5, 11), (6, 10))]
2025-04-11 17:38:48,907 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:48,915 [INFO] Final candidates: []
2025-04-11 17:38:48,915 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:48,916 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:38:48,916 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,024 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:49,024 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(5), np.int64(11)))
2025-04-11 17:38:49,031 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:49,031 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:38:49,031 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 12), (6, 10)]
2025-04-11 17:38:49,031 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:49,033 [INFO] Final candidates: [(4, 12), (6, 10)]
2025-04-11 17:38:49,033 [INFO] Phase win: Collected 1unique candidate(s):[((4, 12), (6, 10))]
2025-04-11 17:38:49,033 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:49,041 [INFO] Final candidates: []
2025-04-11 17:38:49,041 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,042 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,102 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:49,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(6), np.int64(5)))
2025-04-11 17:38:49,110 [INFO] Final candidates: []
2025-04-11 17:38:49,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,119 [INFO] Final candidates: []
2025-04-11 17:38:49,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,146 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:49,146 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(6), np.int64(9)))
2025-04-11 17:38:49,155 [INFO] Final candidates: []
2025-04-11 17:38:49,155 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,164 [INFO] Final candidates: []
2025-04-11 17:38:49,164 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,280 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:49,280 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(1), np.int64(10)))
2025-04-11 17:38:49,289 [INFO] Final candidates: []
2025-04-11 17:38:49,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,297 [INFO] Final candidates: []
2025-04-11 17:38:49,297 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,447 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:49,447 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:49,455 [INFO] Final candidates: []
2025-04-11 17:38:49,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,465 [INFO] Final candidates: []
2025-04-11 17:38:49,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,638 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:49,638 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(1), np.int64(13)))
2025-04-11 17:38:49,647 [INFO] Final candidates: []
2025-04-11 17:38:49,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,655 [INFO] Final candidates: []
2025-04-11 17:38:49,655 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,811 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:49,812 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(7), np.int64(12)))
2025-04-11 17:38:49,820 [INFO] Final candidates: []
2025-04-11 17:38:49,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,828 [INFO] Final candidates: []
2025-04-11 17:38:49,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:49,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:49,982 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:49,982 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(10)), (np.int64(6), np.int64(14)))
2025-04-11 17:38:49,991 [INFO] Final candidates: []
2025-04-11 17:38:49,991 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,000 [INFO] Final candidates: []
2025-04-11 17:38:50,000 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,001 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,024 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:50,024 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(4), np.int64(7)))
2025-04-11 17:38:50,032 [INFO] Final candidates: []
2025-04-11 17:38:50,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,040 [INFO] Final candidates: []
2025-04-11 17:38:50,041 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,041 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,254 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:50,254 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(5)), (np.int64(7), np.int64(16)))
2025-04-11 17:38:50,262 [INFO] Final candidates: []
2025-04-11 17:38:50,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,270 [INFO] Final candidates: []
2025-04-11 17:38:50,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,271 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,344 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:50,344 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(10), np.int64(16)))
2025-04-11 17:38:50,352 [INFO] Final candidates: []
2025-04-11 17:38:50,352 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,361 [INFO] Final candidates: []
2025-04-11 17:38:50,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,362 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,455 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:50,455 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:50,463 [INFO] Final candidates: []
2025-04-11 17:38:50,463 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,472 [INFO] Final candidates: []
2025-04-11 17:38:50,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,630 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:50,630 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(7)))
2025-04-11 17:38:50,638 [INFO] Final candidates: []
2025-04-11 17:38:50,638 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,647 [INFO] Final candidates: []
2025-04-11 17:38:50,647 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,647 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,666 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:50,666 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:50,675 [INFO] Final candidates: []
2025-04-11 17:38:50,675 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,683 [INFO] Final candidates: []
2025-04-11 17:38:50,683 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,684 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,709 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:50,709 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 17:38:50,719 [INFO] Final candidates: []
2025-04-11 17:38:50,719 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,728 [INFO] Final candidates: []
2025-04-11 17:38:50,728 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,778 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:50,779 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(7), np.int64(6)))
2025-04-11 17:38:50,787 [INFO] Final candidates: []
2025-04-11 17:38:50,787 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,795 [INFO] Final candidates: []
2025-04-11 17:38:50,795 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,796 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,854 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:50,855 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(8), np.int64(6)))
2025-04-11 17:38:50,863 [INFO] Final candidates: []
2025-04-11 17:38:50,864 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,873 [INFO] Final candidates: []
2025-04-11 17:38:50,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,873 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:50,900 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:50,901 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(10), np.int64(16)))
2025-04-11 17:38:50,909 [INFO] Final candidates: []
2025-04-11 17:38:50,909 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,917 [INFO] Final candidates: []
2025-04-11 17:38:50,917 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:50,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:51,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:51,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(4), np.int64(12)))
2025-04-11 17:38:51,109 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:51,109 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)]
2025-04-11 17:38:51,109 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:38:51,109 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:51,111 [INFO] Final candidates: [(5, 11), (6, 10)]
2025-04-11 17:38:51,111 [INFO] Phase win: Collected 1unique candidate(s):[((5, 11), (6, 10))]
2025-04-11 17:38:51,111 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:51,120 [INFO] Final candidates: []
2025-04-11 17:38:51,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:51,185 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:51,185 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(6), np.int64(8)))
2025-04-11 17:38:51,194 [INFO] Final candidates: []
2025-04-11 17:38:51,194 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,202 [INFO] Final candidates: []
2025-04-11 17:38:51,202 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,203 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:51,243 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:51,244 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(17)))
2025-04-11 17:38:51,252 [INFO] Final candidates: []
2025-04-11 17:38:51,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,260 [INFO] Final candidates: []
2025-04-11 17:38:51,260 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,261 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:51,382 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:51,382 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(7), np.int64(6)))
2025-04-11 17:38:51,391 [INFO] Final candidates: []
2025-04-11 17:38:51,391 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,400 [INFO] Final candidates: []
2025-04-11 17:38:51,400 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:51,546 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:51,546 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(2), np.int64(8)))
2025-04-11 17:38:51,555 [INFO] Final candidates: []
2025-04-11 17:38:51,555 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,564 [INFO] Final candidates: []
2025-04-11 17:38:51,564 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:51,647 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:51,647 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(10), np.int64(16)))
2025-04-11 17:38:51,655 [INFO] Final candidates: []
2025-04-11 17:38:51,655 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,665 [INFO] Final candidates: []
2025-04-11 17:38:51,665 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:51,813 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:51,813 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(6), np.int64(5)))
2025-04-11 17:38:51,822 [INFO] Final candidates: []
2025-04-11 17:38:51,822 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,830 [INFO] Final candidates: []
2025-04-11 17:38:51,830 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:51,831 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:52,011 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:52,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(6), np.int64(13)))
2025-04-11 17:38:52,020 [INFO] Final candidates: []
2025-04-11 17:38:52,020 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,028 [INFO] Final candidates: []
2025-04-11 17:38:52,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,029 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:52,054 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:52,054 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(3), np.int64(10)))
2025-04-11 17:38:52,063 [INFO] Final candidates: []
2025-04-11 17:38:52,063 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,071 [INFO] Final candidates: []
2025-04-11 17:38:52,071 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,072 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:52,172 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:52,172 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(10)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:52,180 [INFO] Final candidates: []
2025-04-11 17:38:52,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,189 [INFO] Final candidates: []
2025-04-11 17:38:52,189 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,189 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:52,450 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:52,450 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(5)), (np.int64(2), np.int64(13)))
2025-04-11 17:38:52,459 [INFO] Final candidates: []
2025-04-11 17:38:52,459 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,468 [INFO] Final candidates: []
2025-04-11 17:38:52,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:52,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:52,553 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(7), np.int64(8)))
2025-04-11 17:38:52,561 [INFO] Final candidates: []
2025-04-11 17:38:52,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,569 [INFO] Final candidates: []
2025-04-11 17:38:52,569 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:52,601 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:52,601 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(3), np.int64(7)))
2025-04-11 17:38:52,612 [INFO] Final candidates: []
2025-04-11 17:38:52,612 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,620 [INFO] Final candidates: []
2025-04-11 17:38:52,620 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,621 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:52,868 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:52,868 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(5)), (np.int64(2), np.int64(10)))
2025-04-11 17:38:52,877 [INFO] Final candidates: []
2025-04-11 17:38:52,877 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,886 [INFO] Final candidates: []
2025-04-11 17:38:52,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:52,886 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,038 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:53,038 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(4), np.int64(7)))
2025-04-11 17:38:53,047 [INFO] Final candidates: []
2025-04-11 17:38:53,047 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,055 [INFO] Final candidates: []
2025-04-11 17:38:53,055 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,056 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,159 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:53,159 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:53,168 [INFO] Final candidates: []
2025-04-11 17:38:53,168 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,176 [INFO] Final candidates: []
2025-04-11 17:38:53,176 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,176 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,326 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:53,326 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(2), np.int64(9)))
2025-04-11 17:38:53,335 [INFO] Final candidates: []
2025-04-11 17:38:53,335 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,343 [INFO] Final candidates: []
2025-04-11 17:38:53,343 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,343 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,382 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:53,382 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(15)), (np.int64(2), np.int64(9)))
2025-04-11 17:38:53,390 [INFO] Final candidates: []
2025-04-11 17:38:53,390 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,398 [INFO] Final candidates: []
2025-04-11 17:38:53,398 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,399 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,502 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:53,502 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(11)), (np.int64(3), np.int64(11)))
2025-04-11 17:38:53,509 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:53,509 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:38:53,509 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 12), (6, 10)]
2025-04-11 17:38:53,509 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:53,511 [INFO] Final candidates: [(4, 12), (6, 10)]
2025-04-11 17:38:53,511 [INFO] Phase win: Collected 1unique candidate(s):[((4, 12), (6, 10))]
2025-04-11 17:38:53,511 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:53,519 [INFO] Final candidates: []
2025-04-11 17:38:53,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,520 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,606 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:53,606 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(15)))
2025-04-11 17:38:53,615 [INFO] Final candidates: []
2025-04-11 17:38:53,615 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,623 [INFO] Final candidates: []
2025-04-11 17:38:53,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,721 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:53,721 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(4), np.int64(14)))
2025-04-11 17:38:53,730 [INFO] Final candidates: []
2025-04-11 17:38:53,730 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,738 [INFO] Final candidates: []
2025-04-11 17:38:53,738 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,739 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:53,835 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:53,835 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(15)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:53,844 [INFO] Final candidates: []
2025-04-11 17:38:53,844 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,852 [INFO] Final candidates: []
2025-04-11 17:38:53,852 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:53,853 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:54,044 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:54,044 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(6), np.int64(13)))
2025-04-11 17:38:54,053 [INFO] Final candidates: []
2025-04-11 17:38:54,053 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,061 [INFO] Final candidates: []
2025-04-11 17:38:54,061 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,062 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:54,230 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:54,230 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(7)), (np.int64(4), np.int64(12)))
2025-04-11 17:38:54,237 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:54,237 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)]
2025-04-11 17:38:54,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:38:54,237 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:54,239 [INFO] Final candidates: [(5, 11), (6, 10)]
2025-04-11 17:38:54,239 [INFO] Phase win: Collected 1unique candidate(s):[((5, 11), (6, 10))]
2025-04-11 17:38:54,239 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:54,247 [INFO] Final candidates: []
2025-04-11 17:38:54,247 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,248 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:54,301 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:54,301 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(7), np.int64(6)))
2025-04-11 17:38:54,309 [INFO] Final candidates: []
2025-04-11 17:38:54,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,318 [INFO] Final candidates: []
2025-04-11 17:38:54,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:54,457 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:54,458 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(4), np.int64(6)))
2025-04-11 17:38:54,466 [INFO] Final candidates: []
2025-04-11 17:38:54,466 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,474 [INFO] Final candidates: []
2025-04-11 17:38:54,474 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,475 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:54,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:54,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(4), np.int64(12)))
2025-04-11 17:38:54,536 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:38:54,536 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:38:54,536 [DEBUG] board coords: [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:38:54,536 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:38:54,536 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:38:54,536 [DEBUG] check_window_intermediate_custom (only one inserted(5, 11)): For L=6, window [1 1 1 1 0 0] with coords [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:38:54,536 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:54,536 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)]
2025-04-11 17:38:54,536 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:38:54,536 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:54,537 [DEBUG] board coords: [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:54,537 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)]
2025-04-11 17:38:54,537 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:38:54,537 [DEBUG] check_window_intermediate_custom: For L=7, window [1 1 1 1 0 0 1] with coords [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:54,538 [INFO] Final candidates: [(5, 11), (6, 10), (0, 16)]
2025-04-11 17:38:54,538 [INFO] Phase win: Collected 3unique candidate(s):[((6, 10), (0, 16)), ((5, 11), (0, 16)), ((5, 11), (6, 10))]
2025-04-11 17:38:54,538 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:38:54,546 [INFO] Final candidates: []
2025-04-11 17:38:54,546 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,547 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:54,667 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:54,668 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:38:54,677 [INFO] Final candidates: []
2025-04-11 17:38:54,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,685 [INFO] Final candidates: []
2025-04-11 17:38:54,685 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:54,812 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:54,812 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:54,820 [INFO] Final candidates: []
2025-04-11 17:38:54,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,828 [INFO] Final candidates: []
2025-04-11 17:38:54,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:54,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,038 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:55,038 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(7), np.int64(15)))
2025-04-11 17:38:55,048 [INFO] Final candidates: []
2025-04-11 17:38:55,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,056 [INFO] Final candidates: []
2025-04-11 17:38:55,057 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,057 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,135 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:55,135 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(14)))
2025-04-11 17:38:55,145 [INFO] Final candidates: []
2025-04-11 17:38:55,145 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,154 [INFO] Final candidates: []
2025-04-11 17:38:55,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,155 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,262 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:55,262 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(3), np.int64(10)))
2025-04-11 17:38:55,270 [INFO] Final candidates: []
2025-04-11 17:38:55,270 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,279 [INFO] Final candidates: []
2025-04-11 17:38:55,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,279 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:38:55,279 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,317 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:55,317 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:55,325 [INFO] Final candidates: []
2025-04-11 17:38:55,325 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,334 [INFO] Final candidates: []
2025-04-11 17:38:55,334 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,334 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,413 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:55,413 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(4), np.int64(7)))
2025-04-11 17:38:55,421 [INFO] Final candidates: []
2025-04-11 17:38:55,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,429 [INFO] Final candidates: []
2025-04-11 17:38:55,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,557 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:55,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(8), np.int64(16)))
2025-04-11 17:38:55,568 [INFO] Final candidates: []
2025-04-11 17:38:55,569 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,577 [INFO] Final candidates: []
2025-04-11 17:38:55,577 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,578 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,634 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:55,634 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(4), np.int64(11)))
2025-04-11 17:38:55,643 [INFO] Final candidates: []
2025-04-11 17:38:55,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,652 [INFO] Final candidates: []
2025-04-11 17:38:55,652 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,652 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,761 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:55,761 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(8), np.int64(8)))
2025-04-11 17:38:55,769 [INFO] Final candidates: []
2025-04-11 17:38:55,770 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,778 [INFO] Final candidates: []
2025-04-11 17:38:55,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,862 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:55,862 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(11)), (np.int64(4), np.int64(14)))
2025-04-11 17:38:55,868 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:38:55,868 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:38:55,868 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 12), (6, 10)]
2025-04-11 17:38:55,868 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:38:55,870 [INFO] Final candidates: [(4, 12), (6, 10)]
2025-04-11 17:38:55,870 [INFO] Phase win: Collected 1unique candidate(s):[((4, 12), (6, 10))]
2025-04-11 17:38:55,870 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:38:55,879 [INFO] Final candidates: []
2025-04-11 17:38:55,879 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,880 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:55,976 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:55,977 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(9), np.int64(16)))
2025-04-11 17:38:55,985 [INFO] Final candidates: []
2025-04-11 17:38:55,985 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,993 [INFO] Final candidates: []
2025-04-11 17:38:55,993 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:55,994 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,031 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:56,032 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(15)))
2025-04-11 17:38:56,040 [INFO] Final candidates: []
2025-04-11 17:38:56,040 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,048 [INFO] Final candidates: []
2025-04-11 17:38:56,048 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,049 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,175 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:56,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(9), np.int64(13)))
2025-04-11 17:38:56,184 [INFO] Final candidates: []
2025-04-11 17:38:56,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,192 [INFO] Final candidates: []
2025-04-11 17:38:56,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,192 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,233 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:56,233 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(8), np.int64(10)))
2025-04-11 17:38:56,241 [INFO] Final candidates: []
2025-04-11 17:38:56,241 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,250 [INFO] Final candidates: []
2025-04-11 17:38:56,250 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,251 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,306 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:56,307 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(3), np.int64(7)))
2025-04-11 17:38:56,315 [INFO] Final candidates: []
2025-04-11 17:38:56,315 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,323 [INFO] Final candidates: []
2025-04-11 17:38:56,323 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,324 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,411 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:56,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:56,420 [INFO] Final candidates: []
2025-04-11 17:38:56,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,428 [INFO] Final candidates: []
2025-04-11 17:38:56,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,735 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:56,735 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(2), np.int64(15)))
2025-04-11 17:38:56,743 [INFO] Final candidates: []
2025-04-11 17:38:56,743 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,751 [INFO] Final candidates: []
2025-04-11 17:38:56,751 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,896 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:56,896 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:56,905 [INFO] Final candidates: []
2025-04-11 17:38:56,905 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,913 [INFO] Final candidates: []
2025-04-11 17:38:56,913 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:56,914 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:56,992 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:56,992 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(4), np.int64(6)))
2025-04-11 17:38:57,000 [INFO] Final candidates: []
2025-04-11 17:38:57,000 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,009 [INFO] Final candidates: []
2025-04-11 17:38:57,009 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,009 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,088 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:57,088 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(6), np.int64(13)))
2025-04-11 17:38:57,097 [INFO] Final candidates: []
2025-04-11 17:38:57,097 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,105 [INFO] Final candidates: []
2025-04-11 17:38:57,105 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,106 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,153 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:57,153 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(2), np.int64(12)))
2025-04-11 17:38:57,161 [INFO] Final candidates: []
2025-04-11 17:38:57,162 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,170 [INFO] Final candidates: []
2025-04-11 17:38:57,170 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,170 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,386 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:57,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(8), np.int64(8)))
2025-04-11 17:38:57,395 [INFO] Final candidates: []
2025-04-11 17:38:57,395 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,403 [INFO] Final candidates: []
2025-04-11 17:38:57,403 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,611 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:57,611 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(2), np.int64(10)))
2025-04-11 17:38:57,620 [INFO] Final candidates: []
2025-04-11 17:38:57,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,628 [INFO] Final candidates: []
2025-04-11 17:38:57,628 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,629 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:57,671 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(1), np.int64(11)))
2025-04-11 17:38:57,680 [INFO] Final candidates: []
2025-04-11 17:38:57,680 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,688 [INFO] Final candidates: []
2025-04-11 17:38:57,688 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,689 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,796 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:57,797 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(3), np.int64(11)))
2025-04-11 17:38:57,805 [INFO] Final candidates: []
2025-04-11 17:38:57,805 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,813 [INFO] Final candidates: []
2025-04-11 17:38:57,813 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,814 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,896 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:57,896 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(5), np.int64(8)))
2025-04-11 17:38:57,905 [INFO] Final candidates: []
2025-04-11 17:38:57,905 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,913 [INFO] Final candidates: []
2025-04-11 17:38:57,913 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,913 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:57,924 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:57,924 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(2), np.int64(9)))
2025-04-11 17:38:57,932 [INFO] Final candidates: []
2025-04-11 17:38:57,932 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,941 [INFO] Final candidates: []
2025-04-11 17:38:57,941 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:57,941 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:58,051 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:58,051 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(6), np.int64(12)))
2025-04-11 17:38:58,059 [INFO] Final candidates: []
2025-04-11 17:38:58,059 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,068 [INFO] Final candidates: []
2025-04-11 17:38:58,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,068 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:58,259 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:58,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(8), np.int64(12)))
2025-04-11 17:38:58,267 [INFO] Final candidates: []
2025-04-11 17:38:58,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,276 [INFO] Final candidates: []
2025-04-11 17:38:58,276 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,276 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:58,487 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:58,487 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(10), np.int64(9)))
2025-04-11 17:38:58,495 [INFO] Final candidates: []
2025-04-11 17:38:58,495 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,503 [INFO] Final candidates: []
2025-04-11 17:38:58,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,504 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:58,657 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:58,657 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(5)), (np.int64(4), np.int64(10)))
2025-04-11 17:38:58,665 [INFO] Final candidates: []
2025-04-11 17:38:58,665 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,673 [INFO] Final candidates: []
2025-04-11 17:38:58,673 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,674 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:58,806 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:58,807 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 17:38:58,815 [INFO] Final candidates: []
2025-04-11 17:38:58,815 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,823 [INFO] Final candidates: []
2025-04-11 17:38:58,823 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,824 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:58,929 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:58,929 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:58,937 [INFO] Final candidates: []
2025-04-11 17:38:58,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,946 [INFO] Final candidates: []
2025-04-11 17:38:58,946 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:58,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:59,121 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:59,121 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(1), np.int64(14)))
2025-04-11 17:38:59,130 [INFO] Final candidates: []
2025-04-11 17:38:59,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,138 [INFO] Final candidates: []
2025-04-11 17:38:59,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,139 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:59,239 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:59,239 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(4), np.int64(6)))
2025-04-11 17:38:59,248 [INFO] Final candidates: []
2025-04-11 17:38:59,248 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,256 [INFO] Final candidates: []
2025-04-11 17:38:59,256 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,256 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:59,481 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:59,482 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(7)))
2025-04-11 17:38:59,490 [INFO] Final candidates: []
2025-04-11 17:38:59,490 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,500 [INFO] Final candidates: []
2025-04-11 17:38:59,500 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,501 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:59,624 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:38:59,624 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(7), np.int64(13)))
2025-04-11 17:38:59,632 [INFO] Final candidates: []
2025-04-11 17:38:59,632 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,640 [INFO] Final candidates: []
2025-04-11 17:38:59,640 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,641 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:59,732 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:59,733 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(4), np.int64(6)))
2025-04-11 17:38:59,741 [INFO] Final candidates: []
2025-04-11 17:38:59,741 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,749 [INFO] Final candidates: []
2025-04-11 17:38:59,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,750 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:59,937 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:59,937 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(7), np.int64(8)))
2025-04-11 17:38:59,947 [INFO] Final candidates: []
2025-04-11 17:38:59,947 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,956 [INFO] Final candidates: []
2025-04-11 17:38:59,956 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:38:59,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:38:59,986 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:38:59,987 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(9), np.int64(9)))
2025-04-11 17:38:59,996 [INFO] Final candidates: []
2025-04-11 17:38:59,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,005 [INFO] Final candidates: []
2025-04-11 17:39:00,005 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,006 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:00,140 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:00,141 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(5), np.int64(7)))
2025-04-11 17:39:00,149 [INFO] Final candidates: []
2025-04-11 17:39:00,149 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,157 [INFO] Final candidates: []
2025-04-11 17:39:00,157 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,157 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:00,258 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:00,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(4), np.int64(14)))
2025-04-11 17:39:00,267 [INFO] Final candidates: []
2025-04-11 17:39:00,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,276 [INFO] Final candidates: []
2025-04-11 17:39:00,276 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,276 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:00,503 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:00,503 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(5), np.int64(11)))
2025-04-11 17:39:00,511 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:39:00,511 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:39:00,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 12), (6, 10)]
2025-04-11 17:39:00,511 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:39:00,514 [INFO] Final candidates: [(4, 12), (6, 10)]
2025-04-11 17:39:00,514 [INFO] Phase win: Collected 1unique candidate(s):[((4, 12), (6, 10))]
2025-04-11 17:39:00,514 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:00,522 [INFO] Final candidates: []
2025-04-11 17:39:00,522 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,523 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:00,702 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:00,703 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(5), np.int64(11)))
2025-04-11 17:39:00,709 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:39:00,709 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:39:00,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 12), (6, 10)]
2025-04-11 17:39:00,709 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:39:00,711 [INFO] Final candidates: [(4, 12), (6, 10)]
2025-04-11 17:39:00,711 [INFO] Phase win: Collected 1unique candidate(s):[((4, 12), (6, 10))]
2025-04-11 17:39:00,711 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:00,719 [INFO] Final candidates: []
2025-04-11 17:39:00,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:00,768 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:00,769 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(8), np.int64(17)))
2025-04-11 17:39:00,777 [INFO] Final candidates: []
2025-04-11 17:39:00,777 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,786 [INFO] Final candidates: []
2025-04-11 17:39:00,786 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:00,786 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:00,986 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:00,986 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(6)))
2025-04-11 17:39:00,994 [INFO] Final candidates: []
2025-04-11 17:39:00,994 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,003 [INFO] Final candidates: []
2025-04-11 17:39:01,003 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,003 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:01,344 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:01,344 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(11), np.int64(15)))
2025-04-11 17:39:01,353 [INFO] Final candidates: []
2025-04-11 17:39:01,353 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,361 [INFO] Final candidates: []
2025-04-11 17:39:01,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,362 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:01,513 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:01,513 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(0), np.int64(10)))
2025-04-11 17:39:01,522 [INFO] Final candidates: []
2025-04-11 17:39:01,522 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,530 [INFO] Final candidates: []
2025-04-11 17:39:01,530 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,531 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:01,866 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:01,866 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:01,874 [INFO] Final candidates: []
2025-04-11 17:39:01,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,882 [INFO] Final candidates: []
2025-04-11 17:39:01,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:01,975 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:01,976 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(16)), (np.int64(5), np.int64(15)))
2025-04-11 17:39:01,984 [INFO] Final candidates: []
2025-04-11 17:39:01,984 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,992 [INFO] Final candidates: []
2025-04-11 17:39:01,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:01,993 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:02,084 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:02,084 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(5), np.int64(8)))
2025-04-11 17:39:02,093 [INFO] Final candidates: []
2025-04-11 17:39:02,093 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:02,103 [INFO] Final candidates: []
2025-04-11 17:39:02,103 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:02,103 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:02,322 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:02,322 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(3), np.int64(11)))
2025-04-11 17:39:02,330 [INFO] Final candidates: []
2025-04-11 17:39:02,330 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:02,338 [INFO] Final candidates: []
2025-04-11 17:39:02,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:02,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:02,472 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:02,472 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(7), np.int64(14)))
2025-04-11 17:39:02,473 [DEBUG] board coords: [(7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14)]
2025-04-11 17:39:02,473 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:39:02,473 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 10), (7, 13)]
2025-04-11 17:39:02,473 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14)] triggers candidate.
2025-04-11 17:39:02,481 [INFO] Final candidates: [(7, 10), (7, 13)]
2025-04-11 17:39:02,481 [INFO] Phase win: Collected 1unique candidate(s):[((7, 10), (7, 13))]
2025-04-11 17:39:02,481 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:02,489 [INFO] Final candidates: []
2025-04-11 17:39:02,489 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:02,490 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:02,546 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:02,546 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:39:02,546 [INFO] MCTS selected move: O2,N5
2025-04-11 17:39:02,546 [INFO] ===============NEW MOVE================
2025-04-11 17:39:08,552 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:39:08,559 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:39:08,559 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)]
2025-04-11 17:39:08,559 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (6, 10)]
2025-04-11 17:39:08,559 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 0 1] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:39:08,561 [INFO] Final candidates: [(5, 11), (6, 10)]
2025-04-11 17:39:08,561 [INFO] Phase win: Collected 1unique candidate(s):[((5, 11), (6, 10))]
2025-04-11 17:39:08,561 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:08,561 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:39:08,561 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 11), (6, 10))
2025-04-11 17:39:08,567 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:08,568 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:08,568 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:08,568 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:08,568 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:08,568 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:08,568 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,568 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,568 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,568 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,569 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:08,569 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:08,569 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:08,569 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:08,569 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,569 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,569 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,569 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,570 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:08,570 [INFO] Phase win: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:08,570 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:39:08,578 [INFO] Final candidates: []
2025-04-11 17:39:08,578 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:08,578 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:39:08,578 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:08,615 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:08,615 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:08,615 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(0), np.int64(9)))
2025-04-11 17:39:08,623 [INFO] Final candidates: []
2025-04-11 17:39:08,623 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:08,630 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:08,630 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:08,630 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:08,630 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:08,630 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:08,630 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:08,630 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,630 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,630 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,630 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,631 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:08,631 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:08,631 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:08,631 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:08,631 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,631 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,631 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,631 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,632 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:08,632 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:08,632 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:08,632 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:08,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:08,838 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:08,838 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(4)), (np.int64(3), np.int64(14)))
2025-04-11 17:39:08,846 [INFO] Final candidates: []
2025-04-11 17:39:08,846 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:08,852 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:08,852 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:08,852 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:08,852 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:08,852 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:08,852 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:08,853 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,853 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,853 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,853 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,854 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:08,854 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:08,854 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:08,854 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:08,854 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,854 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,854 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,854 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,855 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:08,855 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:08,855 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:08,855 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:08,866 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:08,866 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:08,866 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(14)), (np.int64(0), np.int64(12)))
2025-04-11 17:39:08,874 [INFO] Final candidates: []
2025-04-11 17:39:08,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:08,881 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:08,881 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:08,881 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:08,881 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:08,881 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:08,881 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:08,881 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,881 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,881 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,881 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,882 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:08,882 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:08,882 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:08,882 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:08,882 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:08,882 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:08,882 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:08,882 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:08,883 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:08,883 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:08,883 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:08,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:09,061 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:09,061 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:09,061 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(7), np.int64(4)))
2025-04-11 17:39:09,069 [INFO] Final candidates: []
2025-04-11 17:39:09,069 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:09,075 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:09,075 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:09,075 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:09,075 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:09,075 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:09,075 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:09,075 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,075 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,075 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,076 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,076 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:09,076 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:09,076 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:09,076 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:09,077 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,077 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,077 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,077 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,077 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:09,077 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:09,077 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:09,077 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:09,204 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:09,204 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:09,205 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(12)))
2025-04-11 17:39:09,212 [INFO] Final candidates: []
2025-04-11 17:39:09,213 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:09,219 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:09,219 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:09,219 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:09,219 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:09,219 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:09,219 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:09,219 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,219 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,219 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,219 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,220 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:09,220 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:09,220 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:09,220 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:09,220 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,220 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,220 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,220 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,221 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:09,221 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:09,221 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:09,221 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:09,276 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:09,276 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:09,277 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(2), np.int64(8)))
2025-04-11 17:39:09,284 [INFO] Final candidates: []
2025-04-11 17:39:09,285 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:09,291 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:09,291 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:09,291 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:09,291 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:09,291 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:09,291 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:09,291 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,291 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,291 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,291 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,292 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:09,292 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:09,292 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:09,292 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:09,292 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,292 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,292 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,292 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,293 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:09,293 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:09,293 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:09,293 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:09,505 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:09,505 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:09,506 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(0), np.int64(8)))
2025-04-11 17:39:09,513 [INFO] Final candidates: []
2025-04-11 17:39:09,513 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:09,520 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:09,520 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:09,520 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:09,520 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:09,520 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:09,520 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:09,520 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,520 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,520 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,520 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,521 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:09,521 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:09,521 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:09,521 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:09,521 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,521 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,521 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,522 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,522 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:09,522 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:09,522 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:09,522 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:09,672 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:09,672 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:09,672 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(4), np.int64(10)))
2025-04-11 17:39:09,680 [INFO] Final candidates: []
2025-04-11 17:39:09,680 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:09,686 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:09,686 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:09,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:09,686 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:09,687 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:09,687 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:09,687 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,687 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,687 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,688 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:09,688 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:09,688 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:09,688 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:09,688 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,688 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,688 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,688 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,689 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:09,689 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:09,689 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:09,689 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:09,726 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:09,726 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:09,726 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(9), np.int64(13)))
2025-04-11 17:39:09,734 [INFO] Final candidates: []
2025-04-11 17:39:09,734 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:09,740 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:09,740 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:09,740 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:09,740 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:09,741 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:09,741 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:09,741 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,741 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,741 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,741 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,742 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:09,742 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:09,742 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:09,742 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:09,742 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,742 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,742 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,742 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,743 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:09,743 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:09,743 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:09,743 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:09,947 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:09,948 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:09,948 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:09,956 [INFO] Final candidates: []
2025-04-11 17:39:09,956 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:09,963 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:09,963 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:09,963 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:09,963 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:09,963 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:09,963 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:09,964 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,964 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,964 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,964 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,964 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:09,965 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:09,965 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:09,965 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:09,965 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:09,965 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:09,965 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:09,965 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:09,966 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:09,966 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:09,966 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:09,966 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,015 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,015 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,015 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(17)), (np.int64(8), np.int64(7)))
2025-04-11 17:39:10,023 [INFO] Final candidates: []
2025-04-11 17:39:10,023 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,029 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,029 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,029 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,029 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,029 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,029 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,029 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,030 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,030 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,030 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,030 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,030 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,031 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,031 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,031 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,031 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,031 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,031 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,031 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,031 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,031 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,152 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,152 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,152 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(8), np.int64(17)))
2025-04-11 17:39:10,160 [INFO] Final candidates: []
2025-04-11 17:39:10,160 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,166 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,166 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,166 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,166 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,166 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,166 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,167 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,167 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,167 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,168 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,168 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,168 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,168 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,168 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,168 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,169 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,169 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,169 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,169 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,399 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:10,400 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,400 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(4), np.int64(7)))
2025-04-11 17:39:10,407 [INFO] Final candidates: []
2025-04-11 17:39:10,407 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,415 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,415 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,415 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,415 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,415 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,415 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,415 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,415 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,415 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,415 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,416 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,416 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,416 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,416 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,417 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,417 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,417 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,417 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,417 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,417 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,417 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,417 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,447 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,448 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,448 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(16)), (np.int64(2), np.int64(9)))
2025-04-11 17:39:10,456 [INFO] Final candidates: []
2025-04-11 17:39:10,456 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,462 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,462 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,462 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,463 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,463 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,463 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,464 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,464 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,464 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,464 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,465 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,465 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,465 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,465 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,465 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,465 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,465 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,465 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,466 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,466 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,466 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,466 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,496 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,496 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,496 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(14)))
2025-04-11 17:39:10,504 [INFO] Final candidates: []
2025-04-11 17:39:10,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,511 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,511 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,511 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,511 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,511 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,511 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,511 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,511 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,512 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,512 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,512 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,512 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,512 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,512 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,513 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,513 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,513 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,583 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,583 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,583 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(10), np.int64(14)))
2025-04-11 17:39:10,591 [INFO] Final candidates: []
2025-04-11 17:39:10,591 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,597 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,597 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,598 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,598 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,598 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,598 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,598 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,598 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,598 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,598 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,599 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,599 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,599 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,599 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,599 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,599 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,599 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,599 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,600 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,600 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,600 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,605 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,605 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,605 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 17:39:10,613 [INFO] Final candidates: []
2025-04-11 17:39:10,613 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,620 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,620 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,620 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,620 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,620 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,620 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,620 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,620 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,620 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,620 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,621 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,621 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,621 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,621 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,621 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,621 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,621 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,621 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,622 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,622 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,622 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,622 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,691 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,692 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,692 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(10)), (np.int64(2), np.int64(16)))
2025-04-11 17:39:10,700 [INFO] Final candidates: []
2025-04-11 17:39:10,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,708 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,708 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,708 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,708 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,708 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,708 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,708 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,708 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,708 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,708 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,709 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,709 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,709 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,709 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,709 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,709 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,710 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,710 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,710 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,710 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,771 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,771 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,771 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(7), np.int64(16)))
2025-04-11 17:39:10,780 [INFO] Final candidates: []
2025-04-11 17:39:10,780 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,786 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,786 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,786 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,786 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,786 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,786 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,786 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,786 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,787 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,787 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,787 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,787 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,787 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,788 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,788 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,788 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,788 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,960 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,960 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,960 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:39:10,968 [INFO] Final candidates: []
2025-04-11 17:39:10,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,975 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:10,975 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:10,975 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:10,975 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:10,975 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,975 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,975 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,975 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,975 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,975 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,976 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,976 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,976 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,976 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,977 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,977 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,977 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,977 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,977 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,977 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,977 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,977 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:10,978 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:10,978 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:10,979 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(16)), (np.int64(1), np.int64(11)))
2025-04-11 17:39:10,987 [INFO] Final candidates: []
2025-04-11 17:39:10,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:10,993 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:10,993 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:10,993 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,993 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,993 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,993 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,994 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:10,994 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:10,994 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:10,994 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:10,994 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:10,994 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:10,994 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:10,995 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:10,995 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:10,995 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:10,995 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:10,995 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,140 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:11,140 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,140 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(6)))
2025-04-11 17:39:11,148 [INFO] Final candidates: []
2025-04-11 17:39:11,148 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,154 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,154 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,154 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,154 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,155 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,155 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,155 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,155 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,155 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,155 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,156 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,156 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,156 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,156 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,156 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,156 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,156 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,156 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,157 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,157 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,157 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,157 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,173 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,173 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,173 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(15)), (np.int64(9), np.int64(11)))
2025-04-11 17:39:11,181 [INFO] Final candidates: []
2025-04-11 17:39:11,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,187 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,187 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,187 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,187 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,187 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,187 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,188 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,188 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,188 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,188 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,189 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,189 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,189 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,189 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,189 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,189 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,189 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,189 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,190 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,297 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:11,297 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,297 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(8)), (np.int64(10), np.int64(16)))
2025-04-11 17:39:11,305 [INFO] Final candidates: []
2025-04-11 17:39:11,305 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,311 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,311 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,312 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,312 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,312 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,312 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,312 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,312 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,312 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,313 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,313 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,313 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,313 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,313 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,313 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,313 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,313 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,314 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,314 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,314 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,314 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,323 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,323 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,323 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(16)), (np.int64(6), np.int64(15)))
2025-04-11 17:39:11,331 [INFO] Final candidates: []
2025-04-11 17:39:11,331 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,338 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,338 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,338 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,338 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,338 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,339 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,339 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,339 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,339 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,339 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,340 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,340 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,340 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,340 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,340 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,340 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,341 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,341 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,341 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,341 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,354 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,354 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,354 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(7), np.int64(7)))
2025-04-11 17:39:11,362 [INFO] Final candidates: []
2025-04-11 17:39:11,362 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,369 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,369 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,369 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,369 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,369 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,369 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,369 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,369 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,369 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,369 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,370 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,370 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,370 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,370 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,370 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,370 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,370 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,370 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,371 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,371 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,371 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,468 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:11,468 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,468 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(4), np.int64(11)))
2025-04-11 17:39:11,476 [INFO] Final candidates: []
2025-04-11 17:39:11,476 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,483 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,483 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,483 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,483 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,483 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,483 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,483 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,483 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,483 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,483 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,484 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,484 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,484 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,484 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,484 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,484 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,484 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,484 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,485 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,485 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,485 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,591 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,591 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,591 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(4), np.int64(7)))
2025-04-11 17:39:11,599 [INFO] Final candidates: []
2025-04-11 17:39:11,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,605 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,605 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,605 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,605 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,605 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,605 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,606 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,606 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,606 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,606 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,607 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,607 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,607 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,607 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,607 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,607 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,607 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,607 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,608 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,608 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,608 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,608 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,608 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,608 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,609 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(3), np.int64(11)))
2025-04-11 17:39:11,617 [INFO] Final candidates: []
2025-04-11 17:39:11,617 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,623 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,624 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,624 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,624 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,624 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,624 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,624 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,624 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,624 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,624 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,625 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,625 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,625 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,625 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,625 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,625 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,625 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,625 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,626 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,626 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,626 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,626 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,721 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,721 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,721 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(6)))
2025-04-11 17:39:11,729 [INFO] Final candidates: []
2025-04-11 17:39:11,729 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,735 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,735 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,735 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,735 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,735 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,735 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,736 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,736 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,736 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,736 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,737 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,737 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,737 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,737 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,737 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,737 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,737 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,737 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,738 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,738 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,738 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,748 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,748 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,748 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(16)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:11,756 [INFO] Final candidates: []
2025-04-11 17:39:11,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,763 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,763 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,763 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,763 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,763 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,763 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,763 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,763 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,764 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,764 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,764 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,764 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,764 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,764 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,764 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,764 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,765 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,765 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,765 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,765 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,887 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,887 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:39:11,896 [INFO] Final candidates: []
2025-04-11 17:39:11,896 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,902 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,902 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,902 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,902 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:11,902 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:11,902 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,902 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,902 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,903 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:11,903 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:11,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:11,903 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:11,903 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:11,903 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:11,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:11,903 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:11,904 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:11,904 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:11,904 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:11,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,905 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,905 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,905 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(5)), (np.int64(9), np.int64(13)))
2025-04-11 17:39:11,913 [INFO] Final candidates: []
2025-04-11 17:39:11,913 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:11,919 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:11,919 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:11,919 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:11,920 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:11,921 [INFO] Final candidates: [(2, 10)]
2025-04-11 17:39:11,921 [INFO] Phase defense: Found only one candidate: (2, 10)
2025-04-11 17:39:11,921 [INFO] Phase defense: Collected 10unique candidate(s):[((2, 10), (np.int64(3), np.int64(10))), ((2, 10), (np.int64(2), np.int64(8))), ((2, 10), (np.int64(2), np.int64(12))), ((2, 10), (np.int64(1), np.int64(11))), ((2, 10), (np.int64(1), np.int64(10))), ((2, 10), (np.int64(2), np.int64(9))), ((2, 10), (np.int64(2), np.int64(11))), ((2, 10), (np.int64(3), np.int64(11))), ((2, 10), (np.int64(4), np.int64(10))), ((2, 10), (np.int64(0), np.int64(10)))]
2025-04-11 17:39:11,921 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:39:11,921 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:11,994 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:11,994 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:11,994 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(5), np.int64(6)))
2025-04-11 17:39:12,003 [INFO] Final candidates: []
2025-04-11 17:39:12,003 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:12,010 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:12,010 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:12,010 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:12,010 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:12,010 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:12,010 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:12,011 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,011 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,011 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,011 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,012 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:12,012 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:12,012 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:12,012 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:12,012 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,012 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,012 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,012 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,013 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:12,013 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:12,013 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:12,013 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:12,288 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:12,289 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:12,289 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(8), np.int64(5)))
2025-04-11 17:39:12,297 [INFO] Final candidates: []
2025-04-11 17:39:12,297 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:12,303 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:12,303 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:12,303 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:12,303 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:12,303 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:12,303 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:12,303 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,303 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,303 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,303 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,304 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:12,304 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:12,304 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:12,304 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:12,304 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,304 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,304 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,304 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,305 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:12,305 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:12,305 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:12,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:12,542 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:12,542 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:12,542 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(1), np.int64(8)))
2025-04-11 17:39:12,550 [INFO] Final candidates: []
2025-04-11 17:39:12,550 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:12,557 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:12,557 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:12,557 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:12,557 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:12,557 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:12,557 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:12,557 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,557 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,557 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,557 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,558 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:12,558 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:12,558 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:12,558 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:12,558 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,558 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,558 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,558 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,559 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:12,559 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:12,559 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:12,559 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:12,751 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:12,752 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:12,752 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(4), np.int64(13)))
2025-04-11 17:39:12,760 [INFO] Final candidates: []
2025-04-11 17:39:12,760 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:12,767 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:12,767 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:12,767 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:12,767 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:12,767 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:12,767 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:12,767 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,767 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,767 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,767 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,768 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:12,768 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:12,768 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:12,768 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:12,768 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,768 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,768 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,768 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,769 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:12,769 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:12,769 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:12,769 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:12,833 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:12,833 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:12,834 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(8), np.int64(8)))
2025-04-11 17:39:12,842 [INFO] Final candidates: []
2025-04-11 17:39:12,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:12,848 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:12,848 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:12,848 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:12,848 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:12,848 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:12,848 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:12,848 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,848 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,848 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,848 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,849 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:12,849 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:12,849 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:12,849 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:12,850 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:12,850 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:12,850 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:12,850 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:12,850 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:12,850 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:12,850 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:12,850 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:12,930 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:12,931 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:12,931 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(5)), (np.int64(4), np.int64(10)))
2025-04-11 17:39:12,939 [INFO] Final candidates: []
2025-04-11 17:39:12,939 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:12,945 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:12,945 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:12,945 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:12,945 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:12,947 [INFO] Final candidates: [(2, 10)]
2025-04-11 17:39:12,947 [INFO] Phase defense: Found only one candidate: (2, 10)
2025-04-11 17:39:12,947 [INFO] Phase defense: Collected 9unique candidate(s):[((2, 10), (np.int64(3), np.int64(10))), ((2, 10), (np.int64(2), np.int64(8))), ((2, 10), (np.int64(2), np.int64(12))), ((2, 10), (np.int64(1), np.int64(11))), ((2, 10), (np.int64(1), np.int64(10))), ((2, 10), (np.int64(2), np.int64(9))), ((2, 10), (np.int64(2), np.int64(11))), ((2, 10), (np.int64(3), np.int64(11))), ((2, 10), (np.int64(0), np.int64(10)))]
2025-04-11 17:39:12,947 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 17:39:12,947 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,012 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:13,012 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,013 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(9), np.int64(9)))
2025-04-11 17:39:13,021 [INFO] Final candidates: []
2025-04-11 17:39:13,021 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,028 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,028 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,028 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,028 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,028 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,028 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,028 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,028 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,028 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,028 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,029 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,029 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,029 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,029 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,029 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,029 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,030 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,030 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,030 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,030 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,090 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:13,090 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,090 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(5)))
2025-04-11 17:39:13,099 [INFO] Final candidates: []
2025-04-11 17:39:13,099 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,105 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,105 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,105 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,105 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,106 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,106 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,106 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,106 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,106 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,106 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,107 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,107 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,107 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,107 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,107 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,107 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,108 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,108 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,108 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,147 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:13,147 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,147 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(6), np.int64(5)))
2025-04-11 17:39:13,155 [INFO] Final candidates: []
2025-04-11 17:39:13,155 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,163 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,163 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,163 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,163 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,163 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,163 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,163 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,163 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,163 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,163 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,164 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,164 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,164 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,164 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,164 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,164 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,164 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,164 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,165 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,165 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,165 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,313 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:13,314 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,314 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(4), np.int64(14)))
2025-04-11 17:39:13,321 [INFO] Final candidates: []
2025-04-11 17:39:13,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,328 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,328 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,328 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,328 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,328 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,328 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,328 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,328 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,329 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,329 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,329 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,329 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,329 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,329 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,330 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,330 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,330 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,330 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,330 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,462 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:13,462 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,463 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(8)), (np.int64(1), np.int64(12)))
2025-04-11 17:39:13,463 [DEBUG] board coords: [(1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13)]
2025-04-11 17:39:13,463 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:39:13,463 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 10), (1, 11)]
2025-04-11 17:39:13,463 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 0 1 1] with coords [(1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13)] triggers candidate.
2025-04-11 17:39:13,471 [INFO] Final candidates: [(1, 11), (1, 10)]
2025-04-11 17:39:13,471 [INFO] Phase win: Collected 1unique candidate(s):[((1, 11), (1, 10))]
2025-04-11 17:39:13,471 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:13,477 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,477 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,477 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,477 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,477 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,477 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,477 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,477 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,477 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,477 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,478 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,478 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,478 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,478 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,479 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,479 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,479 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,479 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,479 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,479 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,479 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,625 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:13,625 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,626 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(8), np.int64(5)))
2025-04-11 17:39:13,633 [INFO] Final candidates: []
2025-04-11 17:39:13,634 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,640 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,640 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,640 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,640 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,640 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,640 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,640 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,640 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,640 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,640 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,641 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,641 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,641 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,641 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,641 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,641 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,641 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,641 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,642 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,642 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,642 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,642 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,772 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:13,772 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,772 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(6)), (np.int64(10), np.int64(4)))
2025-04-11 17:39:13,780 [INFO] Final candidates: []
2025-04-11 17:39:13,780 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,786 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,787 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,787 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,787 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,787 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,787 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,787 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,787 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,788 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,788 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,788 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,788 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,788 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,788 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,789 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,789 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,789 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,789 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,810 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:13,810 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,810 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(1), np.int64(12)))
2025-04-11 17:39:13,818 [INFO] Final candidates: []
2025-04-11 17:39:13,818 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,824 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,824 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,824 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,824 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,825 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,825 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,825 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,825 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,825 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,825 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,826 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,826 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,826 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,826 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,826 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,826 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,826 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,826 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,827 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,827 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,827 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,827 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,830 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:13,831 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,831 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(4)), (np.int64(8), np.int64(10)))
2025-04-11 17:39:13,838 [INFO] Final candidates: []
2025-04-11 17:39:13,838 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:13,845 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:13,845 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:13,845 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:13,845 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:13,845 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:13,845 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:13,845 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,845 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,845 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,845 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,846 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:13,846 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:13,846 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:13,846 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:13,846 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:13,846 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:13,846 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:13,846 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:13,847 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:13,847 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:13,847 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:13,847 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:13,987 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:13,987 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:13,987 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(12)), (np.int64(7), np.int64(4)))
2025-04-11 17:39:13,997 [INFO] Final candidates: []
2025-04-11 17:39:13,997 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:14,003 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:14,003 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:14,003 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:14,003 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:14,004 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:14,004 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:14,004 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:14,004 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:14,004 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:14,004 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:14,005 [DEBUG] board coords: [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:14,005 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:14,005 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 10), (7, 5)]
2025-04-11 17:39:14,005 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:14,005 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)]
2025-04-11 17:39:14,005 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:39:14,005 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 5), (9, 3)]
2025-04-11 17:39:14,005 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3)] triggers candidate.
2025-04-11 17:39:14,006 [INFO] Final candidates: [(2, 10), (9, 3), (7, 5)]
2025-04-11 17:39:14,006 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 3), (7, 5)), ((2, 10), (9, 3)), ((2, 10), (7, 5))]
2025-04-11 17:39:14,006 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:14,006 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:14,043 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:14,043 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:39:14,043 [INFO] MCTS (win candidates) selected move: M6,L7
2025-04-11 17:39:27,366 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:39:27,374 [INFO] Final candidates: []
2025-04-11 17:39:27,374 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:27,381 [DEBUG] board coords: [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)]
2025-04-11 17:39:27,381 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:39:27,381 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (7, 5)]
2025-04-11 17:39:27,381 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(3, 9), (4, 8), (5, 7), (6, 6), (7, 5), (8, 4)] triggers candidate.
2025-04-11 17:39:27,383 [INFO] Final candidates: [(7, 5), (5, 7)]
2025-04-11 17:39:27,383 [INFO] Phase defense: Collected 1unique candidate(s):[((7, 5), (5, 7))]
2025-04-11 17:39:27,383 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:39:27,383 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:39:27,383 [DEBUG] Tree_policy iteration 1: Expanding move ((7, 5), (5, 7))
2025-04-11 17:39:27,390 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)]
2025-04-11 17:39:27,390 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:27,390 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:27,390 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=6, window [0 0 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6)] triggers candidate.
2025-04-11 17:39:27,390 [DEBUG] board coords: [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)]
2025-04-11 17:39:27,390 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:27,390 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 3), (10, 2)]
2025-04-11 17:39:27,390 [DEBUG] check_window_intermediate_custom (only one inserted(9, 3)): For L=6, window [2 2 2 2 0 0] with coords [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)] triggers candidate.
2025-04-11 17:39:27,391 [DEBUG] board coords: [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)]
2025-04-11 17:39:27,391 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:27,391 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 11), (2, 10)]
2025-04-11 17:39:27,391 [DEBUG] check_window_intermediate_custom (only one inserted(2, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 11), (2, 10), (3, 9), (4, 8), (5, 7), (6, 6), (7, 5)] triggers candidate.
2025-04-11 17:39:27,391 [DEBUG] board coords: [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)]
2025-04-11 17:39:27,391 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:27,391 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 3), (10, 2)]
2025-04-11 17:39:27,391 [DEBUG] check_window_intermediate_custom (only one inserted(9, 3)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 8), (5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)] triggers candidate.
2025-04-11 17:39:27,392 [INFO] Final candidates: [(2, 10), (9, 3)]
2025-04-11 17:39:27,392 [INFO] Phase win: Collected 1unique candidate(s):[((2, 10), (9, 3))]
2025-04-11 17:39:27,392 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:27,400 [INFO] Final candidates: []
2025-04-11 17:39:27,400 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:27,401 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:39:27,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,401 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,401 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,401 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,401 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,401 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,401 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,401 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,401 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,401 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,401 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,402 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,402 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,402 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,402 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,402 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,402 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,403 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,403 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,403 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,403 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,403 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,403 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,404 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,404 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,404 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,404 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,404 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,404 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,405 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,405 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,405 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,405 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,405 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,405 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,405 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,405 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,405 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,405 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,405 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,405 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,406 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,406 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,406 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,406 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,406 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,406 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,406 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,406 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,406 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,406 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,406 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,406 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,407 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,407 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,407 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,407 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,407 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,407 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,407 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,407 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,407 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,407 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,407 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,407 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,408 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,408 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,408 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,408 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,408 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,408 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,408 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,408 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,408 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,408 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,408 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,408 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,408 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,408 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,408 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,408 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,408 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,408 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,409 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,409 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,409 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,409 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,409 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,409 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,409 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,409 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,409 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,409 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:27,409 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:39:27,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:27,409 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:27,409 [INFO] MCTS: Search finished. Best move selected with 50 visits.
2025-04-11 17:39:27,409 [INFO] MCTS (defense candidates) selected move: F8,H6
2025-04-11 17:39:35,058 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:39:35,066 [INFO] Final candidates: []
2025-04-11 17:39:35,066 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,075 [INFO] Final candidates: []
2025-04-11 17:39:35,075 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,075 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:39:35,076 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:39:35,076 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(9), np.int64(14)))
2025-04-11 17:39:35,084 [INFO] Final candidates: []
2025-04-11 17:39:35,084 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,092 [INFO] Final candidates: []
2025-04-11 17:39:35,092 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,093 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:39:35,093 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:35,253 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:35,253 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(6), np.int64(14)))
2025-04-11 17:39:35,261 [INFO] Final candidates: []
2025-04-11 17:39:35,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,269 [INFO] Final candidates: []
2025-04-11 17:39:35,269 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,269 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:35,619 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:35,619 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(7)), (np.int64(8), np.int64(16)))
2025-04-11 17:39:35,628 [INFO] Final candidates: []
2025-04-11 17:39:35,628 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,636 [INFO] Final candidates: []
2025-04-11 17:39:35,636 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,637 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:35,858 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:35,858 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(8)))
2025-04-11 17:39:35,866 [INFO] Final candidates: []
2025-04-11 17:39:35,866 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,874 [INFO] Final candidates: []
2025-04-11 17:39:35,874 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:35,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:36,116 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:36,117 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(7), np.int64(8)))
2025-04-11 17:39:36,125 [INFO] Final candidates: []
2025-04-11 17:39:36,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,133 [INFO] Final candidates: []
2025-04-11 17:39:36,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:36,280 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:36,280 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(2), np.int64(12)))
2025-04-11 17:39:36,289 [INFO] Final candidates: []
2025-04-11 17:39:36,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,298 [INFO] Final candidates: []
2025-04-11 17:39:36,298 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,298 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:36,332 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:36,332 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(3), np.int64(12)))
2025-04-11 17:39:36,340 [INFO] Final candidates: []
2025-04-11 17:39:36,340 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,348 [INFO] Final candidates: []
2025-04-11 17:39:36,348 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:36,442 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:36,442 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(9), np.int64(4)))
2025-04-11 17:39:36,450 [INFO] Final candidates: []
2025-04-11 17:39:36,450 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,458 [INFO] Final candidates: []
2025-04-11 17:39:36,458 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,459 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:36,683 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:36,684 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(12), np.int64(9)))
2025-04-11 17:39:36,692 [INFO] Final candidates: []
2025-04-11 17:39:36,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,700 [INFO] Final candidates: []
2025-04-11 17:39:36,700 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:36,969 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:36,970 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(12), np.int64(6)))
2025-04-11 17:39:36,978 [INFO] Final candidates: []
2025-04-11 17:39:36,978 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,986 [INFO] Final candidates: []
2025-04-11 17:39:36,986 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:36,987 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:37,137 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:37,138 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(6), np.int64(15)))
2025-04-11 17:39:37,146 [INFO] Final candidates: []
2025-04-11 17:39:37,146 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,154 [INFO] Final candidates: []
2025-04-11 17:39:37,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,157 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:37,319 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:37,319 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(10), np.int64(7)))
2025-04-11 17:39:37,327 [INFO] Final candidates: []
2025-04-11 17:39:37,327 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,335 [INFO] Final candidates: []
2025-04-11 17:39:37,335 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,336 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:37,639 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:37,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(12), np.int64(10)))
2025-04-11 17:39:37,647 [INFO] Final candidates: []
2025-04-11 17:39:37,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,655 [INFO] Final candidates: []
2025-04-11 17:39:37,655 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:37,751 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:37,751 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(9), np.int64(16)))
2025-04-11 17:39:37,759 [INFO] Final candidates: []
2025-04-11 17:39:37,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,767 [INFO] Final candidates: []
2025-04-11 17:39:37,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:37,870 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:37,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(7), np.int64(15)))
2025-04-11 17:39:37,879 [INFO] Final candidates: []
2025-04-11 17:39:37,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,888 [INFO] Final candidates: []
2025-04-11 17:39:37,888 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:37,889 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:38,022 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:38,023 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(7), np.int64(7)))
2025-04-11 17:39:38,030 [INFO] Final candidates: []
2025-04-11 17:39:38,030 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,038 [INFO] Final candidates: []
2025-04-11 17:39:38,038 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,039 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:38,253 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:38,253 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(7)), (np.int64(6), np.int64(7)))
2025-04-11 17:39:38,261 [INFO] Final candidates: []
2025-04-11 17:39:38,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,269 [INFO] Final candidates: []
2025-04-11 17:39:38,269 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,269 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:38,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:38,385 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(12), np.int64(6)))
2025-04-11 17:39:38,393 [INFO] Final candidates: []
2025-04-11 17:39:38,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,400 [INFO] Final candidates: []
2025-04-11 17:39:38,400 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:38,606 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:38,606 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(2), np.int64(12)))
2025-04-11 17:39:38,614 [INFO] Final candidates: []
2025-04-11 17:39:38,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,622 [INFO] Final candidates: []
2025-04-11 17:39:38,622 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,623 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:38,722 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:38,722 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(0), np.int64(13)))
2025-04-11 17:39:38,730 [INFO] Final candidates: []
2025-04-11 17:39:38,730 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,738 [INFO] Final candidates: []
2025-04-11 17:39:38,738 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:38,849 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:38,850 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(9), np.int64(9)))
2025-04-11 17:39:38,857 [INFO] Final candidates: []
2025-04-11 17:39:38,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,865 [INFO] Final candidates: []
2025-04-11 17:39:38,865 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:38,923 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:38,923 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(3), np.int64(12)))
2025-04-11 17:39:38,931 [INFO] Final candidates: []
2025-04-11 17:39:38,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,939 [INFO] Final candidates: []
2025-04-11 17:39:38,939 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:38,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:39,059 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:39,059 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(10), np.int64(5)))
2025-04-11 17:39:39,067 [INFO] Final candidates: []
2025-04-11 17:39:39,067 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,075 [INFO] Final candidates: []
2025-04-11 17:39:39,075 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,077 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:39,191 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:39,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(2), np.int64(9)))
2025-04-11 17:39:39,199 [INFO] Final candidates: []
2025-04-11 17:39:39,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,207 [INFO] Final candidates: []
2025-04-11 17:39:39,207 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:39,243 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:39,244 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(12), np.int64(10)))
2025-04-11 17:39:39,252 [INFO] Final candidates: []
2025-04-11 17:39:39,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,259 [INFO] Final candidates: []
2025-04-11 17:39:39,259 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:39,482 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:39,482 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(14), np.int64(8)))
2025-04-11 17:39:39,492 [INFO] Final candidates: []
2025-04-11 17:39:39,492 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,501 [INFO] Final candidates: []
2025-04-11 17:39:39,501 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:39,636 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:39,636 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:39,644 [INFO] Final candidates: []
2025-04-11 17:39:39,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,652 [INFO] Final candidates: []
2025-04-11 17:39:39,652 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:39,902 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:39,903 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 17:39:39,911 [INFO] Final candidates: []
2025-04-11 17:39:39,911 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,918 [INFO] Final candidates: []
2025-04-11 17:39:39,919 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,919 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:39,983 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:39,983 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(6), np.int64(7)))
2025-04-11 17:39:39,991 [INFO] Final candidates: []
2025-04-11 17:39:39,991 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:39,999 [INFO] Final candidates: []
2025-04-11 17:39:39,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,000 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:40,169 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:40,169 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(8), np.int64(6)))
2025-04-11 17:39:40,177 [INFO] Final candidates: []
2025-04-11 17:39:40,177 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,186 [INFO] Final candidates: []
2025-04-11 17:39:40,186 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:40,282 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:40,282 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:39:40,290 [INFO] Final candidates: []
2025-04-11 17:39:40,290 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,298 [INFO] Final candidates: []
2025-04-11 17:39:40,298 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,299 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:40,365 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:40,366 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(0), np.int64(12)))
2025-04-11 17:39:40,374 [INFO] Final candidates: []
2025-04-11 17:39:40,374 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,382 [INFO] Final candidates: []
2025-04-11 17:39:40,382 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:40,601 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:40,602 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(8), np.int64(16)))
2025-04-11 17:39:40,609 [INFO] Final candidates: []
2025-04-11 17:39:40,609 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,618 [INFO] Final candidates: []
2025-04-11 17:39:40,618 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,619 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:40,701 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:40,701 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(9), np.int64(6)))
2025-04-11 17:39:40,709 [INFO] Final candidates: []
2025-04-11 17:39:40,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,716 [INFO] Final candidates: []
2025-04-11 17:39:40,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:40,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:41,059 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:41,059 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(8), np.int64(17)))
2025-04-11 17:39:41,067 [INFO] Final candidates: []
2025-04-11 17:39:41,067 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,075 [INFO] Final candidates: []
2025-04-11 17:39:41,075 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,076 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:41,230 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:41,230 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(3)))
2025-04-11 17:39:41,238 [INFO] Final candidates: []
2025-04-11 17:39:41,238 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,246 [INFO] Final candidates: []
2025-04-11 17:39:41,246 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,247 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:41,363 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:41,364 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:39:41,372 [INFO] Final candidates: []
2025-04-11 17:39:41,372 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,380 [INFO] Final candidates: []
2025-04-11 17:39:41,380 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,380 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:41,575 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:41,575 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(4), np.int64(7)))
2025-04-11 17:39:41,583 [INFO] Final candidates: []
2025-04-11 17:39:41,583 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,591 [INFO] Final candidates: []
2025-04-11 17:39:41,591 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,592 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:41,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:41,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(11), np.int64(15)))
2025-04-11 17:39:41,878 [INFO] Final candidates: []
2025-04-11 17:39:41,878 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,886 [INFO] Final candidates: []
2025-04-11 17:39:41,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:41,886 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:42,097 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:42,098 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:42,106 [INFO] Final candidates: []
2025-04-11 17:39:42,106 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,113 [INFO] Final candidates: []
2025-04-11 17:39:42,113 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,114 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:42,175 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:42,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(9), np.int64(4)))
2025-04-11 17:39:42,184 [INFO] Final candidates: []
2025-04-11 17:39:42,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,192 [INFO] Final candidates: []
2025-04-11 17:39:42,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,193 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:42,396 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:42,396 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(11), np.int64(7)))
2025-04-11 17:39:42,404 [INFO] Final candidates: []
2025-04-11 17:39:42,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,412 [INFO] Final candidates: []
2025-04-11 17:39:42,412 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,413 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:42,527 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:42,527 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(0), np.int64(8)))
2025-04-11 17:39:42,535 [INFO] Final candidates: []
2025-04-11 17:39:42,535 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,543 [INFO] Final candidates: []
2025-04-11 17:39:42,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:42,643 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:42,644 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(0), np.int64(13)))
2025-04-11 17:39:42,651 [INFO] Final candidates: []
2025-04-11 17:39:42,651 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,659 [INFO] Final candidates: []
2025-04-11 17:39:42,659 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,660 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:42,818 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:42,818 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(4), np.int64(14)))
2025-04-11 17:39:42,826 [INFO] Final candidates: []
2025-04-11 17:39:42,826 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,834 [INFO] Final candidates: []
2025-04-11 17:39:42,834 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,835 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:42,895 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:42,896 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:42,903 [INFO] Final candidates: []
2025-04-11 17:39:42,903 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,911 [INFO] Final candidates: []
2025-04-11 17:39:42,911 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:42,912 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:43,180 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:43,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(4), np.int64(10)))
2025-04-11 17:39:43,188 [INFO] Final candidates: []
2025-04-11 17:39:43,188 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,196 [INFO] Final candidates: []
2025-04-11 17:39:43,196 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,196 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:43,291 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:43,292 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(5), np.int64(8)))
2025-04-11 17:39:43,300 [INFO] Final candidates: []
2025-04-11 17:39:43,300 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,307 [INFO] Final candidates: []
2025-04-11 17:39:43,307 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,308 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:43,460 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:43,460 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(6), np.int64(13)))
2025-04-11 17:39:43,469 [INFO] Final candidates: []
2025-04-11 17:39:43,469 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,477 [INFO] Final candidates: []
2025-04-11 17:39:43,477 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:43,606 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:43,607 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(3), np.int64(10)))
2025-04-11 17:39:43,615 [INFO] Final candidates: []
2025-04-11 17:39:43,615 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,623 [INFO] Final candidates: []
2025-04-11 17:39:43,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:43,760 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:43,760 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(1), np.int64(12)))
2025-04-11 17:39:43,768 [INFO] Final candidates: []
2025-04-11 17:39:43,768 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,776 [INFO] Final candidates: []
2025-04-11 17:39:43,776 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,776 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:39:43,776 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:43,852 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:43,853 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(9), np.int64(7)))
2025-04-11 17:39:43,861 [INFO] Final candidates: []
2025-04-11 17:39:43,861 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,869 [INFO] Final candidates: []
2025-04-11 17:39:43,869 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:43,870 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:43,986 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:43,987 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(4), np.int64(10)))
2025-04-11 17:39:43,995 [INFO] Final candidates: []
2025-04-11 17:39:43,995 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,003 [INFO] Final candidates: []
2025-04-11 17:39:44,003 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,004 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:44,250 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:44,250 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(4), np.int64(13)))
2025-04-11 17:39:44,259 [INFO] Final candidates: []
2025-04-11 17:39:44,259 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,268 [INFO] Final candidates: []
2025-04-11 17:39:44,268 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,269 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:44,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:44,403 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(8), np.int64(17)))
2025-04-11 17:39:44,411 [INFO] Final candidates: []
2025-04-11 17:39:44,411 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,419 [INFO] Final candidates: []
2025-04-11 17:39:44,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,420 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:44,539 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:44,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(6), np.int64(11)))
2025-04-11 17:39:44,547 [INFO] Final candidates: []
2025-04-11 17:39:44,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,555 [INFO] Final candidates: []
2025-04-11 17:39:44,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:44,669 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:44,669 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(7), np.int64(13)))
2025-04-11 17:39:44,677 [INFO] Final candidates: []
2025-04-11 17:39:44,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,684 [INFO] Final candidates: []
2025-04-11 17:39:44,684 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:44,880 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:44,881 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(8)), (np.int64(8), np.int64(3)))
2025-04-11 17:39:44,888 [INFO] Final candidates: []
2025-04-11 17:39:44,888 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,896 [INFO] Final candidates: []
2025-04-11 17:39:44,896 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:44,963 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:44,963 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(8), np.int64(11)))
2025-04-11 17:39:44,971 [INFO] Final candidates: []
2025-04-11 17:39:44,971 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,979 [INFO] Final candidates: []
2025-04-11 17:39:44,979 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:44,980 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:45,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:45,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(4), np.int64(10)))
2025-04-11 17:39:45,110 [INFO] Final candidates: []
2025-04-11 17:39:45,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,118 [INFO] Final candidates: []
2025-04-11 17:39:45,118 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:45,362 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:45,362 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(3)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:45,370 [INFO] Final candidates: []
2025-04-11 17:39:45,370 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,377 [INFO] Final candidates: []
2025-04-11 17:39:45,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:45,646 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:45,646 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(7), np.int64(13)))
2025-04-11 17:39:45,654 [INFO] Final candidates: []
2025-04-11 17:39:45,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,662 [INFO] Final candidates: []
2025-04-11 17:39:45,662 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,663 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:45,734 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:45,734 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(13), np.int64(7)))
2025-04-11 17:39:45,742 [INFO] Final candidates: []
2025-04-11 17:39:45,742 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,750 [INFO] Final candidates: []
2025-04-11 17:39:45,750 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,750 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:45,862 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:45,863 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(9), np.int64(13)))
2025-04-11 17:39:45,871 [INFO] Final candidates: []
2025-04-11 17:39:45,871 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,879 [INFO] Final candidates: []
2025-04-11 17:39:45,879 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,881 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:45,950 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:45,950 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(10)), (np.int64(8), np.int64(16)))
2025-04-11 17:39:45,958 [INFO] Final candidates: []
2025-04-11 17:39:45,958 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,966 [INFO] Final candidates: []
2025-04-11 17:39:45,966 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:45,967 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:46,060 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:46,061 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(6), np.int64(8)))
2025-04-11 17:39:46,069 [INFO] Final candidates: []
2025-04-11 17:39:46,069 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,077 [INFO] Final candidates: []
2025-04-11 17:39:46,077 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,078 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:46,212 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:46,213 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(2), np.int64(13)))
2025-04-11 17:39:46,221 [INFO] Final candidates: []
2025-04-11 17:39:46,221 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,230 [INFO] Final candidates: []
2025-04-11 17:39:46,230 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,230 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:46,489 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:46,489 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(10), np.int64(9)))
2025-04-11 17:39:46,497 [INFO] Final candidates: []
2025-04-11 17:39:46,497 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,505 [INFO] Final candidates: []
2025-04-11 17:39:46,505 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:46,705 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:46,706 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(8), np.int64(5)))
2025-04-11 17:39:46,715 [INFO] Final candidates: []
2025-04-11 17:39:46,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,722 [INFO] Final candidates: []
2025-04-11 17:39:46,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,723 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:46,834 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:46,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(11), np.int64(9)))
2025-04-11 17:39:46,842 [INFO] Final candidates: []
2025-04-11 17:39:46,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,851 [INFO] Final candidates: []
2025-04-11 17:39:46,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:46,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:46,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:46,989 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(7), np.int64(13)))
2025-04-11 17:39:46,999 [INFO] Final candidates: []
2025-04-11 17:39:46,999 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,007 [INFO] Final candidates: []
2025-04-11 17:39:47,007 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,008 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:47,272 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:47,273 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(9), np.int64(16)))
2025-04-11 17:39:47,280 [INFO] Final candidates: []
2025-04-11 17:39:47,280 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,288 [INFO] Final candidates: []
2025-04-11 17:39:47,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,289 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:47,448 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:47,448 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(7), np.int64(8)))
2025-04-11 17:39:47,456 [INFO] Final candidates: []
2025-04-11 17:39:47,456 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,464 [INFO] Final candidates: []
2025-04-11 17:39:47,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:47,684 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:47,685 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(8), np.int64(14)))
2025-04-11 17:39:47,692 [INFO] Final candidates: []
2025-04-11 17:39:47,693 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,701 [INFO] Final candidates: []
2025-04-11 17:39:47,701 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,702 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:47,804 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:47,804 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(6), np.int64(12)))
2025-04-11 17:39:47,812 [INFO] Final candidates: []
2025-04-11 17:39:47,812 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,820 [INFO] Final candidates: []
2025-04-11 17:39:47,820 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:47,821 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:48,024 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:48,025 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(10), np.int64(4)))
2025-04-11 17:39:48,032 [INFO] Final candidates: []
2025-04-11 17:39:48,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,040 [INFO] Final candidates: []
2025-04-11 17:39:48,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,041 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:48,320 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:48,320 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(12), np.int64(6)))
2025-04-11 17:39:48,328 [INFO] Final candidates: []
2025-04-11 17:39:48,328 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,336 [INFO] Final candidates: []
2025-04-11 17:39:48,336 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:48,524 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:48,524 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(7), np.int64(15)))
2025-04-11 17:39:48,532 [INFO] Final candidates: []
2025-04-11 17:39:48,532 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,540 [INFO] Final candidates: []
2025-04-11 17:39:48,540 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,541 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:48,749 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:48,749 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(11), np.int64(6)))
2025-04-11 17:39:48,757 [INFO] Final candidates: []
2025-04-11 17:39:48,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,765 [INFO] Final candidates: []
2025-04-11 17:39:48,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:48,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:48,972 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(8), np.int64(17)))
2025-04-11 17:39:48,980 [INFO] Final candidates: []
2025-04-11 17:39:48,980 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,987 [INFO] Final candidates: []
2025-04-11 17:39:48,987 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:48,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:49,084 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:49,084 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 17:39:49,092 [INFO] Final candidates: []
2025-04-11 17:39:49,092 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,100 [INFO] Final candidates: []
2025-04-11 17:39:49,100 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,101 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:49,204 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:49,204 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(8), np.int64(13)))
2025-04-11 17:39:49,212 [INFO] Final candidates: []
2025-04-11 17:39:49,212 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,222 [INFO] Final candidates: []
2025-04-11 17:39:49,222 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,223 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:49,386 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:49,387 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(11), np.int64(6)))
2025-04-11 17:39:49,395 [INFO] Final candidates: []
2025-04-11 17:39:49,395 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,402 [INFO] Final candidates: []
2025-04-11 17:39:49,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:49,621 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:49,621 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(4), np.int64(6)))
2025-04-11 17:39:49,631 [INFO] Final candidates: []
2025-04-11 17:39:49,631 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,639 [INFO] Final candidates: []
2025-04-11 17:39:49,639 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,640 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:49,712 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:49,712 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(9), np.int64(13)))
2025-04-11 17:39:49,720 [INFO] Final candidates: []
2025-04-11 17:39:49,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,727 [INFO] Final candidates: []
2025-04-11 17:39:49,727 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,728 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:49,813 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:49,813 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(6)), (np.int64(2), np.int64(9)))
2025-04-11 17:39:49,821 [INFO] Final candidates: []
2025-04-11 17:39:49,821 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,830 [INFO] Final candidates: []
2025-04-11 17:39:49,830 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,831 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:49,983 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:49,984 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(15)), (np.int64(8), np.int64(3)))
2025-04-11 17:39:49,991 [INFO] Final candidates: []
2025-04-11 17:39:49,991 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:49,999 [INFO] Final candidates: []
2025-04-11 17:39:49,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,000 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:50,201 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:50,201 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(5), np.int64(6)))
2025-04-11 17:39:50,209 [INFO] Final candidates: []
2025-04-11 17:39:50,209 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,217 [INFO] Final candidates: []
2025-04-11 17:39:50,217 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,218 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:50,390 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:50,391 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(3), np.int64(7)))
2025-04-11 17:39:50,398 [INFO] Final candidates: []
2025-04-11 17:39:50,398 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,406 [INFO] Final candidates: []
2025-04-11 17:39:50,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:50,593 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:50,593 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(0), np.int64(12)))
2025-04-11 17:39:50,601 [INFO] Final candidates: []
2025-04-11 17:39:50,601 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,609 [INFO] Final candidates: []
2025-04-11 17:39:50,609 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,610 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:50,687 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:50,688 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(5), np.int64(8)))
2025-04-11 17:39:50,696 [INFO] Final candidates: []
2025-04-11 17:39:50,696 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,703 [INFO] Final candidates: []
2025-04-11 17:39:50,703 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,704 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:50,848 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:50,848 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(5), np.int64(15)))
2025-04-11 17:39:50,856 [INFO] Final candidates: []
2025-04-11 17:39:50,856 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,864 [INFO] Final candidates: []
2025-04-11 17:39:50,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:50,865 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:51,018 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:51,018 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(2), np.int64(8)))
2025-04-11 17:39:51,026 [INFO] Final candidates: []
2025-04-11 17:39:51,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,034 [INFO] Final candidates: []
2025-04-11 17:39:51,034 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,034 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:51,126 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:51,126 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(10), np.int64(14)))
2025-04-11 17:39:51,134 [INFO] Final candidates: []
2025-04-11 17:39:51,134 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,142 [INFO] Final candidates: []
2025-04-11 17:39:51,142 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,143 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:51,393 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:51,393 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(11), np.int64(15)))
2025-04-11 17:39:51,403 [INFO] Final candidates: []
2025-04-11 17:39:51,403 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,410 [INFO] Final candidates: []
2025-04-11 17:39:51,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,411 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:51,526 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:51,526 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(10), np.int64(16)))
2025-04-11 17:39:51,534 [INFO] Final candidates: []
2025-04-11 17:39:51,534 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,542 [INFO] Final candidates: []
2025-04-11 17:39:51,542 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:51,608 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:51,608 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(9), np.int64(13)))
2025-04-11 17:39:51,616 [INFO] Final candidates: []
2025-04-11 17:39:51,616 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,624 [INFO] Final candidates: []
2025-04-11 17:39:51,624 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:51,827 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:51,828 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(12)))
2025-04-11 17:39:51,835 [INFO] Final candidates: []
2025-04-11 17:39:51,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,843 [INFO] Final candidates: []
2025-04-11 17:39:51,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:51,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:51,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:51,989 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:39:51,998 [INFO] Final candidates: []
2025-04-11 17:39:51,998 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:52,008 [INFO] Final candidates: []
2025-04-11 17:39:52,008 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:52,009 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:52,142 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:52,143 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(6), np.int64(15)))
2025-04-11 17:39:52,151 [INFO] Final candidates: []
2025-04-11 17:39:52,151 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:52,159 [INFO] Final candidates: []
2025-04-11 17:39:52,159 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:52,160 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:52,228 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:52,228 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:39:52,228 [INFO] MCTS selected move: M9,P10
2025-04-11 17:39:52,228 [INFO] ===============NEW MOVE================
2025-04-11 17:39:55,142 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:39:55,152 [INFO] Final candidates: []
2025-04-11 17:39:55,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,157 [DEBUG] board coords: [(7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,157 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 3), (9, 5)]
2025-04-11 17:39:55,157 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,157 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10)] triggers candidate.
2025-04-11 17:39:55,157 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,157 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)]
2025-04-11 17:39:55,157 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(14, 10), (15, 11)]
2025-04-11 17:39:55,157 [DEBUG] check_window_intermediate_custom (only one inserted(14, 10)): For L=6, window [2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,158 [DEBUG] board coords: [(7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8), (13, 9)]
2025-04-11 17:39:55,158 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 3), (9, 5)]
2025-04-11 17:39:55,158 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 0 2 2 2 2] with coords [(7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8), (13, 9)] triggers candidate.
2025-04-11 17:39:55,158 [DEBUG] board coords: [(8, 4), (9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10)]
2025-04-11 17:39:55,158 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:39:55,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 5), (14, 10)]
2025-04-11 17:39:55,158 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 2 2 0] with coords [(8, 4), (9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10)] triggers candidate.
2025-04-11 17:39:55,160 [INFO] Final candidates: [(9, 5), (14, 10), (7, 3)]
2025-04-11 17:39:55,161 [INFO] Phase defense: Collected 3unique candidate(s):[((9, 5), (14, 10)), ((9, 5), (7, 3)), ((14, 10), (7, 3))]
2025-04-11 17:39:55,161 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:55,161 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:39:55,161 [DEBUG] Tree_policy iteration 1: Expanding move ((14, 10), (7, 3))
2025-04-11 17:39:55,165 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,165 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,165 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,165 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,166 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,166 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,166 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,166 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,166 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,166 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,166 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,166 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,167 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,167 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,167 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,167 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,167 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,169 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:55,169 [INFO] Phase win: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:55,169 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:39:55,176 [INFO] Final candidates: []
2025-04-11 17:39:55,176 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,177 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:39:55,177 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,227 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:55,227 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 5), (7, 3))
2025-04-11 17:39:55,232 [DEBUG] board coords: [(5, 1), (6, 2), (7, 3), (8, 4), (9, 5), (10, 6)]
2025-04-11 17:39:55,232 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,232 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 1), (6, 2)]
2025-04-11 17:39:55,232 [DEBUG] check_window_intermediate_custom (only one inserted(6, 2)): For L=6, window [0 0 2 2 2 2] with coords [(5, 1), (6, 2), (7, 3), (8, 4), (9, 5), (10, 6)] triggers candidate.
2025-04-11 17:39:55,232 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)]
2025-04-11 17:39:55,232 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,232 [DEBUG] check_window_intermediate_custom: empty_cells=[(14, 10), (15, 11)]
2025-04-11 17:39:55,232 [DEBUG] check_window_intermediate_custom (only one inserted(14, 10)): For L=6, window [2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,233 [DEBUG] board coords: [(5, 1), (6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,233 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 1), (6, 2)]
2025-04-11 17:39:55,233 [DEBUG] check_window_intermediate_custom (only one inserted(6, 2)): For L=7, window [0 0 2 2 2 2 2] with coords [(5, 1), (6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,233 [DEBUG] board coords: [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)]
2025-04-11 17:39:55,233 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(14, 10), (15, 11)]
2025-04-11 17:39:55,233 [DEBUG] check_window_intermediate_custom (only one inserted(14, 10)): For L=7, window [2 2 2 2 2 0 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,235 [INFO] Final candidates: [(6, 2), (14, 10)]
2025-04-11 17:39:55,236 [INFO] Phase win: Collected 1unique candidate(s):[((6, 2), (14, 10))]
2025-04-11 17:39:55,236 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:55,243 [INFO] Final candidates: []
2025-04-11 17:39:55,243 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,244 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:55,244 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 5), (14, 10))
2025-04-11 17:39:55,248 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,248 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,249 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (7, 3)]
2025-04-11 17:39:55,249 [DEBUG] check_window_intermediate_custom (only one inserted(7, 3)): For L=6, window [0 0 2 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,249 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,249 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,249 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,249 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,250 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,250 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,250 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (7, 3)]
2025-04-11 17:39:55,250 [DEBUG] check_window_intermediate_custom (only one inserted(7, 3)): For L=7, window [0 0 2 2 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,250 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,250 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,250 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,250 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,252 [INFO] Final candidates: [(15, 11), (7, 3)]
2025-04-11 17:39:55,252 [INFO] Phase win: Collected 1unique candidate(s):[((15, 11), (7, 3))]
2025-04-11 17:39:55,252 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:39:55,259 [INFO] Final candidates: []
2025-04-11 17:39:55,259 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,260 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:55,261 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:55,261 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(11), np.int64(6)))
2025-04-11 17:39:55,268 [INFO] Final candidates: []
2025-04-11 17:39:55,268 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,272 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,272 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,272 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,273 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,273 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,273 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,273 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,273 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,273 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,273 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,273 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,274 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,274 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,274 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,274 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,274 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,274 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,276 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:55,276 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:55,276 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:55,276 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:55,385 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:55,385 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(2)), (np.int64(11), np.int64(15)))
2025-04-11 17:39:55,393 [INFO] Final candidates: []
2025-04-11 17:39:55,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,400 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,400 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,400 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,400 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,401 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,401 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,401 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,401 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,401 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,401 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,401 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,401 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,402 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,402 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,402 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,402 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,402 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,402 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,404 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:55,404 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:55,404 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:55,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,461 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:55,461 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:55,461 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(3)), (np.int64(10), np.int64(11)))
2025-04-11 17:39:55,469 [INFO] Final candidates: []
2025-04-11 17:39:55,469 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,473 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,474 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,474 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,474 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,474 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,474 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,474 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,474 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,475 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,475 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,475 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,475 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,475 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,475 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,475 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,475 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,475 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,475 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,477 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:55,477 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:55,477 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:55,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,498 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:55,498 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:55,498 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(8)), (np.int64(2), np.int64(16)))
2025-04-11 17:39:55,506 [INFO] Final candidates: []
2025-04-11 17:39:55,506 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,510 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,510 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,510 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,510 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,511 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,511 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,511 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,511 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,511 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,511 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,512 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,512 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,512 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,512 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,512 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,514 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:55,514 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:55,514 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:55,514 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,594 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:55,594 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:55,594 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(0), np.int64(8)))
2025-04-11 17:39:55,602 [INFO] Final candidates: []
2025-04-11 17:39:55,602 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,606 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,606 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,606 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,606 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,607 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,607 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,607 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,607 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,607 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,607 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,607 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,607 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,608 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,608 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,608 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,608 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,608 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,608 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,610 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:55,610 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:55,610 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:55,610 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,716 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:55,716 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:55,716 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(1), np.int64(7)))
2025-04-11 17:39:55,723 [INFO] Final candidates: []
2025-04-11 17:39:55,723 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,728 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:55,728 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,728 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,728 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:55,728 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,728 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,728 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,728 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,729 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:55,729 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:55,729 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:55,729 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:55,729 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:55,729 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:55,729 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,729 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,730 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,730 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,732 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:55,732 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:55,732 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:55,732 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:55,953 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:55,954 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:55,954 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(0), np.int64(8)))
2025-04-11 17:39:55,961 [INFO] Final candidates: []
2025-04-11 17:39:55,961 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:55,966 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,966 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,966 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,966 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,967 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:55,967 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:55,967 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:55,967 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:55,969 [INFO] Final candidates: [(15, 11)]
2025-04-11 17:39:55,969 [INFO] Phase defense: Found only one candidate: (15, 11)
2025-04-11 17:39:55,969 [INFO] Phase defense: Collected 11unique candidate(s):[((15, 11), (np.int64(17), np.int64(11))), ((15, 11), (np.int64(15), np.int64(12))), ((15, 11), (np.int64(16), np.int64(11))), ((15, 11), (np.int64(13), np.int64(11))), ((15, 11), (np.int64(15), np.int64(10))), ((15, 11), (np.int64(14), np.int64(12))), ((15, 11), (np.int64(16), np.int64(12))), ((15, 11), (np.int64(15), np.int64(9))), ((15, 11), (np.int64(14), np.int64(11))), ((15, 11), (np.int64(16), np.int64(10))), ((15, 11), (np.int64(15), np.int64(13)))]
2025-04-11 17:39:55,969 [INFO] Phase 2 (defense): 11 candidate(s) found.
2025-04-11 17:39:55,969 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,184 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:56,184 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,184 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(3), np.int64(7)))
2025-04-11 17:39:56,192 [INFO] Final candidates: []
2025-04-11 17:39:56,192 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,196 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,196 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,196 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,196 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,197 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,197 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,197 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,197 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,197 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,197 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,197 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,197 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,198 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,198 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,198 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,198 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,198 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,198 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,200 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,200 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,200 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,200 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,295 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:56,296 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,296 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(2), np.int64(16)))
2025-04-11 17:39:56,303 [INFO] Final candidates: []
2025-04-11 17:39:56,303 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,308 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,308 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,308 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,308 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,308 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,308 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,308 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,308 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,309 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,309 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,309 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,309 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,309 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,309 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,310 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,310 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,310 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,312 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,312 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,312 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,320 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,320 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(8)), (np.int64(3), np.int64(10)))
2025-04-11 17:39:56,327 [INFO] Final candidates: []
2025-04-11 17:39:56,327 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,331 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,331 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,331 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,332 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,332 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,332 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,332 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,332 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,333 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,333 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,333 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,333 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,333 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,333 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,333 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,333 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,333 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,333 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,335 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,335 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,335 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,335 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,429 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,429 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,430 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(6)), (np.int64(6), np.int64(10)))
2025-04-11 17:39:56,437 [INFO] Final candidates: []
2025-04-11 17:39:56,437 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,442 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,442 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,442 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,442 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,442 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,443 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,443 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,443 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,443 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,443 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,443 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,443 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,443 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,444 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,444 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,444 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,444 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,444 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,447 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,447 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,447 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,447 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,501 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,502 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,502 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(10)), (np.int64(4), np.int64(7)))
2025-04-11 17:39:56,510 [INFO] Final candidates: []
2025-04-11 17:39:56,510 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,514 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,514 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,514 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,514 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,515 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,515 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,515 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,515 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,515 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,515 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,515 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,515 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,516 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,516 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,516 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,516 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,516 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,516 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,518 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,518 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,518 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,539 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,539 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,539 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(7)), (np.int64(2), np.int64(16)))
2025-04-11 17:39:56,547 [INFO] Final candidates: []
2025-04-11 17:39:56,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,552 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,552 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,552 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,552 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,552 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,552 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,552 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,552 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,553 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,553 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,553 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,553 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,553 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,553 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,553 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,553 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,553 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,553 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,555 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,555 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,555 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,555 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,604 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,604 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,604 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(16)), (np.int64(7), np.int64(13)))
2025-04-11 17:39:56,612 [INFO] Final candidates: []
2025-04-11 17:39:56,612 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,616 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,616 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,616 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,616 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,617 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,617 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,617 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,617 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,617 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,617 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,617 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,618 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,618 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,618 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,618 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,618 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,618 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,618 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,620 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,620 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,620 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,620 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,637 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,637 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,637 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(14)), (np.int64(15), np.int64(10)))
2025-04-11 17:39:56,645 [INFO] Final candidates: []
2025-04-11 17:39:56,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,650 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,650 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,650 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,650 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,650 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,650 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,650 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,650 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,651 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,651 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,651 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,651 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,651 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,651 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,651 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,651 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,653 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,653 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,653 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,653 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,684 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,685 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,685 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(15)))
2025-04-11 17:39:56,692 [INFO] Final candidates: []
2025-04-11 17:39:56,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,696 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,697 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,697 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,697 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,697 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,697 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,697 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,697 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,698 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,698 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,698 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,698 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,698 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,698 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,698 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,698 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,698 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,698 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,700 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,700 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,700 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,700 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,739 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,739 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,739 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(2)), (np.int64(6), np.int64(5)))
2025-04-11 17:39:56,746 [INFO] Final candidates: []
2025-04-11 17:39:56,746 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,751 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,751 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,751 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,751 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,751 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,751 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,751 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,751 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,752 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,752 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,752 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,752 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,752 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,752 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,752 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,752 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,754 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,754 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,755 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,755 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:56,827 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:56,827 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:56,827 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(16)), (np.int64(11), np.int64(15)))
2025-04-11 17:39:56,835 [INFO] Final candidates: []
2025-04-11 17:39:56,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:56,839 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:56,839 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,839 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,839 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:56,840 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,840 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,840 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,840 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,840 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:56,840 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:56,840 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:56,840 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:56,841 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:56,841 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:56,841 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:56,841 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:56,841 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:56,841 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:56,843 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:56,843 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:56,843 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:56,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,067 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:57,068 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,068 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(8)), (np.int64(8), np.int64(3)))
2025-04-11 17:39:57,075 [INFO] Final candidates: []
2025-04-11 17:39:57,075 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,079 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,079 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,080 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,080 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,080 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,080 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,080 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,080 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,081 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,081 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,081 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,081 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,081 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,081 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,081 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,081 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,081 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,081 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,083 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,083 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,083 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,083 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,262 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:57,263 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,263 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(15), np.int64(11)))
2025-04-11 17:39:57,271 [INFO] Final candidates: []
2025-04-11 17:39:57,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,275 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,275 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,275 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,275 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,276 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,276 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,276 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,276 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,279 [INFO] Final candidates: [(9, 5), (6, 2)]
2025-04-11 17:39:57,279 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 5), (6, 2))]
2025-04-11 17:39:57,279 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:39:57,279 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,517 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:57,517 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,517 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(10)), (np.int64(1), np.int64(7)))
2025-04-11 17:39:57,525 [INFO] Final candidates: []
2025-04-11 17:39:57,525 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,529 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,529 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,529 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,529 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,530 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,530 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,530 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,530 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,530 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,530 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,531 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,531 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,531 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,531 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,531 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,531 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,531 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,531 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,533 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,533 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,533 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,533 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,683 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:57,684 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,684 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(13)), (np.int64(8), np.int64(3)))
2025-04-11 17:39:57,692 [INFO] Final candidates: []
2025-04-11 17:39:57,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,696 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,696 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,696 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,696 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,697 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,697 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,697 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,697 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,697 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,697 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,697 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,697 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,698 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,698 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,698 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,698 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,698 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,698 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,700 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,700 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,700 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,700 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,705 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:57,705 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,705 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(10)), (np.int64(7), np.int64(6)))
2025-04-11 17:39:57,713 [INFO] Final candidates: []
2025-04-11 17:39:57,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,717 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,718 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,718 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,718 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,718 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,718 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,718 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,718 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,719 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,719 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,719 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,719 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,719 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,719 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,719 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,719 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,719 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,719 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,721 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,721 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,721 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,721 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,742 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:57,742 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,742 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(1), np.int64(7)))
2025-04-11 17:39:57,750 [INFO] Final candidates: []
2025-04-11 17:39:57,750 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,754 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,754 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,754 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,754 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,755 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,755 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,755 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,755 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,756 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,756 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,756 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,756 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,757 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,757 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,757 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,757 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,757 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,757 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,759 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,759 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,759 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,759 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,895 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:57,895 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,895 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(9)), (np.int64(8), np.int64(10)))
2025-04-11 17:39:57,903 [INFO] Final candidates: []
2025-04-11 17:39:57,903 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,907 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,907 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,907 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,907 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,908 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,908 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,908 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,908 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,908 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,908 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,908 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,908 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,909 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,909 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,909 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,909 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,909 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,909 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,911 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,911 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,911 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,911 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,963 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:57,963 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,963 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(2)), (np.int64(3), np.int64(11)))
2025-04-11 17:39:57,970 [INFO] Final candidates: []
2025-04-11 17:39:57,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,975 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,975 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,975 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,975 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,975 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,975 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,975 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,975 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,976 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,976 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,976 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,976 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,976 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,976 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,976 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,976 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,976 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,977 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,979 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,979 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,979 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,979 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:57,980 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:57,980 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:57,980 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(16)), (np.int64(2), np.int64(16)))
2025-04-11 17:39:57,987 [INFO] Final candidates: []
2025-04-11 17:39:57,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:57,992 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:57,992 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,992 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,992 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:57,992 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,992 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,993 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,993 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,993 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:57,993 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:57,993 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:57,993 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:57,994 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:57,994 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:57,994 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:57,994 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:57,994 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:57,994 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:57,996 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:57,996 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:57,996 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:57,996 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,139 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,139 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,140 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(11)), (np.int64(11), np.int64(15)))
2025-04-11 17:39:58,148 [INFO] Final candidates: []
2025-04-11 17:39:58,148 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,152 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,152 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,152 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,152 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,153 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,153 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,153 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,153 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,155 [INFO] Final candidates: [(9, 5), (6, 2)]
2025-04-11 17:39:58,156 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 5), (6, 2))]
2025-04-11 17:39:58,156 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:39:58,156 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,159 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,159 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,159 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(8)), (np.int64(2), np.int64(10)))
2025-04-11 17:39:58,166 [INFO] Final candidates: []
2025-04-11 17:39:58,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,171 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,171 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,171 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,171 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,171 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,171 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,171 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,171 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,172 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,172 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,172 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,172 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,172 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,172 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,173 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,173 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,173 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,173 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,175 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,175 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,175 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,191 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,191 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,191 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(15)), (np.int64(6), np.int64(15)))
2025-04-11 17:39:58,199 [INFO] Final candidates: []
2025-04-11 17:39:58,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,203 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,203 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,203 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,203 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,204 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,204 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,204 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,204 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,204 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,204 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,204 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,204 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,205 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,205 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,205 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,205 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,205 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,205 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,207 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,207 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,207 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,351 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,351 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,351 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(3)), (np.int64(7), np.int64(13)))
2025-04-11 17:39:58,360 [INFO] Final candidates: []
2025-04-11 17:39:58,360 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,364 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,364 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,364 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,364 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,365 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,365 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,365 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,365 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,365 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,365 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,365 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,365 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,366 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,366 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,366 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,366 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,366 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,366 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,368 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,368 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,368 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,368 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,483 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,483 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,483 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(2), np.int64(9)))
2025-04-11 17:39:58,491 [INFO] Final candidates: []
2025-04-11 17:39:58,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,495 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,495 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,495 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,495 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,496 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,496 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,496 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,496 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,496 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,496 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,497 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,497 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,497 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,497 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,497 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,499 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,499 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,499 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,499 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,650 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:58,650 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,650 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 17:39:58,658 [INFO] Final candidates: []
2025-04-11 17:39:58,658 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,662 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,662 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,662 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,662 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,663 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,663 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,663 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,663 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,663 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,663 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,663 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,663 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,664 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,664 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,664 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,664 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,664 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,666 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,666 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,666 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,666 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,669 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,669 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,669 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(10), np.int64(14)))
2025-04-11 17:39:58,677 [INFO] Final candidates: []
2025-04-11 17:39:58,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,681 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,681 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,681 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,681 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,682 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,682 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,682 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,682 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,682 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,682 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,682 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,682 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,683 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,683 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,683 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,683 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,683 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,685 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,685 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,685 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,797 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,798 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,798 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(4)), (np.int64(9), np.int64(6)))
2025-04-11 17:39:58,805 [INFO] Final candidates: []
2025-04-11 17:39:58,805 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,809 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,809 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,809 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,810 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,810 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,810 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,810 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,810 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,811 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,811 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,811 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,811 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,811 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,811 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,811 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,811 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,811 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,811 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,813 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,813 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,813 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:58,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:58,863 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:58,864 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(14)), (np.int64(3), np.int64(14)))
2025-04-11 17:39:58,871 [INFO] Final candidates: []
2025-04-11 17:39:58,871 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:58,876 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:58,876 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,876 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,876 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:58,876 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,876 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,876 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,876 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,877 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:58,877 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:58,877 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:58,877 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:58,877 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:58,877 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:58,877 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:58,877 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:58,877 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:58,877 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:58,879 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:58,879 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:58,879 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:58,879 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:59,118 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:59,118 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:59,118 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(6), np.int64(5)))
2025-04-11 17:39:59,125 [INFO] Final candidates: []
2025-04-11 17:39:59,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:59,130 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:59,130 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,130 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,130 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:59,130 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,130 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,130 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,130 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,131 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:59,131 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,131 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:59,131 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:59,131 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:59,131 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,131 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,132 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,134 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:59,134 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:59,134 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:59,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:59,218 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:59,218 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:59,218 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(5)))
2025-04-11 17:39:59,225 [INFO] Final candidates: []
2025-04-11 17:39:59,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:59,230 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,230 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,230 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,230 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,231 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,231 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,231 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,233 [INFO] Final candidates: [(15, 11)]
2025-04-11 17:39:59,233 [INFO] Phase defense: Found only one candidate: (15, 11)
2025-04-11 17:39:59,233 [INFO] Phase defense: Collected 11unique candidate(s):[((15, 11), (np.int64(17), np.int64(11))), ((15, 11), (np.int64(15), np.int64(12))), ((15, 11), (np.int64(16), np.int64(11))), ((15, 11), (np.int64(13), np.int64(11))), ((15, 11), (np.int64(15), np.int64(10))), ((15, 11), (np.int64(14), np.int64(12))), ((15, 11), (np.int64(16), np.int64(12))), ((15, 11), (np.int64(15), np.int64(9))), ((15, 11), (np.int64(14), np.int64(11))), ((15, 11), (np.int64(16), np.int64(10))), ((15, 11), (np.int64(15), np.int64(13)))]
2025-04-11 17:39:59,233 [INFO] Phase 2 (defense): 11 candidate(s) found.
2025-04-11 17:39:59,233 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:59,411 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:59,411 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:59,411 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(4)), (np.int64(10), np.int64(4)))
2025-04-11 17:39:59,420 [INFO] Final candidates: []
2025-04-11 17:39:59,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:59,424 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:59,424 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,424 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,424 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:59,425 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,425 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,425 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,425 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:59,425 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,426 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:59,426 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:59,426 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:59,426 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,426 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,426 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,426 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,428 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:59,428 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:59,428 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:59,428 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:59,673 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:59,673 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:59,673 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(8), np.int64(5)))
2025-04-11 17:39:59,680 [INFO] Final candidates: []
2025-04-11 17:39:59,680 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:59,685 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:59,685 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,685 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,685 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:59,685 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,685 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,685 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,685 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,686 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:59,686 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,686 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:59,686 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:59,686 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:59,686 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,686 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,686 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,688 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:59,688 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:59,688 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:59,688 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:59,691 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:59,692 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:59,692 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(11)), (np.int64(5), np.int64(6)))
2025-04-11 17:39:59,699 [INFO] Final candidates: []
2025-04-11 17:39:59,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:59,703 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:59,703 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,704 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:59,705 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:59,705 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,705 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:59,707 [INFO] Final candidates: [(9, 5), (6, 2)]
2025-04-11 17:39:59,707 [INFO] Phase defense: Collected 1unique candidate(s):[((9, 5), (6, 2))]
2025-04-11 17:39:59,707 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:39:59,707 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:59,771 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:39:59,771 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:59,771 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(14)), (np.int64(9), np.int64(13)))
2025-04-11 17:39:59,779 [INFO] Final candidates: []
2025-04-11 17:39:59,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:59,784 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:59,784 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,784 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,784 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:59,784 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,784 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,784 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,784 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,785 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:59,785 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,785 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,785 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:59,785 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:59,785 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:59,785 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,785 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,785 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,785 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,787 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:59,787 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:59,787 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:59,787 [INFO] Default policy: Starting random playout.
2025-04-11 17:39:59,877 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:39:59,877 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:39:59,877 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(12)), (np.int64(6), np.int64(15)))
2025-04-11 17:39:59,886 [INFO] Final candidates: []
2025-04-11 17:39:59,886 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:39:59,891 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:39:59,891 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,891 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,891 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:39:59,891 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,891 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,891 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,891 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,892 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:39:59,892 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:39:59,892 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:39:59,892 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:39:59,892 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:39:59,892 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:39:59,892 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:39:59,892 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:39:59,892 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:39:59,892 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:39:59,894 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:39:59,894 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:39:59,894 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:39:59,895 [INFO] Default policy: Starting random playout.
2025-04-11 17:40:00,120 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:40:00,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:40:00,121 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(8)), (np.int64(6), np.int64(15)))
2025-04-11 17:40:00,128 [INFO] Final candidates: []
2025-04-11 17:40:00,128 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:40:00,133 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:40:00,133 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,133 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,133 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:40:00,133 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,133 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,133 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,133 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,134 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:40:00,134 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,134 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,134 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:40:00,134 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:40:00,134 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:40:00,134 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,134 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,134 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,134 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,136 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:40:00,136 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:40:00,136 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:40:00,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:40:00,288 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:40:00,288 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:40:00,288 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(7), np.int64(4)))
2025-04-11 17:40:00,295 [INFO] Final candidates: []
2025-04-11 17:40:00,295 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:40:00,300 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:40:00,300 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,300 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,300 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:40:00,300 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,300 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,300 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,300 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,301 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:40:00,301 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,301 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,301 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:40:00,301 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:40:00,301 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:40:00,301 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,301 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,301 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,302 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,303 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:40:00,304 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:40:00,304 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:40:00,304 [INFO] Default policy: Starting random playout.
2025-04-11 17:40:00,490 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:40:00,491 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:40:00,491 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(6)), (np.int64(8), np.int64(6)))
2025-04-11 17:40:00,498 [INFO] Final candidates: []
2025-04-11 17:40:00,498 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:40:00,502 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:40:00,502 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,502 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,502 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:40:00,503 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,503 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,503 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,503 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:40:00,503 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,504 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:40:00,504 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:40:00,504 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:40:00,504 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,504 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,504 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,504 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,506 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:40:00,506 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:40:00,506 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:40:00,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:40:00,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:40:00,736 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:40:00,736 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(10)), (np.int64(7), np.int64(13)))
2025-04-11 17:40:00,744 [INFO] Final candidates: []
2025-04-11 17:40:00,744 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:40:00,748 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)]
2025-04-11 17:40:00,748 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,748 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,748 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7)] triggers candidate.
2025-04-11 17:40:00,749 [DEBUG] board coords: [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,749 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,749 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,749 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=6, window [2 2 2 2 0 0] with coords [(11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,749 [DEBUG] board coords: [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)]
2025-04-11 17:40:00,749 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:40:00,750 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 2), (9, 5)]
2025-04-11 17:40:00,750 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8)] triggers candidate.
2025-04-11 17:40:00,750 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11)] triggers candidate.
2025-04-11 17:40:00,750 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:40:00,750 [DEBUG] board coords: [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)]
2025-04-11 17:40:00,750 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:40:00,750 [DEBUG] check_window_intermediate_custom: empty_cells=[(15, 11), (16, 12)]
2025-04-11 17:40:00,750 [DEBUG] check_window_intermediate_custom (only one inserted(15, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12)] triggers candidate.
2025-04-11 17:40:00,752 [INFO] Final candidates: [(15, 11), (9, 5), (6, 2)]
2025-04-11 17:40:00,752 [INFO] Phase defense: Collected 3unique candidate(s):[((15, 11), (9, 5)), ((9, 5), (6, 2)), ((15, 11), (6, 2))]
2025-04-11 17:40:00,752 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:40:00,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:40:00,959 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:40:00,959 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:40:00,959 [INFO] MCTS (defense candidates) selected move: L15,D8
2025-04-11 17:40:36,875 [INFO] Game terminated.
