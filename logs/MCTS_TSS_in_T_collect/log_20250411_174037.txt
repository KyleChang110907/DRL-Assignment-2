2025-04-11 17:41:09,214 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:41:09,223 [INFO] Final candidates: []
2025-04-11 17:41:09,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,233 [INFO] Final candidates: []
2025-04-11 17:41:09,233 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,233 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:41:09,234 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:41:09,234 [DEBUG] Tree_policy iteration 1: Expanding move (5, 3)
2025-04-11 17:41:09,245 [INFO] Final candidates: []
2025-04-11 17:41:09,245 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,258 [INFO] Final candidates: []
2025-04-11 17:41:09,258 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,259 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:41:09,259 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:09,300 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:09,300 [DEBUG] Tree_policy iteration 1: Expanding move (12, 15)
2025-04-11 17:41:09,310 [INFO] Final candidates: []
2025-04-11 17:41:09,310 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,319 [INFO] Final candidates: []
2025-04-11 17:41:09,319 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,320 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:09,340 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:09,341 [DEBUG] Tree_policy iteration 1: Expanding move (13, 12)
2025-04-11 17:41:09,350 [INFO] Final candidates: []
2025-04-11 17:41:09,350 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,360 [INFO] Final candidates: []
2025-04-11 17:41:09,360 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,360 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:09,417 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:09,417 [DEBUG] Tree_policy iteration 1: Expanding move (0, 1)
2025-04-11 17:41:09,427 [INFO] Final candidates: []
2025-04-11 17:41:09,427 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,436 [INFO] Final candidates: []
2025-04-11 17:41:09,436 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:09,484 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:09,484 [DEBUG] Tree_policy iteration 1: Expanding move (13, 16)
2025-04-11 17:41:09,494 [INFO] Final candidates: []
2025-04-11 17:41:09,494 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,503 [INFO] Final candidates: []
2025-04-11 17:41:09,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,503 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:09,661 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:09,661 [DEBUG] Tree_policy iteration 1: Expanding move (11, 0)
2025-04-11 17:41:09,670 [INFO] Final candidates: []
2025-04-11 17:41:09,670 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,680 [INFO] Final candidates: []
2025-04-11 17:41:09,680 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,680 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:09,715 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:09,715 [DEBUG] Tree_policy iteration 1: Expanding move (9, 12)
2025-04-11 17:41:09,727 [INFO] Final candidates: []
2025-04-11 17:41:09,727 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,737 [INFO] Final candidates: []
2025-04-11 17:41:09,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:09,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:10,053 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:10,053 [DEBUG] Tree_policy iteration 1: Expanding move (11, 8)
2025-04-11 17:41:10,063 [INFO] Final candidates: []
2025-04-11 17:41:10,063 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,072 [INFO] Final candidates: []
2025-04-11 17:41:10,072 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,072 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:10,131 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:10,132 [DEBUG] Tree_policy iteration 1: Expanding move (1, 11)
2025-04-11 17:41:10,141 [INFO] Final candidates: []
2025-04-11 17:41:10,141 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,151 [INFO] Final candidates: []
2025-04-11 17:41:10,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,151 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:10,296 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:10,296 [DEBUG] Tree_policy iteration 1: Expanding move (9, 8)
2025-04-11 17:41:10,306 [INFO] Final candidates: []
2025-04-11 17:41:10,306 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,318 [INFO] Final candidates: []
2025-04-11 17:41:10,319 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:10,330 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:10,330 [DEBUG] Tree_policy iteration 1: Expanding move (5, 5)
2025-04-11 17:41:10,339 [INFO] Final candidates: []
2025-04-11 17:41:10,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,352 [INFO] Final candidates: []
2025-04-11 17:41:10,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:10,525 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:10,525 [DEBUG] Tree_policy iteration 1: Expanding move (7, 3)
2025-04-11 17:41:10,537 [INFO] Final candidates: []
2025-04-11 17:41:10,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,548 [INFO] Final candidates: []
2025-04-11 17:41:10,548 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:10,708 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:10,709 [DEBUG] Tree_policy iteration 1: Expanding move (18, 9)
2025-04-11 17:41:10,720 [INFO] Final candidates: []
2025-04-11 17:41:10,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,730 [INFO] Final candidates: []
2025-04-11 17:41:10,730 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,730 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:10,873 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:10,873 [DEBUG] Tree_policy iteration 1: Expanding move (6, 9)
2025-04-11 17:41:10,884 [INFO] Final candidates: []
2025-04-11 17:41:10,884 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,894 [INFO] Final candidates: []
2025-04-11 17:41:10,894 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:10,894 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,100 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:11,101 [DEBUG] Tree_policy iteration 1: Expanding move (10, 6)
2025-04-11 17:41:11,110 [INFO] Final candidates: []
2025-04-11 17:41:11,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,120 [INFO] Final candidates: []
2025-04-11 17:41:11,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,235 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:11,235 [DEBUG] Tree_policy iteration 1: Expanding move (1, 13)
2025-04-11 17:41:11,245 [INFO] Final candidates: []
2025-04-11 17:41:11,245 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,254 [INFO] Final candidates: []
2025-04-11 17:41:11,254 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,254 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,277 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:11,277 [DEBUG] Tree_policy iteration 1: Expanding move (8, 3)
2025-04-11 17:41:11,293 [INFO] Final candidates: []
2025-04-11 17:41:11,293 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,302 [INFO] Final candidates: []
2025-04-11 17:41:11,302 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,364 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:11,364 [DEBUG] Tree_policy iteration 1: Expanding move (16, 14)
2025-04-11 17:41:11,374 [INFO] Final candidates: []
2025-04-11 17:41:11,374 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,384 [INFO] Final candidates: []
2025-04-11 17:41:11,384 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,384 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,423 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:11,423 [DEBUG] Tree_policy iteration 1: Expanding move (7, 10)
2025-04-11 17:41:11,433 [INFO] Final candidates: []
2025-04-11 17:41:11,433 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,442 [INFO] Final candidates: []
2025-04-11 17:41:11,442 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,442 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,735 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:11,735 [DEBUG] Tree_policy iteration 1: Expanding move (12, 7)
2025-04-11 17:41:11,746 [INFO] Final candidates: []
2025-04-11 17:41:11,747 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,759 [INFO] Final candidates: []
2025-04-11 17:41:11,759 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,759 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,869 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:11,869 [DEBUG] Tree_policy iteration 1: Expanding move (13, 2)
2025-04-11 17:41:11,887 [INFO] Final candidates: []
2025-04-11 17:41:11,887 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,906 [INFO] Final candidates: []
2025-04-11 17:41:11,906 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,906 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:11,969 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:11,969 [DEBUG] Tree_policy iteration 1: Expanding move (4, 7)
2025-04-11 17:41:11,979 [INFO] Final candidates: []
2025-04-11 17:41:11,979 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,988 [INFO] Final candidates: []
2025-04-11 17:41:11,988 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:11,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:12,034 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:12,035 [DEBUG] Tree_policy iteration 1: Expanding move (15, 1)
2025-04-11 17:41:12,044 [INFO] Final candidates: []
2025-04-11 17:41:12,044 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,055 [INFO] Final candidates: []
2025-04-11 17:41:12,056 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,056 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:12,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:12,089 [DEBUG] Tree_policy iteration 1: Expanding move (10, 18)
2025-04-11 17:41:12,100 [INFO] Final candidates: []
2025-04-11 17:41:12,100 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,110 [INFO] Final candidates: []
2025-04-11 17:41:12,111 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,111 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:12,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:12,248 [DEBUG] Tree_policy iteration 1: Expanding move (11, 7)
2025-04-11 17:41:12,261 [INFO] Final candidates: []
2025-04-11 17:41:12,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,273 [INFO] Final candidates: []
2025-04-11 17:41:12,273 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,273 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:12,489 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:12,489 [DEBUG] Tree_policy iteration 1: Expanding move (8, 17)
2025-04-11 17:41:12,499 [INFO] Final candidates: []
2025-04-11 17:41:12,499 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,508 [INFO] Final candidates: []
2025-04-11 17:41:12,508 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,508 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:12,570 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:12,570 [DEBUG] Tree_policy iteration 1: Expanding move (17, 8)
2025-04-11 17:41:12,579 [INFO] Final candidates: []
2025-04-11 17:41:12,579 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,588 [INFO] Final candidates: []
2025-04-11 17:41:12,588 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,589 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:12,799 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:12,800 [DEBUG] Tree_policy iteration 1: Expanding move (0, 10)
2025-04-11 17:41:12,809 [INFO] Final candidates: []
2025-04-11 17:41:12,809 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,820 [INFO] Final candidates: []
2025-04-11 17:41:12,820 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:12,847 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:12,847 [DEBUG] Tree_policy iteration 1: Expanding move (5, 8)
2025-04-11 17:41:12,857 [INFO] Final candidates: []
2025-04-11 17:41:12,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,866 [INFO] Final candidates: []
2025-04-11 17:41:12,866 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:12,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,045 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:13,045 [DEBUG] Tree_policy iteration 1: Expanding move (16, 5)
2025-04-11 17:41:13,070 [INFO] Final candidates: []
2025-04-11 17:41:13,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,095 [INFO] Final candidates: []
2025-04-11 17:41:13,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,095 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,119 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:13,120 [DEBUG] Tree_policy iteration 1: Expanding move (13, 6)
2025-04-11 17:41:13,129 [INFO] Final candidates: []
2025-04-11 17:41:13,129 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,138 [INFO] Final candidates: []
2025-04-11 17:41:13,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,139 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,208 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:13,208 [DEBUG] Tree_policy iteration 1: Expanding move (6, 8)
2025-04-11 17:41:13,218 [INFO] Final candidates: []
2025-04-11 17:41:13,218 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,227 [INFO] Final candidates: []
2025-04-11 17:41:13,227 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,227 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,277 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:13,277 [DEBUG] Tree_policy iteration 1: Expanding move (4, 11)
2025-04-11 17:41:13,287 [INFO] Final candidates: []
2025-04-11 17:41:13,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,296 [INFO] Final candidates: []
2025-04-11 17:41:13,296 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,420 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:13,420 [DEBUG] Tree_policy iteration 1: Expanding move (0, 8)
2025-04-11 17:41:13,430 [INFO] Final candidates: []
2025-04-11 17:41:13,430 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,439 [INFO] Final candidates: []
2025-04-11 17:41:13,439 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,440 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,583 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:13,584 [DEBUG] Tree_policy iteration 1: Expanding move (17, 2)
2025-04-11 17:41:13,593 [INFO] Final candidates: []
2025-04-11 17:41:13,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,602 [INFO] Final candidates: []
2025-04-11 17:41:13,602 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,686 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:13,686 [DEBUG] Tree_policy iteration 1: Expanding move (1, 1)
2025-04-11 17:41:13,695 [INFO] Final candidates: []
2025-04-11 17:41:13,696 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,705 [INFO] Final candidates: []
2025-04-11 17:41:13,705 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,705 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,813 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:13,813 [DEBUG] Tree_policy iteration 1: Expanding move (14, 0)
2025-04-11 17:41:13,822 [INFO] Final candidates: []
2025-04-11 17:41:13,822 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,832 [INFO] Final candidates: []
2025-04-11 17:41:13,832 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,832 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:13,841 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:13,841 [DEBUG] Tree_policy iteration 1: Expanding move (9, 18)
2025-04-11 17:41:13,853 [INFO] Final candidates: []
2025-04-11 17:41:13,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,862 [INFO] Final candidates: []
2025-04-11 17:41:13,862 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:13,863 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,020 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:14,020 [DEBUG] Tree_policy iteration 1: Expanding move (0, 2)
2025-04-11 17:41:14,031 [INFO] Final candidates: []
2025-04-11 17:41:14,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,040 [INFO] Final candidates: []
2025-04-11 17:41:14,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,040 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,117 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:14,118 [DEBUG] Tree_policy iteration 1: Expanding move (18, 16)
2025-04-11 17:41:14,129 [INFO] Final candidates: []
2025-04-11 17:41:14,129 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,140 [INFO] Final candidates: []
2025-04-11 17:41:14,140 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,140 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,333 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:14,333 [DEBUG] Tree_policy iteration 1: Expanding move (13, 7)
2025-04-11 17:41:14,342 [INFO] Final candidates: []
2025-04-11 17:41:14,342 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,353 [INFO] Final candidates: []
2025-04-11 17:41:14,354 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,354 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,358 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:14,358 [DEBUG] Tree_policy iteration 1: Expanding move (3, 4)
2025-04-11 17:41:14,368 [INFO] Final candidates: []
2025-04-11 17:41:14,368 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,377 [INFO] Final candidates: []
2025-04-11 17:41:14,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,377 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,404 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:14,404 [DEBUG] Tree_policy iteration 1: Expanding move (6, 12)
2025-04-11 17:41:14,413 [INFO] Final candidates: []
2025-04-11 17:41:14,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,422 [INFO] Final candidates: []
2025-04-11 17:41:14,422 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,423 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,552 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:14,552 [DEBUG] Tree_policy iteration 1: Expanding move (14, 8)
2025-04-11 17:41:14,562 [INFO] Final candidates: []
2025-04-11 17:41:14,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,571 [INFO] Final candidates: []
2025-04-11 17:41:14,571 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,627 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:14,627 [DEBUG] Tree_policy iteration 1: Expanding move (4, 12)
2025-04-11 17:41:14,636 [INFO] Final candidates: []
2025-04-11 17:41:14,636 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,646 [INFO] Final candidates: []
2025-04-11 17:41:14,646 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,646 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,719 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:14,720 [DEBUG] Tree_policy iteration 1: Expanding move (9, 16)
2025-04-11 17:41:14,729 [INFO] Final candidates: []
2025-04-11 17:41:14,729 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,738 [INFO] Final candidates: []
2025-04-11 17:41:14,738 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,792 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:14,792 [DEBUG] Tree_policy iteration 1: Expanding move (1, 17)
2025-04-11 17:41:14,801 [INFO] Final candidates: []
2025-04-11 17:41:14,801 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,810 [INFO] Final candidates: []
2025-04-11 17:41:14,810 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,810 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,815 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:14,815 [DEBUG] Tree_policy iteration 1: Expanding move (16, 4)
2025-04-11 17:41:14,824 [INFO] Final candidates: []
2025-04-11 17:41:14,824 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,833 [INFO] Final candidates: []
2025-04-11 17:41:14,834 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,834 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,864 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:14,864 [DEBUG] Tree_policy iteration 1: Expanding move (17, 0)
2025-04-11 17:41:14,874 [INFO] Final candidates: []
2025-04-11 17:41:14,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,883 [INFO] Final candidates: []
2025-04-11 17:41:14,883 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:14,973 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:14,973 [DEBUG] Tree_policy iteration 1: Expanding move (8, 16)
2025-04-11 17:41:14,983 [INFO] Final candidates: []
2025-04-11 17:41:14,983 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,992 [INFO] Final candidates: []
2025-04-11 17:41:14,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:14,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:15,018 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:15,018 [DEBUG] Tree_policy iteration 1: Expanding move (3, 2)
2025-04-11 17:41:15,028 [INFO] Final candidates: []
2025-04-11 17:41:15,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,037 [INFO] Final candidates: []
2025-04-11 17:41:15,037 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,037 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:41:15,037 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:15,220 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:15,221 [DEBUG] Tree_policy iteration 1: Expanding move (18, 14)
2025-04-11 17:41:15,230 [INFO] Final candidates: []
2025-04-11 17:41:15,230 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,240 [INFO] Final candidates: []
2025-04-11 17:41:15,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,240 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:15,253 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:15,253 [DEBUG] Tree_policy iteration 1: Expanding move (17, 1)
2025-04-11 17:41:15,262 [INFO] Final candidates: []
2025-04-11 17:41:15,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,272 [INFO] Final candidates: []
2025-04-11 17:41:15,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,272 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:15,466 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:15,466 [DEBUG] Tree_policy iteration 1: Expanding move (11, 3)
2025-04-11 17:41:15,475 [INFO] Final candidates: []
2025-04-11 17:41:15,475 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,485 [INFO] Final candidates: []
2025-04-11 17:41:15,485 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:15,513 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:15,513 [DEBUG] Tree_policy iteration 1: Expanding move (9, 1)
2025-04-11 17:41:15,533 [INFO] Final candidates: []
2025-04-11 17:41:15,533 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,542 [INFO] Final candidates: []
2025-04-11 17:41:15,542 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,542 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:15,747 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:15,747 [DEBUG] Tree_policy iteration 1: Expanding move (15, 14)
2025-04-11 17:41:15,762 [INFO] Final candidates: []
2025-04-11 17:41:15,762 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,774 [INFO] Final candidates: []
2025-04-11 17:41:15,774 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,774 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:15,962 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:15,962 [DEBUG] Tree_policy iteration 1: Expanding move (7, 2)
2025-04-11 17:41:15,971 [INFO] Final candidates: []
2025-04-11 17:41:15,972 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,981 [INFO] Final candidates: []
2025-04-11 17:41:15,981 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:15,981 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,026 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:16,026 [DEBUG] Tree_policy iteration 1: Expanding move (11, 9)
2025-04-11 17:41:16,035 [INFO] Final candidates: []
2025-04-11 17:41:16,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,045 [INFO] Final candidates: []
2025-04-11 17:41:16,045 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,063 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:16,063 [DEBUG] Tree_policy iteration 1: Expanding move (16, 7)
2025-04-11 17:41:16,073 [INFO] Final candidates: []
2025-04-11 17:41:16,073 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,091 [INFO] Final candidates: []
2025-04-11 17:41:16,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,091 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,195 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:16,195 [DEBUG] Tree_policy iteration 1: Expanding move (3, 16)
2025-04-11 17:41:16,205 [INFO] Final candidates: []
2025-04-11 17:41:16,205 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,215 [INFO] Final candidates: []
2025-04-11 17:41:16,215 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,216 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,292 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:16,292 [DEBUG] Tree_policy iteration 1: Expanding move (3, 12)
2025-04-11 17:41:16,301 [INFO] Final candidates: []
2025-04-11 17:41:16,302 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,321 [INFO] Final candidates: []
2025-04-11 17:41:16,321 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,421 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:16,421 [DEBUG] Tree_policy iteration 1: Expanding move (1, 16)
2025-04-11 17:41:16,430 [INFO] Final candidates: []
2025-04-11 17:41:16,430 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,440 [INFO] Final candidates: []
2025-04-11 17:41:16,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,440 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,590 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:16,590 [DEBUG] Tree_policy iteration 1: Expanding move (18, 2)
2025-04-11 17:41:16,600 [INFO] Final candidates: []
2025-04-11 17:41:16,600 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,610 [INFO] Final candidates: []
2025-04-11 17:41:16,610 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,610 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:16,694 [DEBUG] Tree_policy iteration 1: Expanding move (12, 0)
2025-04-11 17:41:16,703 [INFO] Final candidates: []
2025-04-11 17:41:16,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,713 [INFO] Final candidates: []
2025-04-11 17:41:16,713 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,713 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,744 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:16,745 [DEBUG] Tree_policy iteration 1: Expanding move (9, 5)
2025-04-11 17:41:16,754 [INFO] Final candidates: []
2025-04-11 17:41:16,754 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,763 [INFO] Final candidates: []
2025-04-11 17:41:16,763 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,763 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:16,818 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:16,818 [DEBUG] Tree_policy iteration 1: Expanding move (13, 1)
2025-04-11 17:41:16,827 [INFO] Final candidates: []
2025-04-11 17:41:16,827 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,841 [INFO] Final candidates: []
2025-04-11 17:41:16,841 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:16,842 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:17,163 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:17,163 [DEBUG] Tree_policy iteration 1: Expanding move (14, 12)
2025-04-11 17:41:17,174 [INFO] Final candidates: []
2025-04-11 17:41:17,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,185 [INFO] Final candidates: []
2025-04-11 17:41:17,185 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,185 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:17,468 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:17,468 [DEBUG] Tree_policy iteration 1: Expanding move (14, 15)
2025-04-11 17:41:17,478 [INFO] Final candidates: []
2025-04-11 17:41:17,478 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,488 [INFO] Final candidates: []
2025-04-11 17:41:17,488 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,488 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:17,535 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:17,535 [DEBUG] Tree_policy iteration 1: Expanding move (1, 9)
2025-04-11 17:41:17,544 [INFO] Final candidates: []
2025-04-11 17:41:17,544 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,553 [INFO] Final candidates: []
2025-04-11 17:41:17,554 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,554 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:17,669 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:17,669 [DEBUG] Tree_policy iteration 1: Expanding move (16, 9)
2025-04-11 17:41:17,678 [INFO] Final candidates: []
2025-04-11 17:41:17,678 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,688 [INFO] Final candidates: []
2025-04-11 17:41:17,688 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,688 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:17,744 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:17,744 [DEBUG] Tree_policy iteration 1: Expanding move (14, 6)
2025-04-11 17:41:17,756 [INFO] Final candidates: []
2025-04-11 17:41:17,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,767 [INFO] Final candidates: []
2025-04-11 17:41:17,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:17,845 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:17,845 [DEBUG] Tree_policy iteration 1: Expanding move (7, 17)
2025-04-11 17:41:17,855 [INFO] Final candidates: []
2025-04-11 17:41:17,855 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,864 [INFO] Final candidates: []
2025-04-11 17:41:17,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:17,864 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,000 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:18,000 [DEBUG] Tree_policy iteration 1: Expanding move (16, 13)
2025-04-11 17:41:18,009 [INFO] Final candidates: []
2025-04-11 17:41:18,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,018 [INFO] Final candidates: []
2025-04-11 17:41:18,018 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,019 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,075 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:18,075 [DEBUG] Tree_policy iteration 1: Expanding move (18, 4)
2025-04-11 17:41:18,085 [INFO] Final candidates: []
2025-04-11 17:41:18,085 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,094 [INFO] Final candidates: []
2025-04-11 17:41:18,094 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,094 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,108 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:18,109 [DEBUG] Tree_policy iteration 1: Expanding move (13, 0)
2025-04-11 17:41:18,120 [INFO] Final candidates: []
2025-04-11 17:41:18,120 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,131 [INFO] Final candidates: []
2025-04-11 17:41:18,131 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,153 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:18,153 [DEBUG] Tree_policy iteration 1: Expanding move (1, 2)
2025-04-11 17:41:18,162 [INFO] Final candidates: []
2025-04-11 17:41:18,162 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,172 [INFO] Final candidates: []
2025-04-11 17:41:18,172 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,172 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,210 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:18,211 [DEBUG] Tree_policy iteration 1: Expanding move (3, 11)
2025-04-11 17:41:18,224 [INFO] Final candidates: []
2025-04-11 17:41:18,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,236 [INFO] Final candidates: []
2025-04-11 17:41:18,237 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,478 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:18,478 [DEBUG] Tree_policy iteration 1: Expanding move (12, 8)
2025-04-11 17:41:18,487 [INFO] Final candidates: []
2025-04-11 17:41:18,487 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,497 [INFO] Final candidates: []
2025-04-11 17:41:18,497 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,497 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,570 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:18,570 [DEBUG] Tree_policy iteration 1: Expanding move (12, 5)
2025-04-11 17:41:18,580 [INFO] Final candidates: []
2025-04-11 17:41:18,580 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,589 [INFO] Final candidates: []
2025-04-11 17:41:18,589 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,589 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,634 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:18,635 [DEBUG] Tree_policy iteration 1: Expanding move (5, 17)
2025-04-11 17:41:18,644 [INFO] Final candidates: []
2025-04-11 17:41:18,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,654 [INFO] Final candidates: []
2025-04-11 17:41:18,654 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,665 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:18,665 [DEBUG] Tree_policy iteration 1: Expanding move (10, 16)
2025-04-11 17:41:18,674 [INFO] Final candidates: []
2025-04-11 17:41:18,674 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,684 [INFO] Final candidates: []
2025-04-11 17:41:18,684 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,684 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:18,865 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:18,865 [DEBUG] Tree_policy iteration 1: Expanding move (7, 13)
2025-04-11 17:41:18,875 [INFO] Final candidates: []
2025-04-11 17:41:18,875 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,884 [INFO] Final candidates: []
2025-04-11 17:41:18,884 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:18,884 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,009 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:19,009 [DEBUG] Tree_policy iteration 1: Expanding move (5, 0)
2025-04-11 17:41:19,019 [INFO] Final candidates: []
2025-04-11 17:41:19,019 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,028 [INFO] Final candidates: []
2025-04-11 17:41:19,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,028 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:19,123 [DEBUG] Tree_policy iteration 1: Expanding move (10, 13)
2025-04-11 17:41:19,133 [INFO] Final candidates: []
2025-04-11 17:41:19,133 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,142 [INFO] Final candidates: []
2025-04-11 17:41:19,142 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,143 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:19,248 [DEBUG] Tree_policy iteration 1: Expanding move (8, 4)
2025-04-11 17:41:19,257 [INFO] Final candidates: []
2025-04-11 17:41:19,257 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,266 [INFO] Final candidates: []
2025-04-11 17:41:19,266 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,266 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,309 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:19,309 [DEBUG] Tree_policy iteration 1: Expanding move (12, 12)
2025-04-11 17:41:19,319 [INFO] Final candidates: []
2025-04-11 17:41:19,319 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,328 [INFO] Final candidates: []
2025-04-11 17:41:19,328 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,328 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,397 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:19,397 [DEBUG] Tree_policy iteration 1: Expanding move (11, 1)
2025-04-11 17:41:19,407 [INFO] Final candidates: []
2025-04-11 17:41:19,407 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,416 [INFO] Final candidates: []
2025-04-11 17:41:19,416 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,416 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,465 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:19,466 [DEBUG] Tree_policy iteration 1: Expanding move (18, 11)
2025-04-11 17:41:19,475 [INFO] Final candidates: []
2025-04-11 17:41:19,475 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,485 [INFO] Final candidates: []
2025-04-11 17:41:19,485 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,545 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:19,546 [DEBUG] Tree_policy iteration 1: Expanding move (0, 7)
2025-04-11 17:41:19,555 [INFO] Final candidates: []
2025-04-11 17:41:19,555 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,565 [INFO] Final candidates: []
2025-04-11 17:41:19,565 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,625 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:19,625 [DEBUG] Tree_policy iteration 1: Expanding move (8, 9)
2025-04-11 17:41:19,635 [INFO] Final candidates: []
2025-04-11 17:41:19,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,648 [INFO] Final candidates: []
2025-04-11 17:41:19,648 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,648 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:19,694 [DEBUG] Tree_policy iteration 1: Expanding move (15, 5)
2025-04-11 17:41:19,704 [INFO] Final candidates: []
2025-04-11 17:41:19,704 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,716 [INFO] Final candidates: []
2025-04-11 17:41:19,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,830 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:19,830 [DEBUG] Tree_policy iteration 1: Expanding move (1, 4)
2025-04-11 17:41:19,843 [INFO] Final candidates: []
2025-04-11 17:41:19,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,852 [INFO] Final candidates: []
2025-04-11 17:41:19,852 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:19,946 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:19,947 [DEBUG] Tree_policy iteration 1: Expanding move (17, 3)
2025-04-11 17:41:19,956 [INFO] Final candidates: []
2025-04-11 17:41:19,956 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,965 [INFO] Final candidates: []
2025-04-11 17:41:19,965 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:19,965 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,007 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:20,007 [DEBUG] Tree_policy iteration 1: Expanding move (11, 10)
2025-04-11 17:41:20,017 [INFO] Final candidates: []
2025-04-11 17:41:20,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,026 [INFO] Final candidates: []
2025-04-11 17:41:20,026 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,045 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:20,046 [DEBUG] Tree_policy iteration 1: Expanding move (10, 15)
2025-04-11 17:41:20,055 [INFO] Final candidates: []
2025-04-11 17:41:20,055 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,064 [INFO] Final candidates: []
2025-04-11 17:41:20,064 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,065 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,092 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:20,092 [DEBUG] Tree_policy iteration 1: Expanding move (15, 11)
2025-04-11 17:41:20,102 [INFO] Final candidates: []
2025-04-11 17:41:20,102 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,111 [INFO] Final candidates: []
2025-04-11 17:41:20,111 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,111 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,315 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:20,317 [DEBUG] Tree_policy iteration 1: Expanding move (15, 18)
2025-04-11 17:41:20,327 [INFO] Final candidates: []
2025-04-11 17:41:20,327 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,336 [INFO] Final candidates: []
2025-04-11 17:41:20,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,381 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:20,381 [DEBUG] Tree_policy iteration 1: Expanding move (5, 18)
2025-04-11 17:41:20,392 [INFO] Final candidates: []
2025-04-11 17:41:20,392 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,402 [INFO] Final candidates: []
2025-04-11 17:41:20,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,477 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:20,477 [DEBUG] Tree_policy iteration 1: Expanding move (18, 13)
2025-04-11 17:41:20,488 [INFO] Final candidates: []
2025-04-11 17:41:20,488 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,498 [INFO] Final candidates: []
2025-04-11 17:41:20,498 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,498 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,549 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:20,549 [DEBUG] Tree_policy iteration 1: Expanding move (3, 8)
2025-04-11 17:41:20,559 [INFO] Final candidates: []
2025-04-11 17:41:20,559 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,568 [INFO] Final candidates: []
2025-04-11 17:41:20,568 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,568 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,709 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:20,709 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:41:20,709 [INFO] MCTS selected move: D6
2025-04-11 17:41:20,709 [INFO] ===============NEW MOVE================
2025-04-11 17:41:20,820 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:41:20,829 [INFO] Final candidates: []
2025-04-11 17:41:20,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,838 [INFO] Final candidates: []
2025-04-11 17:41:20,838 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,839 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:41:20,839 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:41:20,839 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(5), np.int64(2)))
2025-04-11 17:41:20,848 [INFO] Final candidates: []
2025-04-11 17:41:20,848 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,857 [INFO] Final candidates: []
2025-04-11 17:41:20,857 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,858 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:41:20,858 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:20,921 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:20,922 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:20,931 [INFO] Final candidates: []
2025-04-11 17:41:20,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,940 [INFO] Final candidates: []
2025-04-11 17:41:20,940 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:20,940 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,106 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,106 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(4), np.int64(1)))
2025-04-11 17:41:21,115 [INFO] Final candidates: []
2025-04-11 17:41:21,115 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,124 [INFO] Final candidates: []
2025-04-11 17:41:21,124 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,267 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,267 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(3), np.int64(0)))
2025-04-11 17:41:21,277 [INFO] Final candidates: []
2025-04-11 17:41:21,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,286 [INFO] Final candidates: []
2025-04-11 17:41:21,286 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,286 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,291 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,291 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:21,300 [INFO] Final candidates: []
2025-04-11 17:41:21,300 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,309 [INFO] Final candidates: []
2025-04-11 17:41:21,309 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,309 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,430 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,430 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:21,439 [INFO] Final candidates: []
2025-04-11 17:41:21,439 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,448 [INFO] Final candidates: []
2025-04-11 17:41:21,448 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,449 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,469 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,469 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(2), np.int64(2)))
2025-04-11 17:41:21,479 [INFO] Final candidates: []
2025-04-11 17:41:21,479 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,488 [INFO] Final candidates: []
2025-04-11 17:41:21,488 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,488 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,661 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,661 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:21,671 [INFO] Final candidates: []
2025-04-11 17:41:21,671 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,680 [INFO] Final candidates: []
2025-04-11 17:41:21,680 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,680 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,723 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,724 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(5), np.int64(2)))
2025-04-11 17:41:21,733 [INFO] Final candidates: []
2025-04-11 17:41:21,733 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,742 [INFO] Final candidates: []
2025-04-11 17:41:21,742 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,742 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,761 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:21,761 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:21,770 [INFO] Final candidates: []
2025-04-11 17:41:21,770 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,779 [INFO] Final candidates: []
2025-04-11 17:41:21,779 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,779 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:21,907 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:21,907 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:21,917 [INFO] Final candidates: []
2025-04-11 17:41:21,917 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,926 [INFO] Final candidates: []
2025-04-11 17:41:21,926 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:21,926 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,047 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,047 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:22,059 [INFO] Final candidates: []
2025-04-11 17:41:22,059 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,078 [INFO] Final candidates: []
2025-04-11 17:41:22,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,079 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,088 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,088 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:22,113 [INFO] Final candidates: []
2025-04-11 17:41:22,113 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,137 [INFO] Final candidates: []
2025-04-11 17:41:22,137 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,138 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,194 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,194 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(2)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:22,210 [INFO] Final candidates: []
2025-04-11 17:41:22,210 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,219 [INFO] Final candidates: []
2025-04-11 17:41:22,219 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,267 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:22,267 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(5), np.int64(2)))
2025-04-11 17:41:22,277 [INFO] Final candidates: []
2025-04-11 17:41:22,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,292 [INFO] Final candidates: []
2025-04-11 17:41:22,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,293 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,302 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,302 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:22,312 [INFO] Final candidates: []
2025-04-11 17:41:22,312 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,321 [INFO] Final candidates: []
2025-04-11 17:41:22,321 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,352 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,352 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(5), np.int64(2)))
2025-04-11 17:41:22,361 [INFO] Final candidates: []
2025-04-11 17:41:22,361 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,370 [INFO] Final candidates: []
2025-04-11 17:41:22,370 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,395 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,395 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(3), np.int64(0)))
2025-04-11 17:41:22,405 [INFO] Final candidates: []
2025-04-11 17:41:22,405 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,414 [INFO] Final candidates: []
2025-04-11 17:41:22,414 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,414 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,434 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,434 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:22,443 [INFO] Final candidates: []
2025-04-11 17:41:22,443 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,452 [INFO] Final candidates: []
2025-04-11 17:41:22,453 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,453 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,500 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,501 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(1)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:22,510 [INFO] Final candidates: []
2025-04-11 17:41:22,510 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,520 [INFO] Final candidates: []
2025-04-11 17:41:22,520 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,520 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,555 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,555 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:22,564 [INFO] Final candidates: []
2025-04-11 17:41:22,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,573 [INFO] Final candidates: []
2025-04-11 17:41:22,573 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,573 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,583 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,583 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:22,593 [INFO] Final candidates: []
2025-04-11 17:41:22,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,602 [INFO] Final candidates: []
2025-04-11 17:41:22,602 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,602 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,619 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:22,619 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(4), np.int64(1)))
2025-04-11 17:41:22,629 [INFO] Final candidates: []
2025-04-11 17:41:22,629 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,638 [INFO] Final candidates: []
2025-04-11 17:41:22,638 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,638 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:22,810 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:22,819 [INFO] Final candidates: []
2025-04-11 17:41:22,819 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,828 [INFO] Final candidates: []
2025-04-11 17:41:22,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,935 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:22,935 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:22,945 [INFO] Final candidates: []
2025-04-11 17:41:22,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,954 [INFO] Final candidates: []
2025-04-11 17:41:22,954 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,954 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:22,975 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:22,975 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:22,989 [INFO] Final candidates: []
2025-04-11 17:41:22,989 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,998 [INFO] Final candidates: []
2025-04-11 17:41:22,998 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:22,999 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,209 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:23,209 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:23,219 [INFO] Final candidates: []
2025-04-11 17:41:23,219 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,228 [INFO] Final candidates: []
2025-04-11 17:41:23,228 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,228 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,298 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:23,298 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:23,308 [INFO] Final candidates: []
2025-04-11 17:41:23,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,319 [INFO] Final candidates: []
2025-04-11 17:41:23,319 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,351 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:23,351 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(2)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:23,361 [INFO] Final candidates: []
2025-04-11 17:41:23,361 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,371 [INFO] Final candidates: []
2025-04-11 17:41:23,371 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,393 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:23,393 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:23,402 [INFO] Final candidates: []
2025-04-11 17:41:23,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,411 [INFO] Final candidates: []
2025-04-11 17:41:23,411 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,411 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,527 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:23,527 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(2)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:23,536 [INFO] Final candidates: []
2025-04-11 17:41:23,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,545 [INFO] Final candidates: []
2025-04-11 17:41:23,545 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,545 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,594 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:23,594 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:23,603 [INFO] Final candidates: []
2025-04-11 17:41:23,603 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,612 [INFO] Final candidates: []
2025-04-11 17:41:23,612 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,612 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,772 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:23,772 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(5), np.int64(2)))
2025-04-11 17:41:23,782 [INFO] Final candidates: []
2025-04-11 17:41:23,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,791 [INFO] Final candidates: []
2025-04-11 17:41:23,791 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,791 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,848 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:23,849 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(5), np.int64(1)))
2025-04-11 17:41:23,858 [INFO] Final candidates: []
2025-04-11 17:41:23,858 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,867 [INFO] Final candidates: []
2025-04-11 17:41:23,867 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,867 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:23,913 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:23,913 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:23,922 [INFO] Final candidates: []
2025-04-11 17:41:23,922 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,931 [INFO] Final candidates: []
2025-04-11 17:41:23,931 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:23,931 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,141 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:24,141 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:24,151 [INFO] Final candidates: []
2025-04-11 17:41:24,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,161 [INFO] Final candidates: []
2025-04-11 17:41:24,161 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,161 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,203 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:24,203 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:24,214 [INFO] Final candidates: []
2025-04-11 17:41:24,214 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,223 [INFO] Final candidates: []
2025-04-11 17:41:24,223 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,223 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,246 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:24,247 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(4), np.int64(1)))
2025-04-11 17:41:24,256 [INFO] Final candidates: []
2025-04-11 17:41:24,256 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,265 [INFO] Final candidates: []
2025-04-11 17:41:24,265 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,265 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,455 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:24,456 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:24,465 [INFO] Final candidates: []
2025-04-11 17:41:24,465 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,474 [INFO] Final candidates: []
2025-04-11 17:41:24,474 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,474 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,709 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:24,709 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:24,719 [INFO] Final candidates: []
2025-04-11 17:41:24,719 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,728 [INFO] Final candidates: []
2025-04-11 17:41:24,728 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,728 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,739 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:24,739 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:24,748 [INFO] Final candidates: []
2025-04-11 17:41:24,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,763 [INFO] Final candidates: []
2025-04-11 17:41:24,763 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,763 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,786 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:24,786 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:24,795 [INFO] Final candidates: []
2025-04-11 17:41:24,795 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,806 [INFO] Final candidates: []
2025-04-11 17:41:24,807 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,807 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,866 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:24,866 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(1)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:24,885 [INFO] Final candidates: []
2025-04-11 17:41:24,885 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,897 [INFO] Final candidates: []
2025-04-11 17:41:24,897 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,898 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,936 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:24,936 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(3), np.int64(0)))
2025-04-11 17:41:24,945 [INFO] Final candidates: []
2025-04-11 17:41:24,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,954 [INFO] Final candidates: []
2025-04-11 17:41:24,954 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,954 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:24,971 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:24,972 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:24,982 [INFO] Final candidates: []
2025-04-11 17:41:24,982 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,992 [INFO] Final candidates: []
2025-04-11 17:41:24,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:24,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,022 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:25,022 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(5), np.int64(2)))
2025-04-11 17:41:25,031 [INFO] Final candidates: []
2025-04-11 17:41:25,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,040 [INFO] Final candidates: []
2025-04-11 17:41:25,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,041 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,173 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:25,176 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:25,185 [INFO] Final candidates: []
2025-04-11 17:41:25,185 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,196 [INFO] Final candidates: []
2025-04-11 17:41:25,196 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,196 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,277 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:25,277 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:25,287 [INFO] Final candidates: []
2025-04-11 17:41:25,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,296 [INFO] Final candidates: []
2025-04-11 17:41:25,296 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,312 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:25,312 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:25,322 [INFO] Final candidates: []
2025-04-11 17:41:25,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,331 [INFO] Final candidates: []
2025-04-11 17:41:25,331 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,331 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,425 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:25,425 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(5), np.int64(2)))
2025-04-11 17:41:25,434 [INFO] Final candidates: []
2025-04-11 17:41:25,434 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,443 [INFO] Final candidates: []
2025-04-11 17:41:25,443 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,443 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:25,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(4)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:25,707 [INFO] Final candidates: []
2025-04-11 17:41:25,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,716 [INFO] Final candidates: []
2025-04-11 17:41:25,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,716 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:41:25,716 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,739 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:25,739 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(2)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:25,749 [INFO] Final candidates: []
2025-04-11 17:41:25,749 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,758 [INFO] Final candidates: []
2025-04-11 17:41:25,758 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,758 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,804 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:25,805 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:25,828 [INFO] Final candidates: []
2025-04-11 17:41:25,828 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,848 [INFO] Final candidates: []
2025-04-11 17:41:25,848 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,901 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:25,901 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(4), np.int64(3)))
2025-04-11 17:41:25,910 [INFO] Final candidates: []
2025-04-11 17:41:25,910 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,919 [INFO] Final candidates: []
2025-04-11 17:41:25,919 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,919 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:25,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:25,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:25,967 [INFO] Final candidates: []
2025-04-11 17:41:25,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,976 [INFO] Final candidates: []
2025-04-11 17:41:25,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:25,976 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,133 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:26,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:26,143 [INFO] Final candidates: []
2025-04-11 17:41:26,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,152 [INFO] Final candidates: []
2025-04-11 17:41:26,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,186 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:26,186 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:26,195 [INFO] Final candidates: []
2025-04-11 17:41:26,195 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,204 [INFO] Final candidates: []
2025-04-11 17:41:26,204 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,204 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,226 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:26,227 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(5), np.int64(1)))
2025-04-11 17:41:26,236 [INFO] Final candidates: []
2025-04-11 17:41:26,236 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,245 [INFO] Final candidates: []
2025-04-11 17:41:26,245 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,245 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,316 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:26,317 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:26,326 [INFO] Final candidates: []
2025-04-11 17:41:26,326 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,335 [INFO] Final candidates: []
2025-04-11 17:41:26,335 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,335 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,377 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:26,377 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(1)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:26,386 [INFO] Final candidates: []
2025-04-11 17:41:26,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,395 [INFO] Final candidates: []
2025-04-11 17:41:26,395 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,413 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:26,413 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:26,422 [INFO] Final candidates: []
2025-04-11 17:41:26,422 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,431 [INFO] Final candidates: []
2025-04-11 17:41:26,431 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,431 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,445 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:26,445 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:26,457 [INFO] Final candidates: []
2025-04-11 17:41:26,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,468 [INFO] Final candidates: []
2025-04-11 17:41:26,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,469 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,652 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:26,652 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:26,664 [INFO] Final candidates: []
2025-04-11 17:41:26,664 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,675 [INFO] Final candidates: []
2025-04-11 17:41:26,675 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,675 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,731 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:26,731 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(2), np.int64(2)))
2025-04-11 17:41:26,744 [INFO] Final candidates: []
2025-04-11 17:41:26,744 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,753 [INFO] Final candidates: []
2025-04-11 17:41:26,753 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,753 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,775 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:26,775 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(4), np.int64(1)))
2025-04-11 17:41:26,784 [INFO] Final candidates: []
2025-04-11 17:41:26,784 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,794 [INFO] Final candidates: []
2025-04-11 17:41:26,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,811 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:26,811 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:26,821 [INFO] Final candidates: []
2025-04-11 17:41:26,821 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,830 [INFO] Final candidates: []
2025-04-11 17:41:26,830 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:26,918 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:26,918 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:26,928 [INFO] Final candidates: []
2025-04-11 17:41:26,928 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,937 [INFO] Final candidates: []
2025-04-11 17:41:26,937 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:26,937 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,153 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:27,154 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:27,163 [INFO] Final candidates: []
2025-04-11 17:41:27,163 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,172 [INFO] Final candidates: []
2025-04-11 17:41:27,172 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,172 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,202 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:27,202 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:27,211 [INFO] Final candidates: []
2025-04-11 17:41:27,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,220 [INFO] Final candidates: []
2025-04-11 17:41:27,220 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,275 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:27,275 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:27,286 [INFO] Final candidates: []
2025-04-11 17:41:27,286 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,298 [INFO] Final candidates: []
2025-04-11 17:41:27,298 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,298 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,325 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:27,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:27,335 [INFO] Final candidates: []
2025-04-11 17:41:27,335 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,345 [INFO] Final candidates: []
2025-04-11 17:41:27,346 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,346 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,400 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:27,400 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:27,409 [INFO] Final candidates: []
2025-04-11 17:41:27,409 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,418 [INFO] Final candidates: []
2025-04-11 17:41:27,418 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,419 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,606 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:27,606 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(2), np.int64(2)))
2025-04-11 17:41:27,615 [INFO] Final candidates: []
2025-04-11 17:41:27,615 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,626 [INFO] Final candidates: []
2025-04-11 17:41:27,626 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,626 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,641 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:27,641 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(2), np.int64(2)))
2025-04-11 17:41:27,651 [INFO] Final candidates: []
2025-04-11 17:41:27,651 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,660 [INFO] Final candidates: []
2025-04-11 17:41:27,660 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,660 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,685 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:27,685 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:27,695 [INFO] Final candidates: []
2025-04-11 17:41:27,695 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,704 [INFO] Final candidates: []
2025-04-11 17:41:27,704 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:27,704 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:27,899 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:28,706 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:28,718 [INFO] Final candidates: []
2025-04-11 17:41:28,718 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,727 [INFO] Final candidates: []
2025-04-11 17:41:28,727 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,727 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:28,777 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:28,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:28,786 [INFO] Final candidates: []
2025-04-11 17:41:28,786 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,797 [INFO] Final candidates: []
2025-04-11 17:41:28,797 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,797 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:28,851 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:28,851 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:28,861 [INFO] Final candidates: []
2025-04-11 17:41:28,861 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,871 [INFO] Final candidates: []
2025-04-11 17:41:28,871 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,871 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:28,880 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:28,880 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:28,890 [INFO] Final candidates: []
2025-04-11 17:41:28,890 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,899 [INFO] Final candidates: []
2025-04-11 17:41:28,899 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,899 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:28,921 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:28,921 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:28,931 [INFO] Final candidates: []
2025-04-11 17:41:28,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,940 [INFO] Final candidates: []
2025-04-11 17:41:28,940 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:28,940 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:29,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:29,077 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(2)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:29,086 [INFO] Final candidates: []
2025-04-11 17:41:29,086 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,095 [INFO] Final candidates: []
2025-04-11 17:41:29,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,096 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:29,109 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:29,109 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(4), np.int64(1)))
2025-04-11 17:41:29,121 [INFO] Final candidates: []
2025-04-11 17:41:29,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,136 [INFO] Final candidates: []
2025-04-11 17:41:29,136 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:29,172 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:29,173 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(2)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:29,182 [INFO] Final candidates: []
2025-04-11 17:41:29,182 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,191 [INFO] Final candidates: []
2025-04-11 17:41:29,191 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,191 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:29,330 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:29,330 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(4), np.int64(1)))
2025-04-11 17:41:29,340 [INFO] Final candidates: []
2025-04-11 17:41:29,340 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,349 [INFO] Final candidates: []
2025-04-11 17:41:29,349 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:29,366 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:29,366 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:29,387 [INFO] Final candidates: []
2025-04-11 17:41:29,387 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,405 [INFO] Final candidates: []
2025-04-11 17:41:29,405 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:29,639 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:29,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:29,648 [INFO] Final candidates: []
2025-04-11 17:41:29,648 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,658 [INFO] Final candidates: []
2025-04-11 17:41:29,658 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,658 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:29,916 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:29,916 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(4)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:29,925 [INFO] Final candidates: []
2025-04-11 17:41:29,925 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,934 [INFO] Final candidates: []
2025-04-11 17:41:29,934 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:29,934 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,014 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:30,014 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(0)))
2025-04-11 17:41:30,023 [INFO] Final candidates: []
2025-04-11 17:41:30,023 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,032 [INFO] Final candidates: []
2025-04-11 17:41:30,032 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,032 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,075 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:30,075 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(1)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:30,085 [INFO] Final candidates: []
2025-04-11 17:41:30,085 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,095 [INFO] Final candidates: []
2025-04-11 17:41:30,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,095 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:30,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:30,123 [INFO] Final candidates: []
2025-04-11 17:41:30,123 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,132 [INFO] Final candidates: []
2025-04-11 17:41:30,132 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,183 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:30,183 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:30,193 [INFO] Final candidates: []
2025-04-11 17:41:30,193 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,202 [INFO] Final candidates: []
2025-04-11 17:41:30,202 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,305 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:30,305 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(2), np.int64(0)))
2025-04-11 17:41:30,315 [INFO] Final candidates: []
2025-04-11 17:41:30,315 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,325 [INFO] Final candidates: []
2025-04-11 17:41:30,326 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,326 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,411 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:30,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:30,421 [INFO] Final candidates: []
2025-04-11 17:41:30,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,430 [INFO] Final candidates: []
2025-04-11 17:41:30,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,431 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,521 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:30,522 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:30,531 [INFO] Final candidates: []
2025-04-11 17:41:30,531 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,540 [INFO] Final candidates: []
2025-04-11 17:41:30,540 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,540 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,582 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:30,582 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(1)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:30,592 [INFO] Final candidates: []
2025-04-11 17:41:30,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,601 [INFO] Final candidates: []
2025-04-11 17:41:30,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,652 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:30,652 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:30,661 [INFO] Final candidates: []
2025-04-11 17:41:30,661 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,670 [INFO] Final candidates: []
2025-04-11 17:41:30,671 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,671 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,738 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:30,738 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:30,747 [INFO] Final candidates: []
2025-04-11 17:41:30,747 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,756 [INFO] Final candidates: []
2025-04-11 17:41:30,756 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,756 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:30,875 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:30,876 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:30,885 [INFO] Final candidates: []
2025-04-11 17:41:30,885 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,894 [INFO] Final candidates: []
2025-04-11 17:41:30,894 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:30,894 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:31,116 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:31,116 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:31,126 [INFO] Final candidates: []
2025-04-11 17:41:31,126 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,137 [INFO] Final candidates: []
2025-04-11 17:41:31,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,138 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:31,270 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:31,270 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:31,280 [INFO] Final candidates: []
2025-04-11 17:41:31,280 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,289 [INFO] Final candidates: []
2025-04-11 17:41:31,289 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,289 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:31,345 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:31,345 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:41:31,345 [INFO] MCTS selected move: A4,C6
2025-04-11 17:41:31,345 [INFO] ===============NEW MOVE================
2025-04-11 17:41:31,518 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:41:31,528 [INFO] Final candidates: []
2025-04-11 17:41:31,528 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,537 [INFO] Final candidates: []
2025-04-11 17:41:31,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,537 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:41:31,537 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:41:31,537 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(2)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:31,546 [INFO] Final candidates: []
2025-04-11 17:41:31,546 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,566 [INFO] Final candidates: []
2025-04-11 17:41:31,566 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,566 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:41:31,566 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:31,666 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:31,666 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:31,676 [INFO] Final candidates: []
2025-04-11 17:41:31,676 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,685 [INFO] Final candidates: []
2025-04-11 17:41:31,685 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:31,769 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:31,770 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(5), np.int64(1)))
2025-04-11 17:41:31,779 [INFO] Final candidates: []
2025-04-11 17:41:31,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,788 [INFO] Final candidates: []
2025-04-11 17:41:31,788 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:31,926 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:31,926 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:31,947 [INFO] Final candidates: []
2025-04-11 17:41:31,947 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,970 [INFO] Final candidates: []
2025-04-11 17:41:31,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:31,978 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:31,978 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:31,987 [INFO] Final candidates: []
2025-04-11 17:41:31,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,998 [INFO] Final candidates: []
2025-04-11 17:41:31,998 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:31,998 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,081 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:32,083 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:32,093 [INFO] Final candidates: []
2025-04-11 17:41:32,093 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,102 [INFO] Final candidates: []
2025-04-11 17:41:32,102 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,102 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,198 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:32,198 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:32,207 [INFO] Final candidates: []
2025-04-11 17:41:32,207 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,216 [INFO] Final candidates: []
2025-04-11 17:41:32,216 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,217 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,287 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:32,288 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:32,297 [INFO] Final candidates: []
2025-04-11 17:41:32,297 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,306 [INFO] Final candidates: []
2025-04-11 17:41:32,306 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,348 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:32,348 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:32,360 [INFO] Final candidates: []
2025-04-11 17:41:32,360 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,369 [INFO] Final candidates: []
2025-04-11 17:41:32,369 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,369 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,468 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:32,468 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:32,477 [INFO] Final candidates: []
2025-04-11 17:41:32,477 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,486 [INFO] Final candidates: []
2025-04-11 17:41:32,486 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,486 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,519 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:32,519 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:32,542 [INFO] Final candidates: []
2025-04-11 17:41:32,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,552 [INFO] Final candidates: []
2025-04-11 17:41:32,552 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,552 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,666 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:32,667 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:32,676 [INFO] Final candidates: []
2025-04-11 17:41:32,676 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,685 [INFO] Final candidates: []
2025-04-11 17:41:32,685 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,706 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:32,706 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(5), np.int64(4)))
2025-04-11 17:41:32,715 [INFO] Final candidates: []
2025-04-11 17:41:32,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,724 [INFO] Final candidates: []
2025-04-11 17:41:32,724 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,724 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:32,883 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:32,883 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:32,893 [INFO] Final candidates: []
2025-04-11 17:41:32,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,902 [INFO] Final candidates: []
2025-04-11 17:41:32,902 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:32,902 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:33,069 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:33,069 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:33,078 [INFO] Final candidates: []
2025-04-11 17:41:33,078 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,087 [INFO] Final candidates: []
2025-04-11 17:41:33,087 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,087 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:33,261 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:33,262 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:33,271 [INFO] Final candidates: []
2025-04-11 17:41:33,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,281 [INFO] Final candidates: []
2025-04-11 17:41:33,281 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,282 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:33,323 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:33,323 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:33,332 [INFO] Final candidates: []
2025-04-11 17:41:33,332 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,344 [INFO] Final candidates: []
2025-04-11 17:41:33,344 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,344 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:33,539 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:33,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:33,549 [INFO] Final candidates: []
2025-04-11 17:41:33,549 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,565 [INFO] Final candidates: []
2025-04-11 17:41:33,565 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,566 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:33,603 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:33,603 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:33,612 [INFO] Final candidates: []
2025-04-11 17:41:33,612 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,622 [INFO] Final candidates: []
2025-04-11 17:41:33,622 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,622 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:33,777 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:33,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(1)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:33,786 [INFO] Final candidates: []
2025-04-11 17:41:33,786 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,795 [INFO] Final candidates: []
2025-04-11 17:41:33,795 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,795 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:33,839 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:33,839 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:33,863 [INFO] Final candidates: []
2025-04-11 17:41:33,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,873 [INFO] Final candidates: []
2025-04-11 17:41:33,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:33,873 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,067 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:34,067 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(0)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:34,076 [INFO] Final candidates: []
2025-04-11 17:41:34,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,085 [INFO] Final candidates: []
2025-04-11 17:41:34,085 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,086 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,232 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:34,233 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(1), np.int64(0)))
2025-04-11 17:41:34,242 [INFO] Final candidates: []
2025-04-11 17:41:34,242 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,251 [INFO] Final candidates: []
2025-04-11 17:41:34,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,252 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,328 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:34,328 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:34,338 [INFO] Final candidates: []
2025-04-11 17:41:34,338 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,347 [INFO] Final candidates: []
2025-04-11 17:41:34,347 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,347 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,410 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:34,410 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:34,419 [INFO] Final candidates: []
2025-04-11 17:41:34,419 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,433 [INFO] Final candidates: []
2025-04-11 17:41:34,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,434 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,500 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:34,500 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:34,509 [INFO] Final candidates: []
2025-04-11 17:41:34,509 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,518 [INFO] Final candidates: []
2025-04-11 17:41:34,518 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,544 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:34,544 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:34,563 [INFO] Final candidates: []
2025-04-11 17:41:34,563 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,581 [INFO] Final candidates: []
2025-04-11 17:41:34,581 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,581 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,597 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:34,597 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(5), np.int64(1)))
2025-04-11 17:41:34,597 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)] triggers candidate.
2025-04-11 17:41:34,597 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:41:34,597 [DEBUG] board coords: [(5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6)]
2025-04-11 17:41:34,598 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:41:34,598 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 5), (5, 6)]
2025-04-11 17:41:34,598 [DEBUG] check_window_intermediate_custom (only one inserted(5, 5)): For L=6, window [1 1 1 1 0 0] with coords [(5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6)] triggers candidate.
2025-04-11 17:41:34,606 [INFO] Final candidates: [(5, 5), (5, 0)]
2025-04-11 17:41:34,606 [INFO] Phase win: Collected 1unique candidate(s):[((5, 5), (5, 0))]
2025-04-11 17:41:34,606 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:41:34,616 [INFO] Final candidates: []
2025-04-11 17:41:34,616 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,616 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,668 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:34,668 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:34,677 [INFO] Final candidates: []
2025-04-11 17:41:34,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,686 [INFO] Final candidates: []
2025-04-11 17:41:34,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,687 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,856 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:34,856 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:34,866 [INFO] Final candidates: []
2025-04-11 17:41:34,866 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,875 [INFO] Final candidates: []
2025-04-11 17:41:34,875 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,927 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:34,927 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:34,937 [INFO] Final candidates: []
2025-04-11 17:41:34,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,946 [INFO] Final candidates: []
2025-04-11 17:41:34,946 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:34,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:34,985 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:34,985 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:34,994 [INFO] Final candidates: []
2025-04-11 17:41:34,994 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,003 [INFO] Final candidates: []
2025-04-11 17:41:35,003 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,003 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,062 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:35,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:35,072 [INFO] Final candidates: []
2025-04-11 17:41:35,072 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,081 [INFO] Final candidates: []
2025-04-11 17:41:35,081 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,081 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,112 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:35,112 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(5), np.int64(4)))
2025-04-11 17:41:35,122 [INFO] Final candidates: []
2025-04-11 17:41:35,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,131 [INFO] Final candidates: []
2025-04-11 17:41:35,131 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:35,295 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:35,304 [INFO] Final candidates: []
2025-04-11 17:41:35,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,314 [INFO] Final candidates: []
2025-04-11 17:41:35,314 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,314 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,531 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:35,531 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:35,540 [INFO] Final candidates: []
2025-04-11 17:41:35,540 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,550 [INFO] Final candidates: []
2025-04-11 17:41:35,550 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,550 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,654 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:35,654 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:35,666 [INFO] Final candidates: []
2025-04-11 17:41:35,666 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,675 [INFO] Final candidates: []
2025-04-11 17:41:35,675 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,676 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,716 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:35,716 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:35,726 [INFO] Final candidates: []
2025-04-11 17:41:35,726 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,735 [INFO] Final candidates: []
2025-04-11 17:41:35,735 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,736 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,760 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:35,760 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:35,770 [INFO] Final candidates: []
2025-04-11 17:41:35,770 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,779 [INFO] Final candidates: []
2025-04-11 17:41:35,779 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:35,779 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:35,983 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:35,983 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:35,993 [INFO] Final candidates: []
2025-04-11 17:41:35,993 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,002 [INFO] Final candidates: []
2025-04-11 17:41:36,002 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,002 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,147 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:36,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:36,161 [INFO] Final candidates: []
2025-04-11 17:41:36,161 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,170 [INFO] Final candidates: []
2025-04-11 17:41:36,170 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,171 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,379 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:36,380 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:36,389 [INFO] Final candidates: []
2025-04-11 17:41:36,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,398 [INFO] Final candidates: []
2025-04-11 17:41:36,398 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,398 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,453 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:36,454 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:36,466 [INFO] Final candidates: []
2025-04-11 17:41:36,466 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,475 [INFO] Final candidates: []
2025-04-11 17:41:36,476 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,476 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,502 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:36,502 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:36,512 [INFO] Final candidates: []
2025-04-11 17:41:36,512 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,521 [INFO] Final candidates: []
2025-04-11 17:41:36,521 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,521 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,558 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:36,558 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:36,567 [INFO] Final candidates: []
2025-04-11 17:41:36,567 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,577 [INFO] Final candidates: []
2025-04-11 17:41:36,577 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,577 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,641 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:36,641 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:36,652 [INFO] Final candidates: []
2025-04-11 17:41:36,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,661 [INFO] Final candidates: []
2025-04-11 17:41:36,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,666 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:36,666 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(3), np.int64(2)))
2025-04-11 17:41:36,675 [INFO] Final candidates: []
2025-04-11 17:41:36,675 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,684 [INFO] Final candidates: []
2025-04-11 17:41:36,684 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,767 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:36,767 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:36,776 [INFO] Final candidates: []
2025-04-11 17:41:36,776 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,785 [INFO] Final candidates: []
2025-04-11 17:41:36,785 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,785 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,869 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:36,869 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:36,879 [INFO] Final candidates: []
2025-04-11 17:41:36,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,887 [INFO] Final candidates: []
2025-04-11 17:41:36,888 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,888 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:36,908 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:36,908 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:36,918 [INFO] Final candidates: []
2025-04-11 17:41:36,918 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,927 [INFO] Final candidates: []
2025-04-11 17:41:36,927 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:36,927 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,003 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:37,003 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(5), np.int64(0)))
2025-04-11 17:41:37,004 [DEBUG] board coords: [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
2025-04-11 17:41:37,004 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:41:37,004 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 1), (5, 5)]
2025-04-11 17:41:37,004 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)] triggers candidate.
2025-04-11 17:41:37,017 [INFO] Final candidates: [(5, 5), (5, 1)]
2025-04-11 17:41:37,017 [INFO] Phase win: Collected 1unique candidate(s):[((5, 5), (5, 1))]
2025-04-11 17:41:37,017 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:41:37,026 [INFO] Final candidates: []
2025-04-11 17:41:37,026 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,026 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:41:37,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,061 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,061 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:37,070 [INFO] Final candidates: []
2025-04-11 17:41:37,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,079 [INFO] Final candidates: []
2025-04-11 17:41:37,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,080 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,131 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:37,142 [INFO] Final candidates: []
2025-04-11 17:41:37,142 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,151 [INFO] Final candidates: []
2025-04-11 17:41:37,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,151 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,242 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,242 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:37,251 [INFO] Final candidates: []
2025-04-11 17:41:37,251 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,260 [INFO] Final candidates: []
2025-04-11 17:41:37,260 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,370 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:37,370 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:37,379 [INFO] Final candidates: []
2025-04-11 17:41:37,379 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,388 [INFO] Final candidates: []
2025-04-11 17:41:37,388 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,389 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,430 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,430 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:37,439 [INFO] Final candidates: []
2025-04-11 17:41:37,439 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,448 [INFO] Final candidates: []
2025-04-11 17:41:37,448 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,448 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,476 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:37,476 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(5), np.int64(0)))
2025-04-11 17:41:37,487 [INFO] Final candidates: []
2025-04-11 17:41:37,487 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,496 [INFO] Final candidates: []
2025-04-11 17:41:37,496 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,496 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,595 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:37,595 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(0)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:37,604 [INFO] Final candidates: []
2025-04-11 17:41:37,604 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,615 [INFO] Final candidates: []
2025-04-11 17:41:37,615 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,615 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,647 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,647 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(1), np.int64(0)))
2025-04-11 17:41:37,656 [INFO] Final candidates: []
2025-04-11 17:41:37,656 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,665 [INFO] Final candidates: []
2025-04-11 17:41:37,665 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,701 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,701 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:37,710 [INFO] Final candidates: []
2025-04-11 17:41:37,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,719 [INFO] Final candidates: []
2025-04-11 17:41:37,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,760 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,760 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:37,769 [INFO] Final candidates: []
2025-04-11 17:41:37,769 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,778 [INFO] Final candidates: []
2025-04-11 17:41:37,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,818 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:37,819 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:37,828 [INFO] Final candidates: []
2025-04-11 17:41:37,828 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,837 [INFO] Final candidates: []
2025-04-11 17:41:37,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:37,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:37,909 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:37,921 [INFO] Final candidates: []
2025-04-11 17:41:37,921 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,933 [INFO] Final candidates: []
2025-04-11 17:41:37,933 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:37,933 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,025 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:38,025 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:38,034 [INFO] Final candidates: []
2025-04-11 17:41:38,035 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,043 [INFO] Final candidates: []
2025-04-11 17:41:38,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,044 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,311 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:38,311 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:38,311 [DEBUG] board coords: [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
2025-04-11 17:41:38,311 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:41:38,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 1), (5, 4)]
2025-04-11 17:41:38,311 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)] triggers candidate.
2025-04-11 17:41:38,320 [INFO] Final candidates: [(5, 4), (5, 1)]
2025-04-11 17:41:38,320 [INFO] Phase win: Collected 1unique candidate(s):[((5, 4), (5, 1))]
2025-04-11 17:41:38,320 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:41:38,329 [INFO] Final candidates: []
2025-04-11 17:41:38,329 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,366 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:38,366 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:38,380 [INFO] Final candidates: []
2025-04-11 17:41:38,381 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,394 [INFO] Final candidates: []
2025-04-11 17:41:38,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,394 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,413 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:38,413 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:38,422 [INFO] Final candidates: []
2025-04-11 17:41:38,423 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,432 [INFO] Final candidates: []
2025-04-11 17:41:38,432 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,432 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,525 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:38,525 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:38,534 [INFO] Final candidates: []
2025-04-11 17:41:38,534 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,543 [INFO] Final candidates: []
2025-04-11 17:41:38,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,544 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,626 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:38,626 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:38,635 [INFO] Final candidates: []
2025-04-11 17:41:38,636 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,644 [INFO] Final candidates: []
2025-04-11 17:41:38,644 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,771 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:38,772 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(4)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:38,781 [INFO] Final candidates: []
2025-04-11 17:41:38,781 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,790 [INFO] Final candidates: []
2025-04-11 17:41:38,790 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,790 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,805 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:38,806 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:38,817 [INFO] Final candidates: []
2025-04-11 17:41:38,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,827 [INFO] Final candidates: []
2025-04-11 17:41:38,827 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,827 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:38,905 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:38,905 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:38,915 [INFO] Final candidates: []
2025-04-11 17:41:38,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,924 [INFO] Final candidates: []
2025-04-11 17:41:38,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:38,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,045 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:39,045 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(2), np.int64(2)))
2025-04-11 17:41:39,055 [INFO] Final candidates: []
2025-04-11 17:41:39,055 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,064 [INFO] Final candidates: []
2025-04-11 17:41:39,064 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,064 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,084 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:39,085 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:39,094 [INFO] Final candidates: []
2025-04-11 17:41:39,094 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,103 [INFO] Final candidates: []
2025-04-11 17:41:39,103 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,103 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,157 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:39,158 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:39,168 [INFO] Final candidates: []
2025-04-11 17:41:39,168 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,178 [INFO] Final candidates: []
2025-04-11 17:41:39,178 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,178 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,195 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,195 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(5), np.int64(0)))
2025-04-11 17:41:39,205 [INFO] Final candidates: []
2025-04-11 17:41:39,205 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,216 [INFO] Final candidates: []
2025-04-11 17:41:39,216 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,216 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,267 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,268 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:39,277 [INFO] Final candidates: []
2025-04-11 17:41:39,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,288 [INFO] Final candidates: []
2025-04-11 17:41:39,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,289 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,373 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,374 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(5), np.int64(1)))
2025-04-11 17:41:39,386 [INFO] Final candidates: []
2025-04-11 17:41:39,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,395 [INFO] Final candidates: []
2025-04-11 17:41:39,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,396 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,400 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,401 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:39,410 [INFO] Final candidates: []
2025-04-11 17:41:39,410 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,419 [INFO] Final candidates: []
2025-04-11 17:41:39,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,419 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,614 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,615 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:39,624 [INFO] Final candidates: []
2025-04-11 17:41:39,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,633 [INFO] Final candidates: []
2025-04-11 17:41:39,633 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,633 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,689 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,689 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:39,699 [INFO] Final candidates: []
2025-04-11 17:41:39,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,708 [INFO] Final candidates: []
2025-04-11 17:41:39,708 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,708 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,803 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:39,803 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:39,812 [INFO] Final candidates: []
2025-04-11 17:41:39,813 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,821 [INFO] Final candidates: []
2025-04-11 17:41:39,822 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,822 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,848 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,848 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:39,857 [INFO] Final candidates: []
2025-04-11 17:41:39,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,867 [INFO] Final candidates: []
2025-04-11 17:41:39,867 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,867 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,885 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:39,885 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:39,894 [INFO] Final candidates: []
2025-04-11 17:41:39,894 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,903 [INFO] Final candidates: []
2025-04-11 17:41:39,903 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:39,917 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:39,917 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:39,926 [INFO] Final candidates: []
2025-04-11 17:41:39,926 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,935 [INFO] Final candidates: []
2025-04-11 17:41:39,935 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:39,935 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,020 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,020 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:40,021 [DEBUG] board coords: [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
2025-04-11 17:41:40,021 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:41:40,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 0), (5, 4)]
2025-04-11 17:41:40,021 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)] triggers candidate.
2025-04-11 17:41:40,021 [DEBUG] board coords: [(5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6)]
2025-04-11 17:41:40,021 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:41:40,022 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 4), (5, 6)]
2025-04-11 17:41:40,022 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6)] triggers candidate.
2025-04-11 17:41:40,039 [INFO] Final candidates: [(5, 4), (5, 0), (5, 6)]
2025-04-11 17:41:40,039 [INFO] Phase win: Collected 3unique candidate(s):[((5, 0), (5, 6)), ((5, 4), (5, 6)), ((5, 4), (5, 0))]
2025-04-11 17:41:40,039 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:41:40,057 [INFO] Final candidates: []
2025-04-11 17:41:40,057 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,057 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,100 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,101 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:40,110 [INFO] Final candidates: []
2025-04-11 17:41:40,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,119 [INFO] Final candidates: []
2025-04-11 17:41:40,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,244 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,244 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(1)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:40,253 [INFO] Final candidates: []
2025-04-11 17:41:40,253 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,263 [INFO] Final candidates: []
2025-04-11 17:41:40,263 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,263 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,313 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,313 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:40,323 [INFO] Final candidates: []
2025-04-11 17:41:40,323 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,332 [INFO] Final candidates: []
2025-04-11 17:41:40,332 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,332 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,348 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:40,363 [INFO] Final candidates: []
2025-04-11 17:41:40,363 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,375 [INFO] Final candidates: []
2025-04-11 17:41:40,375 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,375 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,387 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,388 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:40,397 [INFO] Final candidates: []
2025-04-11 17:41:40,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,406 [INFO] Final candidates: []
2025-04-11 17:41:40,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,417 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,417 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(5), np.int64(0)))
2025-04-11 17:41:40,418 [DEBUG] board coords: [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
2025-04-11 17:41:40,418 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:41:40,418 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 4), (5, 5)]
2025-04-11 17:41:40,418 [DEBUG] check_window_intermediate_custom (only one inserted(5, 4)): For L=6, window [1 1 1 1 0 0] with coords [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)] triggers candidate.
2025-04-11 17:41:40,427 [INFO] Final candidates: [(5, 4)]
2025-04-11 17:41:40,427 [INFO] Phase win: Found only one candidate: (5, 4)
2025-04-11 17:41:40,427 [INFO] Phase win: Collected 10unique candidate(s):[((5, 4), (np.int64(6), np.int64(3))), ((5, 4), (np.int64(7), np.int64(4))), ((5, 4), (np.int64(5), np.int64(6))), ((5, 4), (np.int64(4), np.int64(3))), ((5, 4), (np.int64(4), np.int64(5))), ((5, 4), (np.int64(5), np.int64(5))), ((5, 4), (np.int64(6), np.int64(5))), ((5, 4), (np.int64(3), np.int64(4))), ((5, 4), (np.int64(6), np.int64(4))), ((5, 4), (np.int64(4), np.int64(4)))]
2025-04-11 17:41:40,427 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:41:40,436 [INFO] Final candidates: []
2025-04-11 17:41:40,436 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,538 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,538 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(4), np.int64(4)))
2025-04-11 17:41:40,547 [INFO] Final candidates: []
2025-04-11 17:41:40,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,556 [INFO] Final candidates: []
2025-04-11 17:41:40,556 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,560 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,560 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:40,573 [INFO] Final candidates: []
2025-04-11 17:41:40,573 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,596 [INFO] Final candidates: []
2025-04-11 17:41:40,596 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,597 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,659 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,659 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(0)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:40,668 [INFO] Final candidates: []
2025-04-11 17:41:40,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,677 [INFO] Final candidates: []
2025-04-11 17:41:40,677 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,677 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,695 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,695 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(1)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:40,704 [INFO] Final candidates: []
2025-04-11 17:41:40,704 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,713 [INFO] Final candidates: []
2025-04-11 17:41:40,713 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,714 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,727 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,727 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(4)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:40,736 [INFO] Final candidates: []
2025-04-11 17:41:40,736 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,745 [INFO] Final candidates: []
2025-04-11 17:41:40,745 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,745 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,759 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,759 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:40,768 [INFO] Final candidates: []
2025-04-11 17:41:40,768 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,777 [INFO] Final candidates: []
2025-04-11 17:41:40,777 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,830 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,830 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(4)), (np.int64(1), np.int64(1)))
2025-04-11 17:41:40,842 [INFO] Final candidates: []
2025-04-11 17:41:40,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,851 [INFO] Final candidates: []
2025-04-11 17:41:40,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,869 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:40,869 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(2), np.int64(1)))
2025-04-11 17:41:40,878 [INFO] Final candidates: []
2025-04-11 17:41:40,878 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,887 [INFO] Final candidates: []
2025-04-11 17:41:40,887 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:40,887 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:40,895 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:40,895 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:41:40,895 [INFO] MCTS selected move: C4,E5
2025-04-11 17:41:40,895 [INFO] ===============NEW MOVE================
2025-04-11 17:41:41,083 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:41:41,092 [INFO] Final candidates: []
2025-04-11 17:41:41,092 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,094 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)] triggers candidate.
2025-04-11 17:41:41,094 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:41:41,094 [DEBUG] board coords: [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1)]
2025-04-11 17:41:41,094 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:41:41,094 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 1), (6, 1)]
2025-04-11 17:41:41,094 [DEBUG] check_window_intermediate_custom (only one inserted(5, 1)): For L=6, window [2 2 2 2 0 0] with coords [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1)] triggers candidate.
2025-04-11 17:41:41,101 [INFO] Final candidates: [(0, 1), (5, 1)]
2025-04-11 17:41:41,101 [INFO] Phase defense: Collected 1unique candidate(s):[((0, 1), (5, 1))]
2025-04-11 17:41:41,101 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:41:41,101 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:41:41,101 [DEBUG] Tree_policy iteration 1: Expanding move ((0, 1), (5, 1))
2025-04-11 17:41:41,104 [DEBUG] board coords: [(2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]
2025-04-11 17:41:41,104 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:41:41,104 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 1), (7, 1)]
2025-04-11 17:41:41,104 [DEBUG] check_window_intermediate_custom (only one inserted(6, 1)): For L=6, window [2 2 2 2 0 0] with coords [(2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)] triggers candidate.
2025-04-11 17:41:41,105 [DEBUG] board coords: [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]
2025-04-11 17:41:41,105 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:41:41,105 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 1), (7, 1)]
2025-04-11 17:41:41,105 [DEBUG] check_window_intermediate_custom (only one inserted(6, 1)): For L=7, window [2 2 2 2 2 0 0] with coords [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)] triggers candidate.
2025-04-11 17:41:41,110 [INFO] Final candidates: [(6, 1)]
2025-04-11 17:41:41,110 [INFO] Phase win: Found only one candidate: (6, 1)
2025-04-11 17:41:41,110 [INFO] Phase win: Collected 8unique candidate(s):[((6, 1), (np.int64(6), np.int64(2))), ((6, 1), (np.int64(7), np.int64(1))), ((6, 1), (np.int64(5), np.int64(0))), ((6, 1), (np.int64(7), np.int64(2))), ((6, 1), (np.int64(7), np.int64(0))), ((6, 1), (np.int64(6), np.int64(3))), ((6, 1), (np.int64(8), np.int64(1))), ((6, 1), (np.int64(6), np.int64(0)))]
2025-04-11 17:41:41,110 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 17:41:41,119 [INFO] Final candidates: []
2025-04-11 17:41:41,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,120 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:41:41,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,120 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,120 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,120 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,120 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,120 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,120 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,120 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,120 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,120 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,120 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,120 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,120 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,120 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,120 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,120 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,120 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,120 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,121 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,122 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,123 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,124 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,125 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [DEBUG] MCTS iteration 50: reached a node with 50 visits.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,126 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,127 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,127 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,127 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,127 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,127 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,127 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,127 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,127 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,127 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,127 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,127 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,127 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,127 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,128 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,128 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,128 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,128 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,128 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,128 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,128 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,128 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,128 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,128 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,128 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,128 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,128 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,128 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,129 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,129 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,129 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,129 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,129 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,129 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,129 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,129 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,129 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,129 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,129 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,129 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,129 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,129 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,130 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,130 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,130 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,130 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,130 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,130 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,130 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,130 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,130 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,130 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,131 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,131 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,131 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,131 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,131 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,131 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,131 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,131 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,131 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,131 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,131 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,131 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,132 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,132 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,132 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,132 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,132 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,132 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,132 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,132 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,132 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,132 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,132 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,132 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,133 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,134 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,134 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,134 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,134 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:41:41,134 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:41:41,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,134 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,134 [INFO] MCTS: Search finished. Best move selected with 100 visits.
2025-04-11 17:41:41,134 [INFO] MCTS (defense candidates) selected move: B1,B6
2025-04-11 17:41:41,329 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:41:41,338 [INFO] Final candidates: []
2025-04-11 17:41:41,338 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,347 [INFO] Final candidates: []
2025-04-11 17:41:41,347 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,347 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:41:41,348 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:41:41,348 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:41,357 [INFO] Final candidates: []
2025-04-11 17:41:41,357 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,371 [INFO] Final candidates: []
2025-04-11 17:41:41,371 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,372 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:41:41,372 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,543 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,544 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:41,553 [INFO] Final candidates: []
2025-04-11 17:41:41,553 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,562 [INFO] Final candidates: []
2025-04-11 17:41:41,562 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,562 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,679 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,680 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:41,689 [INFO] Final candidates: []
2025-04-11 17:41:41,689 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,697 [INFO] Final candidates: []
2025-04-11 17:41:41,697 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,827 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:41,827 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:41,837 [INFO] Final candidates: []
2025-04-11 17:41:41,837 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,848 [INFO] Final candidates: []
2025-04-11 17:41:41,848 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:41,972 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:41,972 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:41,981 [INFO] Final candidates: []
2025-04-11 17:41:41,981 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,991 [INFO] Final candidates: []
2025-04-11 17:41:41,991 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:41,991 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,139 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:42,139 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(7), np.int64(1)))
2025-04-11 17:41:42,148 [INFO] Final candidates: []
2025-04-11 17:41:42,149 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,157 [INFO] Final candidates: []
2025-04-11 17:41:42,157 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,394 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:42,394 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:42,404 [INFO] Final candidates: []
2025-04-11 17:41:42,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,415 [INFO] Final candidates: []
2025-04-11 17:41:42,415 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,415 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,488 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:42,489 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:42,498 [INFO] Final candidates: []
2025-04-11 17:41:42,498 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,507 [INFO] Final candidates: []
2025-04-11 17:41:42,507 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,507 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,554 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:42,554 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:42,564 [INFO] Final candidates: []
2025-04-11 17:41:42,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,573 [INFO] Final candidates: []
2025-04-11 17:41:42,573 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,573 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,628 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:42,629 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:42,637 [INFO] Final candidates: []
2025-04-11 17:41:42,637 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,646 [INFO] Final candidates: []
2025-04-11 17:41:42,646 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,646 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,687 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:42,688 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(3)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:42,697 [INFO] Final candidates: []
2025-04-11 17:41:42,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,705 [INFO] Final candidates: []
2025-04-11 17:41:42,705 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,778 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:42,779 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:42,788 [INFO] Final candidates: []
2025-04-11 17:41:42,788 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,797 [INFO] Final candidates: []
2025-04-11 17:41:42,797 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,798 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,842 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:42,842 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:42,853 [INFO] Final candidates: []
2025-04-11 17:41:42,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,869 [INFO] Final candidates: []
2025-04-11 17:41:42,869 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,869 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:42,950 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:42,950 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(4), np.int64(5)))
2025-04-11 17:41:42,959 [INFO] Final candidates: []
2025-04-11 17:41:42,959 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,968 [INFO] Final candidates: []
2025-04-11 17:41:42,968 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:42,969 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,028 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:43,028 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:43,037 [INFO] Final candidates: []
2025-04-11 17:41:43,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,045 [INFO] Final candidates: []
2025-04-11 17:41:43,045 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,046 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,117 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:43,117 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(1), np.int64(3)))
2025-04-11 17:41:43,126 [INFO] Final candidates: []
2025-04-11 17:41:43,126 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,135 [INFO] Final candidates: []
2025-04-11 17:41:43,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,135 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,308 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:43,308 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:43,317 [INFO] Final candidates: []
2025-04-11 17:41:43,317 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,326 [INFO] Final candidates: []
2025-04-11 17:41:43,326 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,327 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,339 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:43,339 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(6), np.int64(5)))
2025-04-11 17:41:43,348 [INFO] Final candidates: []
2025-04-11 17:41:43,348 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,357 [INFO] Final candidates: []
2025-04-11 17:41:43,357 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,357 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,416 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:43,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:43,425 [INFO] Final candidates: []
2025-04-11 17:41:43,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,434 [INFO] Final candidates: []
2025-04-11 17:41:43,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,434 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,597 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:43,597 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:43,606 [INFO] Final candidates: []
2025-04-11 17:41:43,606 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,616 [INFO] Final candidates: []
2025-04-11 17:41:43,616 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,617 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,756 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:43,757 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:43,766 [INFO] Final candidates: []
2025-04-11 17:41:43,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,775 [INFO] Final candidates: []
2025-04-11 17:41:43,775 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,775 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,881 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:43,881 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(1), np.int64(2)))
2025-04-11 17:41:43,890 [INFO] Final candidates: []
2025-04-11 17:41:43,890 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,899 [INFO] Final candidates: []
2025-04-11 17:41:43,899 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:43,899 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:43,986 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:43,986 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:43,996 [INFO] Final candidates: []
2025-04-11 17:41:43,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,005 [INFO] Final candidates: []
2025-04-11 17:41:44,005 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,005 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,021 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:44,021 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:44,030 [INFO] Final candidates: []
2025-04-11 17:41:44,030 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,039 [INFO] Final candidates: []
2025-04-11 17:41:44,039 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,039 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,103 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:44,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(0)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:44,112 [INFO] Final candidates: []
2025-04-11 17:41:44,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,121 [INFO] Final candidates: []
2025-04-11 17:41:44,121 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,175 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:44,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:44,184 [INFO] Final candidates: []
2025-04-11 17:41:44,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,193 [INFO] Final candidates: []
2025-04-11 17:41:44,193 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,194 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,214 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:44,214 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(7), np.int64(1)))
2025-04-11 17:41:44,223 [INFO] Final candidates: []
2025-04-11 17:41:44,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,232 [INFO] Final candidates: []
2025-04-11 17:41:44,232 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,232 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,261 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:44,262 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(6), np.int64(5)))
2025-04-11 17:41:44,271 [INFO] Final candidates: []
2025-04-11 17:41:44,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,279 [INFO] Final candidates: []
2025-04-11 17:41:44,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,492 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:44,493 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(5), np.int64(6)))
2025-04-11 17:41:44,502 [INFO] Final candidates: []
2025-04-11 17:41:44,502 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,510 [INFO] Final candidates: []
2025-04-11 17:41:44,510 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,511 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,652 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:44,653 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:44,664 [INFO] Final candidates: []
2025-04-11 17:41:44,664 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,673 [INFO] Final candidates: []
2025-04-11 17:41:44,673 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,673 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:44,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:44,791 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:44,803 [INFO] Final candidates: []
2025-04-11 17:41:44,803 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,812 [INFO] Final candidates: []
2025-04-11 17:41:44,812 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:44,812 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,055 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,055 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:45,064 [INFO] Final candidates: []
2025-04-11 17:41:45,064 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,072 [INFO] Final candidates: []
2025-04-11 17:41:45,073 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,073 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,118 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,118 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(6), np.int64(5)))
2025-04-11 17:41:45,127 [INFO] Final candidates: []
2025-04-11 17:41:45,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,135 [INFO] Final candidates: []
2025-04-11 17:41:45,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,167 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,167 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:45,176 [INFO] Final candidates: []
2025-04-11 17:41:45,176 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,185 [INFO] Final candidates: []
2025-04-11 17:41:45,185 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,185 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,212 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:45,213 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:45,221 [INFO] Final candidates: []
2025-04-11 17:41:45,222 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,230 [INFO] Final candidates: []
2025-04-11 17:41:45,230 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,231 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,334 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,334 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:45,343 [INFO] Final candidates: []
2025-04-11 17:41:45,343 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,352 [INFO] Final candidates: []
2025-04-11 17:41:45,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,422 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,422 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:45,432 [INFO] Final candidates: []
2025-04-11 17:41:45,432 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,440 [INFO] Final candidates: []
2025-04-11 17:41:45,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,533 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,533 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:45,542 [INFO] Final candidates: []
2025-04-11 17:41:45,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,551 [INFO] Final candidates: []
2025-04-11 17:41:45,551 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,552 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,838 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,838 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(5), np.int64(6)))
2025-04-11 17:41:45,848 [INFO] Final candidates: []
2025-04-11 17:41:45,848 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,857 [INFO] Final candidates: []
2025-04-11 17:41:45,858 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,859 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:45,934 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:45,934 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(5), np.int64(6)))
2025-04-11 17:41:45,943 [INFO] Final candidates: []
2025-04-11 17:41:45,943 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,956 [INFO] Final candidates: []
2025-04-11 17:41:45,956 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:45,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:46,011 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:46,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:46,020 [INFO] Final candidates: []
2025-04-11 17:41:46,020 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,028 [INFO] Final candidates: []
2025-04-11 17:41:46,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,029 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:46,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:46,220 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:46,229 [INFO] Final candidates: []
2025-04-11 17:41:46,229 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,237 [INFO] Final candidates: []
2025-04-11 17:41:46,237 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,238 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:46,255 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:46,255 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:46,264 [INFO] Final candidates: []
2025-04-11 17:41:46,264 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,273 [INFO] Final candidates: []
2025-04-11 17:41:46,273 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,273 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:46,482 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:46,482 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:46,491 [INFO] Final candidates: []
2025-04-11 17:41:46,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,501 [INFO] Final candidates: []
2025-04-11 17:41:46,501 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:46,590 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:46,590 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:46,599 [INFO] Final candidates: []
2025-04-11 17:41:46,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,609 [INFO] Final candidates: []
2025-04-11 17:41:46,609 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,609 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:46,696 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:46,696 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:46,706 [INFO] Final candidates: []
2025-04-11 17:41:46,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,715 [INFO] Final candidates: []
2025-04-11 17:41:46,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,715 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:46,915 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:46,915 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:46,924 [INFO] Final candidates: []
2025-04-11 17:41:46,924 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,933 [INFO] Final candidates: []
2025-04-11 17:41:46,933 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:46,933 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,000 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:47,000 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(2), np.int64(4)))
2025-04-11 17:41:47,012 [INFO] Final candidates: []
2025-04-11 17:41:47,012 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,028 [INFO] Final candidates: []
2025-04-11 17:41:47,029 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,029 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,146 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:47,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:47,156 [INFO] Final candidates: []
2025-04-11 17:41:47,156 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,165 [INFO] Final candidates: []
2025-04-11 17:41:47,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,309 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:47,309 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(2), np.int64(4)))
2025-04-11 17:41:47,321 [INFO] Final candidates: []
2025-04-11 17:41:47,321 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,331 [INFO] Final candidates: []
2025-04-11 17:41:47,331 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,331 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,471 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:47,472 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(5), np.int64(6)))
2025-04-11 17:41:47,481 [INFO] Final candidates: []
2025-04-11 17:41:47,481 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,490 [INFO] Final candidates: []
2025-04-11 17:41:47,490 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,491 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:41:47,491 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,623 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:47,623 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:47,632 [INFO] Final candidates: []
2025-04-11 17:41:47,632 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,642 [INFO] Final candidates: []
2025-04-11 17:41:47,642 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,689 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:47,690 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:47,699 [INFO] Final candidates: []
2025-04-11 17:41:47,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,707 [INFO] Final candidates: []
2025-04-11 17:41:47,707 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,708 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,785 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:47,785 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:47,794 [INFO] Final candidates: []
2025-04-11 17:41:47,794 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,803 [INFO] Final candidates: []
2025-04-11 17:41:47,803 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,803 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,833 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:47,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:47,842 [INFO] Final candidates: []
2025-04-11 17:41:47,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,851 [INFO] Final candidates: []
2025-04-11 17:41:47,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:47,915 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:47,915 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:47,925 [INFO] Final candidates: []
2025-04-11 17:41:47,925 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,934 [INFO] Final candidates: []
2025-04-11 17:41:47,934 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:47,934 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,145 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:48,145 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:48,156 [INFO] Final candidates: []
2025-04-11 17:41:48,156 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,168 [INFO] Final candidates: []
2025-04-11 17:41:48,168 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,168 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,293 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:48,294 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(7), np.int64(4)))
2025-04-11 17:41:48,304 [INFO] Final candidates: []
2025-04-11 17:41:48,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,312 [INFO] Final candidates: []
2025-04-11 17:41:48,312 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,394 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:48,394 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:48,403 [INFO] Final candidates: []
2025-04-11 17:41:48,403 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,412 [INFO] Final candidates: []
2025-04-11 17:41:48,412 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,412 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,555 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:48,556 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:48,571 [INFO] Final candidates: []
2025-04-11 17:41:48,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,580 [INFO] Final candidates: []
2025-04-11 17:41:48,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,580 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,632 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:48,632 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:48,641 [INFO] Final candidates: []
2025-04-11 17:41:48,641 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,650 [INFO] Final candidates: []
2025-04-11 17:41:48,650 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,650 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,683 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:48,683 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:48,692 [INFO] Final candidates: []
2025-04-11 17:41:48,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,701 [INFO] Final candidates: []
2025-04-11 17:41:48,701 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:48,802 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:48,811 [INFO] Final candidates: []
2025-04-11 17:41:48,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,820 [INFO] Final candidates: []
2025-04-11 17:41:48,820 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,873 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:48,873 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:48,882 [INFO] Final candidates: []
2025-04-11 17:41:48,882 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,890 [INFO] Final candidates: []
2025-04-11 17:41:48,890 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,891 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:48,968 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:48,969 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(5)))
2025-04-11 17:41:48,978 [INFO] Final candidates: []
2025-04-11 17:41:48,978 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,986 [INFO] Final candidates: []
2025-04-11 17:41:48,986 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:48,986 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,080 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:49,080 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(5), np.int64(6)))
2025-04-11 17:41:49,089 [INFO] Final candidates: []
2025-04-11 17:41:49,089 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,098 [INFO] Final candidates: []
2025-04-11 17:41:49,098 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,098 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,141 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:49,141 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:49,154 [INFO] Final candidates: []
2025-04-11 17:41:49,154 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,163 [INFO] Final candidates: []
2025-04-11 17:41:49,163 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,163 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,172 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:49,172 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:49,181 [INFO] Final candidates: []
2025-04-11 17:41:49,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,190 [INFO] Final candidates: []
2025-04-11 17:41:49,190 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,299 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:49,299 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(2), np.int64(2)))
2025-04-11 17:41:49,308 [INFO] Final candidates: []
2025-04-11 17:41:49,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,320 [INFO] Final candidates: []
2025-04-11 17:41:49,320 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,320 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,448 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:49,448 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(7), np.int64(4)))
2025-04-11 17:41:49,457 [INFO] Final candidates: []
2025-04-11 17:41:49,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,466 [INFO] Final candidates: []
2025-04-11 17:41:49,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,466 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,559 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:49,559 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:49,568 [INFO] Final candidates: []
2025-04-11 17:41:49,568 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,577 [INFO] Final candidates: []
2025-04-11 17:41:49,577 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,578 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,668 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:49,668 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(7), np.int64(1)))
2025-04-11 17:41:49,675 [DEBUG] board coords: [(2, 6), (3, 5), (4, 4), (5, 3), (6, 2), (7, 1)]
2025-04-11 17:41:49,675 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:41:49,675 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 6), (3, 5)]
2025-04-11 17:41:49,675 [DEBUG] check_window_intermediate_custom (only one inserted(3, 5)): For L=6, window [0 0 1 1 1 1] with coords [(2, 6), (3, 5), (4, 4), (5, 3), (6, 2), (7, 1)] triggers candidate.
2025-04-11 17:41:49,675 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(3, 5), (4, 4), (5, 3), (6, 2), (7, 1), (8, 0)] triggers candidate.
2025-04-11 17:41:49,675 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:41:49,677 [INFO] Final candidates: [(3, 5), (8, 0)]
2025-04-11 17:41:49,677 [INFO] Phase win: Collected 1unique candidate(s):[((3, 5), (8, 0))]
2025-04-11 17:41:49,677 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:41:49,686 [INFO] Final candidates: []
2025-04-11 17:41:49,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,686 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,789 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:49,789 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(2)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:49,798 [INFO] Final candidates: []
2025-04-11 17:41:49,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,806 [INFO] Final candidates: []
2025-04-11 17:41:49,806 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,807 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:49,871 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:49,872 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:49,886 [INFO] Final candidates: []
2025-04-11 17:41:49,886 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,895 [INFO] Final candidates: []
2025-04-11 17:41:49,895 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:49,895 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,137 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:50,137 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:50,146 [INFO] Final candidates: []
2025-04-11 17:41:50,146 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,155 [INFO] Final candidates: []
2025-04-11 17:41:50,155 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,156 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,202 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:50,202 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:50,211 [INFO] Final candidates: []
2025-04-11 17:41:50,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,220 [INFO] Final candidates: []
2025-04-11 17:41:50,220 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,281 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:50,281 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:50,290 [INFO] Final candidates: []
2025-04-11 17:41:50,290 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,311 [INFO] Final candidates: []
2025-04-11 17:41:50,311 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,422 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:50,422 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:50,431 [INFO] Final candidates: []
2025-04-11 17:41:50,431 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,440 [INFO] Final candidates: []
2025-04-11 17:41:50,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,465 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:50,465 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:50,474 [INFO] Final candidates: []
2025-04-11 17:41:50,474 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,487 [INFO] Final candidates: []
2025-04-11 17:41:50,487 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,487 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,556 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:50,556 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:50,565 [INFO] Final candidates: []
2025-04-11 17:41:50,565 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,574 [INFO] Final candidates: []
2025-04-11 17:41:50,574 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,574 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,757 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:50,757 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(7), np.int64(1)))
2025-04-11 17:41:50,766 [INFO] Final candidates: []
2025-04-11 17:41:50,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,775 [INFO] Final candidates: []
2025-04-11 17:41:50,775 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,775 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,827 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:50,827 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:50,837 [INFO] Final candidates: []
2025-04-11 17:41:50,837 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,845 [INFO] Final candidates: []
2025-04-11 17:41:50,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,846 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,866 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:50,866 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(2), np.int64(4)))
2025-04-11 17:41:50,875 [INFO] Final candidates: []
2025-04-11 17:41:50,875 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,884 [INFO] Final candidates: []
2025-04-11 17:41:50,884 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,885 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:50,977 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:50,977 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:50,986 [INFO] Final candidates: []
2025-04-11 17:41:50,986 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,995 [INFO] Final candidates: []
2025-04-11 17:41:50,995 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:50,996 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,094 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:51,094 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:51,106 [INFO] Final candidates: []
2025-04-11 17:41:51,106 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,115 [INFO] Final candidates: []
2025-04-11 17:41:51,115 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,115 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,259 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:51,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:51,268 [INFO] Final candidates: []
2025-04-11 17:41:51,268 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,277 [INFO] Final candidates: []
2025-04-11 17:41:51,277 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,277 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,338 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:51,339 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:51,355 [INFO] Final candidates: []
2025-04-11 17:41:51,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,364 [INFO] Final candidates: []
2025-04-11 17:41:51,364 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,364 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,433 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:51,433 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(3)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:51,442 [INFO] Final candidates: []
2025-04-11 17:41:51,442 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,451 [INFO] Final candidates: []
2025-04-11 17:41:51,451 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,451 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,569 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:51,569 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:51,578 [INFO] Final candidates: []
2025-04-11 17:41:51,578 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,587 [INFO] Final candidates: []
2025-04-11 17:41:51,587 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,587 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,719 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:51,719 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:51,728 [INFO] Final candidates: []
2025-04-11 17:41:51,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,737 [INFO] Final candidates: []
2025-04-11 17:41:51,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,848 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:51,848 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(3)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:51,857 [INFO] Final candidates: []
2025-04-11 17:41:51,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,866 [INFO] Final candidates: []
2025-04-11 17:41:51,866 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:51,919 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:51,920 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(0)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:51,929 [INFO] Final candidates: []
2025-04-11 17:41:51,929 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,938 [INFO] Final candidates: []
2025-04-11 17:41:51,938 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:51,938 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:52,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:52,133 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:52,143 [INFO] Final candidates: []
2025-04-11 17:41:52,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,152 [INFO] Final candidates: []
2025-04-11 17:41:52,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:52,261 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:52,261 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:52,273 [INFO] Final candidates: []
2025-04-11 17:41:52,273 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,284 [INFO] Final candidates: []
2025-04-11 17:41:52,284 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,284 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:52,492 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:52,492 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:52,503 [INFO] Final candidates: []
2025-04-11 17:41:52,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,512 [INFO] Final candidates: []
2025-04-11 17:41:52,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:52,595 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:52,596 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(1), np.int64(3)))
2025-04-11 17:41:52,605 [INFO] Final candidates: []
2025-04-11 17:41:52,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,613 [INFO] Final candidates: []
2025-04-11 17:41:52,613 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,614 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:52,737 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:52,738 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:52,746 [INFO] Final candidates: []
2025-04-11 17:41:52,746 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,755 [INFO] Final candidates: []
2025-04-11 17:41:52,755 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,756 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:52,843 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:52,843 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(3)))
2025-04-11 17:41:52,852 [INFO] Final candidates: []
2025-04-11 17:41:52,852 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,861 [INFO] Final candidates: []
2025-04-11 17:41:52,861 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:52,862 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,036 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:53,037 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:53,046 [INFO] Final candidates: []
2025-04-11 17:41:53,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,055 [INFO] Final candidates: []
2025-04-11 17:41:53,055 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,109 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:53,109 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:53,118 [INFO] Final candidates: []
2025-04-11 17:41:53,118 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,127 [INFO] Final candidates: []
2025-04-11 17:41:53,127 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,336 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:53,336 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:41:53,336 [INFO] MCTS selected move: A2,D7
2025-04-11 17:41:53,336 [INFO] ===============NEW MOVE================
2025-04-11 17:41:53,510 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:41:53,520 [INFO] Final candidates: []
2025-04-11 17:41:53,520 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,528 [INFO] Final candidates: []
2025-04-11 17:41:53,529 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,529 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:41:53,529 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:41:53,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:53,538 [INFO] Final candidates: []
2025-04-11 17:41:53,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,547 [INFO] Final candidates: []
2025-04-11 17:41:53,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,547 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:41:53,547 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:53,562 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:53,571 [INFO] Final candidates: []
2025-04-11 17:41:53,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,579 [INFO] Final candidates: []
2025-04-11 17:41:53,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,580 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,682 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:53,683 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:53,692 [INFO] Final candidates: []
2025-04-11 17:41:53,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,701 [INFO] Final candidates: []
2025-04-11 17:41:53,701 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,707 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:53,707 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:53,716 [INFO] Final candidates: []
2025-04-11 17:41:53,716 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,725 [INFO] Final candidates: []
2025-04-11 17:41:53,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,725 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,811 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:53,811 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(2), np.int64(4)))
2025-04-11 17:41:53,820 [INFO] Final candidates: []
2025-04-11 17:41:53,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,829 [INFO] Final candidates: []
2025-04-11 17:41:53,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,877 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:53,877 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:53,886 [INFO] Final candidates: []
2025-04-11 17:41:53,886 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,894 [INFO] Final candidates: []
2025-04-11 17:41:53,894 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,895 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:53,918 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:53,918 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(2), np.int64(4)))
2025-04-11 17:41:53,927 [INFO] Final candidates: []
2025-04-11 17:41:53,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,936 [INFO] Final candidates: []
2025-04-11 17:41:53,936 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:53,937 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,000 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:54,000 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:54,008 [INFO] Final candidates: []
2025-04-11 17:41:54,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,017 [INFO] Final candidates: []
2025-04-11 17:41:54,018 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,018 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,049 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:54,050 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:54,059 [INFO] Final candidates: []
2025-04-11 17:41:54,060 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,068 [INFO] Final candidates: []
2025-04-11 17:41:54,069 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,069 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,103 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:54,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:54,112 [INFO] Final candidates: []
2025-04-11 17:41:54,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,121 [INFO] Final candidates: []
2025-04-11 17:41:54,121 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:54,248 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:54,257 [INFO] Final candidates: []
2025-04-11 17:41:54,257 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,268 [INFO] Final candidates: []
2025-04-11 17:41:54,268 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,268 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,397 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:54,397 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(1), np.int64(3)))
2025-04-11 17:41:54,406 [INFO] Final candidates: []
2025-04-11 17:41:54,406 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,415 [INFO] Final candidates: []
2025-04-11 17:41:54,415 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,415 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,442 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:54,442 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:54,451 [INFO] Final candidates: []
2025-04-11 17:41:54,451 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,460 [INFO] Final candidates: []
2025-04-11 17:41:54,460 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,461 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,543 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:54,544 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:54,555 [INFO] Final candidates: []
2025-04-11 17:41:54,556 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,564 [INFO] Final candidates: []
2025-04-11 17:41:54,564 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,653 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:54,654 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(7), np.int64(4)))
2025-04-11 17:41:54,662 [INFO] Final candidates: []
2025-04-11 17:41:54,662 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,671 [INFO] Final candidates: []
2025-04-11 17:41:54,671 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,671 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,750 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:54,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:54,759 [INFO] Final candidates: []
2025-04-11 17:41:54,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,768 [INFO] Final candidates: []
2025-04-11 17:41:54,768 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,853 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:54,853 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:54,862 [INFO] Final candidates: []
2025-04-11 17:41:54,862 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,871 [INFO] Final candidates: []
2025-04-11 17:41:54,871 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,871 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:54,981 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:54,981 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:54,990 [INFO] Final candidates: []
2025-04-11 17:41:54,990 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:54,999 [INFO] Final candidates: []
2025-04-11 17:41:54,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,000 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,067 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:55,067 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(6), np.int64(5)))
2025-04-11 17:41:55,076 [INFO] Final candidates: []
2025-04-11 17:41:55,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,085 [INFO] Final candidates: []
2025-04-11 17:41:55,085 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,085 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:55,275 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:55,283 [INFO] Final candidates: []
2025-04-11 17:41:55,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,292 [INFO] Final candidates: []
2025-04-11 17:41:55,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,461 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:55,461 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:55,470 [INFO] Final candidates: []
2025-04-11 17:41:55,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,479 [INFO] Final candidates: []
2025-04-11 17:41:55,479 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,500 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:55,500 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:55,509 [INFO] Final candidates: []
2025-04-11 17:41:55,509 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,518 [INFO] Final candidates: []
2025-04-11 17:41:55,518 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,529 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:55,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(7), np.int64(1)))
2025-04-11 17:41:55,538 [INFO] Final candidates: []
2025-04-11 17:41:55,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,547 [INFO] Final candidates: []
2025-04-11 17:41:55,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,547 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,643 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:55,643 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(7), np.int64(1)))
2025-04-11 17:41:55,652 [INFO] Final candidates: []
2025-04-11 17:41:55,652 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,661 [INFO] Final candidates: []
2025-04-11 17:41:55,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,661 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,832 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:55,832 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(1), np.int64(2)))
2025-04-11 17:41:55,840 [INFO] Final candidates: []
2025-04-11 17:41:55,841 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,849 [INFO] Final candidates: []
2025-04-11 17:41:55,849 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,850 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:55,920 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:55,920 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:55,929 [INFO] Final candidates: []
2025-04-11 17:41:55,929 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,938 [INFO] Final candidates: []
2025-04-11 17:41:55,938 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:55,938 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,190 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:56,190 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(3), np.int64(3)))
2025-04-11 17:41:56,199 [INFO] Final candidates: []
2025-04-11 17:41:56,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,208 [INFO] Final candidates: []
2025-04-11 17:41:56,208 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,235 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:56,235 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:56,244 [INFO] Final candidates: []
2025-04-11 17:41:56,244 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,253 [INFO] Final candidates: []
2025-04-11 17:41:56,253 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,253 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,426 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:56,427 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:56,435 [INFO] Final candidates: []
2025-04-11 17:41:56,435 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,444 [INFO] Final candidates: []
2025-04-11 17:41:56,444 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,444 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,613 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:56,613 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:56,622 [INFO] Final candidates: []
2025-04-11 17:41:56,622 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,631 [INFO] Final candidates: []
2025-04-11 17:41:56,631 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,631 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,677 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:56,678 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:56,686 [INFO] Final candidates: []
2025-04-11 17:41:56,686 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,695 [INFO] Final candidates: []
2025-04-11 17:41:56,695 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,718 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:56,718 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:56,727 [INFO] Final candidates: []
2025-04-11 17:41:56,727 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,735 [INFO] Final candidates: []
2025-04-11 17:41:56,735 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,736 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,772 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:56,773 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:56,781 [INFO] Final candidates: []
2025-04-11 17:41:56,781 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,791 [INFO] Final candidates: []
2025-04-11 17:41:56,791 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,791 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:56,906 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:56,906 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:56,915 [INFO] Final candidates: []
2025-04-11 17:41:56,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,924 [INFO] Final candidates: []
2025-04-11 17:41:56,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:56,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,062 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:57,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(0), np.int64(0)))
2025-04-11 17:41:57,071 [INFO] Final candidates: []
2025-04-11 17:41:57,071 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,080 [INFO] Final candidates: []
2025-04-11 17:41:57,080 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,080 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,249 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:57,250 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(3), np.int64(5)))
2025-04-11 17:41:57,258 [INFO] Final candidates: []
2025-04-11 17:41:57,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,267 [INFO] Final candidates: []
2025-04-11 17:41:57,267 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,267 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,289 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:57,290 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(2), np.int64(4)))
2025-04-11 17:41:57,290 [DEBUG] board coords: [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5)]
2025-04-11 17:41:57,290 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:41:57,290 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 3), (2, 5)]
2025-04-11 17:41:57,290 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5)] triggers candidate.
2025-04-11 17:41:57,298 [INFO] Final candidates: [(2, 3), (2, 5)]
2025-04-11 17:41:57,299 [INFO] Phase win: Collected 1unique candidate(s):[((2, 3), (2, 5))]
2025-04-11 17:41:57,299 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:41:57,307 [INFO] Final candidates: []
2025-04-11 17:41:57,307 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,308 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,363 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:57,364 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(7), np.int64(2)))
2025-04-11 17:41:57,381 [INFO] Final candidates: []
2025-04-11 17:41:57,381 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,390 [INFO] Final candidates: []
2025-04-11 17:41:57,390 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,390 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,452 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:57,452 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(4), np.int64(5)))
2025-04-11 17:41:57,461 [INFO] Final candidates: []
2025-04-11 17:41:57,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,470 [INFO] Final candidates: []
2025-04-11 17:41:57,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,487 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:57,487 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:57,496 [INFO] Final candidates: []
2025-04-11 17:41:57,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,505 [INFO] Final candidates: []
2025-04-11 17:41:57,505 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,664 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:57,664 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:57,673 [INFO] Final candidates: []
2025-04-11 17:41:57,673 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,681 [INFO] Final candidates: []
2025-04-11 17:41:57,681 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,682 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,687 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:57,687 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:57,697 [INFO] Final candidates: []
2025-04-11 17:41:57,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,706 [INFO] Final candidates: []
2025-04-11 17:41:57,706 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,707 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,716 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:57,716 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(3)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:57,725 [INFO] Final candidates: []
2025-04-11 17:41:57,725 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,736 [INFO] Final candidates: []
2025-04-11 17:41:57,736 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,736 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:57,913 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:57,913 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(0)))
2025-04-11 17:41:57,931 [INFO] Final candidates: []
2025-04-11 17:41:57,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,940 [INFO] Final candidates: []
2025-04-11 17:41:57,940 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:57,940 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,178 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:58,178 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:58,188 [INFO] Final candidates: []
2025-04-11 17:41:58,188 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,196 [INFO] Final candidates: []
2025-04-11 17:41:58,196 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,197 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,229 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:58,230 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(1), np.int64(3)))
2025-04-11 17:41:58,238 [INFO] Final candidates: []
2025-04-11 17:41:58,238 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,247 [INFO] Final candidates: []
2025-04-11 17:41:58,247 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,248 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:58,293 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:41:58,302 [INFO] Final candidates: []
2025-04-11 17:41:58,302 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,311 [INFO] Final candidates: []
2025-04-11 17:41:58,311 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,311 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,542 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:58,542 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:58,551 [INFO] Final candidates: []
2025-04-11 17:41:58,551 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,560 [INFO] Final candidates: []
2025-04-11 17:41:58,560 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,560 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,604 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:58,604 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:58,613 [INFO] Final candidates: []
2025-04-11 17:41:58,613 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,621 [INFO] Final candidates: []
2025-04-11 17:41:58,621 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,622 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,746 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:58,747 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(7), np.int64(3)))
2025-04-11 17:41:58,755 [INFO] Final candidates: []
2025-04-11 17:41:58,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,764 [INFO] Final candidates: []
2025-04-11 17:41:58,764 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,764 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,846 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:58,846 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(6), np.int64(1)))
2025-04-11 17:41:58,855 [INFO] Final candidates: []
2025-04-11 17:41:58,855 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,864 [INFO] Final candidates: []
2025-04-11 17:41:58,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,864 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:41:58,864 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:58,981 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:58,981 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:58,991 [INFO] Final candidates: []
2025-04-11 17:41:58,991 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:58,999 [INFO] Final candidates: []
2025-04-11 17:41:58,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,000 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,027 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,027 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(2), np.int64(3)))
2025-04-11 17:41:59,036 [INFO] Final candidates: []
2025-04-11 17:41:59,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,046 [INFO] Final candidates: []
2025-04-11 17:41:59,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,046 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,291 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,291 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:59,300 [INFO] Final candidates: []
2025-04-11 17:41:59,300 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,309 [INFO] Final candidates: []
2025-04-11 17:41:59,309 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,309 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,395 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,395 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:59,408 [INFO] Final candidates: []
2025-04-11 17:41:59,408 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,430 [INFO] Final candidates: []
2025-04-11 17:41:59,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,431 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,605 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,606 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:59,614 [INFO] Final candidates: []
2025-04-11 17:41:59,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,623 [INFO] Final candidates: []
2025-04-11 17:41:59,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,663 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,663 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(0), np.int64(3)))
2025-04-11 17:41:59,672 [INFO] Final candidates: []
2025-04-11 17:41:59,672 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,680 [INFO] Final candidates: []
2025-04-11 17:41:59,680 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,681 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,688 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,688 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(6), np.int64(2)))
2025-04-11 17:41:59,697 [INFO] Final candidates: []
2025-04-11 17:41:59,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,706 [INFO] Final candidates: []
2025-04-11 17:41:59,706 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,815 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:41:59,816 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(7), np.int64(0)))
2025-04-11 17:41:59,833 [INFO] Final candidates: []
2025-04-11 17:41:59,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,851 [INFO] Final candidates: []
2025-04-11 17:41:59,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,890 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,890 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(6), np.int64(4)))
2025-04-11 17:41:59,899 [INFO] Final candidates: []
2025-04-11 17:41:59,899 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,908 [INFO] Final candidates: []
2025-04-11 17:41:59,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,908 [INFO] Default policy: Starting random playout.
2025-04-11 17:41:59,923 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:41:59,923 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(5), np.int64(6)))
2025-04-11 17:41:59,932 [INFO] Final candidates: []
2025-04-11 17:41:59,932 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,941 [INFO] Final candidates: []
2025-04-11 17:41:59,941 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:41:59,942 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,266 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,266 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(7), np.int64(3)))
2025-04-11 17:42:00,275 [INFO] Final candidates: []
2025-04-11 17:42:00,275 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,284 [INFO] Final candidates: []
2025-04-11 17:42:00,284 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,284 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,384 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:00,384 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:00,393 [INFO] Final candidates: []
2025-04-11 17:42:00,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,402 [INFO] Final candidates: []
2025-04-11 17:42:00,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,431 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,431 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(4)), (np.int64(1), np.int64(2)))
2025-04-11 17:42:00,440 [INFO] Final candidates: []
2025-04-11 17:42:00,440 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,449 [INFO] Final candidates: []
2025-04-11 17:42:00,449 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,449 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,502 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:00,502 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:00,520 [INFO] Final candidates: []
2025-04-11 17:42:00,520 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,528 [INFO] Final candidates: []
2025-04-11 17:42:00,528 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,529 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,566 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,566 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(7), np.int64(2)))
2025-04-11 17:42:00,575 [INFO] Final candidates: []
2025-04-11 17:42:00,575 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,584 [INFO] Final candidates: []
2025-04-11 17:42:00,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,585 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,665 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,665 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(2), np.int64(2)))
2025-04-11 17:42:00,674 [INFO] Final candidates: []
2025-04-11 17:42:00,674 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,683 [INFO] Final candidates: []
2025-04-11 17:42:00,683 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,684 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,803 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(6), np.int64(2)))
2025-04-11 17:42:00,812 [INFO] Final candidates: []
2025-04-11 17:42:00,812 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,820 [INFO] Final candidates: []
2025-04-11 17:42:00,820 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,821 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,858 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,858 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(7), np.int64(1)))
2025-04-11 17:42:00,869 [INFO] Final candidates: []
2025-04-11 17:42:00,869 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,878 [INFO] Final candidates: []
2025-04-11 17:42:00,878 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,878 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,891 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,891 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(7), np.int64(3)))
2025-04-11 17:42:00,900 [INFO] Final candidates: []
2025-04-11 17:42:00,900 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,908 [INFO] Final candidates: []
2025-04-11 17:42:00,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,909 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:00,934 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:00,934 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:00,943 [INFO] Final candidates: []
2025-04-11 17:42:00,943 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,952 [INFO] Final candidates: []
2025-04-11 17:42:00,952 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:00,952 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,136 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:01,136 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(6), np.int64(5)))
2025-04-11 17:42:01,145 [INFO] Final candidates: []
2025-04-11 17:42:01,145 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,154 [INFO] Final candidates: []
2025-04-11 17:42:01,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,154 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,270 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:01,270 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(7), np.int64(2)))
2025-04-11 17:42:01,279 [INFO] Final candidates: []
2025-04-11 17:42:01,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,287 [INFO] Final candidates: []
2025-04-11 17:42:01,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,288 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,315 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:01,315 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:01,324 [INFO] Final candidates: []
2025-04-11 17:42:01,324 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,333 [INFO] Final candidates: []
2025-04-11 17:42:01,333 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,333 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,383 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:01,383 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(7), np.int64(4)))
2025-04-11 17:42:01,392 [INFO] Final candidates: []
2025-04-11 17:42:01,392 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,401 [INFO] Final candidates: []
2025-04-11 17:42:01,401 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,452 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:01,452 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(7), np.int64(3)))
2025-04-11 17:42:01,461 [INFO] Final candidates: []
2025-04-11 17:42:01,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,470 [INFO] Final candidates: []
2025-04-11 17:42:01,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,470 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,510 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:01,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(8), np.int64(3)))
2025-04-11 17:42:01,519 [INFO] Final candidates: []
2025-04-11 17:42:01,519 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,528 [INFO] Final candidates: []
2025-04-11 17:42:01,528 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,528 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,585 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:01,585 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(3)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:01,594 [INFO] Final candidates: []
2025-04-11 17:42:01,594 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,603 [INFO] Final candidates: []
2025-04-11 17:42:01,603 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:01,842 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(1), np.int64(2)))
2025-04-11 17:42:01,857 [INFO] Final candidates: []
2025-04-11 17:42:01,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,869 [INFO] Final candidates: []
2025-04-11 17:42:01,869 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,869 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,903 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:01,903 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:01,912 [INFO] Final candidates: []
2025-04-11 17:42:01,913 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,921 [INFO] Final candidates: []
2025-04-11 17:42:01,921 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,922 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:01,943 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:01,944 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(6), np.int64(2)))
2025-04-11 17:42:01,952 [INFO] Final candidates: []
2025-04-11 17:42:01,953 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,961 [INFO] Final candidates: []
2025-04-11 17:42:01,961 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:01,962 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,004 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:02,004 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(7), np.int64(2)))
2025-04-11 17:42:02,012 [INFO] Final candidates: []
2025-04-11 17:42:02,012 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,021 [INFO] Final candidates: []
2025-04-11 17:42:02,021 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,022 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,189 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:02,189 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:02,202 [INFO] Final candidates: []
2025-04-11 17:42:02,202 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,211 [INFO] Final candidates: []
2025-04-11 17:42:02,211 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,211 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,235 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:02,235 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:02,244 [INFO] Final candidates: []
2025-04-11 17:42:02,244 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,252 [INFO] Final candidates: []
2025-04-11 17:42:02,252 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,253 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,397 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:02,397 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(6), np.int64(1)))
2025-04-11 17:42:02,406 [INFO] Final candidates: []
2025-04-11 17:42:02,406 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,415 [INFO] Final candidates: []
2025-04-11 17:42:02,415 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,415 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,538 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:02,538 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:02,551 [INFO] Final candidates: []
2025-04-11 17:42:02,551 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,560 [INFO] Final candidates: []
2025-04-11 17:42:02,560 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,560 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,651 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:02,652 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(6), np.int64(5)))
2025-04-11 17:42:02,663 [INFO] Final candidates: []
2025-04-11 17:42:02,663 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,672 [INFO] Final candidates: []
2025-04-11 17:42:02,672 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,672 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,681 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:02,681 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(7), np.int64(1)))
2025-04-11 17:42:02,690 [INFO] Final candidates: []
2025-04-11 17:42:02,690 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,700 [INFO] Final candidates: []
2025-04-11 17:42:02,700 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,855 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:02,856 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:02,867 [INFO] Final candidates: []
2025-04-11 17:42:02,867 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,876 [INFO] Final candidates: []
2025-04-11 17:42:02,876 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,877 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,923 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:02,923 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(1), np.int64(3)))
2025-04-11 17:42:02,932 [INFO] Final candidates: []
2025-04-11 17:42:02,932 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,941 [INFO] Final candidates: []
2025-04-11 17:42:02,941 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,941 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:02,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:02,971 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(1)))
2025-04-11 17:42:02,981 [INFO] Final candidates: []
2025-04-11 17:42:02,981 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,991 [INFO] Final candidates: []
2025-04-11 17:42:02,991 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:02,991 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,143 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:03,143 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:03,152 [INFO] Final candidates: []
2025-04-11 17:42:03,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,161 [INFO] Final candidates: []
2025-04-11 17:42:03,161 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,161 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,246 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:03,246 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:03,255 [INFO] Final candidates: []
2025-04-11 17:42:03,255 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,263 [INFO] Final candidates: []
2025-04-11 17:42:03,264 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,264 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,449 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:03,449 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:03,458 [INFO] Final candidates: []
2025-04-11 17:42:03,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,467 [INFO] Final candidates: []
2025-04-11 17:42:03,467 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,467 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,518 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:03,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:03,527 [INFO] Final candidates: []
2025-04-11 17:42:03,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,535 [INFO] Final candidates: []
2025-04-11 17:42:03,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,536 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,614 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:03,614 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(3)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:03,623 [INFO] Final candidates: []
2025-04-11 17:42:03,623 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,631 [INFO] Final candidates: []
2025-04-11 17:42:03,632 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,632 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,758 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:03,758 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:03,759 [DEBUG] board coords: [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5)]
2025-04-11 17:42:03,759 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:42:03,759 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 4), (2, 5)]
2025-04-11 17:42:03,759 [DEBUG] check_window_intermediate_custom (only one inserted(2, 4)): For L=6, window [2 2 2 2 0 0] with coords [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5)] triggers candidate.
2025-04-11 17:42:03,768 [INFO] Final candidates: [(2, 4)]
2025-04-11 17:42:03,768 [INFO] Phase win: Found only one candidate: (2, 4)
2025-04-11 17:42:03,768 [INFO] Phase win: Collected 9unique candidate(s):[((2, 4), (np.int64(3), np.int64(4))), ((2, 4), (np.int64(1), np.int64(5))), ((2, 4), (np.int64(1), np.int64(3))), ((2, 4), (np.int64(2), np.int64(6))), ((2, 4), (np.int64(3), np.int64(3))), ((2, 4), (np.int64(2), np.int64(5))), ((2, 4), (np.int64(3), np.int64(5))), ((2, 4), (np.int64(0), np.int64(4))), ((2, 4), (np.int64(1), np.int64(4)))]
2025-04-11 17:42:03,768 [INFO] Phase 1 (immediate win): 9 candidate(s) found.
2025-04-11 17:42:03,777 [INFO] Final candidates: []
2025-04-11 17:42:03,777 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,777 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,782 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:03,782 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:03,791 [INFO] Final candidates: []
2025-04-11 17:42:03,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,800 [INFO] Final candidates: []
2025-04-11 17:42:03,800 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,800 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,843 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:03,843 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:03,857 [INFO] Final candidates: []
2025-04-11 17:42:03,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,873 [INFO] Final candidates: []
2025-04-11 17:42:03,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,874 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:03,902 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:03,902 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:03,911 [INFO] Final candidates: []
2025-04-11 17:42:03,911 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,919 [INFO] Final candidates: []
2025-04-11 17:42:03,919 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:03,920 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:04,022 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:04,022 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:42:04,022 [INFO] MCTS selected move: E3,D8
2025-04-11 17:42:04,022 [INFO] ===============NEW MOVE================
2025-04-11 17:42:04,212 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:42:04,221 [INFO] Final candidates: []
2025-04-11 17:42:04,221 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,231 [INFO] Final candidates: []
2025-04-11 17:42:04,231 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,231 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:42:04,232 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:42:04,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(7), np.int64(2)))
2025-04-11 17:42:04,240 [INFO] Final candidates: []
2025-04-11 17:42:04,240 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,249 [INFO] Final candidates: []
2025-04-11 17:42:04,249 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,250 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:42:04,250 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:04,348 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:04,348 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:04,357 [INFO] Final candidates: []
2025-04-11 17:42:04,357 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,366 [INFO] Final candidates: []
2025-04-11 17:42:04,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,367 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:04,568 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:04,568 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(2)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:04,577 [INFO] Final candidates: []
2025-04-11 17:42:04,577 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,585 [INFO] Final candidates: []
2025-04-11 17:42:04,585 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,586 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:04,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:04,748 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:04,757 [INFO] Final candidates: []
2025-04-11 17:42:04,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,765 [INFO] Final candidates: []
2025-04-11 17:42:04,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:04,810 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:04,811 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:04,820 [INFO] Final candidates: []
2025-04-11 17:42:04,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,828 [INFO] Final candidates: []
2025-04-11 17:42:04,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:04,860 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:04,860 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:04,869 [INFO] Final candidates: []
2025-04-11 17:42:04,869 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,877 [INFO] Final candidates: []
2025-04-11 17:42:04,877 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,878 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:04,923 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:04,924 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:04,932 [INFO] Final candidates: []
2025-04-11 17:42:04,932 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,941 [INFO] Final candidates: []
2025-04-11 17:42:04,941 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:04,941 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,004 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:05,005 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:05,015 [INFO] Final candidates: []
2025-04-11 17:42:05,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,024 [INFO] Final candidates: []
2025-04-11 17:42:05,024 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,024 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,083 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:05,083 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:05,092 [INFO] Final candidates: []
2025-04-11 17:42:05,092 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,100 [INFO] Final candidates: []
2025-04-11 17:42:05,101 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,101 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,174 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:05,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(4)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:05,183 [INFO] Final candidates: []
2025-04-11 17:42:05,183 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,192 [INFO] Final candidates: []
2025-04-11 17:42:05,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,193 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,283 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:05,283 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(2), np.int64(16)))
2025-04-11 17:42:05,292 [INFO] Final candidates: []
2025-04-11 17:42:05,292 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,300 [INFO] Final candidates: []
2025-04-11 17:42:05,300 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,301 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,342 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:05,342 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(12)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:05,351 [INFO] Final candidates: []
2025-04-11 17:42:05,351 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,359 [INFO] Final candidates: []
2025-04-11 17:42:05,359 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,360 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,600 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:05,600 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:05,609 [INFO] Final candidates: []
2025-04-11 17:42:05,609 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,617 [INFO] Final candidates: []
2025-04-11 17:42:05,617 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,618 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,648 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:05,649 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:05,658 [INFO] Final candidates: []
2025-04-11 17:42:05,658 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,666 [INFO] Final candidates: []
2025-04-11 17:42:05,666 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,667 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,724 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:05,724 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(10), np.int64(3)))
2025-04-11 17:42:05,733 [INFO] Final candidates: []
2025-04-11 17:42:05,733 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,741 [INFO] Final candidates: []
2025-04-11 17:42:05,741 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,742 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,773 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:05,773 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(1), np.int64(3)))
2025-04-11 17:42:05,782 [INFO] Final candidates: []
2025-04-11 17:42:05,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,791 [INFO] Final candidates: []
2025-04-11 17:42:05,791 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,791 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,838 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:05,838 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:05,847 [INFO] Final candidates: []
2025-04-11 17:42:05,847 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,856 [INFO] Final candidates: []
2025-04-11 17:42:05,856 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,856 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,931 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:05,931 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:05,941 [INFO] Final candidates: []
2025-04-11 17:42:05,941 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,949 [INFO] Final candidates: []
2025-04-11 17:42:05,949 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:05,950 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:05,983 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:05,983 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:05,994 [INFO] Final candidates: []
2025-04-11 17:42:05,994 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,003 [INFO] Final candidates: []
2025-04-11 17:42:06,003 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,004 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:06,115 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:06,116 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:06,125 [INFO] Final candidates: []
2025-04-11 17:42:06,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,133 [INFO] Final candidates: []
2025-04-11 17:42:06,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:06,211 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:06,212 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(4)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:06,221 [INFO] Final candidates: []
2025-04-11 17:42:06,221 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,229 [INFO] Final candidates: []
2025-04-11 17:42:06,229 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,230 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:06,361 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:06,362 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:06,370 [INFO] Final candidates: []
2025-04-11 17:42:06,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,382 [INFO] Final candidates: []
2025-04-11 17:42:06,382 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:06,518 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:06,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(4)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:06,527 [INFO] Final candidates: []
2025-04-11 17:42:06,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,535 [INFO] Final candidates: []
2025-04-11 17:42:06,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,536 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:06,589 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:06,589 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:06,598 [INFO] Final candidates: []
2025-04-11 17:42:06,598 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,606 [INFO] Final candidates: []
2025-04-11 17:42:06,606 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,607 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:06,766 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:06,767 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:06,775 [INFO] Final candidates: []
2025-04-11 17:42:06,776 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,787 [INFO] Final candidates: []
2025-04-11 17:42:06,787 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,787 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:06,949 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:06,950 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:06,958 [INFO] Final candidates: []
2025-04-11 17:42:06,958 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,967 [INFO] Final candidates: []
2025-04-11 17:42:06,967 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:06,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,055 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:07,055 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:07,064 [INFO] Final candidates: []
2025-04-11 17:42:07,064 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,073 [INFO] Final candidates: []
2025-04-11 17:42:07,073 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,073 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:07,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:07,111 [INFO] Final candidates: []
2025-04-11 17:42:07,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,119 [INFO] Final candidates: []
2025-04-11 17:42:07,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:07,381 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:07,389 [INFO] Final candidates: []
2025-04-11 17:42:07,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,398 [INFO] Final candidates: []
2025-04-11 17:42:07,398 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,399 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,490 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:07,490 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:07,499 [INFO] Final candidates: []
2025-04-11 17:42:07,499 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,507 [INFO] Final candidates: []
2025-04-11 17:42:07,507 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,507 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,536 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:07,536 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(7), np.int64(2)))
2025-04-11 17:42:07,546 [INFO] Final candidates: []
2025-04-11 17:42:07,546 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,554 [INFO] Final candidates: []
2025-04-11 17:42:07,554 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,555 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,663 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:07,663 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:07,672 [INFO] Final candidates: []
2025-04-11 17:42:07,672 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,680 [INFO] Final candidates: []
2025-04-11 17:42:07,680 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,681 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,731 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:07,731 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:07,740 [INFO] Final candidates: []
2025-04-11 17:42:07,740 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,749 [INFO] Final candidates: []
2025-04-11 17:42:07,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,749 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:07,789 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:07,789 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(3), np.int64(3)))
2025-04-11 17:42:07,798 [INFO] Final candidates: []
2025-04-11 17:42:07,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,807 [INFO] Final candidates: []
2025-04-11 17:42:07,807 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:07,807 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,020 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:08,020 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(8), np.int64(2)))
2025-04-11 17:42:08,028 [INFO] Final candidates: []
2025-04-11 17:42:08,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,040 [INFO] Final candidates: []
2025-04-11 17:42:08,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,040 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,102 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:08,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:08,111 [INFO] Final candidates: []
2025-04-11 17:42:08,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,120 [INFO] Final candidates: []
2025-04-11 17:42:08,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,272 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:08,272 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:08,281 [INFO] Final candidates: []
2025-04-11 17:42:08,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,290 [INFO] Final candidates: []
2025-04-11 17:42:08,290 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,361 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:08,362 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(4)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:08,373 [INFO] Final candidates: []
2025-04-11 17:42:08,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,381 [INFO] Final candidates: []
2025-04-11 17:42:08,382 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,382 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,552 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:08,553 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(6), np.int64(5)))
2025-04-11 17:42:08,561 [INFO] Final candidates: []
2025-04-11 17:42:08,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,570 [INFO] Final candidates: []
2025-04-11 17:42:08,570 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,768 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:08,769 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:08,777 [INFO] Final candidates: []
2025-04-11 17:42:08,777 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,786 [INFO] Final candidates: []
2025-04-11 17:42:08,786 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,786 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,837 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:08,837 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:08,848 [INFO] Final candidates: []
2025-04-11 17:42:08,848 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,865 [INFO] Final candidates: []
2025-04-11 17:42:08,865 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:08,976 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:08,976 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:08,985 [INFO] Final candidates: []
2025-04-11 17:42:08,985 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,994 [INFO] Final candidates: []
2025-04-11 17:42:08,994 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:08,994 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,070 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:09,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:09,079 [INFO] Final candidates: []
2025-04-11 17:42:09,079 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,087 [INFO] Final candidates: []
2025-04-11 17:42:09,087 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,088 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,239 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:09,239 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:09,248 [INFO] Final candidates: []
2025-04-11 17:42:09,248 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,257 [INFO] Final candidates: []
2025-04-11 17:42:09,257 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,257 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,282 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:09,282 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(4)), (np.int64(6), np.int64(1)))
2025-04-11 17:42:09,291 [INFO] Final candidates: []
2025-04-11 17:42:09,291 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,299 [INFO] Final candidates: []
2025-04-11 17:42:09,299 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,309 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:09,309 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:09,318 [INFO] Final candidates: []
2025-04-11 17:42:09,318 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,327 [INFO] Final candidates: []
2025-04-11 17:42:09,327 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,327 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:09,552 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(4), np.int64(5)))
2025-04-11 17:42:09,561 [INFO] Final candidates: []
2025-04-11 17:42:09,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,569 [INFO] Final candidates: []
2025-04-11 17:42:09,569 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,580 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:09,580 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:09,589 [INFO] Final candidates: []
2025-04-11 17:42:09,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,597 [INFO] Final candidates: []
2025-04-11 17:42:09,597 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,598 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,673 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:09,673 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:09,682 [INFO] Final candidates: []
2025-04-11 17:42:09,682 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,690 [INFO] Final candidates: []
2025-04-11 17:42:09,690 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,820 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:09,820 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:09,829 [INFO] Final candidates: []
2025-04-11 17:42:09,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,838 [INFO] Final candidates: []
2025-04-11 17:42:09,838 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,838 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,863 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:09,863 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(2)))
2025-04-11 17:42:09,871 [INFO] Final candidates: []
2025-04-11 17:42:09,872 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,880 [INFO] Final candidates: []
2025-04-11 17:42:09,880 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,881 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:42:09,881 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:09,977 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:09,978 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:09,986 [INFO] Final candidates: []
2025-04-11 17:42:09,986 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,995 [INFO] Final candidates: []
2025-04-11 17:42:09,995 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:09,995 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,170 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:10,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:10,181 [INFO] Final candidates: []
2025-04-11 17:42:10,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,190 [INFO] Final candidates: []
2025-04-11 17:42:10,190 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,331 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:10,332 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:10,340 [INFO] Final candidates: []
2025-04-11 17:42:10,340 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,349 [INFO] Final candidates: []
2025-04-11 17:42:10,349 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,384 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:10,384 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:10,393 [INFO] Final candidates: []
2025-04-11 17:42:10,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,401 [INFO] Final candidates: []
2025-04-11 17:42:10,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,626 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:10,627 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(4)), (np.int64(2), np.int64(13)))
2025-04-11 17:42:10,635 [INFO] Final candidates: []
2025-04-11 17:42:10,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,644 [INFO] Final candidates: []
2025-04-11 17:42:10,644 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,644 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,676 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:10,676 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:10,685 [INFO] Final candidates: []
2025-04-11 17:42:10,685 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,694 [INFO] Final candidates: []
2025-04-11 17:42:10,694 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,739 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:10,740 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:10,753 [INFO] Final candidates: []
2025-04-11 17:42:10,753 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,762 [INFO] Final candidates: []
2025-04-11 17:42:10,762 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,762 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,793 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:10,793 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(4), np.int64(6)))
2025-04-11 17:42:10,802 [INFO] Final candidates: []
2025-04-11 17:42:10,802 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,810 [INFO] Final candidates: []
2025-04-11 17:42:10,810 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,811 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:10,906 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:10,906 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(8), np.int64(2)))
2025-04-11 17:42:10,915 [INFO] Final candidates: []
2025-04-11 17:42:10,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,923 [INFO] Final candidates: []
2025-04-11 17:42:10,923 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:10,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:11,064 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:11,064 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(3), np.int64(5)))
2025-04-11 17:42:11,073 [INFO] Final candidates: []
2025-04-11 17:42:11,073 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,081 [INFO] Final candidates: []
2025-04-11 17:42:11,081 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,082 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:11,278 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:11,278 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(3)))
2025-04-11 17:42:11,287 [INFO] Final candidates: []
2025-04-11 17:42:11,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,295 [INFO] Final candidates: []
2025-04-11 17:42:11,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:11,425 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:11,425 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(8), np.int64(5)))
2025-04-11 17:42:11,430 [DEBUG] board coords: [(5, 2), (6, 3), (7, 4), (8, 5), (9, 6), (10, 7)]
2025-04-11 17:42:11,430 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:42:11,430 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 6), (10, 7)]
2025-04-11 17:42:11,430 [DEBUG] check_window_intermediate_custom (only one inserted(9, 6)): For L=6, window [1 1 1 1 0 0] with coords [(5, 2), (6, 3), (7, 4), (8, 5), (9, 6), (10, 7)] triggers candidate.
2025-04-11 17:42:11,440 [INFO] Final candidates: [(9, 6)]
2025-04-11 17:42:11,440 [INFO] Phase win: Found only one candidate: (9, 6)
2025-04-11 17:42:11,440 [INFO] Phase win: Collected 11unique candidate(s):[((9, 6), (np.int64(8), np.int64(7))), ((9, 6), (np.int64(10), np.int64(6))), ((9, 6), (np.int64(9), np.int64(8))), ((9, 6), (np.int64(9), np.int64(5))), ((9, 6), (np.int64(10), np.int64(7))), ((9, 6), (np.int64(11), np.int64(6))), ((9, 6), (np.int64(7), np.int64(6))), ((9, 6), (np.int64(8), np.int64(6))), ((9, 6), (np.int64(10), np.int64(5))), ((9, 6), (np.int64(9), np.int64(7))), ((9, 6), (np.int64(9), np.int64(4)))]
2025-04-11 17:42:11,440 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:42:11,456 [INFO] Final candidates: []
2025-04-11 17:42:11,457 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,457 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:11,580 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:11,580 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(4), np.int64(5)))
2025-04-11 17:42:11,589 [INFO] Final candidates: []
2025-04-11 17:42:11,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,598 [INFO] Final candidates: []
2025-04-11 17:42:11,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,598 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:11,825 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:11,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(8), np.int64(5)))
2025-04-11 17:42:11,834 [INFO] Final candidates: []
2025-04-11 17:42:11,834 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,843 [INFO] Final candidates: []
2025-04-11 17:42:11,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:11,921 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:11,921 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:11,930 [INFO] Final candidates: []
2025-04-11 17:42:11,930 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,938 [INFO] Final candidates: []
2025-04-11 17:42:11,938 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:11,981 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:11,981 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:11,990 [INFO] Final candidates: []
2025-04-11 17:42:11,990 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,999 [INFO] Final candidates: []
2025-04-11 17:42:11,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:11,999 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:12,235 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:12,235 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:12,244 [INFO] Final candidates: []
2025-04-11 17:42:12,244 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,252 [INFO] Final candidates: []
2025-04-11 17:42:12,252 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,253 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:12,321 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:12,322 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:12,330 [INFO] Final candidates: []
2025-04-11 17:42:12,330 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,339 [INFO] Final candidates: []
2025-04-11 17:42:12,339 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:12,445 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:12,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:12,456 [INFO] Final candidates: []
2025-04-11 17:42:12,456 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,465 [INFO] Final candidates: []
2025-04-11 17:42:12,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:12,725 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:12,726 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:12,734 [INFO] Final candidates: []
2025-04-11 17:42:12,734 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,743 [INFO] Final candidates: []
2025-04-11 17:42:12,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,743 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:12,830 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:12,830 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:12,839 [INFO] Final candidates: []
2025-04-11 17:42:12,839 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,848 [INFO] Final candidates: []
2025-04-11 17:42:12,848 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:12,884 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:12,884 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:12,893 [INFO] Final candidates: []
2025-04-11 17:42:12,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,904 [INFO] Final candidates: []
2025-04-11 17:42:12,904 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:12,905 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:13,048 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:13,048 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:13,057 [INFO] Final candidates: []
2025-04-11 17:42:13,057 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,066 [INFO] Final candidates: []
2025-04-11 17:42:13,066 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,066 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:13,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:13,126 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:13,136 [INFO] Final candidates: []
2025-04-11 17:42:13,136 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,147 [INFO] Final candidates: []
2025-04-11 17:42:13,147 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,147 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:13,214 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:13,214 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:13,223 [INFO] Final candidates: []
2025-04-11 17:42:13,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,231 [INFO] Final candidates: []
2025-04-11 17:42:13,232 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,232 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:13,370 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:13,370 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(3), np.int64(5)))
2025-04-11 17:42:13,379 [INFO] Final candidates: []
2025-04-11 17:42:13,379 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,387 [INFO] Final candidates: []
2025-04-11 17:42:13,388 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,388 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:13,541 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:13,541 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:13,550 [INFO] Final candidates: []
2025-04-11 17:42:13,550 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,559 [INFO] Final candidates: []
2025-04-11 17:42:13,559 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,559 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:13,840 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:13,840 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(1)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:13,849 [INFO] Final candidates: []
2025-04-11 17:42:13,849 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,862 [INFO] Final candidates: []
2025-04-11 17:42:13,862 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,862 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:13,931 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:13,932 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:13,940 [INFO] Final candidates: []
2025-04-11 17:42:13,940 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,949 [INFO] Final candidates: []
2025-04-11 17:42:13,949 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:13,950 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:14,076 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:14,076 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:14,086 [INFO] Final candidates: []
2025-04-11 17:42:14,086 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,095 [INFO] Final candidates: []
2025-04-11 17:42:14,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,095 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:14,279 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:14,279 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:14,288 [INFO] Final candidates: []
2025-04-11 17:42:14,288 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,296 [INFO] Final candidates: []
2025-04-11 17:42:14,296 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:14,416 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:14,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:14,425 [INFO] Final candidates: []
2025-04-11 17:42:14,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,434 [INFO] Final candidates: []
2025-04-11 17:42:14,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,434 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:14,552 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:14,553 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:14,561 [INFO] Final candidates: []
2025-04-11 17:42:14,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,570 [INFO] Final candidates: []
2025-04-11 17:42:14,570 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:14,743 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:14,743 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:14,752 [INFO] Final candidates: []
2025-04-11 17:42:14,752 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,760 [INFO] Final candidates: []
2025-04-11 17:42:14,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:14,834 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:14,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(2)), (np.int64(4), np.int64(14)))
2025-04-11 17:42:14,843 [INFO] Final candidates: []
2025-04-11 17:42:14,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,852 [INFO] Final candidates: []
2025-04-11 17:42:14,852 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:14,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,078 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:15,079 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(6), np.int64(2)))
2025-04-11 17:42:15,087 [INFO] Final candidates: []
2025-04-11 17:42:15,087 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,096 [INFO] Final candidates: []
2025-04-11 17:42:15,096 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,096 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,202 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:15,202 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(1), np.int64(3)))
2025-04-11 17:42:15,211 [INFO] Final candidates: []
2025-04-11 17:42:15,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,219 [INFO] Final candidates: []
2025-04-11 17:42:15,219 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,240 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:15,240 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(2)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:15,249 [INFO] Final candidates: []
2025-04-11 17:42:15,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,259 [INFO] Final candidates: []
2025-04-11 17:42:15,259 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:15,406 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(2), np.int64(16)))
2025-04-11 17:42:15,415 [INFO] Final candidates: []
2025-04-11 17:42:15,415 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,423 [INFO] Final candidates: []
2025-04-11 17:42:15,423 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,424 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,491 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:15,492 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(9), np.int64(2)))
2025-04-11 17:42:15,500 [INFO] Final candidates: []
2025-04-11 17:42:15,500 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,509 [INFO] Final candidates: []
2025-04-11 17:42:15,509 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,509 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:15,699 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(4)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:15,708 [INFO] Final candidates: []
2025-04-11 17:42:15,708 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,716 [INFO] Final candidates: []
2025-04-11 17:42:15,717 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,855 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:15,856 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(6), np.int64(5)))
2025-04-11 17:42:15,864 [INFO] Final candidates: []
2025-04-11 17:42:15,865 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,873 [INFO] Final candidates: []
2025-04-11 17:42:15,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:15,874 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:15,993 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:15,993 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(3), np.int64(13)))
2025-04-11 17:42:16,002 [INFO] Final candidates: []
2025-04-11 17:42:16,002 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,011 [INFO] Final candidates: []
2025-04-11 17:42:16,011 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,011 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:16,117 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:16,118 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:16,126 [INFO] Final candidates: []
2025-04-11 17:42:16,126 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,135 [INFO] Final candidates: []
2025-04-11 17:42:16,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,135 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:16,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:16,293 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(4)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:16,304 [INFO] Final candidates: []
2025-04-11 17:42:16,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,312 [INFO] Final candidates: []
2025-04-11 17:42:16,312 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:16,387 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:16,388 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:16,396 [INFO] Final candidates: []
2025-04-11 17:42:16,396 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,405 [INFO] Final candidates: []
2025-04-11 17:42:16,405 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:16,465 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:16,465 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:16,474 [INFO] Final candidates: []
2025-04-11 17:42:16,474 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,484 [INFO] Final candidates: []
2025-04-11 17:42:16,484 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:16,653 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:16,653 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(8), np.int64(2)))
2025-04-11 17:42:16,662 [INFO] Final candidates: []
2025-04-11 17:42:16,662 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,671 [INFO] Final candidates: []
2025-04-11 17:42:16,671 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,672 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:16,887 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:16,888 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(7), np.int64(1)))
2025-04-11 17:42:16,896 [INFO] Final candidates: []
2025-04-11 17:42:16,896 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,905 [INFO] Final candidates: []
2025-04-11 17:42:16,905 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:16,905 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:16,955 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:16,955 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:42:16,955 [INFO] MCTS selected move: B7,C8
2025-04-11 17:42:16,955 [INFO] ===============NEW MOVE================
2025-04-11 17:42:17,165 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:42:17,174 [INFO] Final candidates: []
2025-04-11 17:42:17,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,182 [INFO] Final candidates: []
2025-04-11 17:42:17,183 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,183 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:42:17,183 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:42:17,183 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:17,192 [INFO] Final candidates: []
2025-04-11 17:42:17,192 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,200 [INFO] Final candidates: []
2025-04-11 17:42:17,200 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,201 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:42:17,201 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:17,351 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:17,351 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(4), np.int64(5)))
2025-04-11 17:42:17,360 [INFO] Final candidates: []
2025-04-11 17:42:17,360 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,368 [INFO] Final candidates: []
2025-04-11 17:42:17,368 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,369 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:17,509 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:17,509 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:17,519 [INFO] Final candidates: []
2025-04-11 17:42:17,519 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,528 [INFO] Final candidates: []
2025-04-11 17:42:17,528 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,528 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:17,697 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:17,697 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(1)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:17,706 [INFO] Final candidates: []
2025-04-11 17:42:17,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,715 [INFO] Final candidates: []
2025-04-11 17:42:17,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,715 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:17,927 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:17,927 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:17,936 [INFO] Final candidates: []
2025-04-11 17:42:17,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,944 [INFO] Final candidates: []
2025-04-11 17:42:17,944 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:17,945 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:18,171 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:18,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:18,179 [INFO] Final candidates: []
2025-04-11 17:42:18,179 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,188 [INFO] Final candidates: []
2025-04-11 17:42:18,188 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,188 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:18,301 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:18,301 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:18,310 [INFO] Final candidates: []
2025-04-11 17:42:18,310 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,318 [INFO] Final candidates: []
2025-04-11 17:42:18,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:18,487 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:18,487 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(1)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:18,496 [INFO] Final candidates: []
2025-04-11 17:42:18,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,504 [INFO] Final candidates: []
2025-04-11 17:42:18,504 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:18,576 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:18,576 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(0), np.int64(4)))
2025-04-11 17:42:18,585 [INFO] Final candidates: []
2025-04-11 17:42:18,586 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,594 [INFO] Final candidates: []
2025-04-11 17:42:18,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,594 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:18,676 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:18,676 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:18,685 [INFO] Final candidates: []
2025-04-11 17:42:18,685 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,693 [INFO] Final candidates: []
2025-04-11 17:42:18,694 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:18,735 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:18,735 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(1), np.int64(3)))
2025-04-11 17:42:18,744 [INFO] Final candidates: []
2025-04-11 17:42:18,744 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,752 [INFO] Final candidates: []
2025-04-11 17:42:18,752 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,753 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:18,951 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:18,951 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:18,960 [INFO] Final candidates: []
2025-04-11 17:42:18,960 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,970 [INFO] Final candidates: []
2025-04-11 17:42:18,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:18,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:19,049 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:19,049 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:19,058 [INFO] Final candidates: []
2025-04-11 17:42:19,058 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,066 [INFO] Final candidates: []
2025-04-11 17:42:19,066 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,067 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:19,187 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:19,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:19,207 [INFO] Final candidates: []
2025-04-11 17:42:19,208 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,216 [INFO] Final candidates: []
2025-04-11 17:42:19,216 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,216 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:19,363 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:19,363 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(1), np.int64(2)))
2025-04-11 17:42:19,372 [INFO] Final candidates: []
2025-04-11 17:42:19,372 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,380 [INFO] Final candidates: []
2025-04-11 17:42:19,380 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:19,651 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:19,651 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:19,668 [INFO] Final candidates: []
2025-04-11 17:42:19,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,676 [INFO] Final candidates: []
2025-04-11 17:42:19,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,677 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:19,697 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:19,697 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:19,708 [INFO] Final candidates: []
2025-04-11 17:42:19,708 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,717 [INFO] Final candidates: []
2025-04-11 17:42:19,717 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:19,906 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:19,906 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(2), np.int64(13)))
2025-04-11 17:42:19,915 [INFO] Final candidates: []
2025-04-11 17:42:19,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,925 [INFO] Final candidates: []
2025-04-11 17:42:19,925 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:19,926 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:20,127 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:20,128 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:20,141 [INFO] Final candidates: []
2025-04-11 17:42:20,141 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,153 [INFO] Final candidates: []
2025-04-11 17:42:20,153 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,154 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:20,350 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:20,351 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:20,359 [INFO] Final candidates: []
2025-04-11 17:42:20,359 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,368 [INFO] Final candidates: []
2025-04-11 17:42:20,368 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,369 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:20,426 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:20,427 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(3)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:20,435 [INFO] Final candidates: []
2025-04-11 17:42:20,435 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,443 [INFO] Final candidates: []
2025-04-11 17:42:20,443 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,444 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:20,618 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:20,619 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(2), np.int64(16)))
2025-04-11 17:42:20,627 [INFO] Final candidates: []
2025-04-11 17:42:20,627 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,636 [INFO] Final candidates: []
2025-04-11 17:42:20,636 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,636 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:20,764 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:20,764 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:20,773 [INFO] Final candidates: []
2025-04-11 17:42:20,773 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,784 [INFO] Final candidates: []
2025-04-11 17:42:20,784 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,784 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:20,979 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:20,979 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:20,987 [INFO] Final candidates: []
2025-04-11 17:42:20,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,996 [INFO] Final candidates: []
2025-04-11 17:42:20,996 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:20,996 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:21,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:21,298 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:21,307 [INFO] Final candidates: []
2025-04-11 17:42:21,307 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,315 [INFO] Final candidates: []
2025-04-11 17:42:21,315 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,316 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:21,470 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:21,470 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(1), np.int64(2)))
2025-04-11 17:42:21,480 [INFO] Final candidates: []
2025-04-11 17:42:21,480 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,490 [INFO] Final candidates: []
2025-04-11 17:42:21,490 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,490 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:21,545 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:21,545 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(1), np.int64(14)))
2025-04-11 17:42:21,554 [INFO] Final candidates: []
2025-04-11 17:42:21,554 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,562 [INFO] Final candidates: []
2025-04-11 17:42:21,562 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,562 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:21,611 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:21,611 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:21,620 [INFO] Final candidates: []
2025-04-11 17:42:21,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,628 [INFO] Final candidates: []
2025-04-11 17:42:21,628 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,629 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:21,711 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:21,711 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:21,721 [INFO] Final candidates: []
2025-04-11 17:42:21,721 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,729 [INFO] Final candidates: []
2025-04-11 17:42:21,729 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,730 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:21,854 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:21,854 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:21,871 [INFO] Final candidates: []
2025-04-11 17:42:21,871 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,892 [INFO] Final candidates: []
2025-04-11 17:42:21,892 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:21,925 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:21,925 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:21,933 [INFO] Final candidates: []
2025-04-11 17:42:21,933 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,942 [INFO] Final candidates: []
2025-04-11 17:42:21,942 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:21,943 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:22,156 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:22,156 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:22,165 [INFO] Final candidates: []
2025-04-11 17:42:22,165 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,173 [INFO] Final candidates: []
2025-04-11 17:42:22,173 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,174 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:22,307 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:22,307 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:22,322 [INFO] Final candidates: []
2025-04-11 17:42:22,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,334 [INFO] Final candidates: []
2025-04-11 17:42:22,334 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,334 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:22,538 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:22,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:22,547 [INFO] Final candidates: []
2025-04-11 17:42:22,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,556 [INFO] Final candidates: []
2025-04-11 17:42:22,556 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:22,700 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:22,700 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(3), np.int64(13)))
2025-04-11 17:42:22,709 [INFO] Final candidates: []
2025-04-11 17:42:22,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,719 [INFO] Final candidates: []
2025-04-11 17:42:22,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:22,760 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:22,760 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:22,769 [INFO] Final candidates: []
2025-04-11 17:42:22,769 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,777 [INFO] Final candidates: []
2025-04-11 17:42:22,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:22,942 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:22,942 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:22,951 [INFO] Final candidates: []
2025-04-11 17:42:22,951 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,960 [INFO] Final candidates: []
2025-04-11 17:42:22,960 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:22,960 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:23,147 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:23,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:23,157 [INFO] Final candidates: []
2025-04-11 17:42:23,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,172 [INFO] Final candidates: []
2025-04-11 17:42:23,172 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,173 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:23,467 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:23,467 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:23,476 [INFO] Final candidates: []
2025-04-11 17:42:23,476 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,485 [INFO] Final candidates: []
2025-04-11 17:42:23,485 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:23,704 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:23,704 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(8), np.int64(5)))
2025-04-11 17:42:23,712 [INFO] Final candidates: []
2025-04-11 17:42:23,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,721 [INFO] Final candidates: []
2025-04-11 17:42:23,721 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,721 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:23,823 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:23,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:23,835 [INFO] Final candidates: []
2025-04-11 17:42:23,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,843 [INFO] Final candidates: []
2025-04-11 17:42:23,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:23,968 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:23,968 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(1), np.int64(15)))
2025-04-11 17:42:23,976 [INFO] Final candidates: []
2025-04-11 17:42:23,976 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,987 [INFO] Final candidates: []
2025-04-11 17:42:23,987 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:23,987 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:24,120 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:24,120 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:24,129 [INFO] Final candidates: []
2025-04-11 17:42:24,129 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,137 [INFO] Final candidates: []
2025-04-11 17:42:24,137 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,140 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:24,303 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:24,303 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:24,312 [INFO] Final candidates: []
2025-04-11 17:42:24,312 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,320 [INFO] Final candidates: []
2025-04-11 17:42:24,320 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:24,372 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:24,373 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:24,383 [INFO] Final candidates: []
2025-04-11 17:42:24,383 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,391 [INFO] Final candidates: []
2025-04-11 17:42:24,392 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:24,523 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:24,523 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:24,532 [INFO] Final candidates: []
2025-04-11 17:42:24,532 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,540 [INFO] Final candidates: []
2025-04-11 17:42:24,540 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,541 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:24,702 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:24,702 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:24,711 [INFO] Final candidates: []
2025-04-11 17:42:24,711 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,719 [INFO] Final candidates: []
2025-04-11 17:42:24,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:24,851 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:24,852 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:24,860 [INFO] Final candidates: []
2025-04-11 17:42:24,860 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,869 [INFO] Final candidates: []
2025-04-11 17:42:24,869 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:24,869 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:25,027 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:25,027 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(6)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:25,038 [INFO] Final candidates: []
2025-04-11 17:42:25,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,049 [INFO] Final candidates: []
2025-04-11 17:42:25,049 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,049 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:25,228 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:25,228 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(2), np.int64(13)))
2025-04-11 17:42:25,237 [INFO] Final candidates: []
2025-04-11 17:42:25,237 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,246 [INFO] Final candidates: []
2025-04-11 17:42:25,246 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,246 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:25,300 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:25,300 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:25,309 [INFO] Final candidates: []
2025-04-11 17:42:25,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,318 [INFO] Final candidates: []
2025-04-11 17:42:25,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,318 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:42:25,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:25,420 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:25,421 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:25,429 [INFO] Final candidates: []
2025-04-11 17:42:25,429 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,438 [INFO] Final candidates: []
2025-04-11 17:42:25,438 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,438 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:25,502 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:25,502 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:25,511 [INFO] Final candidates: []
2025-04-11 17:42:25,511 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,519 [INFO] Final candidates: []
2025-04-11 17:42:25,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,520 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:25,583 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:25,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(2), np.int64(16)))
2025-04-11 17:42:25,592 [INFO] Final candidates: []
2025-04-11 17:42:25,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,601 [INFO] Final candidates: []
2025-04-11 17:42:25,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:25,776 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:25,776 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:25,786 [INFO] Final candidates: []
2025-04-11 17:42:25,786 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,794 [INFO] Final candidates: []
2025-04-11 17:42:25,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:25,795 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,062 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:26,072 [INFO] Final candidates: []
2025-04-11 17:42:26,072 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,080 [INFO] Final candidates: []
2025-04-11 17:42:26,080 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,081 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,179 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,179 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:26,188 [INFO] Final candidates: []
2025-04-11 17:42:26,188 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,199 [INFO] Final candidates: []
2025-04-11 17:42:26,200 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,200 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,320 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,321 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:26,329 [INFO] Final candidates: []
2025-04-11 17:42:26,329 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,338 [INFO] Final candidates: []
2025-04-11 17:42:26,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,338 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,447 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,448 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:26,456 [INFO] Final candidates: []
2025-04-11 17:42:26,456 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,465 [INFO] Final candidates: []
2025-04-11 17:42:26,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,523 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,524 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(14)))
2025-04-11 17:42:26,532 [INFO] Final candidates: []
2025-04-11 17:42:26,532 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,541 [INFO] Final candidates: []
2025-04-11 17:42:26,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,542 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,714 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:26,714 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(2), np.int64(5)))
2025-04-11 17:42:26,723 [INFO] Final candidates: []
2025-04-11 17:42:26,723 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,731 [INFO] Final candidates: []
2025-04-11 17:42:26,731 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,732 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,775 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,775 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(3), np.int64(5)))
2025-04-11 17:42:26,784 [INFO] Final candidates: []
2025-04-11 17:42:26,784 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,792 [INFO] Final candidates: []
2025-04-11 17:42:26,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,793 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,836 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,836 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:26,845 [INFO] Final candidates: []
2025-04-11 17:42:26,845 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,854 [INFO] Final candidates: []
2025-04-11 17:42:26,854 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:26,854 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:26,999 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:26,999 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:27,008 [INFO] Final candidates: []
2025-04-11 17:42:27,008 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,016 [INFO] Final candidates: []
2025-04-11 17:42:27,016 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,017 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,112 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,113 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:27,123 [INFO] Final candidates: []
2025-04-11 17:42:27,123 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,132 [INFO] Final candidates: []
2025-04-11 17:42:27,132 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,174 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,174 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:27,182 [INFO] Final candidates: []
2025-04-11 17:42:27,183 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,191 [INFO] Final candidates: []
2025-04-11 17:42:27,191 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,191 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,247 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,248 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:27,256 [INFO] Final candidates: []
2025-04-11 17:42:27,256 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,268 [INFO] Final candidates: []
2025-04-11 17:42:27,268 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,269 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,439 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,439 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:27,448 [INFO] Final candidates: []
2025-04-11 17:42:27,448 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,456 [INFO] Final candidates: []
2025-04-11 17:42:27,456 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,457 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,609 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,609 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:27,618 [INFO] Final candidates: []
2025-04-11 17:42:27,618 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,626 [INFO] Final candidates: []
2025-04-11 17:42:27,626 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,627 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,691 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,691 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(3)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:27,700 [INFO] Final candidates: []
2025-04-11 17:42:27,701 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,709 [INFO] Final candidates: []
2025-04-11 17:42:27,709 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,811 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,811 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:27,820 [INFO] Final candidates: []
2025-04-11 17:42:27,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,828 [INFO] Final candidates: []
2025-04-11 17:42:27,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:27,932 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:27,933 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:27,941 [INFO] Final candidates: []
2025-04-11 17:42:27,941 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,950 [INFO] Final candidates: []
2025-04-11 17:42:27,950 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:27,950 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:28,009 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:28,010 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:28,018 [INFO] Final candidates: []
2025-04-11 17:42:28,018 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,027 [INFO] Final candidates: []
2025-04-11 17:42:28,027 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,027 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:28,185 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:28,185 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:28,193 [INFO] Final candidates: []
2025-04-11 17:42:28,193 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,204 [INFO] Final candidates: []
2025-04-11 17:42:28,204 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,205 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:28,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:28,311 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(13)))
2025-04-11 17:42:28,321 [INFO] Final candidates: []
2025-04-11 17:42:28,321 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,332 [INFO] Final candidates: []
2025-04-11 17:42:28,332 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,333 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:28,446 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:28,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:28,456 [INFO] Final candidates: []
2025-04-11 17:42:28,456 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,464 [INFO] Final candidates: []
2025-04-11 17:42:28,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:28,583 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:28,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:28,592 [INFO] Final candidates: []
2025-04-11 17:42:28,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,601 [INFO] Final candidates: []
2025-04-11 17:42:28,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:28,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:28,802 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:28,810 [INFO] Final candidates: []
2025-04-11 17:42:28,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,819 [INFO] Final candidates: []
2025-04-11 17:42:28,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:28,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,029 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:29,029 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(9), np.int64(3)))
2025-04-11 17:42:29,038 [INFO] Final candidates: []
2025-04-11 17:42:29,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,046 [INFO] Final candidates: []
2025-04-11 17:42:29,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,047 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,071 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:29,071 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:29,079 [INFO] Final candidates: []
2025-04-11 17:42:29,079 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,088 [INFO] Final candidates: []
2025-04-11 17:42:29,088 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,088 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,115 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:29,116 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:29,124 [INFO] Final candidates: []
2025-04-11 17:42:29,124 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,135 [INFO] Final candidates: []
2025-04-11 17:42:29,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,349 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:29,349 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:29,358 [INFO] Final candidates: []
2025-04-11 17:42:29,358 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,366 [INFO] Final candidates: []
2025-04-11 17:42:29,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,367 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,414 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:29,415 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:29,423 [INFO] Final candidates: []
2025-04-11 17:42:29,423 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,432 [INFO] Final candidates: []
2025-04-11 17:42:29,432 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,432 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,524 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:29,524 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:29,533 [INFO] Final candidates: []
2025-04-11 17:42:29,533 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,541 [INFO] Final candidates: []
2025-04-11 17:42:29,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,542 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,633 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:29,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:29,642 [INFO] Final candidates: []
2025-04-11 17:42:29,642 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,651 [INFO] Final candidates: []
2025-04-11 17:42:29,651 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,651 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:29,748 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:29,757 [INFO] Final candidates: []
2025-04-11 17:42:29,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,766 [INFO] Final candidates: []
2025-04-11 17:42:29,766 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:29,848 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:29,849 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:29,858 [INFO] Final candidates: []
2025-04-11 17:42:29,858 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,866 [INFO] Final candidates: []
2025-04-11 17:42:29,866 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:29,867 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,008 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:30,008 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(3)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:30,017 [INFO] Final candidates: []
2025-04-11 17:42:30,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,025 [INFO] Final candidates: []
2025-04-11 17:42:30,025 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,167 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:30,167 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:30,176 [INFO] Final candidates: []
2025-04-11 17:42:30,176 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,184 [INFO] Final candidates: []
2025-04-11 17:42:30,184 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,185 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,313 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:30,313 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(6), np.int64(5)))
2025-04-11 17:42:30,322 [INFO] Final candidates: []
2025-04-11 17:42:30,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,331 [INFO] Final candidates: []
2025-04-11 17:42:30,331 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,331 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,349 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:30,349 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:30,358 [INFO] Final candidates: []
2025-04-11 17:42:30,358 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,366 [INFO] Final candidates: []
2025-04-11 17:42:30,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,367 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,616 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:30,617 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:30,631 [INFO] Final candidates: []
2025-04-11 17:42:30,631 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,652 [INFO] Final candidates: []
2025-04-11 17:42:30,652 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,653 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,761 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:30,762 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:30,771 [INFO] Final candidates: []
2025-04-11 17:42:30,771 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,779 [INFO] Final candidates: []
2025-04-11 17:42:30,779 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,824 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:30,824 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:30,833 [INFO] Final candidates: []
2025-04-11 17:42:30,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,841 [INFO] Final candidates: []
2025-04-11 17:42:30,841 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,842 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:30,898 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:30,899 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(0)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:30,907 [INFO] Final candidates: []
2025-04-11 17:42:30,907 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,916 [INFO] Final candidates: []
2025-04-11 17:42:30,916 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:30,916 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:31,090 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:31,091 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(1), np.int64(15)))
2025-04-11 17:42:31,099 [INFO] Final candidates: []
2025-04-11 17:42:31,099 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,108 [INFO] Final candidates: []
2025-04-11 17:42:31,108 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:31,224 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:31,224 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(0), np.int64(14)))
2025-04-11 17:42:31,233 [INFO] Final candidates: []
2025-04-11 17:42:31,233 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,242 [INFO] Final candidates: []
2025-04-11 17:42:31,242 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:31,415 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:31,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:31,426 [INFO] Final candidates: []
2025-04-11 17:42:31,426 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,434 [INFO] Final candidates: []
2025-04-11 17:42:31,435 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,435 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:31,506 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:31,506 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(3)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:31,514 [INFO] Final candidates: []
2025-04-11 17:42:31,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,523 [INFO] Final candidates: []
2025-04-11 17:42:31,523 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,523 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:31,626 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:31,626 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(2), np.int64(5)))
2025-04-11 17:42:31,635 [INFO] Final candidates: []
2025-04-11 17:42:31,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,643 [INFO] Final candidates: []
2025-04-11 17:42:31,643 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,644 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:31,754 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:31,754 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:42:31,754 [INFO] MCTS selected move: P5,D10
2025-04-11 17:42:31,754 [INFO] ===============NEW MOVE================
2025-04-11 17:42:31,933 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:42:31,941 [INFO] Final candidates: []
2025-04-11 17:42:31,942 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,950 [INFO] Final candidates: []
2025-04-11 17:42:31,950 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,950 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:42:31,951 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:42:31,951 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(10), np.int64(2)))
2025-04-11 17:42:31,959 [INFO] Final candidates: []
2025-04-11 17:42:31,959 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,968 [INFO] Final candidates: []
2025-04-11 17:42:31,968 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:31,968 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:42:31,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:32,150 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:32,150 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:32,159 [INFO] Final candidates: []
2025-04-11 17:42:32,159 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,167 [INFO] Final candidates: []
2025-04-11 17:42:32,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,168 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:32,194 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:32,194 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:32,203 [INFO] Final candidates: []
2025-04-11 17:42:32,203 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,211 [INFO] Final candidates: []
2025-04-11 17:42:32,211 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,213 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:32,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:32,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(5)))
2025-04-11 17:42:32,394 [INFO] Final candidates: []
2025-04-11 17:42:32,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,403 [INFO] Final candidates: []
2025-04-11 17:42:32,403 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:32,572 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:32,572 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:32,581 [INFO] Final candidates: []
2025-04-11 17:42:32,581 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,589 [INFO] Final candidates: []
2025-04-11 17:42:32,589 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,589 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:32,713 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:32,714 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:32,722 [INFO] Final candidates: []
2025-04-11 17:42:32,722 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,730 [INFO] Final candidates: []
2025-04-11 17:42:32,731 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,731 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:32,784 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:32,784 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(16)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:32,792 [INFO] Final candidates: []
2025-04-11 17:42:32,792 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,801 [INFO] Final candidates: []
2025-04-11 17:42:32,801 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,801 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:32,926 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:32,926 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:32,935 [INFO] Final candidates: []
2025-04-11 17:42:32,935 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,943 [INFO] Final candidates: []
2025-04-11 17:42:32,943 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:32,944 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:33,113 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:33,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:33,122 [INFO] Final candidates: []
2025-04-11 17:42:33,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,130 [INFO] Final candidates: []
2025-04-11 17:42:33,130 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:33,183 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:33,183 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:33,191 [INFO] Final candidates: []
2025-04-11 17:42:33,192 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,201 [INFO] Final candidates: []
2025-04-11 17:42:33,201 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,201 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:33,424 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:33,425 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(4), np.int64(16)))
2025-04-11 17:42:33,433 [INFO] Final candidates: []
2025-04-11 17:42:33,433 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,442 [INFO] Final candidates: []
2025-04-11 17:42:33,442 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,442 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:33,639 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:33,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:33,647 [INFO] Final candidates: []
2025-04-11 17:42:33,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,656 [INFO] Final candidates: []
2025-04-11 17:42:33,656 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,657 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:33,689 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:33,689 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:33,697 [INFO] Final candidates: []
2025-04-11 17:42:33,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,706 [INFO] Final candidates: []
2025-04-11 17:42:33,706 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:33,869 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:33,869 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:33,877 [INFO] Final candidates: []
2025-04-11 17:42:33,877 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,886 [INFO] Final candidates: []
2025-04-11 17:42:33,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:33,886 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,035 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:34,036 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:34,044 [INFO] Final candidates: []
2025-04-11 17:42:34,044 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,052 [INFO] Final candidates: []
2025-04-11 17:42:34,052 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,053 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,076 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:34,076 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(8), np.int64(5)))
2025-04-11 17:42:34,084 [INFO] Final candidates: []
2025-04-11 17:42:34,084 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,093 [INFO] Final candidates: []
2025-04-11 17:42:34,093 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,093 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,204 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:34,204 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(10), np.int64(3)))
2025-04-11 17:42:34,213 [INFO] Final candidates: []
2025-04-11 17:42:34,213 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,221 [INFO] Final candidates: []
2025-04-11 17:42:34,221 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,344 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:34,344 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:34,352 [INFO] Final candidates: []
2025-04-11 17:42:34,352 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,361 [INFO] Final candidates: []
2025-04-11 17:42:34,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,361 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,489 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:34,489 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:34,498 [INFO] Final candidates: []
2025-04-11 17:42:34,498 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,506 [INFO] Final candidates: []
2025-04-11 17:42:34,506 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,625 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:34,625 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:34,634 [INFO] Final candidates: []
2025-04-11 17:42:34,634 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,642 [INFO] Final candidates: []
2025-04-11 17:42:34,643 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,758 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:34,758 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(1), np.int64(5)))
2025-04-11 17:42:34,766 [INFO] Final candidates: []
2025-04-11 17:42:34,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,775 [INFO] Final candidates: []
2025-04-11 17:42:34,775 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,775 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,838 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:34,838 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(7), np.int64(4)))
2025-04-11 17:42:34,846 [INFO] Final candidates: []
2025-04-11 17:42:34,846 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,855 [INFO] Final candidates: []
2025-04-11 17:42:34,855 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,855 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:34,877 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:34,877 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(4)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:34,886 [INFO] Final candidates: []
2025-04-11 17:42:34,886 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,897 [INFO] Final candidates: []
2025-04-11 17:42:34,897 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:34,898 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:35,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:35,121 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(1)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:35,130 [INFO] Final candidates: []
2025-04-11 17:42:35,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,138 [INFO] Final candidates: []
2025-04-11 17:42:35,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,139 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:35,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:35,274 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(1), np.int64(15)))
2025-04-11 17:42:35,283 [INFO] Final candidates: []
2025-04-11 17:42:35,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,291 [INFO] Final candidates: []
2025-04-11 17:42:35,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:35,468 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:35,468 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:35,477 [INFO] Final candidates: []
2025-04-11 17:42:35,477 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,485 [INFO] Final candidates: []
2025-04-11 17:42:35,485 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,486 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:35,776 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:35,776 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:35,785 [INFO] Final candidates: []
2025-04-11 17:42:35,785 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,793 [INFO] Final candidates: []
2025-04-11 17:42:35,793 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:35,793 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:35,991 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:35,992 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(1), np.int64(15)))
2025-04-11 17:42:36,000 [INFO] Final candidates: []
2025-04-11 17:42:36,000 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,008 [INFO] Final candidates: []
2025-04-11 17:42:36,008 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,009 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:36,239 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:36,240 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(2), np.int64(16)))
2025-04-11 17:42:36,248 [INFO] Final candidates: []
2025-04-11 17:42:36,248 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,256 [INFO] Final candidates: []
2025-04-11 17:42:36,256 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,258 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:36,391 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:36,392 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:36,400 [INFO] Final candidates: []
2025-04-11 17:42:36,400 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,409 [INFO] Final candidates: []
2025-04-11 17:42:36,409 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:36,563 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:36,563 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(8), np.int64(2)))
2025-04-11 17:42:36,572 [INFO] Final candidates: []
2025-04-11 17:42:36,572 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,580 [INFO] Final candidates: []
2025-04-11 17:42:36,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,581 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:36,652 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:36,653 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:36,661 [INFO] Final candidates: []
2025-04-11 17:42:36,661 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,669 [INFO] Final candidates: []
2025-04-11 17:42:36,669 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,670 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:36,785 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:36,785 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:36,794 [INFO] Final candidates: []
2025-04-11 17:42:36,794 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,802 [INFO] Final candidates: []
2025-04-11 17:42:36,802 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,802 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:36,850 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:36,850 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:36,858 [INFO] Final candidates: []
2025-04-11 17:42:36,858 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,867 [INFO] Final candidates: []
2025-04-11 17:42:36,867 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:36,867 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:36,977 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:36,978 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(9), np.int64(1)))
2025-04-11 17:42:36,995 [INFO] Final candidates: []
2025-04-11 17:42:36,995 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,007 [INFO] Final candidates: []
2025-04-11 17:42:37,007 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,007 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,068 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,069 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:37,090 [INFO] Final candidates: []
2025-04-11 17:42:37,091 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,108 [INFO] Final candidates: []
2025-04-11 17:42:37,108 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,109 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,140 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,140 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:37,148 [INFO] Final candidates: []
2025-04-11 17:42:37,148 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,156 [INFO] Final candidates: []
2025-04-11 17:42:37,156 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,157 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,253 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:37,254 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:37,262 [INFO] Final candidates: []
2025-04-11 17:42:37,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,270 [INFO] Final candidates: []
2025-04-11 17:42:37,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,271 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,359 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,359 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:37,368 [INFO] Final candidates: []
2025-04-11 17:42:37,368 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,378 [INFO] Final candidates: []
2025-04-11 17:42:37,378 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,379 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,549 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,549 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:37,558 [INFO] Final candidates: []
2025-04-11 17:42:37,558 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,566 [INFO] Final candidates: []
2025-04-11 17:42:37,566 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,567 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,689 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:37,689 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:37,697 [INFO] Final candidates: []
2025-04-11 17:42:37,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,706 [INFO] Final candidates: []
2025-04-11 17:42:37,706 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,725 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,726 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(1), np.int64(14)))
2025-04-11 17:42:37,734 [INFO] Final candidates: []
2025-04-11 17:42:37,734 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,742 [INFO] Final candidates: []
2025-04-11 17:42:37,742 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,743 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,776 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(1), np.int64(2)))
2025-04-11 17:42:37,785 [INFO] Final candidates: []
2025-04-11 17:42:37,785 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,793 [INFO] Final candidates: []
2025-04-11 17:42:37,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,876 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,876 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:37,884 [INFO] Final candidates: []
2025-04-11 17:42:37,884 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,893 [INFO] Final candidates: []
2025-04-11 17:42:37,893 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:37,974 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:37,974 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(9), np.int64(1)))
2025-04-11 17:42:37,983 [INFO] Final candidates: []
2025-04-11 17:42:37,983 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,991 [INFO] Final candidates: []
2025-04-11 17:42:37,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:37,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:38,054 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:38,054 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(3), np.int64(5)))
2025-04-11 17:42:38,062 [INFO] Final candidates: []
2025-04-11 17:42:38,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,071 [INFO] Final candidates: []
2025-04-11 17:42:38,071 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,071 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:38,152 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:38,153 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(5), np.int64(15)))
2025-04-11 17:42:38,161 [INFO] Final candidates: []
2025-04-11 17:42:38,161 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,170 [INFO] Final candidates: []
2025-04-11 17:42:38,170 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,170 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:38,301 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:38,302 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(5), np.int64(14)))
2025-04-11 17:42:38,314 [INFO] Final candidates: []
2025-04-11 17:42:38,314 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,322 [INFO] Final candidates: []
2025-04-11 17:42:38,323 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,323 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:38,495 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:38,495 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:38,504 [INFO] Final candidates: []
2025-04-11 17:42:38,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,512 [INFO] Final candidates: []
2025-04-11 17:42:38,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,512 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:38,605 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:38,605 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:38,614 [INFO] Final candidates: []
2025-04-11 17:42:38,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,622 [INFO] Final candidates: []
2025-04-11 17:42:38,622 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,623 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:38,961 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:38,961 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:38,970 [INFO] Final candidates: []
2025-04-11 17:42:38,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,978 [INFO] Final candidates: []
2025-04-11 17:42:38,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:38,979 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:42:38,979 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:39,163 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:39,163 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(10), np.int64(2)))
2025-04-11 17:42:39,171 [INFO] Final candidates: []
2025-04-11 17:42:39,171 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,179 [INFO] Final candidates: []
2025-04-11 17:42:39,179 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,180 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:39,461 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:39,461 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(3), np.int64(3)))
2025-04-11 17:42:39,470 [INFO] Final candidates: []
2025-04-11 17:42:39,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,478 [INFO] Final candidates: []
2025-04-11 17:42:39,478 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:39,610 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:39,610 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(9), np.int64(5)))
2025-04-11 17:42:39,618 [INFO] Final candidates: []
2025-04-11 17:42:39,618 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,627 [INFO] Final candidates: []
2025-04-11 17:42:39,627 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,627 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:39,770 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:39,770 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(8), np.int64(2)))
2025-04-11 17:42:39,779 [INFO] Final candidates: []
2025-04-11 17:42:39,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,787 [INFO] Final candidates: []
2025-04-11 17:42:39,787 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:39,882 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:39,883 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:39,891 [INFO] Final candidates: []
2025-04-11 17:42:39,891 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,900 [INFO] Final candidates: []
2025-04-11 17:42:39,900 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:39,901 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:40,098 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:40,098 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(16)))
2025-04-11 17:42:40,107 [INFO] Final candidates: []
2025-04-11 17:42:40,107 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,115 [INFO] Final candidates: []
2025-04-11 17:42:40,115 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,116 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:40,307 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:40,307 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:40,316 [INFO] Final candidates: []
2025-04-11 17:42:40,316 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,324 [INFO] Final candidates: []
2025-04-11 17:42:40,324 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,325 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:40,473 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:40,473 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:40,482 [INFO] Final candidates: []
2025-04-11 17:42:40,482 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,491 [INFO] Final candidates: []
2025-04-11 17:42:40,491 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,492 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:40,526 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:40,527 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:40,535 [INFO] Final candidates: []
2025-04-11 17:42:40,535 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,544 [INFO] Final candidates: []
2025-04-11 17:42:40,544 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,544 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:40,679 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:40,679 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:40,689 [INFO] Final candidates: []
2025-04-11 17:42:40,689 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,698 [INFO] Final candidates: []
2025-04-11 17:42:40,698 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:40,889 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:40,889 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(3)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:40,898 [INFO] Final candidates: []
2025-04-11 17:42:40,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,906 [INFO] Final candidates: []
2025-04-11 17:42:40,906 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:40,906 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:41,102 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:41,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(6), np.int64(5)))
2025-04-11 17:42:41,111 [INFO] Final candidates: []
2025-04-11 17:42:41,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,120 [INFO] Final candidates: []
2025-04-11 17:42:41,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:41,179 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:41,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:41,188 [INFO] Final candidates: []
2025-04-11 17:42:41,188 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,196 [INFO] Final candidates: []
2025-04-11 17:42:41,196 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,197 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:41,421 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:41,421 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:41,430 [INFO] Final candidates: []
2025-04-11 17:42:41,430 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,438 [INFO] Final candidates: []
2025-04-11 17:42:41,438 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,439 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:41,584 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:41,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:41,593 [INFO] Final candidates: []
2025-04-11 17:42:41,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,601 [INFO] Final candidates: []
2025-04-11 17:42:41,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,602 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:41,691 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:41,692 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:41,700 [INFO] Final candidates: []
2025-04-11 17:42:41,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,708 [INFO] Final candidates: []
2025-04-11 17:42:41,709 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:41,790 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:41,791 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:41,799 [INFO] Final candidates: []
2025-04-11 17:42:41,799 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,807 [INFO] Final candidates: []
2025-04-11 17:42:41,807 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:41,808 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:42,065 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:42,065 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:42,074 [INFO] Final candidates: []
2025-04-11 17:42:42,074 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,082 [INFO] Final candidates: []
2025-04-11 17:42:42,082 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,083 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:42,232 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:42,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(15)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:42,241 [INFO] Final candidates: []
2025-04-11 17:42:42,241 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,249 [INFO] Final candidates: []
2025-04-11 17:42:42,249 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,250 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:42,411 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:42,411 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:42,420 [INFO] Final candidates: []
2025-04-11 17:42:42,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,428 [INFO] Final candidates: []
2025-04-11 17:42:42,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:42,505 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:42,505 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:42,514 [INFO] Final candidates: []
2025-04-11 17:42:42,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,522 [INFO] Final candidates: []
2025-04-11 17:42:42,522 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,522 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:42,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:42,736 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:42,745 [INFO] Final candidates: []
2025-04-11 17:42:42,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,753 [INFO] Final candidates: []
2025-04-11 17:42:42,753 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:42,754 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,028 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:43,028 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(2)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:43,036 [INFO] Final candidates: []
2025-04-11 17:42:43,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,044 [INFO] Final candidates: []
2025-04-11 17:42:43,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,235 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:43,236 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:43,244 [INFO] Final candidates: []
2025-04-11 17:42:43,244 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,252 [INFO] Final candidates: []
2025-04-11 17:42:43,252 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,253 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,340 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:43,341 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:43,349 [INFO] Final candidates: []
2025-04-11 17:42:43,349 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,357 [INFO] Final candidates: []
2025-04-11 17:42:43,357 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,358 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,529 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:43,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:43,538 [INFO] Final candidates: []
2025-04-11 17:42:43,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,546 [INFO] Final candidates: []
2025-04-11 17:42:43,546 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,547 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,611 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:43,612 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:43,620 [INFO] Final candidates: []
2025-04-11 17:42:43,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,629 [INFO] Final candidates: []
2025-04-11 17:42:43,629 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,629 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,655 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:43,656 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(4)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:43,664 [INFO] Final candidates: []
2025-04-11 17:42:43,664 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,672 [INFO] Final candidates: []
2025-04-11 17:42:43,672 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,673 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,741 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:43,742 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(3), np.int64(3)))
2025-04-11 17:42:43,750 [INFO] Final candidates: []
2025-04-11 17:42:43,750 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,759 [INFO] Final candidates: []
2025-04-11 17:42:43,759 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,759 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,901 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:43,901 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:43,911 [INFO] Final candidates: []
2025-04-11 17:42:43,911 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,925 [INFO] Final candidates: []
2025-04-11 17:42:43,925 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:43,926 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:43,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:43,989 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(7), np.int64(4)))
2025-04-11 17:42:43,998 [INFO] Final candidates: []
2025-04-11 17:42:43,998 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,006 [INFO] Final candidates: []
2025-04-11 17:42:44,006 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,006 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:44,180 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:44,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(4)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:44,189 [INFO] Final candidates: []
2025-04-11 17:42:44,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,197 [INFO] Final candidates: []
2025-04-11 17:42:44,197 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,198 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:44,266 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:44,266 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:44,274 [INFO] Final candidates: []
2025-04-11 17:42:44,274 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,283 [INFO] Final candidates: []
2025-04-11 17:42:44,283 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,283 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:44,301 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:44,301 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:44,310 [INFO] Final candidates: []
2025-04-11 17:42:44,310 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,318 [INFO] Final candidates: []
2025-04-11 17:42:44,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:44,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:44,552 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(2), np.int64(13)))
2025-04-11 17:42:44,561 [INFO] Final candidates: []
2025-04-11 17:42:44,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,569 [INFO] Final candidates: []
2025-04-11 17:42:44,569 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:44,732 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:44,732 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(9), np.int64(4)))
2025-04-11 17:42:44,741 [INFO] Final candidates: []
2025-04-11 17:42:44,741 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,749 [INFO] Final candidates: []
2025-04-11 17:42:44,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,750 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:44,915 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:44,915 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:44,924 [INFO] Final candidates: []
2025-04-11 17:42:44,924 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,932 [INFO] Final candidates: []
2025-04-11 17:42:44,932 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:44,933 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,022 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:45,022 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(2), np.int64(3)))
2025-04-11 17:42:45,031 [INFO] Final candidates: []
2025-04-11 17:42:45,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,039 [INFO] Final candidates: []
2025-04-11 17:42:45,039 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,039 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:45,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(11), np.int64(3)))
2025-04-11 17:42:45,110 [INFO] Final candidates: []
2025-04-11 17:42:45,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,119 [INFO] Final candidates: []
2025-04-11 17:42:45,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:45,220 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(1), np.int64(14)))
2025-04-11 17:42:45,229 [INFO] Final candidates: []
2025-04-11 17:42:45,229 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,237 [INFO] Final candidates: []
2025-04-11 17:42:45,237 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,393 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:45,393 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(10), np.int64(4)))
2025-04-11 17:42:45,402 [INFO] Final candidates: []
2025-04-11 17:42:45,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,410 [INFO] Final candidates: []
2025-04-11 17:42:45,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,410 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:45,553 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(3)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:45,562 [INFO] Final candidates: []
2025-04-11 17:42:45,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,570 [INFO] Final candidates: []
2025-04-11 17:42:45,570 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,734 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:45,734 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:45,743 [INFO] Final candidates: []
2025-04-11 17:42:45,743 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,751 [INFO] Final candidates: []
2025-04-11 17:42:45,751 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,826 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:45,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:45,835 [INFO] Final candidates: []
2025-04-11 17:42:45,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,843 [INFO] Final candidates: []
2025-04-11 17:42:45,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:45,933 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:45,933 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:45,942 [INFO] Final candidates: []
2025-04-11 17:42:45,942 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,950 [INFO] Final candidates: []
2025-04-11 17:42:45,950 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:45,951 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:46,202 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:46,202 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:46,211 [INFO] Final candidates: []
2025-04-11 17:42:46,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,219 [INFO] Final candidates: []
2025-04-11 17:42:46,219 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:46,377 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:46,378 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:46,386 [INFO] Final candidates: []
2025-04-11 17:42:46,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,394 [INFO] Final candidates: []
2025-04-11 17:42:46,395 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:46,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:46,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:46,502 [INFO] Final candidates: []
2025-04-11 17:42:46,502 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,510 [INFO] Final candidates: []
2025-04-11 17:42:46,510 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,511 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:46,714 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:46,714 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:46,723 [INFO] Final candidates: []
2025-04-11 17:42:46,723 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,731 [INFO] Final candidates: []
2025-04-11 17:42:46,731 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:46,731 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:46,806 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:46,807 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:42:46,807 [INFO] MCTS selected move: Q2,C11
2025-04-11 17:42:46,807 [INFO] ===============NEW MOVE================
2025-04-11 17:42:47,046 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:42:47,054 [INFO] Final candidates: []
2025-04-11 17:42:47,054 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,062 [INFO] Final candidates: []
2025-04-11 17:42:47,063 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,063 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:42:47,063 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:42:47,063 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:47,071 [INFO] Final candidates: []
2025-04-11 17:42:47,071 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,080 [INFO] Final candidates: []
2025-04-11 17:42:47,080 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,081 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:42:47,081 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:47,217 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:47,218 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(8), np.int64(5)))
2025-04-11 17:42:47,226 [INFO] Final candidates: []
2025-04-11 17:42:47,226 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,235 [INFO] Final candidates: []
2025-04-11 17:42:47,235 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,235 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:47,326 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:47,326 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:47,334 [INFO] Final candidates: []
2025-04-11 17:42:47,334 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,343 [INFO] Final candidates: []
2025-04-11 17:42:47,343 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,343 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:47,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:47,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(1), np.int64(16)))
2025-04-11 17:42:47,461 [INFO] Final candidates: []
2025-04-11 17:42:47,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,470 [INFO] Final candidates: []
2025-04-11 17:42:47,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:47,509 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:47,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(4)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:47,518 [INFO] Final candidates: []
2025-04-11 17:42:47,518 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,526 [INFO] Final candidates: []
2025-04-11 17:42:47,526 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,527 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:47,583 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:47,583 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(0), np.int64(6)))
2025-04-11 17:42:47,591 [INFO] Final candidates: []
2025-04-11 17:42:47,591 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,600 [INFO] Final candidates: []
2025-04-11 17:42:47,600 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:47,875 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:47,875 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(3), np.int64(13)))
2025-04-11 17:42:47,883 [INFO] Final candidates: []
2025-04-11 17:42:47,884 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,892 [INFO] Final candidates: []
2025-04-11 17:42:47,892 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,892 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:47,944 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:47,944 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(8), np.int64(4)))
2025-04-11 17:42:47,952 [INFO] Final candidates: []
2025-04-11 17:42:47,952 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,961 [INFO] Final candidates: []
2025-04-11 17:42:47,961 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:47,961 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:48,157 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:48,157 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(9), np.int64(1)))
2025-04-11 17:42:48,165 [INFO] Final candidates: []
2025-04-11 17:42:48,165 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,174 [INFO] Final candidates: []
2025-04-11 17:42:48,174 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,174 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:48,226 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:48,226 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(2), np.int64(6)))
2025-04-11 17:42:48,235 [INFO] Final candidates: []
2025-04-11 17:42:48,235 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,243 [INFO] Final candidates: []
2025-04-11 17:42:48,243 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:48,386 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:48,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:48,394 [INFO] Final candidates: []
2025-04-11 17:42:48,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,403 [INFO] Final candidates: []
2025-04-11 17:42:48,403 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,404 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:48,611 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:48,611 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:48,622 [INFO] Final candidates: []
2025-04-11 17:42:48,622 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,636 [INFO] Final candidates: []
2025-04-11 17:42:48,637 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,637 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:48,843 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:48,843 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(0), np.int64(15)))
2025-04-11 17:42:48,857 [INFO] Final candidates: []
2025-04-11 17:42:48,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,868 [INFO] Final candidates: []
2025-04-11 17:42:48,868 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:48,868 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:49,051 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:49,052 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(0)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:49,060 [INFO] Final candidates: []
2025-04-11 17:42:49,060 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,068 [INFO] Final candidates: []
2025-04-11 17:42:49,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,069 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:49,223 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:49,223 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(3)), (np.int64(0), np.int64(15)))
2025-04-11 17:42:49,232 [INFO] Final candidates: []
2025-04-11 17:42:49,232 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,240 [INFO] Final candidates: []
2025-04-11 17:42:49,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,241 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:49,354 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:49,354 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(10), np.int64(4)))
2025-04-11 17:42:49,362 [INFO] Final candidates: []
2025-04-11 17:42:49,362 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,371 [INFO] Final candidates: []
2025-04-11 17:42:49,371 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:49,587 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:49,588 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(8), np.int64(2)))
2025-04-11 17:42:49,596 [INFO] Final candidates: []
2025-04-11 17:42:49,596 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,604 [INFO] Final candidates: []
2025-04-11 17:42:49,604 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,605 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:49,799 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:49,799 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(8), np.int64(5)))
2025-04-11 17:42:49,808 [INFO] Final candidates: []
2025-04-11 17:42:49,808 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,817 [INFO] Final candidates: []
2025-04-11 17:42:49,817 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:49,877 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:49,878 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:49,886 [INFO] Final candidates: []
2025-04-11 17:42:49,886 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,894 [INFO] Final candidates: []
2025-04-11 17:42:49,894 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,895 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:49,929 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:49,929 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(5), np.int64(14)))
2025-04-11 17:42:49,937 [INFO] Final candidates: []
2025-04-11 17:42:49,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,946 [INFO] Final candidates: []
2025-04-11 17:42:49,946 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:49,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:50,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:50,130 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(0)), (np.int64(10), np.int64(4)))
2025-04-11 17:42:50,142 [INFO] Final candidates: []
2025-04-11 17:42:50,142 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,152 [INFO] Final candidates: []
2025-04-11 17:42:50,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,153 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:50,462 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:50,462 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(7), np.int64(0)))
2025-04-11 17:42:50,471 [INFO] Final candidates: []
2025-04-11 17:42:50,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,479 [INFO] Final candidates: []
2025-04-11 17:42:50,479 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,480 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:50,637 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:50,638 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(4)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:50,646 [INFO] Final candidates: []
2025-04-11 17:42:50,646 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,654 [INFO] Final candidates: []
2025-04-11 17:42:50,654 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:50,829 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:50,829 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:50,837 [INFO] Final candidates: []
2025-04-11 17:42:50,837 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,845 [INFO] Final candidates: []
2025-04-11 17:42:50,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,846 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:50,944 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:50,945 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:50,960 [INFO] Final candidates: []
2025-04-11 17:42:50,960 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,972 [INFO] Final candidates: []
2025-04-11 17:42:50,972 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:50,973 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:50,988 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:50,988 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:50,996 [INFO] Final candidates: []
2025-04-11 17:42:50,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,004 [INFO] Final candidates: []
2025-04-11 17:42:51,005 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,005 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:51,129 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:51,129 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(11), np.int64(2)))
2025-04-11 17:42:51,137 [INFO] Final candidates: []
2025-04-11 17:42:51,137 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,145 [INFO] Final candidates: []
2025-04-11 17:42:51,145 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,146 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:51,381 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:51,381 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(1)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:51,390 [INFO] Final candidates: []
2025-04-11 17:42:51,390 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,398 [INFO] Final candidates: []
2025-04-11 17:42:51,398 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,399 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:51,577 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:51,577 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:51,585 [INFO] Final candidates: []
2025-04-11 17:42:51,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,594 [INFO] Final candidates: []
2025-04-11 17:42:51,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,594 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:51,766 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:51,766 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:51,774 [INFO] Final candidates: []
2025-04-11 17:42:51,774 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,783 [INFO] Final candidates: []
2025-04-11 17:42:51,783 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,783 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:51,840 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:51,840 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(0), np.int64(15)))
2025-04-11 17:42:51,848 [INFO] Final candidates: []
2025-04-11 17:42:51,848 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,863 [INFO] Final candidates: []
2025-04-11 17:42:51,863 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:51,865 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:52,019 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:52,020 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(10), np.int64(1)))
2025-04-11 17:42:52,028 [INFO] Final candidates: []
2025-04-11 17:42:52,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,036 [INFO] Final candidates: []
2025-04-11 17:42:52,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,037 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:52,194 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:52,194 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(5), np.int64(14)))
2025-04-11 17:42:52,202 [INFO] Final candidates: []
2025-04-11 17:42:52,202 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,211 [INFO] Final candidates: []
2025-04-11 17:42:52,211 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,211 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:52,285 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:52,285 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(5), np.int64(14)))
2025-04-11 17:42:52,293 [INFO] Final candidates: []
2025-04-11 17:42:52,293 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,302 [INFO] Final candidates: []
2025-04-11 17:42:52,302 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:52,363 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:52,363 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(11), np.int64(3)))
2025-04-11 17:42:52,371 [INFO] Final candidates: []
2025-04-11 17:42:52,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,379 [INFO] Final candidates: []
2025-04-11 17:42:52,379 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,380 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:52,511 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:52,511 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(3), np.int64(15)))
2025-04-11 17:42:52,520 [INFO] Final candidates: []
2025-04-11 17:42:52,520 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,528 [INFO] Final candidates: []
2025-04-11 17:42:52,528 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,529 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:52,713 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:52,713 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(6), np.int64(14)))
2025-04-11 17:42:52,722 [INFO] Final candidates: []
2025-04-11 17:42:52,722 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,730 [INFO] Final candidates: []
2025-04-11 17:42:52,730 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,730 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:52,951 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:52,951 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(1), np.int64(14)))
2025-04-11 17:42:52,960 [INFO] Final candidates: []
2025-04-11 17:42:52,960 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,968 [INFO] Final candidates: []
2025-04-11 17:42:52,968 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:52,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:53,036 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:53,037 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(2), np.int64(15)))
2025-04-11 17:42:53,050 [INFO] Final candidates: []
2025-04-11 17:42:53,050 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,058 [INFO] Final candidates: []
2025-04-11 17:42:53,058 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,059 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:53,182 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:53,182 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(10), np.int64(4)))
2025-04-11 17:42:53,191 [INFO] Final candidates: []
2025-04-11 17:42:53,191 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,199 [INFO] Final candidates: []
2025-04-11 17:42:53,199 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,200 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:53,283 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:53,283 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:53,292 [INFO] Final candidates: []
2025-04-11 17:42:53,293 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,304 [INFO] Final candidates: []
2025-04-11 17:42:53,304 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:53,389 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:53,389 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(6), np.int64(4)))
2025-04-11 17:42:53,397 [INFO] Final candidates: []
2025-04-11 17:42:53,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,406 [INFO] Final candidates: []
2025-04-11 17:42:53,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:53,535 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:53,536 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(10), np.int64(1)))
2025-04-11 17:42:53,544 [INFO] Final candidates: []
2025-04-11 17:42:53,544 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,559 [INFO] Final candidates: []
2025-04-11 17:42:53,559 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,561 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:53,786 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:53,787 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(0), np.int64(14)))
2025-04-11 17:42:53,795 [INFO] Final candidates: []
2025-04-11 17:42:53,795 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,803 [INFO] Final candidates: []
2025-04-11 17:42:53,803 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,804 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:53,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:53,909 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:53,918 [INFO] Final candidates: []
2025-04-11 17:42:53,918 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,926 [INFO] Final candidates: []
2025-04-11 17:42:53,926 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:53,927 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:54,134 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:54,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(1), np.int64(13)))
2025-04-11 17:42:54,143 [INFO] Final candidates: []
2025-04-11 17:42:54,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,151 [INFO] Final candidates: []
2025-04-11 17:42:54,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:54,383 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:54,383 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(1), np.int64(16)))
2025-04-11 17:42:54,391 [INFO] Final candidates: []
2025-04-11 17:42:54,391 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,399 [INFO] Final candidates: []
2025-04-11 17:42:54,399 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,400 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:54,534 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:54,535 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:54,543 [INFO] Final candidates: []
2025-04-11 17:42:54,543 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,551 [INFO] Final candidates: []
2025-04-11 17:42:54,551 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,552 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:54,638 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:54,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(5), np.int64(6)))
2025-04-11 17:42:54,647 [INFO] Final candidates: []
2025-04-11 17:42:54,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,655 [INFO] Final candidates: []
2025-04-11 17:42:54,655 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,656 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:54,824 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:54,824 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(4), np.int64(16)))
2025-04-11 17:42:54,832 [INFO] Final candidates: []
2025-04-11 17:42:54,832 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,841 [INFO] Final candidates: []
2025-04-11 17:42:54,841 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:54,841 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:55,190 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:55,190 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(12), np.int64(2)))
2025-04-11 17:42:55,198 [INFO] Final candidates: []
2025-04-11 17:42:55,198 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,206 [INFO] Final candidates: []
2025-04-11 17:42:55,206 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,207 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:42:55,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:55,377 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:55,378 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:55,386 [INFO] Final candidates: []
2025-04-11 17:42:55,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,394 [INFO] Final candidates: []
2025-04-11 17:42:55,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:55,605 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:55,605 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:55,613 [INFO] Final candidates: []
2025-04-11 17:42:55,613 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,622 [INFO] Final candidates: []
2025-04-11 17:42:55,622 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,622 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:55,725 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:55,726 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:42:55,734 [INFO] Final candidates: []
2025-04-11 17:42:55,734 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,743 [INFO] Final candidates: []
2025-04-11 17:42:55,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,743 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:55,851 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:55,852 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(1), np.int64(14)))
2025-04-11 17:42:55,860 [INFO] Final candidates: []
2025-04-11 17:42:55,860 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,868 [INFO] Final candidates: []
2025-04-11 17:42:55,868 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:55,869 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:55,986 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:55,986 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(0), np.int64(3)))
2025-04-11 17:42:55,994 [INFO] Final candidates: []
2025-04-11 17:42:55,994 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,002 [INFO] Final candidates: []
2025-04-11 17:42:56,002 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,003 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:56,055 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:56,055 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(1)), (np.int64(12), np.int64(2)))
2025-04-11 17:42:56,063 [INFO] Final candidates: []
2025-04-11 17:42:56,063 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,072 [INFO] Final candidates: []
2025-04-11 17:42:56,072 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,073 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:56,182 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:56,182 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(8), np.int64(5)))
2025-04-11 17:42:56,190 [INFO] Final candidates: []
2025-04-11 17:42:56,190 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,199 [INFO] Final candidates: []
2025-04-11 17:42:56,199 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,199 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:56,334 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:56,334 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(1), np.int64(2)))
2025-04-11 17:42:56,343 [INFO] Final candidates: []
2025-04-11 17:42:56,343 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,351 [INFO] Final candidates: []
2025-04-11 17:42:56,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:56,473 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:56,473 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(10), np.int64(1)))
2025-04-11 17:42:56,482 [INFO] Final candidates: []
2025-04-11 17:42:56,482 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,491 [INFO] Final candidates: []
2025-04-11 17:42:56,491 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,492 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:56,735 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:56,735 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(3), np.int64(14)))
2025-04-11 17:42:56,743 [INFO] Final candidates: []
2025-04-11 17:42:56,744 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,752 [INFO] Final candidates: []
2025-04-11 17:42:56,752 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,753 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:56,911 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:56,911 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(1), np.int64(4)))
2025-04-11 17:42:56,924 [INFO] Final candidates: []
2025-04-11 17:42:56,924 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,934 [INFO] Final candidates: []
2025-04-11 17:42:56,934 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:56,935 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:57,108 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:57,108 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(2), np.int64(12)))
2025-04-11 17:42:57,117 [INFO] Final candidates: []
2025-04-11 17:42:57,117 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,125 [INFO] Final candidates: []
2025-04-11 17:42:57,125 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:57,367 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:57,367 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(1), np.int64(2)))
2025-04-11 17:42:57,376 [INFO] Final candidates: []
2025-04-11 17:42:57,376 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,384 [INFO] Final candidates: []
2025-04-11 17:42:57,384 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,384 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:57,480 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:57,480 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(1), np.int64(17)))
2025-04-11 17:42:57,489 [INFO] Final candidates: []
2025-04-11 17:42:57,489 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,498 [INFO] Final candidates: []
2025-04-11 17:42:57,498 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,498 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:57,669 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:57,669 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(10), np.int64(4)))
2025-04-11 17:42:57,677 [INFO] Final candidates: []
2025-04-11 17:42:57,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,687 [INFO] Final candidates: []
2025-04-11 17:42:57,687 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,688 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:57,941 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:57,941 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(6), np.int64(0)))
2025-04-11 17:42:57,950 [INFO] Final candidates: []
2025-04-11 17:42:57,950 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,959 [INFO] Final candidates: []
2025-04-11 17:42:57,959 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:57,960 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:58,202 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:58,203 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(0), np.int64(15)))
2025-04-11 17:42:58,211 [INFO] Final candidates: []
2025-04-11 17:42:58,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,219 [INFO] Final candidates: []
2025-04-11 17:42:58,219 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:58,379 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:58,379 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:58,388 [INFO] Final candidates: []
2025-04-11 17:42:58,388 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,396 [INFO] Final candidates: []
2025-04-11 17:42:58,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,397 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:58,540 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:58,540 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(1), np.int64(17)))
2025-04-11 17:42:58,548 [INFO] Final candidates: []
2025-04-11 17:42:58,549 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,557 [INFO] Final candidates: []
2025-04-11 17:42:58,557 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,557 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:58,831 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:58,831 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(7), np.int64(4)))
2025-04-11 17:42:58,839 [INFO] Final candidates: []
2025-04-11 17:42:58,839 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,847 [INFO] Final candidates: []
2025-04-11 17:42:58,847 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:58,903 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:58,903 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(4), np.int64(16)))
2025-04-11 17:42:58,911 [INFO] Final candidates: []
2025-04-11 17:42:58,911 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,919 [INFO] Final candidates: []
2025-04-11 17:42:58,920 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:58,920 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:59,004 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:59,004 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:59,012 [INFO] Final candidates: []
2025-04-11 17:42:59,012 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,021 [INFO] Final candidates: []
2025-04-11 17:42:59,021 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,021 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:59,223 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:59,223 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(7), np.int64(5)))
2025-04-11 17:42:59,231 [INFO] Final candidates: []
2025-04-11 17:42:59,231 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,242 [INFO] Final candidates: []
2025-04-11 17:42:59,242 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:59,338 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:59,338 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(1)), (np.int64(2), np.int64(13)))
2025-04-11 17:42:59,347 [INFO] Final candidates: []
2025-04-11 17:42:59,347 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,355 [INFO] Final candidates: []
2025-04-11 17:42:59,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,355 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:59,391 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:59,391 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(8), np.int64(1)))
2025-04-11 17:42:59,399 [INFO] Final candidates: []
2025-04-11 17:42:59,399 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,408 [INFO] Final candidates: []
2025-04-11 17:42:59,408 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:59,514 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:59,515 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(4), np.int64(13)))
2025-04-11 17:42:59,523 [INFO] Final candidates: []
2025-04-11 17:42:59,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,531 [INFO] Final candidates: []
2025-04-11 17:42:59,531 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,532 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:59,790 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:42:59,790 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(0), np.int64(0)))
2025-04-11 17:42:59,798 [INFO] Final candidates: []
2025-04-11 17:42:59,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,807 [INFO] Final candidates: []
2025-04-11 17:42:59,807 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,807 [INFO] Default policy: Starting random playout.
2025-04-11 17:42:59,851 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:42:59,852 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:42:59,860 [INFO] Final candidates: []
2025-04-11 17:42:59,860 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,868 [INFO] Final candidates: []
2025-04-11 17:42:59,868 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:42:59,869 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:00,008 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:00,008 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(5), np.int64(6)))
2025-04-11 17:43:00,016 [INFO] Final candidates: []
2025-04-11 17:43:00,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,024 [INFO] Final candidates: []
2025-04-11 17:43:00,024 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:00,182 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:00,182 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:00,190 [INFO] Final candidates: []
2025-04-11 17:43:00,190 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,198 [INFO] Final candidates: []
2025-04-11 17:43:00,198 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,199 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:00,249 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:00,249 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(1), np.int64(14)))
2025-04-11 17:43:00,258 [INFO] Final candidates: []
2025-04-11 17:43:00,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,266 [INFO] Final candidates: []
2025-04-11 17:43:00,266 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,267 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:00,444 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:00,445 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:00,453 [INFO] Final candidates: []
2025-04-11 17:43:00,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,461 [INFO] Final candidates: []
2025-04-11 17:43:00,461 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,462 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:00,584 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:00,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(0), np.int64(0)))
2025-04-11 17:43:00,592 [INFO] Final candidates: []
2025-04-11 17:43:00,594 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,603 [INFO] Final candidates: []
2025-04-11 17:43:00,603 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:00,675 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:00,676 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:00,684 [INFO] Final candidates: []
2025-04-11 17:43:00,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,692 [INFO] Final candidates: []
2025-04-11 17:43:00,692 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,693 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:00,874 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:00,874 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:43:00,882 [INFO] Final candidates: []
2025-04-11 17:43:00,882 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,891 [INFO] Final candidates: []
2025-04-11 17:43:00,891 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:00,891 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:01,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:01,089 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:01,097 [INFO] Final candidates: []
2025-04-11 17:43:01,097 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,106 [INFO] Final candidates: []
2025-04-11 17:43:01,106 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,106 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:01,225 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:01,225 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:01,233 [INFO] Final candidates: []
2025-04-11 17:43:01,233 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,241 [INFO] Final candidates: []
2025-04-11 17:43:01,241 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:01,331 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:01,331 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:01,340 [INFO] Final candidates: []
2025-04-11 17:43:01,340 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,348 [INFO] Final candidates: []
2025-04-11 17:43:01,348 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:01,458 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:01,458 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(2), np.int64(12)))
2025-04-11 17:43:01,466 [INFO] Final candidates: []
2025-04-11 17:43:01,466 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,475 [INFO] Final candidates: []
2025-04-11 17:43:01,475 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,475 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:01,695 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:01,695 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(6), np.int64(4)))
2025-04-11 17:43:01,703 [INFO] Final candidates: []
2025-04-11 17:43:01,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,711 [INFO] Final candidates: []
2025-04-11 17:43:01,712 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:01,764 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:01,765 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(9), np.int64(1)))
2025-04-11 17:43:01,773 [INFO] Final candidates: []
2025-04-11 17:43:01,773 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,781 [INFO] Final candidates: []
2025-04-11 17:43:01,781 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:01,782 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:02,034 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:02,034 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:02,044 [INFO] Final candidates: []
2025-04-11 17:43:02,044 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,052 [INFO] Final candidates: []
2025-04-11 17:43:02,052 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,053 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:02,252 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:02,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:02,261 [INFO] Final candidates: []
2025-04-11 17:43:02,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,269 [INFO] Final candidates: []
2025-04-11 17:43:02,269 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,270 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:02,372 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:02,372 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(1), np.int64(14)))
2025-04-11 17:43:02,380 [INFO] Final candidates: []
2025-04-11 17:43:02,380 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,388 [INFO] Final candidates: []
2025-04-11 17:43:02,388 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,389 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:02,444 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:02,444 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(0)), (np.int64(8), np.int64(4)))
2025-04-11 17:43:02,452 [INFO] Final candidates: []
2025-04-11 17:43:02,452 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,461 [INFO] Final candidates: []
2025-04-11 17:43:02,461 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,461 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:02,650 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:02,651 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(3)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:02,659 [INFO] Final candidates: []
2025-04-11 17:43:02,659 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,667 [INFO] Final candidates: []
2025-04-11 17:43:02,667 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,668 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:02,943 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:02,943 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:02,952 [INFO] Final candidates: []
2025-04-11 17:43:02,952 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,960 [INFO] Final candidates: []
2025-04-11 17:43:02,960 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:02,961 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:03,160 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:03,160 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(7), np.int64(5)))
2025-04-11 17:43:03,168 [INFO] Final candidates: []
2025-04-11 17:43:03,168 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,176 [INFO] Final candidates: []
2025-04-11 17:43:03,176 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,177 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:03,349 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:03,350 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(6), np.int64(4)))
2025-04-11 17:43:03,358 [INFO] Final candidates: []
2025-04-11 17:43:03,358 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,366 [INFO] Final candidates: []
2025-04-11 17:43:03,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,367 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:03,398 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:03,398 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:43:03,398 [INFO] MCTS selected move: N5,F8
2025-04-11 17:43:03,398 [INFO] ===============NEW MOVE================
2025-04-11 17:43:03,660 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:43:03,668 [INFO] Final candidates: []
2025-04-11 17:43:03,669 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,676 [INFO] Final candidates: []
2025-04-11 17:43:03,677 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,677 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:43:03,677 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:43:03,677 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(3), np.int64(5)))
2025-04-11 17:43:03,686 [INFO] Final candidates: []
2025-04-11 17:43:03,686 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,694 [INFO] Final candidates: []
2025-04-11 17:43:03,694 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,694 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:43:03,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:03,781 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:03,781 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:43:03,790 [INFO] Final candidates: []
2025-04-11 17:43:03,790 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,798 [INFO] Final candidates: []
2025-04-11 17:43:03,798 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:03,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:04,026 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:04,026 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:04,035 [INFO] Final candidates: []
2025-04-11 17:43:04,035 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,043 [INFO] Final candidates: []
2025-04-11 17:43:04,043 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,044 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:04,181 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:04,181 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(16)), (np.int64(2), np.int64(15)))
2025-04-11 17:43:04,189 [INFO] Final candidates: []
2025-04-11 17:43:04,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,197 [INFO] Final candidates: []
2025-04-11 17:43:04,197 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,198 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:04,253 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:04,253 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(2), np.int64(16)))
2025-04-11 17:43:04,262 [INFO] Final candidates: []
2025-04-11 17:43:04,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,270 [INFO] Final candidates: []
2025-04-11 17:43:04,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,271 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:04,499 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:04,499 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:04,508 [INFO] Final candidates: []
2025-04-11 17:43:04,508 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,516 [INFO] Final candidates: []
2025-04-11 17:43:04,516 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,516 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:04,687 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:04,687 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:04,696 [INFO] Final candidates: []
2025-04-11 17:43:04,696 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,703 [INFO] Final candidates: []
2025-04-11 17:43:04,704 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,704 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:04,857 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:04,857 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(2), np.int64(16)))
2025-04-11 17:43:04,866 [INFO] Final candidates: []
2025-04-11 17:43:04,866 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,873 [INFO] Final candidates: []
2025-04-11 17:43:04,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:04,874 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:04,992 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:04,992 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(9), np.int64(4)))
2025-04-11 17:43:05,001 [INFO] Final candidates: []
2025-04-11 17:43:05,001 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,009 [INFO] Final candidates: []
2025-04-11 17:43:05,009 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,009 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:05,275 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:05,275 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:05,293 [INFO] Final candidates: []
2025-04-11 17:43:05,293 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,301 [INFO] Final candidates: []
2025-04-11 17:43:05,301 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:05,538 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:05,538 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(3)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:05,547 [INFO] Final candidates: []
2025-04-11 17:43:05,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,555 [INFO] Final candidates: []
2025-04-11 17:43:05,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,555 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:05,654 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:05,654 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:05,662 [INFO] Final candidates: []
2025-04-11 17:43:05,662 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,673 [INFO] Final candidates: []
2025-04-11 17:43:05,673 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,674 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:05,811 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:05,811 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(1), np.int64(13)))
2025-04-11 17:43:05,820 [INFO] Final candidates: []
2025-04-11 17:43:05,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,828 [INFO] Final candidates: []
2025-04-11 17:43:05,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:05,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:06,141 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:06,141 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(6), np.int64(0)))
2025-04-11 17:43:06,150 [INFO] Final candidates: []
2025-04-11 17:43:06,150 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,157 [INFO] Final candidates: []
2025-04-11 17:43:06,158 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:06,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:06,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:06,267 [INFO] Final candidates: []
2025-04-11 17:43:06,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,277 [INFO] Final candidates: []
2025-04-11 17:43:06,277 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,278 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:06,480 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:06,480 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:06,483 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:43:06,483 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:06,483 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (9, 2)]
2025-04-11 17:43:06,483 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:43:06,489 [INFO] Final candidates: [(8, 2), (9, 2)]
2025-04-11 17:43:06,489 [INFO] Phase win: Collected 1unique candidate(s):[((8, 2), (9, 2))]
2025-04-11 17:43:06,489 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:06,497 [INFO] Final candidates: []
2025-04-11 17:43:06,497 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,497 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:06,551 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:06,552 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(5), np.int64(5)))
2025-04-11 17:43:06,562 [INFO] Final candidates: []
2025-04-11 17:43:06,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,571 [INFO] Final candidates: []
2025-04-11 17:43:06,571 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,572 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:06,662 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:06,663 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:06,684 [INFO] Final candidates: []
2025-04-11 17:43:06,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,704 [INFO] Final candidates: []
2025-04-11 17:43:06,704 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:06,824 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:06,824 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(4), np.int64(13)))
2025-04-11 17:43:06,832 [INFO] Final candidates: []
2025-04-11 17:43:06,832 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,842 [INFO] Final candidates: []
2025-04-11 17:43:06,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:06,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,011 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:07,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(11), np.int64(1)))
2025-04-11 17:43:07,018 [DEBUG] board coords: [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)]
2025-04-11 17:43:07,018 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:07,018 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 6), (8, 4)]
2025-04-11 17:43:07,018 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)] triggers candidate.
2025-04-11 17:43:07,018 [DEBUG] board coords: [(7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 0)]
2025-04-11 17:43:07,018 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:07,018 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 4), (12, 0)]
2025-04-11 17:43:07,018 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 0)] triggers candidate.
2025-04-11 17:43:07,020 [INFO] Final candidates: [(6, 6), (12, 0), (8, 4)]
2025-04-11 17:43:07,020 [INFO] Phase win: Collected 3unique candidate(s):[((6, 6), (8, 4)), ((6, 6), (12, 0)), ((12, 0), (8, 4))]
2025-04-11 17:43:07,020 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:07,029 [INFO] Final candidates: []
2025-04-11 17:43:07,029 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,031 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,210 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:07,210 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(4), np.int64(10)))
2025-04-11 17:43:07,221 [INFO] Final candidates: []
2025-04-11 17:43:07,221 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,229 [INFO] Final candidates: []
2025-04-11 17:43:07,229 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,230 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:07,405 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(3), np.int64(14)))
2025-04-11 17:43:07,413 [INFO] Final candidates: []
2025-04-11 17:43:07,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,421 [INFO] Final candidates: []
2025-04-11 17:43:07,421 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,422 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,528 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:07,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(0)))
2025-04-11 17:43:07,539 [INFO] Final candidates: []
2025-04-11 17:43:07,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,547 [INFO] Final candidates: []
2025-04-11 17:43:07,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,584 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:07,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 17:43:07,593 [INFO] Final candidates: []
2025-04-11 17:43:07,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,601 [INFO] Final candidates: []
2025-04-11 17:43:07,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,756 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:07,756 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:07,764 [INFO] Final candidates: []
2025-04-11 17:43:07,764 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,772 [INFO] Final candidates: []
2025-04-11 17:43:07,772 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,773 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,908 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:07,908 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(0), np.int64(14)))
2025-04-11 17:43:07,916 [INFO] Final candidates: []
2025-04-11 17:43:07,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,924 [INFO] Final candidates: []
2025-04-11 17:43:07,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,925 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:07,948 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:07,948 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(2), np.int64(15)))
2025-04-11 17:43:07,957 [INFO] Final candidates: []
2025-04-11 17:43:07,958 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,966 [INFO] Final candidates: []
2025-04-11 17:43:07,966 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:07,966 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:08,003 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:08,003 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(7), np.int64(0)))
2025-04-11 17:43:08,012 [INFO] Final candidates: []
2025-04-11 17:43:08,012 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,019 [INFO] Final candidates: []
2025-04-11 17:43:08,019 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,020 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:08,201 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:08,201 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(10), np.int64(3)))
2025-04-11 17:43:08,210 [INFO] Final candidates: []
2025-04-11 17:43:08,210 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,217 [INFO] Final candidates: []
2025-04-11 17:43:08,217 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,218 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:08,314 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:08,314 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(8), np.int64(6)))
2025-04-11 17:43:08,322 [INFO] Final candidates: []
2025-04-11 17:43:08,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,332 [INFO] Final candidates: []
2025-04-11 17:43:08,332 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,332 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:08,366 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:08,366 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(3), np.int64(11)))
2025-04-11 17:43:08,375 [INFO] Final candidates: []
2025-04-11 17:43:08,375 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,383 [INFO] Final candidates: []
2025-04-11 17:43:08,383 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:08,543 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:08,543 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(2), np.int64(13)))
2025-04-11 17:43:08,552 [INFO] Final candidates: []
2025-04-11 17:43:08,552 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,563 [INFO] Final candidates: []
2025-04-11 17:43:08,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,564 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:08,784 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:08,784 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(3)), (np.int64(2), np.int64(15)))
2025-04-11 17:43:08,795 [INFO] Final candidates: []
2025-04-11 17:43:08,795 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,804 [INFO] Final candidates: []
2025-04-11 17:43:08,805 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:08,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,030 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:09,030 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:09,038 [INFO] Final candidates: []
2025-04-11 17:43:09,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,046 [INFO] Final candidates: []
2025-04-11 17:43:09,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,047 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,154 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:09,154 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:09,163 [INFO] Final candidates: []
2025-04-11 17:43:09,163 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,171 [INFO] Final candidates: []
2025-04-11 17:43:09,171 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,171 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,228 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:09,228 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(4)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:09,236 [INFO] Final candidates: []
2025-04-11 17:43:09,236 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,244 [INFO] Final candidates: []
2025-04-11 17:43:09,244 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,245 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,462 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:09,462 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:09,470 [INFO] Final candidates: []
2025-04-11 17:43:09,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,478 [INFO] Final candidates: []
2025-04-11 17:43:09,478 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,633 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:09,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(4), np.int64(10)))
2025-04-11 17:43:09,641 [INFO] Final candidates: []
2025-04-11 17:43:09,641 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,649 [INFO] Final candidates: []
2025-04-11 17:43:09,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,650 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,708 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:09,708 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(7), np.int64(0)))
2025-04-11 17:43:09,717 [INFO] Final candidates: []
2025-04-11 17:43:09,717 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,725 [INFO] Final candidates: []
2025-04-11 17:43:09,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,725 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:09,863 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:09,870 [DEBUG] board coords: [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)]
2025-04-11 17:43:09,870 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:43:09,870 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (8, 4)]
2025-04-11 17:43:09,870 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)] triggers candidate.
2025-04-11 17:43:09,870 [DEBUG] board coords: [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)]
2025-04-11 17:43:09,870 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:09,870 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 4), (11, 1)]
2025-04-11 17:43:09,870 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)] triggers candidate.
2025-04-11 17:43:09,872 [INFO] Final candidates: [(11, 1), (8, 4), (5, 7)]
2025-04-11 17:43:09,872 [INFO] Phase win: Collected 3unique candidate(s):[((11, 1), (5, 7)), ((11, 1), (8, 4)), ((8, 4), (5, 7))]
2025-04-11 17:43:09,872 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:09,880 [INFO] Final candidates: []
2025-04-11 17:43:09,880 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,880 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:09,961 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:09,961 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(5), np.int64(11)))
2025-04-11 17:43:09,969 [INFO] Final candidates: []
2025-04-11 17:43:09,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,977 [INFO] Final candidates: []
2025-04-11 17:43:09,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:09,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,045 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:10,045 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(8), np.int64(6)))
2025-04-11 17:43:10,054 [INFO] Final candidates: []
2025-04-11 17:43:10,054 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,062 [INFO] Final candidates: []
2025-04-11 17:43:10,062 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,062 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,175 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:10,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(5), np.int64(6)))
2025-04-11 17:43:10,183 [INFO] Final candidates: []
2025-04-11 17:43:10,183 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,191 [INFO] Final candidates: []
2025-04-11 17:43:10,191 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,192 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,265 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:10,265 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:10,274 [INFO] Final candidates: []
2025-04-11 17:43:10,274 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,281 [INFO] Final candidates: []
2025-04-11 17:43:10,281 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,282 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,364 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:10,364 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(9), np.int64(1)))
2025-04-11 17:43:10,373 [INFO] Final candidates: []
2025-04-11 17:43:10,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,380 [INFO] Final candidates: []
2025-04-11 17:43:10,380 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,514 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:10,514 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(1), np.int64(5)))
2025-04-11 17:43:10,523 [INFO] Final candidates: []
2025-04-11 17:43:10,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,530 [INFO] Final candidates: []
2025-04-11 17:43:10,530 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,531 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,773 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:10,773 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:10,782 [INFO] Final candidates: []
2025-04-11 17:43:10,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,790 [INFO] Final candidates: []
2025-04-11 17:43:10,790 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,790 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,884 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:10,884 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:10,894 [DEBUG] board coords: [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)]
2025-04-11 17:43:10,894 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:43:10,894 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (8, 4)]
2025-04-11 17:43:10,894 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)] triggers candidate.
2025-04-11 17:43:10,894 [DEBUG] board coords: [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)]
2025-04-11 17:43:10,894 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:10,894 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 4), (11, 1)]
2025-04-11 17:43:10,895 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)] triggers candidate.
2025-04-11 17:43:10,896 [INFO] Final candidates: [(11, 1), (8, 4), (5, 7)]
2025-04-11 17:43:10,896 [INFO] Phase win: Collected 3unique candidate(s):[((11, 1), (5, 7)), ((11, 1), (8, 4)), ((8, 4), (5, 7))]
2025-04-11 17:43:10,896 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:10,904 [INFO] Final candidates: []
2025-04-11 17:43:10,904 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,905 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:10,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:10,959 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:10,968 [INFO] Final candidates: []
2025-04-11 17:43:10,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,975 [INFO] Final candidates: []
2025-04-11 17:43:10,975 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:10,976 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:11,045 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:11,045 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(2), np.int64(16)))
2025-04-11 17:43:11,053 [INFO] Final candidates: []
2025-04-11 17:43:11,053 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,061 [INFO] Final candidates: []
2025-04-11 17:43:11,061 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,062 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:11,147 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:11,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(2), np.int64(13)))
2025-04-11 17:43:11,155 [INFO] Final candidates: []
2025-04-11 17:43:11,155 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,163 [INFO] Final candidates: []
2025-04-11 17:43:11,163 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,164 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:43:11,164 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:11,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:11,248 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:11,258 [INFO] Final candidates: []
2025-04-11 17:43:11,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,266 [INFO] Final candidates: []
2025-04-11 17:43:11,266 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,267 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:11,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:11,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:11,462 [INFO] Final candidates: []
2025-04-11 17:43:11,462 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,470 [INFO] Final candidates: []
2025-04-11 17:43:11,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,470 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:11,649 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:11,650 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(10), np.int64(4)))
2025-04-11 17:43:11,659 [INFO] Final candidates: []
2025-04-11 17:43:11,659 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,666 [INFO] Final candidates: []
2025-04-11 17:43:11,666 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,667 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:11,943 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:11,944 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:11,952 [INFO] Final candidates: []
2025-04-11 17:43:11,952 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,960 [INFO] Final candidates: []
2025-04-11 17:43:11,960 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:11,961 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:12,197 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:12,197 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(0), np.int64(16)))
2025-04-11 17:43:12,206 [INFO] Final candidates: []
2025-04-11 17:43:12,206 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,214 [INFO] Final candidates: []
2025-04-11 17:43:12,214 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,214 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:12,375 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:12,375 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(8), np.int64(4)))
2025-04-11 17:43:12,382 [DEBUG] board coords: [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)]
2025-04-11 17:43:12,382 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:12,382 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (6, 6)]
2025-04-11 17:43:12,382 [DEBUG] check_window_intermediate_custom (only one inserted(6, 6)): For L=6, window [0 0 1 1 1 1] with coords [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)] triggers candidate.
2025-04-11 17:43:12,382 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)] triggers candidate.
2025-04-11 17:43:12,382 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:12,382 [DEBUG] board coords: [(7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 0)]
2025-04-11 17:43:12,382 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:12,382 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 1), (12, 0)]
2025-04-11 17:43:12,382 [DEBUG] check_window_intermediate_custom (only one inserted(11, 1)): For L=6, window [1 1 1 1 0 0] with coords [(7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 0)] triggers candidate.
2025-04-11 17:43:12,384 [INFO] Final candidates: [(6, 6), (11, 1)]
2025-04-11 17:43:12,384 [INFO] Phase win: Collected 1unique candidate(s):[((6, 6), (11, 1))]
2025-04-11 17:43:12,384 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:12,392 [INFO] Final candidates: []
2025-04-11 17:43:12,392 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,393 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:12,451 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:12,451 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:12,459 [INFO] Final candidates: []
2025-04-11 17:43:12,459 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,467 [INFO] Final candidates: []
2025-04-11 17:43:12,467 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:12,669 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:12,669 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(5), np.int64(15)))
2025-04-11 17:43:12,678 [INFO] Final candidates: []
2025-04-11 17:43:12,678 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,686 [INFO] Final candidates: []
2025-04-11 17:43:12,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,686 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:12,777 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:12,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(7), np.int64(0)))
2025-04-11 17:43:12,785 [INFO] Final candidates: []
2025-04-11 17:43:12,786 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,793 [INFO] Final candidates: []
2025-04-11 17:43:12,793 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:12,915 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:12,915 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(10), np.int64(4)))
2025-04-11 17:43:12,924 [INFO] Final candidates: []
2025-04-11 17:43:12,924 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,932 [INFO] Final candidates: []
2025-04-11 17:43:12,932 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:12,932 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:13,160 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:13,161 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:13,169 [INFO] Final candidates: []
2025-04-11 17:43:13,169 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,177 [INFO] Final candidates: []
2025-04-11 17:43:13,177 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,178 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:13,385 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:13,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(9), np.int64(2)))
2025-04-11 17:43:13,394 [INFO] Final candidates: []
2025-04-11 17:43:13,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,402 [INFO] Final candidates: []
2025-04-11 17:43:13,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:13,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:13,554 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:13,562 [INFO] Final candidates: []
2025-04-11 17:43:13,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,572 [INFO] Final candidates: []
2025-04-11 17:43:13,572 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,573 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:13,628 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:13,628 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:13,636 [INFO] Final candidates: []
2025-04-11 17:43:13,636 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,644 [INFO] Final candidates: []
2025-04-11 17:43:13,644 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:13,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:13,842 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:13,851 [INFO] Final candidates: []
2025-04-11 17:43:13,851 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,859 [INFO] Final candidates: []
2025-04-11 17:43:13,859 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:13,859 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:14,061 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:14,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:14,070 [INFO] Final candidates: []
2025-04-11 17:43:14,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,078 [INFO] Final candidates: []
2025-04-11 17:43:14,078 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,079 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:14,245 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:14,245 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:14,254 [INFO] Final candidates: []
2025-04-11 17:43:14,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,262 [INFO] Final candidates: []
2025-04-11 17:43:14,262 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,263 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:14,360 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:14,361 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(0), np.int64(2)))
2025-04-11 17:43:14,369 [INFO] Final candidates: []
2025-04-11 17:43:14,369 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,377 [INFO] Final candidates: []
2025-04-11 17:43:14,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:14,488 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:14,489 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(10), np.int64(4)))
2025-04-11 17:43:14,497 [INFO] Final candidates: []
2025-04-11 17:43:14,497 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,505 [INFO] Final candidates: []
2025-04-11 17:43:14,505 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:14,548 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:14,548 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(2), np.int64(13)))
2025-04-11 17:43:14,556 [INFO] Final candidates: []
2025-04-11 17:43:14,556 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,564 [INFO] Final candidates: []
2025-04-11 17:43:14,564 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:14,771 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:14,771 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(3), np.int64(5)))
2025-04-11 17:43:14,779 [INFO] Final candidates: []
2025-04-11 17:43:14,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,791 [INFO] Final candidates: []
2025-04-11 17:43:14,791 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:14,792 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:15,084 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:15,084 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(6), np.int64(0)))
2025-04-11 17:43:15,094 [INFO] Final candidates: []
2025-04-11 17:43:15,094 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,102 [INFO] Final candidates: []
2025-04-11 17:43:15,102 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,103 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:15,125 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:15,126 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(0), np.int64(16)))
2025-04-11 17:43:15,134 [INFO] Final candidates: []
2025-04-11 17:43:15,134 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,142 [INFO] Final candidates: []
2025-04-11 17:43:15,143 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,143 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:15,212 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:15,212 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(8), np.int64(2)))
2025-04-11 17:43:15,220 [INFO] Final candidates: []
2025-04-11 17:43:15,220 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,228 [INFO] Final candidates: []
2025-04-11 17:43:15,228 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,229 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:15,360 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:15,360 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(8), np.int64(5)))
2025-04-11 17:43:15,369 [INFO] Final candidates: []
2025-04-11 17:43:15,369 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,377 [INFO] Final candidates: []
2025-04-11 17:43:15,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,377 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:15,582 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:15,582 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:15,589 [DEBUG] board coords: [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)]
2025-04-11 17:43:15,590 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:43:15,590 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (8, 4)]
2025-04-11 17:43:15,590 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)] triggers candidate.
2025-04-11 17:43:15,590 [DEBUG] board coords: [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)]
2025-04-11 17:43:15,590 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:15,590 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 4), (11, 1)]
2025-04-11 17:43:15,590 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)] triggers candidate.
2025-04-11 17:43:15,592 [INFO] Final candidates: [(11, 1), (8, 4), (5, 7)]
2025-04-11 17:43:15,592 [INFO] Phase win: Collected 3unique candidate(s):[((11, 1), (5, 7)), ((11, 1), (8, 4)), ((8, 4), (5, 7))]
2025-04-11 17:43:15,592 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:15,600 [INFO] Final candidates: []
2025-04-11 17:43:15,600 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:15,694 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:15,694 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(2), np.int64(12)))
2025-04-11 17:43:15,703 [INFO] Final candidates: []
2025-04-11 17:43:15,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,711 [INFO] Final candidates: []
2025-04-11 17:43:15,711 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:15,921 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:15,921 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(10), np.int64(1)))
2025-04-11 17:43:15,929 [INFO] Final candidates: []
2025-04-11 17:43:15,929 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,938 [INFO] Final candidates: []
2025-04-11 17:43:15,938 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:15,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:16,050 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:16,051 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:16,059 [INFO] Final candidates: []
2025-04-11 17:43:16,059 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,067 [INFO] Final candidates: []
2025-04-11 17:43:16,067 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,068 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:16,093 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:16,093 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:16,101 [INFO] Final candidates: []
2025-04-11 17:43:16,102 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,109 [INFO] Final candidates: []
2025-04-11 17:43:16,110 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,110 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:16,330 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:16,330 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(1), np.int64(4)))
2025-04-11 17:43:16,339 [INFO] Final candidates: []
2025-04-11 17:43:16,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,347 [INFO] Final candidates: []
2025-04-11 17:43:16,347 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,347 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:16,457 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:16,457 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(9), np.int64(4)))
2025-04-11 17:43:16,465 [INFO] Final candidates: []
2025-04-11 17:43:16,465 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,473 [INFO] Final candidates: []
2025-04-11 17:43:16,473 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,474 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:16,692 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:16,692 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:16,700 [INFO] Final candidates: []
2025-04-11 17:43:16,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,708 [INFO] Final candidates: []
2025-04-11 17:43:16,708 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:16,904 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:16,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(10), np.int64(1)))
2025-04-11 17:43:16,912 [INFO] Final candidates: []
2025-04-11 17:43:16,912 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,920 [INFO] Final candidates: []
2025-04-11 17:43:16,920 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:16,921 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:17,062 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:17,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(2), np.int64(5)))
2025-04-11 17:43:17,073 [INFO] Final candidates: []
2025-04-11 17:43:17,073 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,082 [INFO] Final candidates: []
2025-04-11 17:43:17,082 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,083 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:17,279 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:17,280 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:17,288 [INFO] Final candidates: []
2025-04-11 17:43:17,288 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,296 [INFO] Final candidates: []
2025-04-11 17:43:17,296 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:17,499 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:17,499 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(5), np.int64(15)))
2025-04-11 17:43:17,507 [INFO] Final candidates: []
2025-04-11 17:43:17,507 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,515 [INFO] Final candidates: []
2025-04-11 17:43:17,515 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,516 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:17,587 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:17,587 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(1), np.int64(2)))
2025-04-11 17:43:17,596 [INFO] Final candidates: []
2025-04-11 17:43:17,596 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,604 [INFO] Final candidates: []
2025-04-11 17:43:17,604 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,604 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:17,916 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:17,916 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(1), np.int64(5)))
2025-04-11 17:43:17,926 [INFO] Final candidates: []
2025-04-11 17:43:17,926 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,935 [INFO] Final candidates: []
2025-04-11 17:43:17,935 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:17,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,027 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:18,028 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(8), np.int64(5)))
2025-04-11 17:43:18,036 [INFO] Final candidates: []
2025-04-11 17:43:18,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,044 [INFO] Final candidates: []
2025-04-11 17:43:18,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,178 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:18,178 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:18,186 [INFO] Final candidates: []
2025-04-11 17:43:18,186 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,194 [INFO] Final candidates: []
2025-04-11 17:43:18,194 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,195 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,291 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:18,291 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(3), np.int64(12)))
2025-04-11 17:43:18,300 [INFO] Final candidates: []
2025-04-11 17:43:18,300 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,307 [INFO] Final candidates: []
2025-04-11 17:43:18,309 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,310 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,446 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:18,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(2), np.int64(13)))
2025-04-11 17:43:18,455 [INFO] Final candidates: []
2025-04-11 17:43:18,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,463 [INFO] Final candidates: []
2025-04-11 17:43:18,463 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,463 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,519 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:18,519 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:18,527 [INFO] Final candidates: []
2025-04-11 17:43:18,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,535 [INFO] Final candidates: []
2025-04-11 17:43:18,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,536 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,607 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:18,607 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(5), np.int64(11)))
2025-04-11 17:43:18,615 [INFO] Final candidates: []
2025-04-11 17:43:18,615 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,623 [INFO] Final candidates: []
2025-04-11 17:43:18,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,709 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:18,710 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(7), np.int64(0)))
2025-04-11 17:43:18,718 [INFO] Final candidates: []
2025-04-11 17:43:18,718 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,726 [INFO] Final candidates: []
2025-04-11 17:43:18,726 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,727 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,833 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:18,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(10), np.int64(4)))
2025-04-11 17:43:18,842 [INFO] Final candidates: []
2025-04-11 17:43:18,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,857 [INFO] Final candidates: []
2025-04-11 17:43:18,857 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,858 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:18,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:18,959 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(0)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:18,968 [INFO] Final candidates: []
2025-04-11 17:43:18,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,976 [INFO] Final candidates: []
2025-04-11 17:43:18,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:18,976 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:19,101 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:19,101 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(8), np.int64(4)))
2025-04-11 17:43:19,108 [DEBUG] board coords: [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)]
2025-04-11 17:43:19,108 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:19,108 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (6, 6)]
2025-04-11 17:43:19,108 [DEBUG] check_window_intermediate_custom (only one inserted(6, 6)): For L=6, window [0 0 1 1 1 1] with coords [(5, 7), (6, 6), (7, 5), (8, 4), (9, 3), (10, 2)] triggers candidate.
2025-04-11 17:43:19,108 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(6, 6), (7, 5), (8, 4), (9, 3), (10, 2), (11, 1)] triggers candidate.
2025-04-11 17:43:19,108 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:19,108 [DEBUG] board coords: [(7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 0)]
2025-04-11 17:43:19,108 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:19,108 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 1), (12, 0)]
2025-04-11 17:43:19,108 [DEBUG] check_window_intermediate_custom (only one inserted(11, 1)): For L=6, window [1 1 1 1 0 0] with coords [(7, 5), (8, 4), (9, 3), (10, 2), (11, 1), (12, 0)] triggers candidate.
2025-04-11 17:43:19,110 [INFO] Final candidates: [(6, 6), (11, 1)]
2025-04-11 17:43:19,110 [INFO] Phase win: Collected 1unique candidate(s):[((6, 6), (11, 1))]
2025-04-11 17:43:19,110 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:19,118 [INFO] Final candidates: []
2025-04-11 17:43:19,118 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:19,425 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:19,425 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:43:19,425 [INFO] MCTS selected move: D11,F4
2025-04-11 17:43:19,425 [INFO] ===============NEW MOVE================
2025-04-11 17:43:19,712 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:43:19,720 [INFO] Final candidates: []
2025-04-11 17:43:19,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,728 [INFO] Final candidates: []
2025-04-11 17:43:19,728 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,728 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:43:19,729 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:43:19,729 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(0), np.int64(14)))
2025-04-11 17:43:19,737 [INFO] Final candidates: []
2025-04-11 17:43:19,737 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,745 [INFO] Final candidates: []
2025-04-11 17:43:19,745 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,746 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:43:19,746 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:19,793 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:19,793 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(6), np.int64(4)))
2025-04-11 17:43:19,796 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:19,796 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:19,796 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 4), (10, 4)]
2025-04-11 17:43:19,796 [DEBUG] check_window_intermediate_custom (only one inserted(9, 4)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:19,801 [INFO] Final candidates: [(9, 4)]
2025-04-11 17:43:19,801 [INFO] Phase win: Found only one candidate: (9, 4)
2025-04-11 17:43:19,801 [INFO] Phase win: Collected 7unique candidate(s):[((9, 4), (np.int64(8), np.int64(5))), ((9, 4), (np.int64(10), np.int64(4))), ((9, 4), (np.int64(9), np.int64(6))), ((9, 4), (np.int64(9), np.int64(5))), ((9, 4), (np.int64(11), np.int64(4))), ((9, 4), (np.int64(10), np.int64(5))), ((9, 4), (np.int64(9), np.int64(2)))]
2025-04-11 17:43:19,801 [INFO] Phase 1 (immediate win): 7 candidate(s) found.
2025-04-11 17:43:19,809 [INFO] Final candidates: []
2025-04-11 17:43:19,810 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,810 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:19,901 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:19,901 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:19,909 [INFO] Final candidates: []
2025-04-11 17:43:19,909 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,917 [INFO] Final candidates: []
2025-04-11 17:43:19,917 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:19,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:20,111 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:20,111 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(5), np.int64(15)))
2025-04-11 17:43:20,119 [INFO] Final candidates: []
2025-04-11 17:43:20,120 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,127 [INFO] Final candidates: []
2025-04-11 17:43:20,127 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:20,191 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:20,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(10), np.int64(5)))
2025-04-11 17:43:20,199 [INFO] Final candidates: []
2025-04-11 17:43:20,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,207 [INFO] Final candidates: []
2025-04-11 17:43:20,208 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:20,378 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:20,379 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(9), np.int64(5)))
2025-04-11 17:43:20,386 [INFO] Final candidates: []
2025-04-11 17:43:20,387 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,394 [INFO] Final candidates: []
2025-04-11 17:43:20,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:20,490 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:20,490 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(11), np.int64(1)))
2025-04-11 17:43:20,499 [INFO] Final candidates: []
2025-04-11 17:43:20,499 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,507 [INFO] Final candidates: []
2025-04-11 17:43:20,507 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,508 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:20,641 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:20,641 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(2), np.int64(5)))
2025-04-11 17:43:20,649 [INFO] Final candidates: []
2025-04-11 17:43:20,649 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,657 [INFO] Final candidates: []
2025-04-11 17:43:20,657 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,658 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:20,749 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:20,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:20,757 [INFO] Final candidates: []
2025-04-11 17:43:20,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,765 [INFO] Final candidates: []
2025-04-11 17:43:20,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:20,822 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:20,822 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:20,830 [INFO] Final candidates: []
2025-04-11 17:43:20,830 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,840 [INFO] Final candidates: []
2025-04-11 17:43:20,840 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:20,841 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:21,070 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:21,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:21,078 [INFO] Final candidates: []
2025-04-11 17:43:21,078 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,086 [INFO] Final candidates: []
2025-04-11 17:43:21,086 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,087 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:21,147 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:21,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:21,155 [INFO] Final candidates: []
2025-04-11 17:43:21,156 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,164 [INFO] Final candidates: []
2025-04-11 17:43:21,164 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,164 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:21,232 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:21,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(2), np.int64(5)))
2025-04-11 17:43:21,240 [INFO] Final candidates: []
2025-04-11 17:43:21,240 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,248 [INFO] Final candidates: []
2025-04-11 17:43:21,248 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,249 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:21,304 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:21,304 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(0), np.int64(14)))
2025-04-11 17:43:21,312 [INFO] Final candidates: []
2025-04-11 17:43:21,312 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,320 [INFO] Final candidates: []
2025-04-11 17:43:21,320 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:21,551 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:21,552 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(7), np.int64(0)))
2025-04-11 17:43:21,560 [INFO] Final candidates: []
2025-04-11 17:43:21,560 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,568 [INFO] Final candidates: []
2025-04-11 17:43:21,568 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,569 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:21,725 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:21,725 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(11), np.int64(4)))
2025-04-11 17:43:21,733 [INFO] Final candidates: []
2025-04-11 17:43:21,733 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,741 [INFO] Final candidates: []
2025-04-11 17:43:21,741 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:21,742 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:21,986 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:21,986 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:21,994 [INFO] Final candidates: []
2025-04-11 17:43:21,994 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,002 [INFO] Final candidates: []
2025-04-11 17:43:22,002 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,003 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:22,117 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:22,118 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(0)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:22,126 [INFO] Final candidates: []
2025-04-11 17:43:22,126 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,134 [INFO] Final candidates: []
2025-04-11 17:43:22,134 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,135 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:22,243 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:22,243 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(8), np.int64(5)))
2025-04-11 17:43:22,251 [INFO] Final candidates: []
2025-04-11 17:43:22,251 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,259 [INFO] Final candidates: []
2025-04-11 17:43:22,259 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:22,342 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:22,342 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(4), np.int64(11)))
2025-04-11 17:43:22,350 [INFO] Final candidates: []
2025-04-11 17:43:22,350 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,358 [INFO] Final candidates: []
2025-04-11 17:43:22,358 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,359 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:22,396 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:22,396 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(7), np.int64(7)))
2025-04-11 17:43:22,404 [INFO] Final candidates: []
2025-04-11 17:43:22,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,412 [INFO] Final candidates: []
2025-04-11 17:43:22,412 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,413 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:22,530 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:22,531 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(2), np.int64(5)))
2025-04-11 17:43:22,539 [INFO] Final candidates: []
2025-04-11 17:43:22,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,547 [INFO] Final candidates: []
2025-04-11 17:43:22,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:22,702 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:22,703 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:22,711 [INFO] Final candidates: []
2025-04-11 17:43:22,711 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,718 [INFO] Final candidates: []
2025-04-11 17:43:22,718 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,719 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:22,949 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:22,949 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:22,957 [INFO] Final candidates: []
2025-04-11 17:43:22,957 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,970 [INFO] Final candidates: []
2025-04-11 17:43:22,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:22,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:23,220 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:23,220 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:23,228 [INFO] Final candidates: []
2025-04-11 17:43:23,228 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,236 [INFO] Final candidates: []
2025-04-11 17:43:23,236 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,236 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:23,293 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:23,293 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(11), np.int64(1)))
2025-04-11 17:43:23,301 [INFO] Final candidates: []
2025-04-11 17:43:23,301 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,309 [INFO] Final candidates: []
2025-04-11 17:43:23,309 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,310 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:23,482 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:23,482 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(4)))
2025-04-11 17:43:23,484 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:23,484 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:23,484 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 4), (10, 4)]
2025-04-11 17:43:23,484 [DEBUG] check_window_intermediate_custom (only one inserted(9, 4)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:23,490 [INFO] Final candidates: [(9, 4)]
2025-04-11 17:43:23,490 [INFO] Phase win: Found only one candidate: (9, 4)
2025-04-11 17:43:23,490 [INFO] Phase win: Collected 7unique candidate(s):[((9, 4), (np.int64(8), np.int64(5))), ((9, 4), (np.int64(10), np.int64(4))), ((9, 4), (np.int64(9), np.int64(6))), ((9, 4), (np.int64(9), np.int64(5))), ((9, 4), (np.int64(11), np.int64(4))), ((9, 4), (np.int64(10), np.int64(5))), ((9, 4), (np.int64(9), np.int64(2)))]
2025-04-11 17:43:23,490 [INFO] Phase 1 (immediate win): 7 candidate(s) found.
2025-04-11 17:43:23,498 [INFO] Final candidates: []
2025-04-11 17:43:23,498 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,499 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:23,607 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:23,607 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(2), np.int64(5)))
2025-04-11 17:43:23,615 [INFO] Final candidates: []
2025-04-11 17:43:23,615 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,623 [INFO] Final candidates: []
2025-04-11 17:43:23,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:23,703 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:23,703 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(11), np.int64(4)))
2025-04-11 17:43:23,711 [INFO] Final candidates: []
2025-04-11 17:43:23,711 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,719 [INFO] Final candidates: []
2025-04-11 17:43:23,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:23,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,035 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:24,035 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(0), np.int64(0)))
2025-04-11 17:43:24,044 [INFO] Final candidates: []
2025-04-11 17:43:24,044 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,056 [INFO] Final candidates: []
2025-04-11 17:43:24,056 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,057 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,226 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:24,226 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:24,235 [INFO] Final candidates: []
2025-04-11 17:43:24,235 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,243 [INFO] Final candidates: []
2025-04-11 17:43:24,243 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,324 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:24,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(0), np.int64(0)))
2025-04-11 17:43:24,337 [INFO] Final candidates: []
2025-04-11 17:43:24,337 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,345 [INFO] Final candidates: []
2025-04-11 17:43:24,345 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,346 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,463 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:24,463 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(1)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:24,471 [INFO] Final candidates: []
2025-04-11 17:43:24,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,479 [INFO] Final candidates: []
2025-04-11 17:43:24,479 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,527 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:24,527 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(5), np.int64(12)))
2025-04-11 17:43:24,535 [INFO] Final candidates: []
2025-04-11 17:43:24,535 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,543 [INFO] Final candidates: []
2025-04-11 17:43:24,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,544 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,621 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:24,622 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:24,630 [INFO] Final candidates: []
2025-04-11 17:43:24,630 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,638 [INFO] Final candidates: []
2025-04-11 17:43:24,638 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,639 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,660 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:24,660 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:24,668 [INFO] Final candidates: []
2025-04-11 17:43:24,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,676 [INFO] Final candidates: []
2025-04-11 17:43:24,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,676 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:24,792 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:24,792 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(0), np.int64(14)))
2025-04-11 17:43:24,801 [INFO] Final candidates: []
2025-04-11 17:43:24,801 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,809 [INFO] Final candidates: []
2025-04-11 17:43:24,809 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:24,809 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:25,024 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:25,024 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:25,032 [INFO] Final candidates: []
2025-04-11 17:43:25,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,040 [INFO] Final candidates: []
2025-04-11 17:43:25,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,041 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:25,093 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:25,094 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(7), np.int64(0)))
2025-04-11 17:43:25,101 [INFO] Final candidates: []
2025-04-11 17:43:25,101 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,110 [INFO] Final candidates: []
2025-04-11 17:43:25,110 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,110 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:25,247 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:25,247 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(10), np.int64(0)))
2025-04-11 17:43:25,255 [INFO] Final candidates: []
2025-04-11 17:43:25,255 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,265 [INFO] Final candidates: []
2025-04-11 17:43:25,265 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,266 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:25,400 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:25,400 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:25,408 [INFO] Final candidates: []
2025-04-11 17:43:25,408 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,416 [INFO] Final candidates: []
2025-04-11 17:43:25,416 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,417 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:25,631 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:25,631 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(6), np.int64(10)))
2025-04-11 17:43:25,639 [INFO] Final candidates: []
2025-04-11 17:43:25,639 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,647 [INFO] Final candidates: []
2025-04-11 17:43:25,647 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,647 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:25,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:25,792 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(4)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:25,794 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:25,794 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:43:25,794 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 4), (9, 4)]
2025-04-11 17:43:25,794 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:25,800 [INFO] Final candidates: [(6, 4), (9, 4)]
2025-04-11 17:43:25,800 [INFO] Phase win: Collected 1unique candidate(s):[((6, 4), (9, 4))]
2025-04-11 17:43:25,800 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:25,810 [INFO] Final candidates: []
2025-04-11 17:43:25,811 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,811 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:25,891 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:25,892 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(11), np.int64(1)))
2025-04-11 17:43:25,900 [INFO] Final candidates: []
2025-04-11 17:43:25,900 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,908 [INFO] Final candidates: []
2025-04-11 17:43:25,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:25,909 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,012 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:26,012 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(5), np.int64(10)))
2025-04-11 17:43:26,020 [INFO] Final candidates: []
2025-04-11 17:43:26,020 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,028 [INFO] Final candidates: []
2025-04-11 17:43:26,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,029 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,081 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:26,083 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:43:26,094 [INFO] Final candidates: []
2025-04-11 17:43:26,094 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,102 [INFO] Final candidates: []
2025-04-11 17:43:26,102 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,103 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,190 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:26,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:43:26,199 [INFO] Final candidates: []
2025-04-11 17:43:26,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,207 [INFO] Final candidates: []
2025-04-11 17:43:26,207 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,273 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:26,273 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(6), np.int64(0)))
2025-04-11 17:43:26,281 [INFO] Final candidates: []
2025-04-11 17:43:26,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,289 [INFO] Final candidates: []
2025-04-11 17:43:26,289 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,452 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:26,452 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:26,460 [INFO] Final candidates: []
2025-04-11 17:43:26,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,468 [INFO] Final candidates: []
2025-04-11 17:43:26,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,469 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,632 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:26,632 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(5), np.int64(6)))
2025-04-11 17:43:26,641 [INFO] Final candidates: []
2025-04-11 17:43:26,641 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,649 [INFO] Final candidates: []
2025-04-11 17:43:26,650 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,651 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,729 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:26,730 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(1), np.int64(4)))
2025-04-11 17:43:26,737 [INFO] Final candidates: []
2025-04-11 17:43:26,738 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,745 [INFO] Final candidates: []
2025-04-11 17:43:26,746 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,746 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:43:26,746 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:26,928 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:26,928 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(2), np.int64(15)))
2025-04-11 17:43:26,936 [INFO] Final candidates: []
2025-04-11 17:43:26,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,944 [INFO] Final candidates: []
2025-04-11 17:43:26,944 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:26,945 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:27,020 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:27,020 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(9), np.int64(4)))
2025-04-11 17:43:27,022 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:27,022 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:27,022 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 4), (10, 4)]
2025-04-11 17:43:27,022 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:27,028 [INFO] Final candidates: [(10, 4), (6, 4)]
2025-04-11 17:43:27,028 [INFO] Phase win: Collected 1unique candidate(s):[((10, 4), (6, 4))]
2025-04-11 17:43:27,028 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:27,036 [INFO] Final candidates: []
2025-04-11 17:43:27,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,037 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:27,241 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:27,242 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:27,250 [INFO] Final candidates: []
2025-04-11 17:43:27,250 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,258 [INFO] Final candidates: []
2025-04-11 17:43:27,258 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,258 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:27,423 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:27,423 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 17:43:27,431 [INFO] Final candidates: []
2025-04-11 17:43:27,431 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,439 [INFO] Final candidates: []
2025-04-11 17:43:27,439 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,440 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:27,539 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:27,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(0), np.int64(0)))
2025-04-11 17:43:27,549 [INFO] Final candidates: []
2025-04-11 17:43:27,549 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,557 [INFO] Final candidates: []
2025-04-11 17:43:27,557 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,558 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:27,822 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:27,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:27,830 [INFO] Final candidates: []
2025-04-11 17:43:27,831 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,838 [INFO] Final candidates: []
2025-04-11 17:43:27,838 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:27,839 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:28,051 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:28,051 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 17:43:28,059 [INFO] Final candidates: []
2025-04-11 17:43:28,059 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,068 [INFO] Final candidates: []
2025-04-11 17:43:28,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,069 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:28,350 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:28,350 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(2), np.int64(15)))
2025-04-11 17:43:28,353 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:28,353 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:28,353 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 4), (10, 4)]
2025-04-11 17:43:28,353 [DEBUG] check_window_intermediate_custom (only one inserted(9, 4)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:28,365 [INFO] Final candidates: [(9, 4)]
2025-04-11 17:43:28,365 [INFO] Phase win: Found only one candidate: (9, 4)
2025-04-11 17:43:28,365 [INFO] Phase win: Collected 7unique candidate(s):[((9, 4), (np.int64(8), np.int64(5))), ((9, 4), (np.int64(10), np.int64(4))), ((9, 4), (np.int64(9), np.int64(6))), ((9, 4), (np.int64(9), np.int64(5))), ((9, 4), (np.int64(11), np.int64(4))), ((9, 4), (np.int64(10), np.int64(5))), ((9, 4), (np.int64(9), np.int64(2)))]
2025-04-11 17:43:28,365 [INFO] Phase 1 (immediate win): 7 candidate(s) found.
2025-04-11 17:43:28,377 [INFO] Final candidates: []
2025-04-11 17:43:28,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,379 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:28,468 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:28,468 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(10), np.int64(1)))
2025-04-11 17:43:28,476 [INFO] Final candidates: []
2025-04-11 17:43:28,476 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,485 [INFO] Final candidates: []
2025-04-11 17:43:28,485 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:28,687 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:28,688 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:28,696 [INFO] Final candidates: []
2025-04-11 17:43:28,696 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,704 [INFO] Final candidates: []
2025-04-11 17:43:28,704 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,705 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:28,835 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:28,835 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(4)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:28,838 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:28,838 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:28,838 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 4), (10, 4)]
2025-04-11 17:43:28,838 [DEBUG] check_window_intermediate_custom (only one inserted(9, 4)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:28,843 [INFO] Final candidates: [(9, 4)]
2025-04-11 17:43:28,843 [INFO] Phase win: Found only one candidate: (9, 4)
2025-04-11 17:43:28,843 [INFO] Phase win: Collected 7unique candidate(s):[((9, 4), (np.int64(8), np.int64(5))), ((9, 4), (np.int64(10), np.int64(4))), ((9, 4), (np.int64(9), np.int64(6))), ((9, 4), (np.int64(9), np.int64(5))), ((9, 4), (np.int64(11), np.int64(4))), ((9, 4), (np.int64(10), np.int64(5))), ((9, 4), (np.int64(9), np.int64(2)))]
2025-04-11 17:43:28,844 [INFO] Phase 1 (immediate win): 7 candidate(s) found.
2025-04-11 17:43:28,851 [INFO] Final candidates: []
2025-04-11 17:43:28,852 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:28,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:29,022 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:29,022 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(2), np.int64(12)))
2025-04-11 17:43:29,030 [INFO] Final candidates: []
2025-04-11 17:43:29,030 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,042 [INFO] Final candidates: []
2025-04-11 17:43:29,042 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,043 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:29,302 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:29,302 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:29,310 [INFO] Final candidates: []
2025-04-11 17:43:29,310 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,318 [INFO] Final candidates: []
2025-04-11 17:43:29,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:29,429 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:29,429 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(10), np.int64(4)))
2025-04-11 17:43:29,433 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:29,433 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:43:29,433 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 4), (9, 4)]
2025-04-11 17:43:29,433 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:29,433 [DEBUG] board coords: [(6, 4), (7, 4), (8, 4), (9, 4), (10, 4), (11, 4)]
2025-04-11 17:43:29,433 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:43:29,433 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 4), (9, 4)]
2025-04-11 17:43:29,433 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 4), (7, 4), (8, 4), (9, 4), (10, 4), (11, 4)] triggers candidate.
2025-04-11 17:43:29,433 [DEBUG] board coords: [(7, 4), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4)]
2025-04-11 17:43:29,433 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:29,433 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 4), (12, 4)]
2025-04-11 17:43:29,433 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(7, 4), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4)] triggers candidate.
2025-04-11 17:43:29,434 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4), (11, 4)]
2025-04-11 17:43:29,434 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:43:29,434 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 4), (9, 4)]
2025-04-11 17:43:29,434 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 0 2 2] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4), (11, 4)] triggers candidate.
2025-04-11 17:43:29,439 [INFO] Final candidates: [(12, 4), (6, 4), (9, 4)]
2025-04-11 17:43:29,439 [INFO] Phase win: Collected 3unique candidate(s):[((6, 4), (9, 4)), ((12, 4), (9, 4)), ((12, 4), (6, 4))]
2025-04-11 17:43:29,439 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:29,447 [INFO] Final candidates: []
2025-04-11 17:43:29,447 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,448 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:29,462 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:29,463 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(15)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:29,470 [INFO] Final candidates: []
2025-04-11 17:43:29,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,478 [INFO] Final candidates: []
2025-04-11 17:43:29,479 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:29,686 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:29,687 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(1)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:29,695 [INFO] Final candidates: []
2025-04-11 17:43:29,695 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,703 [INFO] Final candidates: []
2025-04-11 17:43:29,703 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,703 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:29,742 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:29,742 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:29,750 [INFO] Final candidates: []
2025-04-11 17:43:29,750 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,758 [INFO] Final candidates: []
2025-04-11 17:43:29,758 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:29,759 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,038 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:30,038 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(5)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:30,046 [INFO] Final candidates: []
2025-04-11 17:43:30,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,054 [INFO] Final candidates: []
2025-04-11 17:43:30,054 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,164 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:30,164 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(5), np.int64(12)))
2025-04-11 17:43:30,172 [INFO] Final candidates: []
2025-04-11 17:43:30,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,180 [INFO] Final candidates: []
2025-04-11 17:43:30,180 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,181 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,326 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:30,326 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 17:43:30,334 [INFO] Final candidates: []
2025-04-11 17:43:30,334 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,342 [INFO] Final candidates: []
2025-04-11 17:43:30,342 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,343 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,459 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:30,460 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(4), np.int64(10)))
2025-04-11 17:43:30,468 [INFO] Final candidates: []
2025-04-11 17:43:30,468 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,476 [INFO] Final candidates: []
2025-04-11 17:43:30,476 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,567 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:30,567 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(6), np.int64(10)))
2025-04-11 17:43:30,575 [INFO] Final candidates: []
2025-04-11 17:43:30,575 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,583 [INFO] Final candidates: []
2025-04-11 17:43:30,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,585 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,695 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:30,695 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(4)), (np.int64(4), np.int64(10)))
2025-04-11 17:43:30,697 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:30,697 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:30,697 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 4), (10, 4)]
2025-04-11 17:43:30,698 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:30,703 [INFO] Final candidates: [(10, 4), (6, 4)]
2025-04-11 17:43:30,703 [INFO] Phase win: Collected 1unique candidate(s):[((10, 4), (6, 4))]
2025-04-11 17:43:30,703 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:30,711 [INFO] Final candidates: []
2025-04-11 17:43:30,711 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,713 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,789 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:30,789 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(3), np.int64(11)))
2025-04-11 17:43:30,797 [INFO] Final candidates: []
2025-04-11 17:43:30,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,805 [INFO] Final candidates: []
2025-04-11 17:43:30,805 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:30,893 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:30,893 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(10), np.int64(1)))
2025-04-11 17:43:30,901 [INFO] Final candidates: []
2025-04-11 17:43:30,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,909 [INFO] Final candidates: []
2025-04-11 17:43:30,909 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:30,910 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:31,096 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:31,096 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(5)))
2025-04-11 17:43:31,105 [INFO] Final candidates: []
2025-04-11 17:43:31,105 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,114 [INFO] Final candidates: []
2025-04-11 17:43:31,114 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,115 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:31,297 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:31,298 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(9), np.int64(1)))
2025-04-11 17:43:31,308 [INFO] Final candidates: []
2025-04-11 17:43:31,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,316 [INFO] Final candidates: []
2025-04-11 17:43:31,316 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:31,515 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:31,515 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(5), np.int64(15)))
2025-04-11 17:43:31,523 [INFO] Final candidates: []
2025-04-11 17:43:31,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,533 [INFO] Final candidates: []
2025-04-11 17:43:31,533 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,535 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:31,751 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:31,751 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(5), np.int64(5)))
2025-04-11 17:43:31,759 [INFO] Final candidates: []
2025-04-11 17:43:31,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,767 [INFO] Final candidates: []
2025-04-11 17:43:31,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:31,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:32,011 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:32,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(5)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:32,019 [INFO] Final candidates: []
2025-04-11 17:43:32,019 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,027 [INFO] Final candidates: []
2025-04-11 17:43:32,027 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,028 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:32,074 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:32,075 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:43:32,083 [INFO] Final candidates: []
2025-04-11 17:43:32,083 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,091 [INFO] Final candidates: []
2025-04-11 17:43:32,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,091 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:32,226 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:32,226 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(10), np.int64(1)))
2025-04-11 17:43:32,234 [INFO] Final candidates: []
2025-04-11 17:43:32,234 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,242 [INFO] Final candidates: []
2025-04-11 17:43:32,242 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,243 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:32,411 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:32,411 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(12), np.int64(3)))
2025-04-11 17:43:32,419 [INFO] Final candidates: []
2025-04-11 17:43:32,419 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,428 [INFO] Final candidates: []
2025-04-11 17:43:32,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:32,618 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:32,618 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:32,626 [INFO] Final candidates: []
2025-04-11 17:43:32,626 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,634 [INFO] Final candidates: []
2025-04-11 17:43:32,634 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,635 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:32,818 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:32,818 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(0), np.int64(16)))
2025-04-11 17:43:32,826 [INFO] Final candidates: []
2025-04-11 17:43:32,826 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,837 [INFO] Final candidates: []
2025-04-11 17:43:32,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:32,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:33,017 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:33,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(1), np.int64(13)))
2025-04-11 17:43:33,025 [INFO] Final candidates: []
2025-04-11 17:43:33,025 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,035 [INFO] Final candidates: []
2025-04-11 17:43:33,035 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:33,141 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:33,141 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:33,149 [INFO] Final candidates: []
2025-04-11 17:43:33,149 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,157 [INFO] Final candidates: []
2025-04-11 17:43:33,157 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:33,229 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:33,229 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(8), np.int64(5)))
2025-04-11 17:43:33,237 [INFO] Final candidates: []
2025-04-11 17:43:33,237 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,245 [INFO] Final candidates: []
2025-04-11 17:43:33,245 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,246 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:33,372 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:33,372 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(9), np.int64(4)))
2025-04-11 17:43:33,374 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:33,374 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:33,374 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 4), (10, 4)]
2025-04-11 17:43:33,374 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:33,380 [INFO] Final candidates: [(10, 4), (6, 4)]
2025-04-11 17:43:33,380 [INFO] Phase win: Collected 1unique candidate(s):[((10, 4), (6, 4))]
2025-04-11 17:43:33,380 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:33,388 [INFO] Final candidates: []
2025-04-11 17:43:33,388 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,389 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:33,479 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:33,480 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(6), np.int64(11)))
2025-04-11 17:43:33,488 [INFO] Final candidates: []
2025-04-11 17:43:33,488 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,496 [INFO] Final candidates: []
2025-04-11 17:43:33,496 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,497 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:33,831 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:33,831 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:33,839 [INFO] Final candidates: []
2025-04-11 17:43:33,839 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,847 [INFO] Final candidates: []
2025-04-11 17:43:33,847 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:33,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:33,996 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:33,996 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(5)), (np.int64(1), np.int64(2)))
2025-04-11 17:43:34,004 [INFO] Final candidates: []
2025-04-11 17:43:34,004 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,012 [INFO] Final candidates: []
2025-04-11 17:43:34,012 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,013 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:34,145 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:34,145 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(6), np.int64(14)))
2025-04-11 17:43:34,153 [INFO] Final candidates: []
2025-04-11 17:43:34,153 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,161 [INFO] Final candidates: []
2025-04-11 17:43:34,161 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:34,409 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:34,409 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:34,417 [INFO] Final candidates: []
2025-04-11 17:43:34,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,425 [INFO] Final candidates: []
2025-04-11 17:43:34,425 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,426 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:34,496 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:34,497 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:34,504 [INFO] Final candidates: []
2025-04-11 17:43:34,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,512 [INFO] Final candidates: []
2025-04-11 17:43:34,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:34,600 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:34,601 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(9), np.int64(2)))
2025-04-11 17:43:34,609 [INFO] Final candidates: []
2025-04-11 17:43:34,609 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,617 [INFO] Final candidates: []
2025-04-11 17:43:34,617 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,618 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:34,672 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:34,673 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(6), np.int64(10)))
2025-04-11 17:43:34,681 [INFO] Final candidates: []
2025-04-11 17:43:34,681 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,688 [INFO] Final candidates: []
2025-04-11 17:43:34,688 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,689 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:34,834 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:34,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(6), np.int64(14)))
2025-04-11 17:43:34,843 [INFO] Final candidates: []
2025-04-11 17:43:34,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,851 [INFO] Final candidates: []
2025-04-11 17:43:34,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:34,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:35,080 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:35,081 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:35,089 [INFO] Final candidates: []
2025-04-11 17:43:35,089 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,097 [INFO] Final candidates: []
2025-04-11 17:43:35,097 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,097 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:35,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:35,166 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:43:35,166 [INFO] MCTS selected move: C12,P1
2025-04-11 17:43:35,166 [INFO] ===============NEW MOVE================
2025-04-11 17:43:35,424 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:43:35,432 [INFO] Final candidates: []
2025-04-11 17:43:35,432 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,434 [DEBUG] board coords: [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)]
2025-04-11 17:43:35,434 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:35,434 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 4), (10, 4)]
2025-04-11 17:43:35,434 [DEBUG] check_window_intermediate_custom (only one inserted(9, 4)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4)] triggers candidate.
2025-04-11 17:43:35,440 [INFO] Final candidates: [(9, 4)]
2025-04-11 17:43:35,440 [INFO] Phase defense: Found only one candidate: (9, 4)
2025-04-11 17:43:35,440 [INFO] Phase defense: Collected 7unique candidate(s):[((9, 4), (np.int64(8), np.int64(5))), ((9, 4), (np.int64(10), np.int64(4))), ((9, 4), (np.int64(9), np.int64(6))), ((9, 4), (np.int64(9), np.int64(5))), ((9, 4), (np.int64(11), np.int64(4))), ((9, 4), (np.int64(10), np.int64(5))), ((9, 4), (np.int64(9), np.int64(2)))]
2025-04-11 17:43:35,440 [INFO] Phase 2 (defense): 7 candidate(s) found.
2025-04-11 17:43:35,440 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:43:35,440 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 4), (np.int64(9), np.int64(2)))
2025-04-11 17:43:35,442 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:43:35,442 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:35,442 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:43:35,442 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:43:35,448 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:43:35,448 [INFO] Phase win: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:43:35,448 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:35,456 [INFO] Final candidates: []
2025-04-11 17:43:35,456 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,457 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:43:35,457 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:35,493 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:35,493 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 4), (np.int64(10), np.int64(4)))
2025-04-11 17:43:35,501 [INFO] Final candidates: []
2025-04-11 17:43:35,501 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,509 [INFO] Final candidates: []
2025-04-11 17:43:35,509 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,509 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:35,720 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:35,720 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 4), (np.int64(10), np.int64(5)))
2025-04-11 17:43:35,728 [INFO] Final candidates: []
2025-04-11 17:43:35,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,736 [INFO] Final candidates: []
2025-04-11 17:43:35,736 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,736 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:35,899 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:35,899 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 4), (np.int64(8), np.int64(5)))
2025-04-11 17:43:35,905 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:35,906 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:35,906 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:35,906 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:35,906 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:35,906 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:35,906 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:35,906 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:35,906 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:35,906 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:35,907 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:35,907 [INFO] Phase win: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:35,907 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:35,918 [INFO] Final candidates: []
2025-04-11 17:43:35,918 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:35,953 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:35,953 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 4), (np.int64(9), np.int64(5)))
2025-04-11 17:43:35,961 [INFO] Final candidates: []
2025-04-11 17:43:35,961 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,969 [INFO] Final candidates: []
2025-04-11 17:43:35,969 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:35,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:36,135 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:36,136 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 4), (np.int64(9), np.int64(6)))
2025-04-11 17:43:36,144 [INFO] Final candidates: []
2025-04-11 17:43:36,144 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,151 [INFO] Final candidates: []
2025-04-11 17:43:36,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:36,294 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:36,294 [DEBUG] Tree_policy iteration 1: Expanding move ((9, 4), (np.int64(11), np.int64(4)))
2025-04-11 17:43:36,302 [INFO] Final candidates: []
2025-04-11 17:43:36,302 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,310 [INFO] Final candidates: []
2025-04-11 17:43:36,311 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,311 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:36,448 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:36,448 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:36,448 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(5), np.int64(15)))
2025-04-11 17:43:36,456 [INFO] Final candidates: []
2025-04-11 17:43:36,456 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,464 [INFO] Final candidates: []
2025-04-11 17:43:36,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:36,740 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:36,740 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:36,740 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 17:43:36,748 [INFO] Final candidates: []
2025-04-11 17:43:36,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,756 [INFO] Final candidates: []
2025-04-11 17:43:36,756 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:36,757 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:37,023 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:37,023 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:37,023 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(15)), (np.int64(2), np.int64(16)))
2025-04-11 17:43:37,031 [INFO] Final candidates: []
2025-04-11 17:43:37,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,039 [INFO] Final candidates: []
2025-04-11 17:43:37,039 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,040 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:37,099 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:37,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:37,100 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(1)), (np.int64(8), np.int64(5)))
2025-04-11 17:43:37,107 [INFO] Final candidates: []
2025-04-11 17:43:37,107 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,110 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:43:37,110 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:37,110 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:43:37,110 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:43:37,118 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:43:37,118 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:43:37,118 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:37,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:37,288 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:37,288 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:37,289 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:37,308 [INFO] Final candidates: []
2025-04-11 17:43:37,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,314 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:43:37,314 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:37,314 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:43:37,314 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:43:37,321 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:43:37,321 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:43:37,321 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:37,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:37,345 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:37,345 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:37,345 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(1)), (np.int64(9), np.int64(0)))
2025-04-11 17:43:37,356 [INFO] Final candidates: []
2025-04-11 17:43:37,356 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,358 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:43:37,358 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:37,358 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:43:37,358 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:43:37,364 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:43:37,364 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:43:37,364 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:37,364 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:37,642 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:37,642 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:37,643 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(1)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:37,650 [INFO] Final candidates: []
2025-04-11 17:43:37,650 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,653 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:43:37,653 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:37,653 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:43:37,653 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:43:37,659 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:43:37,659 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:43:37,659 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:37,659 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:37,832 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:37,832 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:37,833 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(9), np.int64(0)))
2025-04-11 17:43:37,840 [INFO] Final candidates: []
2025-04-11 17:43:37,840 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,842 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:43:37,842 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:43:37,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:43:37,843 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:43:37,848 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:43:37,848 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:43:37,848 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:37,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:37,973 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:37,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:37,973 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:37,981 [INFO] Final candidates: []
2025-04-11 17:43:37,981 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,989 [INFO] Final candidates: []
2025-04-11 17:43:37,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:37,990 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:38,101 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:38,102 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:38,102 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(8), np.int64(5)))
2025-04-11 17:43:38,109 [INFO] Final candidates: []
2025-04-11 17:43:38,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,117 [INFO] Final candidates: []
2025-04-11 17:43:38,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:38,204 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:38,205 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:38,205 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(4), np.int64(13)))
2025-04-11 17:43:38,213 [INFO] Final candidates: []
2025-04-11 17:43:38,213 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,219 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:38,219 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:38,219 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:38,219 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:38,219 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:38,219 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:38,219 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:38,220 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:38,220 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:38,220 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:38,221 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:38,221 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:38,221 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:38,221 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:38,285 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:38,285 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:38,285 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(4)), (np.int64(4), np.int64(10)))
2025-04-11 17:43:38,294 [INFO] Final candidates: []
2025-04-11 17:43:38,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,301 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:38,301 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:38,302 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:38,302 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:38,302 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:38,302 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:38,302 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:38,302 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:38,302 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:38,302 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:38,303 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:38,303 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:38,303 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:38,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:38,517 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:38,518 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:38,518 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(13)), (np.int64(9), np.int64(6)))
2025-04-11 17:43:38,526 [INFO] Final candidates: []
2025-04-11 17:43:38,526 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,536 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:38,536 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:38,536 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:38,537 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:38,537 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:38,537 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:38,537 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:38,537 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:38,537 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:38,537 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:38,538 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:38,538 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:38,538 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:38,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:38,635 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:38,636 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:38,636 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(3)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:38,644 [INFO] Final candidates: []
2025-04-11 17:43:38,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,650 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:38,650 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:38,650 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:38,651 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:38,651 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:38,651 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:38,651 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:38,651 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:38,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:38,651 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:38,652 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:38,652 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:38,652 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:38,652 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:38,783 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:38,783 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:38,783 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(16)), (np.int64(3), np.int64(14)))
2025-04-11 17:43:38,793 [INFO] Final candidates: []
2025-04-11 17:43:38,793 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,803 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:38,804 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:38,804 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:38,804 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:38,804 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:38,804 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:38,804 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:38,804 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:38,804 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:38,805 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:38,808 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:38,808 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:38,808 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:38,808 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:38,911 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:38,911 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:38,911 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(2)), (np.int64(1), np.int64(2)))
2025-04-11 17:43:38,920 [INFO] Final candidates: []
2025-04-11 17:43:38,920 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:38,926 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:38,927 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:38,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:38,927 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:38,927 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:38,927 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:38,927 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:38,927 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:38,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:38,927 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:38,928 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:38,928 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:38,928 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:38,928 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:39,113 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:39,114 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:39,114 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(4)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:39,121 [INFO] Final candidates: []
2025-04-11 17:43:39,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:39,129 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:39,129 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:39,129 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:39,129 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:39,130 [INFO] Final candidates: [(12, 1)]
2025-04-11 17:43:39,130 [INFO] Phase defense: Found only one candidate: (12, 1)
2025-04-11 17:43:39,131 [INFO] Phase defense: Collected 10unique candidate(s):[((12, 1), (np.int64(12), np.int64(2))), ((12, 1), (np.int64(14), np.int64(1))), ((12, 1), (np.int64(11), np.int64(0))), ((12, 1), (np.int64(10), np.int64(1))), ((12, 1), (np.int64(13), np.int64(1))), ((12, 1), (np.int64(12), np.int64(3))), ((12, 1), (np.int64(11), np.int64(1))), ((12, 1), (np.int64(13), np.int64(0))), ((12, 1), (np.int64(13), np.int64(2))), ((12, 1), (np.int64(12), np.int64(0)))]
2025-04-11 17:43:39,131 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:43:39,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:39,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:39,274 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:39,274 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(7), np.int64(7)))
2025-04-11 17:43:39,282 [INFO] Final candidates: []
2025-04-11 17:43:39,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:39,288 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:39,288 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:39,288 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:39,288 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:39,288 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:39,288 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:39,289 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:39,289 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:39,289 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:39,289 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:39,290 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:39,290 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:39,290 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:39,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:39,379 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:39,380 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:39,380 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(6)), (np.int64(2), np.int64(12)))
2025-04-11 17:43:39,387 [INFO] Final candidates: []
2025-04-11 17:43:39,387 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:39,394 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:39,394 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:39,394 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:39,394 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:39,394 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:39,394 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:39,394 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:39,394 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:39,394 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:39,394 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:39,396 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:39,396 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:39,396 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:39,396 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:39,514 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:39,514 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:39,515 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(2)), (np.int64(0), np.int64(12)))
2025-04-11 17:43:39,523 [INFO] Final candidates: []
2025-04-11 17:43:39,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:39,529 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:39,529 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:39,529 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:39,530 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:39,530 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:39,530 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:39,530 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:39,530 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:39,530 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:39,530 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:39,531 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:39,531 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:39,531 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:39,532 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:39,854 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:39,854 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:39,854 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(9), np.int64(1)))
2025-04-11 17:43:39,862 [INFO] Final candidates: []
2025-04-11 17:43:39,862 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:39,869 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:39,869 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:39,869 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:39,869 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:39,869 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:39,869 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:39,869 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:39,869 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:39,869 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:39,869 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:39,870 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:39,870 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:39,870 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:39,870 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:39,990 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:39,990 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:39,990 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(6)), (np.int64(5), np.int64(13)))
2025-04-11 17:43:39,998 [INFO] Final candidates: []
2025-04-11 17:43:39,998 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,004 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,005 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,005 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,005 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,005 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:40,005 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:40,005 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:40,005 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:40,005 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:40,005 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:40,006 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:40,006 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:40,006 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:40,006 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:40,024 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:40,024 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:40,024 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(1)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:40,032 [INFO] Final candidates: []
2025-04-11 17:43:40,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,038 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,038 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,038 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,038 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,040 [INFO] Final candidates: [(7, 6)]
2025-04-11 17:43:40,040 [INFO] Phase defense: Found only one candidate: (7, 6)
2025-04-11 17:43:40,040 [INFO] Phase defense: Collected 9unique candidate(s):[((7, 6), (np.int64(6), np.int64(5))), ((7, 6), (np.int64(9), np.int64(6))), ((7, 6), (np.int64(7), np.int64(8))), ((7, 6), (np.int64(8), np.int64(7))), ((7, 6), (np.int64(6), np.int64(6))), ((7, 6), (np.int64(7), np.int64(7))), ((7, 6), (np.int64(5), np.int64(6))), ((7, 6), (np.int64(6), np.int64(7))), ((7, 6), (np.int64(8), np.int64(6)))]
2025-04-11 17:43:40,040 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 17:43:40,040 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:40,091 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:40,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:40,091 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:40,099 [INFO] Final candidates: []
2025-04-11 17:43:40,099 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,105 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,105 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,105 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,105 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,106 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:40,106 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:40,106 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:40,106 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:40,106 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:40,106 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:40,107 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:40,107 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:40,107 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:40,107 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:40,378 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:40,379 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:40,379 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:40,388 [INFO] Final candidates: []
2025-04-11 17:43:40,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,395 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,395 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,395 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,395 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,395 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:40,395 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:40,396 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:40,396 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:40,396 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:40,396 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:40,397 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:40,397 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:40,397 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:40,397 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:40,433 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:40,433 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:40,433 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(2)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:40,441 [INFO] Final candidates: []
2025-04-11 17:43:40,441 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,449 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,449 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,449 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,449 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,449 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:40,449 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:40,449 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:40,449 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:40,449 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:40,449 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:40,451 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:40,451 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:40,451 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:40,451 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:40,742 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:40,742 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:40,743 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:40,750 [INFO] Final candidates: []
2025-04-11 17:43:40,750 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,758 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,758 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,758 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,758 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,758 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:40,758 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:40,758 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:40,758 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:40,758 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:40,758 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:40,759 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:40,759 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:40,759 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:40,759 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:40,787 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:40,787 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:40,787 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:40,795 [INFO] Final candidates: []
2025-04-11 17:43:40,795 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,802 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,802 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,802 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,802 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,802 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:40,802 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:40,802 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:40,802 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:40,802 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:40,802 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:40,804 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:40,804 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:40,804 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:40,804 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:40,937 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:40,937 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:40,937 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(6)), (np.int64(1), np.int64(13)))
2025-04-11 17:43:40,945 [INFO] Final candidates: []
2025-04-11 17:43:40,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:40,951 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:40,951 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:40,951 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:40,952 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:40,952 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:40,952 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:40,952 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:40,952 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:40,952 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:40,952 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:40,953 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:40,953 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:40,953 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:40,953 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,086 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:41,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,086 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(1)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:41,095 [INFO] Final candidates: []
2025-04-11 17:43:41,095 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,101 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:41,101 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:41,101 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:41,101 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:41,101 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:41,101 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:41,101 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,101 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,101 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,101 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,103 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:41,103 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:41,103 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:41,103 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,123 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:41,123 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,123 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:41,131 [INFO] Final candidates: []
2025-04-11 17:43:41,131 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,137 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:41,137 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:41,137 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:41,137 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:41,137 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:41,137 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:41,137 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,137 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,137 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,137 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,139 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:41,139 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:41,139 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:41,139 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,218 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:41,218 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,218 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(13)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:41,226 [INFO] Final candidates: []
2025-04-11 17:43:41,226 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,232 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:41,232 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:41,232 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:41,232 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:41,233 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:41,233 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:41,233 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,233 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,233 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,234 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:41,234 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:41,234 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:41,234 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,369 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:41,369 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,369 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(4)), (np.int64(4), np.int64(15)))
2025-04-11 17:43:41,377 [INFO] Final candidates: []
2025-04-11 17:43:41,377 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,383 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:41,383 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:41,383 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:41,383 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:41,383 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:41,383 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:41,383 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,383 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,383 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,383 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,385 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:41,385 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:41,385 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:41,385 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,410 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:41,411 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,411 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(15)), (np.int64(3), np.int64(14)))
2025-04-11 17:43:41,418 [INFO] Final candidates: []
2025-04-11 17:43:41,418 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,425 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:41,425 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:41,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:41,425 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:41,425 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:41,425 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:41,425 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,425 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,425 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,426 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:41,427 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:41,427 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:41,427 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,512 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:41,512 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,512 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:41,520 [INFO] Final candidates: []
2025-04-11 17:43:41,520 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,526 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,526 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,526 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,526 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,528 [INFO] Final candidates: [(12, 1)]
2025-04-11 17:43:41,528 [INFO] Phase defense: Found only one candidate: (12, 1)
2025-04-11 17:43:41,528 [INFO] Phase defense: Collected 10unique candidate(s):[((12, 1), (np.int64(12), np.int64(2))), ((12, 1), (np.int64(14), np.int64(1))), ((12, 1), (np.int64(11), np.int64(0))), ((12, 1), (np.int64(10), np.int64(1))), ((12, 1), (np.int64(13), np.int64(1))), ((12, 1), (np.int64(12), np.int64(3))), ((12, 1), (np.int64(11), np.int64(1))), ((12, 1), (np.int64(13), np.int64(0))), ((12, 1), (np.int64(13), np.int64(2))), ((12, 1), (np.int64(12), np.int64(0)))]
2025-04-11 17:43:41,528 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:43:41,528 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,660 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:41,661 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,661 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:41,668 [INFO] Final candidates: []
2025-04-11 17:43:41,669 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,675 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:41,675 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:41,675 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:41,675 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:41,675 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:41,675 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:41,675 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,675 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,675 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,675 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,677 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:41,677 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:41,677 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:41,677 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,808 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:41,808 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,809 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(15)), (np.int64(2), np.int64(15)))
2025-04-11 17:43:41,817 [INFO] Final candidates: []
2025-04-11 17:43:41,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,830 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:41,830 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:41,831 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:41,831 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:41,831 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:41,831 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:41,831 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,831 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,831 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,831 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,835 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:41,835 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:41,835 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:41,835 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:41,954 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:41,954 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:41,954 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:41,962 [INFO] Final candidates: []
2025-04-11 17:43:41,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:41,969 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:41,969 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:41,969 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:41,969 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:41,970 [INFO] Final candidates: [(12, 1)]
2025-04-11 17:43:41,970 [INFO] Phase defense: Found only one candidate: (12, 1)
2025-04-11 17:43:41,970 [INFO] Phase defense: Collected 10unique candidate(s):[((12, 1), (np.int64(12), np.int64(2))), ((12, 1), (np.int64(14), np.int64(1))), ((12, 1), (np.int64(11), np.int64(0))), ((12, 1), (np.int64(10), np.int64(1))), ((12, 1), (np.int64(13), np.int64(1))), ((12, 1), (np.int64(12), np.int64(3))), ((12, 1), (np.int64(11), np.int64(1))), ((12, 1), (np.int64(13), np.int64(0))), ((12, 1), (np.int64(13), np.int64(2))), ((12, 1), (np.int64(12), np.int64(0)))]
2025-04-11 17:43:41,970 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:43:41,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,152 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:42,152 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,152 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(16)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:42,160 [INFO] Final candidates: []
2025-04-11 17:43:42,160 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,167 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,167 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,167 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,167 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,167 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,167 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,167 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,167 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,168 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,168 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,168 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,168 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,228 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:42,228 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,228 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(2)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:42,236 [INFO] Final candidates: []
2025-04-11 17:43:42,236 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,242 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,242 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,242 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,242 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,242 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,242 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,243 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,243 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,243 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,243 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,244 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,244 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,244 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:42,259 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,259 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(11), np.int64(1)))
2025-04-11 17:43:42,267 [INFO] Final candidates: []
2025-04-11 17:43:42,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,273 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,273 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,273 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,273 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,273 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,273 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,273 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,273 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,273 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,273 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,275 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,275 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,275 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,275 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,352 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:42,352 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,352 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(1), np.int64(14)))
2025-04-11 17:43:42,371 [INFO] Final candidates: []
2025-04-11 17:43:42,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,387 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,387 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,387 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,388 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,388 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,388 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,388 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,388 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,388 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,392 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,392 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,392 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,403 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:42,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,403 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(4)), (np.int64(6), np.int64(14)))
2025-04-11 17:43:42,416 [INFO] Final candidates: []
2025-04-11 17:43:42,416 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,422 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,422 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,422 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,422 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,422 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,422 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,422 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,422 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,422 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,422 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,424 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,424 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,424 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,424 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,625 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:42,626 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,626 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(3), np.int64(6)))
2025-04-11 17:43:42,645 [INFO] Final candidates: []
2025-04-11 17:43:42,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,653 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,653 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,653 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,653 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,653 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,653 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,653 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,654 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,654 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,654 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,655 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,655 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,655 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,655 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:43:42,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,768 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:42,768 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,768 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(2)), (np.int64(10), np.int64(4)))
2025-04-11 17:43:42,776 [INFO] Final candidates: []
2025-04-11 17:43:42,776 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,782 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,782 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,782 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,782 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,782 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,782 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,782 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,782 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,782 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,783 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,784 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,784 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,784 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,784 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:42,960 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:42,961 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:42,961 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:42,972 [INFO] Final candidates: []
2025-04-11 17:43:42,972 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:42,978 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:42,978 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:42,978 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:42,978 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:42,978 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:42,978 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:42,978 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:42,978 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:42,979 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:42,979 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:42,980 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:42,980 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:42,980 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:42,980 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:43,127 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:43,128 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:43,128 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(11), np.int64(4)))
2025-04-11 17:43:43,135 [INFO] Final candidates: []
2025-04-11 17:43:43,135 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:43,142 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:43,142 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:43,142 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:43,142 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:43,142 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:43,142 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:43,142 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:43,142 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:43,142 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:43,142 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:43,144 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:43,144 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:43,144 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:43,144 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:43,211 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:43,211 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:43,211 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:43,225 [INFO] Final candidates: []
2025-04-11 17:43:43,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:43,241 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:43,241 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:43,241 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:43,241 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:43,241 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:43,242 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:43,242 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:43,242 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:43,242 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:43,242 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:43,245 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:43,245 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:43,245 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:43,246 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:43,301 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:43,301 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:43,301 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 17:43:43,309 [INFO] Final candidates: []
2025-04-11 17:43:43,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:43,315 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:43,315 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:43,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:43,315 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:43,315 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:43,315 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:43,315 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:43,315 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:43,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:43,315 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:43,317 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:43,317 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:43,317 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:43,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:43,419 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:43,419 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:43,419 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(6)), (np.int64(5), np.int64(12)))
2025-04-11 17:43:43,427 [INFO] Final candidates: []
2025-04-11 17:43:43,427 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:43,433 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:43,433 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:43,433 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:43,433 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:43,433 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:43,433 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:43,434 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:43,434 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:43,434 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:43,434 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:43,435 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:43,435 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:43,435 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:43,435 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:43,529 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:43,529 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:43,529 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(10), np.int64(5)))
2025-04-11 17:43:43,539 [INFO] Final candidates: []
2025-04-11 17:43:43,540 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:43,546 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:43,546 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:43,546 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:43,546 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:43,546 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:43,546 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:43,546 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:43,546 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:43,546 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:43,546 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:43,548 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:43,548 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:43,548 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:43,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:43,738 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:43,738 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:43,738 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(5)), (np.int64(2), np.int64(13)))
2025-04-11 17:43:43,746 [INFO] Final candidates: []
2025-04-11 17:43:43,746 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:43,752 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:43,752 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:43,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:43,752 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:43,752 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:43,753 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:43,753 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:43,753 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:43,753 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:43,753 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:43,754 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:43,754 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:43,754 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:43,754 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:43,886 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:43,886 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:43,887 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(5)), (np.int64(3), np.int64(6)))
2025-04-11 17:43:43,905 [INFO] Final candidates: []
2025-04-11 17:43:43,906 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:43,915 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:43,915 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:43,915 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:43,915 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:43,915 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:43,915 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:43,915 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:43,915 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:43,916 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:43,916 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:43,917 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:43,917 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:43,917 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:43,917 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,003 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,004 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,004 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:44,014 [INFO] Final candidates: []
2025-04-11 17:43:44,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,021 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,021 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,021 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,021 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,021 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,021 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,021 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,021 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,023 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,023 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,023 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,023 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,081 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:44,081 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,082 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(12)), (np.int64(6), np.int64(10)))
2025-04-11 17:43:44,089 [INFO] Final candidates: []
2025-04-11 17:43:44,089 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,095 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,096 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,096 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,096 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,096 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,096 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,096 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,096 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,096 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,096 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,097 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,097 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,097 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,098 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,212 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,212 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,212 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(7)), (np.int64(6), np.int64(6)))
2025-04-11 17:43:44,220 [INFO] Final candidates: []
2025-04-11 17:43:44,220 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,226 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,226 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,226 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,226 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,227 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,227 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,227 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,227 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,227 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,227 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,228 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,228 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,228 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,228 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,274 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:44,275 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,275 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(0)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:44,283 [INFO] Final candidates: []
2025-04-11 17:43:44,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,289 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,289 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,289 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,289 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,289 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,289 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,289 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,289 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,289 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,289 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,291 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,291 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,291 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,291 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,409 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,410 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,410 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(4)), (np.int64(4), np.int64(6)))
2025-04-11 17:43:44,417 [INFO] Final candidates: []
2025-04-11 17:43:44,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,424 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,424 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,424 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,424 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,424 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,424 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,425 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,425 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,425 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,427 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,427 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,427 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,427 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,446 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,446 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,446 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(2)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:44,454 [INFO] Final candidates: []
2025-04-11 17:43:44,454 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,460 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,460 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,460 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,460 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,462 [INFO] Final candidates: [(12, 1)]
2025-04-11 17:43:44,462 [INFO] Phase defense: Found only one candidate: (12, 1)
2025-04-11 17:43:44,462 [INFO] Phase defense: Collected 10unique candidate(s):[((12, 1), (np.int64(12), np.int64(2))), ((12, 1), (np.int64(14), np.int64(1))), ((12, 1), (np.int64(11), np.int64(0))), ((12, 1), (np.int64(10), np.int64(1))), ((12, 1), (np.int64(13), np.int64(1))), ((12, 1), (np.int64(12), np.int64(3))), ((12, 1), (np.int64(11), np.int64(1))), ((12, 1), (np.int64(13), np.int64(0))), ((12, 1), (np.int64(13), np.int64(2))), ((12, 1), (np.int64(12), np.int64(0)))]
2025-04-11 17:43:44,462 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:43:44,462 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,469 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,469 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,469 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(6)), (np.int64(0), np.int64(16)))
2025-04-11 17:43:44,477 [INFO] Final candidates: []
2025-04-11 17:43:44,477 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,484 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,484 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,484 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,484 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,484 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,484 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,484 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,484 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,484 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,484 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,486 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,486 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,486 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,486 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,546 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,547 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,547 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(5)), (np.int64(3), np.int64(6)))
2025-04-11 17:43:44,554 [INFO] Final candidates: []
2025-04-11 17:43:44,554 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,561 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,561 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,561 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,561 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,561 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,561 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,561 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,561 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,561 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,561 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,563 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,563 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,563 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,563 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,591 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:44,591 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,592 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(10), np.int64(5)))
2025-04-11 17:43:44,599 [INFO] Final candidates: []
2025-04-11 17:43:44,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,605 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,605 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,605 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,606 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,606 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,606 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,606 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,606 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,606 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,606 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,607 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,607 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,607 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,607 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,649 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:44,649 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,649 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(10), np.int64(4)))
2025-04-11 17:43:44,658 [INFO] Final candidates: []
2025-04-11 17:43:44,658 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,664 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,664 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,664 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,664 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,664 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,664 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,665 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,665 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,665 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,666 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,666 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,666 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,666 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,681 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,681 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,681 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(6), np.int64(0)))
2025-04-11 17:43:44,697 [INFO] Final candidates: []
2025-04-11 17:43:44,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,705 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,705 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,705 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,705 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,705 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,705 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,705 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,705 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,707 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,707 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,707 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,707 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,750 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,751 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,751 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(16)), (np.int64(6), np.int64(0)))
2025-04-11 17:43:44,758 [INFO] Final candidates: []
2025-04-11 17:43:44,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,765 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,765 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,765 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,765 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,766 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,766 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,766 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,766 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,766 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,766 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,767 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,767 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,767 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,774 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,774 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,774 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(2)), (np.int64(4), np.int64(11)))
2025-04-11 17:43:44,782 [INFO] Final candidates: []
2025-04-11 17:43:44,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,788 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,788 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,788 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,789 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,789 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,789 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,789 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,789 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,789 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,790 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,790 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,790 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,790 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:44,914 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:44,914 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:44,914 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(2)), (np.int64(6), np.int64(11)))
2025-04-11 17:43:44,922 [INFO] Final candidates: []
2025-04-11 17:43:44,922 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:44,928 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:44,928 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:44,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:44,928 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:44,928 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:44,928 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:44,929 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:44,929 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:44,929 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:44,929 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:44,930 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:44,930 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:44,930 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:44,930 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:45,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:45,167 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:45,167 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(5)), (np.int64(0), np.int64(12)))
2025-04-11 17:43:45,174 [INFO] Final candidates: []
2025-04-11 17:43:45,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:45,181 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:45,181 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:45,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:45,181 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:45,181 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:45,181 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:45,181 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:45,181 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:45,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:45,181 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:45,183 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:45,183 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:45,183 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:45,183 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:45,239 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:45,240 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:45,240 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(0)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:45,247 [INFO] Final candidates: []
2025-04-11 17:43:45,247 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:45,254 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:45,254 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:45,254 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:45,254 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:45,254 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:45,254 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:45,254 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:45,254 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:45,254 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:45,254 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:45,256 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:45,256 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:45,256 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:45,256 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:45,373 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:45,374 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:45,374 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(5)), (np.int64(3), np.int64(15)))
2025-04-11 17:43:45,382 [INFO] Final candidates: []
2025-04-11 17:43:45,382 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:45,388 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:45,388 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:45,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:45,388 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:45,388 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:45,388 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:45,388 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:45,388 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:45,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:45,388 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:45,390 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:45,390 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:45,390 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:45,390 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:45,472 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:45,472 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:45,473 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(1)), (np.int64(3), np.int64(14)))
2025-04-11 17:43:45,481 [INFO] Final candidates: []
2025-04-11 17:43:45,481 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:45,487 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:45,487 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:45,487 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:45,487 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:45,489 [INFO] Final candidates: [(7, 6)]
2025-04-11 17:43:45,489 [INFO] Phase defense: Found only one candidate: (7, 6)
2025-04-11 17:43:45,489 [INFO] Phase defense: Collected 9unique candidate(s):[((7, 6), (np.int64(6), np.int64(5))), ((7, 6), (np.int64(9), np.int64(6))), ((7, 6), (np.int64(7), np.int64(8))), ((7, 6), (np.int64(8), np.int64(7))), ((7, 6), (np.int64(6), np.int64(6))), ((7, 6), (np.int64(7), np.int64(7))), ((7, 6), (np.int64(5), np.int64(6))), ((7, 6), (np.int64(6), np.int64(7))), ((7, 6), (np.int64(8), np.int64(6)))]
2025-04-11 17:43:45,489 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 17:43:45,489 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:45,763 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:45,763 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:45,763 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(10)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:45,771 [INFO] Final candidates: []
2025-04-11 17:43:45,771 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:45,778 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:45,778 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:45,778 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:45,778 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:45,778 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:45,778 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:45,778 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:45,778 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:45,778 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:45,778 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:45,780 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:45,780 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:45,780 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:45,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:45,881 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:45,882 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:45,882 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(2)), (np.int64(1), np.int64(13)))
2025-04-11 17:43:45,889 [INFO] Final candidates: []
2025-04-11 17:43:45,889 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:45,896 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:45,896 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:45,896 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:45,896 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:45,896 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:45,896 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:45,896 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:45,896 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:45,896 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:45,896 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:45,898 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:45,898 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:45,898 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:45,898 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:45,964 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:45,965 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:45,965 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(2), np.int64(16)))
2025-04-11 17:43:45,973 [INFO] Final candidates: []
2025-04-11 17:43:45,973 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:45,979 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:45,979 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:45,979 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:45,979 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:45,979 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:45,979 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:45,980 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:45,980 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:45,980 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:45,980 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:45,981 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:45,981 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:45,981 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:45,981 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:46,065 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:46,065 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:46,065 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(1), np.int64(4)))
2025-04-11 17:43:46,073 [INFO] Final candidates: []
2025-04-11 17:43:46,073 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:46,079 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:46,079 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:46,079 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:46,079 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:46,080 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:46,080 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:46,080 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:46,080 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:46,080 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:46,080 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:46,081 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:46,081 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:46,081 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:46,081 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:46,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:46,167 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:46,167 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(15)), (np.int64(5), np.int64(5)))
2025-04-11 17:43:46,174 [INFO] Final candidates: []
2025-04-11 17:43:46,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:46,181 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:46,181 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:46,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:46,181 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:46,181 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:46,181 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:46,181 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:46,181 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:46,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:46,181 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:46,183 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:46,183 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:46,183 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:46,183 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:46,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:46,274 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:46,274 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(1)), (np.int64(9), np.int64(6)))
2025-04-11 17:43:46,282 [INFO] Final candidates: []
2025-04-11 17:43:46,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:46,288 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:46,288 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:46,288 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:46,288 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:46,288 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:46,288 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:46,288 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:46,288 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:46,288 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:46,289 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:46,290 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:46,290 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:46,290 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:46,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:46,475 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:46,475 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:46,476 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:46,486 [INFO] Final candidates: []
2025-04-11 17:43:46,486 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:46,492 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:46,492 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:46,493 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:46,493 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:46,493 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:46,493 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:46,493 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:46,493 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:46,493 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:46,493 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:46,494 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:46,494 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:46,494 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:46,494 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:46,611 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:46,612 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:46,612 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(16)), (np.int64(5), np.int64(14)))
2025-04-11 17:43:46,619 [INFO] Final candidates: []
2025-04-11 17:43:46,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:46,626 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:46,626 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:46,626 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:46,626 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:46,626 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:46,626 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:46,626 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:46,626 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:46,626 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:46,626 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:46,628 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:46,628 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:46,628 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:46,628 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:46,693 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:46,693 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:46,693 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(4)), (np.int64(1), np.int64(13)))
2025-04-11 17:43:46,701 [INFO] Final candidates: []
2025-04-11 17:43:46,701 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:46,707 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:46,707 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:46,707 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:46,708 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:46,708 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:46,708 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:46,708 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:46,708 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:46,708 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:46,708 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:46,709 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:46,709 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:46,709 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:46,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:46,912 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:46,912 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:46,912 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(1), np.int64(17)))
2025-04-11 17:43:46,920 [INFO] Final candidates: []
2025-04-11 17:43:46,920 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:46,926 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:46,926 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:46,926 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:46,926 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:46,927 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:46,927 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:46,927 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:46,927 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:46,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:46,927 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:46,928 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:46,928 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:46,928 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:46,928 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,117 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:47,117 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,117 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(1)), (np.int64(9), np.int64(5)))
2025-04-11 17:43:47,125 [INFO] Final candidates: []
2025-04-11 17:43:47,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,131 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,131 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,131 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,134 [INFO] Final candidates: [(7, 6)]
2025-04-11 17:43:47,134 [INFO] Phase defense: Found only one candidate: (7, 6)
2025-04-11 17:43:47,135 [INFO] Phase defense: Collected 9unique candidate(s):[((7, 6), (np.int64(6), np.int64(5))), ((7, 6), (np.int64(9), np.int64(6))), ((7, 6), (np.int64(7), np.int64(8))), ((7, 6), (np.int64(8), np.int64(7))), ((7, 6), (np.int64(6), np.int64(6))), ((7, 6), (np.int64(7), np.int64(7))), ((7, 6), (np.int64(5), np.int64(6))), ((7, 6), (np.int64(6), np.int64(7))), ((7, 6), (np.int64(8), np.int64(6)))]
2025-04-11 17:43:47,135 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 17:43:47,135 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,190 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:47,191 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,191 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(2)), (np.int64(1), np.int64(13)))
2025-04-11 17:43:47,199 [INFO] Final candidates: []
2025-04-11 17:43:47,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,205 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,205 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,205 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,205 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,205 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,205 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,205 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,206 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,206 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,206 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,207 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,207 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,207 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,256 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:47,256 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,256 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(10)), (np.int64(0), np.int64(6)))
2025-04-11 17:43:47,264 [INFO] Final candidates: []
2025-04-11 17:43:47,264 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,270 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,270 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,271 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,271 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,271 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,271 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,271 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,271 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,271 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,272 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,272 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,272 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,272 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,325 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:47,325 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,325 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(4)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:47,333 [INFO] Final candidates: []
2025-04-11 17:43:47,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,340 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,340 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,340 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,340 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,340 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,340 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,340 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,340 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,342 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,342 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,342 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,342 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,444 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:47,444 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,444 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(2), np.int64(13)))
2025-04-11 17:43:47,452 [INFO] Final candidates: []
2025-04-11 17:43:47,452 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,459 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,459 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,459 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,459 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,459 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,459 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,459 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,459 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,459 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,459 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,460 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,460 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,461 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,461 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,544 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:47,544 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,544 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(4)), (np.int64(5), np.int64(5)))
2025-04-11 17:43:47,552 [INFO] Final candidates: []
2025-04-11 17:43:47,552 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,558 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,558 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,558 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,558 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,559 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,559 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,559 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,559 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,559 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,559 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,560 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,560 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,560 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,560 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,619 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:47,619 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,619 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(2)), (np.int64(3), np.int64(6)))
2025-04-11 17:43:47,627 [INFO] Final candidates: []
2025-04-11 17:43:47,627 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,633 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,633 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,633 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,633 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,634 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,634 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,634 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,634 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,634 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,634 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,635 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,635 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,635 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,635 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,727 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:47,727 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,728 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(2)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:47,735 [INFO] Final candidates: []
2025-04-11 17:43:47,735 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,742 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,742 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,742 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,742 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,742 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,742 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,742 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,742 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,742 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,742 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,744 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,744 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,744 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,744 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:47,811 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,811 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(4)), (np.int64(1), np.int64(14)))
2025-04-11 17:43:47,820 [INFO] Final candidates: []
2025-04-11 17:43:47,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,827 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,827 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,827 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,827 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,827 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,827 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,827 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,827 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,827 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,827 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,829 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,829 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,829 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:47,889 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:47,890 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:47,890 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(12)), (np.int64(3), np.int64(14)))
2025-04-11 17:43:47,898 [INFO] Final candidates: []
2025-04-11 17:43:47,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:47,904 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:47,904 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:47,904 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:47,904 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:47,904 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:47,904 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:47,904 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:47,904 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:47,904 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:47,904 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:47,906 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:47,906 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:47,906 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:47,906 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:48,018 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:48,018 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:48,018 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(1)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:48,026 [INFO] Final candidates: []
2025-04-11 17:43:48,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,032 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:48,032 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:48,032 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:48,033 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:48,033 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:48,033 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:48,033 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:48,033 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:48,033 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:48,033 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:48,034 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:48,034 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:48,034 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:48,034 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:48,078 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:48,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:43:48,078 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(6)), (np.int64(9), np.int64(1)))
2025-04-11 17:43:48,086 [INFO] Final candidates: []
2025-04-11 17:43:48,086 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,092 [DEBUG] board coords: [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)]
2025-04-11 17:43:48,093 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:43:48,093 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (7, 6)]
2025-04-11 17:43:48,093 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 7), (7, 6), (8, 5), (9, 4), (10, 3), (11, 2)] triggers candidate.
2025-04-11 17:43:48,093 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(7, 6), (8, 5), (9, 4), (10, 3), (11, 2), (12, 1)] triggers candidate.
2025-04-11 17:43:48,093 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:48,093 [DEBUG] board coords: [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)]
2025-04-11 17:43:48,093 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:43:48,093 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 1), (13, 0)]
2025-04-11 17:43:48,093 [DEBUG] check_window_intermediate_custom (only one inserted(12, 1)): For L=6, window [1 1 1 1 0 0] with coords [(8, 5), (9, 4), (10, 3), (11, 2), (12, 1), (13, 0)] triggers candidate.
2025-04-11 17:43:48,094 [INFO] Final candidates: [(12, 1), (7, 6)]
2025-04-11 17:43:48,095 [INFO] Phase defense: Collected 1unique candidate(s):[((12, 1), (7, 6))]
2025-04-11 17:43:48,095 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:43:48,095 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:48,181 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:48,181 [INFO] MCTS: Search finished. Best move selected with 3 visits.
2025-04-11 17:43:48,181 [INFO] MCTS (defense candidates) selected move: E10,E11
2025-04-11 17:43:48,436 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:43:48,444 [INFO] Final candidates: []
2025-04-11 17:43:48,444 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,452 [INFO] Final candidates: []
2025-04-11 17:43:48,452 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,452 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:43:48,453 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:43:48,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(3), np.int64(7)))
2025-04-11 17:43:48,460 [INFO] Final candidates: []
2025-04-11 17:43:48,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,468 [INFO] Final candidates: []
2025-04-11 17:43:48,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,469 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:43:48,469 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:48,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:48,696 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(2), np.int64(13)))
2025-04-11 17:43:48,704 [INFO] Final candidates: []
2025-04-11 17:43:48,704 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,712 [INFO] Final candidates: []
2025-04-11 17:43:48,712 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,713 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:48,834 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:48,835 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(6), np.int64(14)))
2025-04-11 17:43:48,842 [INFO] Final candidates: []
2025-04-11 17:43:48,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,850 [INFO] Final candidates: []
2025-04-11 17:43:48,850 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,851 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:48,950 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:48,950 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(8), np.int64(6)))
2025-04-11 17:43:48,951 [DEBUG] board coords: [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)]
2025-04-11 17:43:48,951 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:48,951 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (8, 2)]
2025-04-11 17:43:48,951 [DEBUG] check_window_intermediate_custom (only one inserted(8, 2)): For L=6, window [0 0 2 2 2 2] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:48,951 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:48,951 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:48,951 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:43:48,951 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:48,951 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (8, 8)]
2025-04-11 17:43:48,951 [DEBUG] check_window_intermediate_custom (only one inserted(8, 7)): For L=6, window [2 2 2 2 0 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:43:48,959 [INFO] Final candidates: [(8, 7), (8, 2)]
2025-04-11 17:43:48,959 [INFO] Phase win: Collected 1unique candidate(s):[((8, 7), (8, 2))]
2025-04-11 17:43:48,959 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:48,967 [INFO] Final candidates: []
2025-04-11 17:43:48,967 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:48,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:49,204 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:49,204 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(6), np.int64(14)))
2025-04-11 17:43:49,212 [INFO] Final candidates: []
2025-04-11 17:43:49,212 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,221 [INFO] Final candidates: []
2025-04-11 17:43:49,221 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:49,262 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:49,263 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:49,270 [INFO] Final candidates: []
2025-04-11 17:43:49,270 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,279 [INFO] Final candidates: []
2025-04-11 17:43:49,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:49,414 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:49,415 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:49,422 [INFO] Final candidates: []
2025-04-11 17:43:49,422 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,431 [INFO] Final candidates: []
2025-04-11 17:43:49,431 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,432 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:49,515 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:49,516 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(1), np.int64(14)))
2025-04-11 17:43:49,524 [INFO] Final candidates: []
2025-04-11 17:43:49,524 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,532 [INFO] Final candidates: []
2025-04-11 17:43:49,532 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,532 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:49,719 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:49,719 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(11), np.int64(0)))
2025-04-11 17:43:49,727 [DEBUG] board coords: [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)]
2025-04-11 17:43:49,727 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:43:49,727 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (9, 2)]
2025-04-11 17:43:49,727 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)] triggers candidate.
2025-04-11 17:43:49,729 [INFO] Final candidates: [(9, 2), (6, 5)]
2025-04-11 17:43:49,729 [INFO] Phase win: Collected 1unique candidate(s):[((9, 2), (6, 5))]
2025-04-11 17:43:49,729 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:49,737 [INFO] Final candidates: []
2025-04-11 17:43:49,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,737 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:49,841 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:49,841 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(3), np.int64(14)))
2025-04-11 17:43:49,849 [INFO] Final candidates: []
2025-04-11 17:43:49,849 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,856 [INFO] Final candidates: []
2025-04-11 17:43:49,856 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:49,857 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,007 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:50,007 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(4)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:50,015 [INFO] Final candidates: []
2025-04-11 17:43:50,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,025 [INFO] Final candidates: []
2025-04-11 17:43:50,025 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,188 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:50,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(6)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:50,196 [INFO] Final candidates: []
2025-04-11 17:43:50,196 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,203 [INFO] Final candidates: []
2025-04-11 17:43:50,204 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,204 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,279 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:50,279 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(0), np.int64(2)))
2025-04-11 17:43:50,287 [INFO] Final candidates: []
2025-04-11 17:43:50,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,295 [INFO] Final candidates: []
2025-04-11 17:43:50,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,426 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:50,427 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(5), np.int64(12)))
2025-04-11 17:43:50,434 [INFO] Final candidates: []
2025-04-11 17:43:50,434 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,442 [INFO] Final candidates: []
2025-04-11 17:43:50,442 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,443 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,555 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:50,556 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:50,556 [DEBUG] board coords: [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
2025-04-11 17:43:50,556 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:43:50,556 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:50,556 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:50,556 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:43:50,556 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:43:50,556 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:43:50,556 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:43:50,564 [INFO] Final candidates: [(8, 8), (8, 2), (8, 6)]
2025-04-11 17:43:50,564 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 6)), ((8, 8), (8, 6)), ((8, 8), (8, 2))]
2025-04-11 17:43:50,564 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:50,572 [INFO] Final candidates: []
2025-04-11 17:43:50,572 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,572 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,698 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:50,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(12), np.int64(2)))
2025-04-11 17:43:50,706 [INFO] Final candidates: []
2025-04-11 17:43:50,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,713 [INFO] Final candidates: []
2025-04-11 17:43:50,713 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,714 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,800 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:50,801 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(15)), (np.int64(9), np.int64(6)))
2025-04-11 17:43:50,808 [INFO] Final candidates: []
2025-04-11 17:43:50,808 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,816 [INFO] Final candidates: []
2025-04-11 17:43:50,816 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:50,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:50,871 [DEBUG] board coords: [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)]
2025-04-11 17:43:50,871 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:50,871 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 0), (8, 2)]
2025-04-11 17:43:50,871 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)] triggers candidate.
2025-04-11 17:43:50,871 [DEBUG] board coords: [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)]
2025-04-11 17:43:50,871 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:50,871 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:50,871 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:50,878 [INFO] Final candidates: [(8, 2), (8, 0), (8, 6)]
2025-04-11 17:43:50,878 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 0)), ((8, 0), (8, 6)), ((8, 2), (8, 6))]
2025-04-11 17:43:50,878 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:50,886 [INFO] Final candidates: []
2025-04-11 17:43:50,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,887 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,891 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:50,891 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(4), np.int64(10)))
2025-04-11 17:43:50,899 [INFO] Final candidates: []
2025-04-11 17:43:50,899 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,907 [INFO] Final candidates: []
2025-04-11 17:43:50,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:50,908 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:50,996 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:50,996 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(0), np.int64(12)))
2025-04-11 17:43:51,004 [INFO] Final candidates: []
2025-04-11 17:43:51,004 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,012 [INFO] Final candidates: []
2025-04-11 17:43:51,012 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,013 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:51,138 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:51,139 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(9), np.int64(6)))
2025-04-11 17:43:51,146 [INFO] Final candidates: []
2025-04-11 17:43:51,146 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,154 [INFO] Final candidates: []
2025-04-11 17:43:51,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,155 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:51,336 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:51,337 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(0), np.int64(13)))
2025-04-11 17:43:51,344 [INFO] Final candidates: []
2025-04-11 17:43:51,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,352 [INFO] Final candidates: []
2025-04-11 17:43:51,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,353 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:51,584 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:51,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:51,585 [DEBUG] board coords: [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
2025-04-11 17:43:51,585 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:43:51,585 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:51,585 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:51,585 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:43:51,585 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:43:51,585 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:43:51,585 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:43:51,592 [INFO] Final candidates: [(8, 8), (8, 2), (8, 6)]
2025-04-11 17:43:51,592 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 6)), ((8, 8), (8, 6)), ((8, 8), (8, 2))]
2025-04-11 17:43:51,592 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:51,600 [INFO] Final candidates: []
2025-04-11 17:43:51,600 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:51,754 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:51,754 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(3), np.int64(11)))
2025-04-11 17:43:51,762 [INFO] Final candidates: []
2025-04-11 17:43:51,762 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,770 [INFO] Final candidates: []
2025-04-11 17:43:51,770 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,770 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:51,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:51,909 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(5), np.int64(5)))
2025-04-11 17:43:51,910 [DEBUG] board coords: [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)]
2025-04-11 17:43:51,910 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:51,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 0), (8, 1)]
2025-04-11 17:43:51,910 [DEBUG] check_window_intermediate_custom (only one inserted(8, 1)): For L=6, window [0 0 2 2 2 2] with coords [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)] triggers candidate.
2025-04-11 17:43:51,910 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:51,910 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:51,910 [DEBUG] board coords: [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
2025-04-11 17:43:51,910 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:51,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 7)]
2025-04-11 17:43:51,910 [DEBUG] check_window_intermediate_custom (only one inserted(8, 6)): For L=6, window [2 2 2 2 0 0] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:51,919 [INFO] Final candidates: [(8, 6), (8, 1)]
2025-04-11 17:43:51,919 [INFO] Phase win: Collected 1unique candidate(s):[((8, 6), (8, 1))]
2025-04-11 17:43:51,919 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:51,928 [INFO] Final candidates: []
2025-04-11 17:43:51,928 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:51,929 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,039 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:52,039 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:52,047 [INFO] Final candidates: []
2025-04-11 17:43:52,047 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,054 [INFO] Final candidates: []
2025-04-11 17:43:52,054 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,117 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:52,117 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(0), np.int64(16)))
2025-04-11 17:43:52,125 [INFO] Final candidates: []
2025-04-11 17:43:52,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,133 [INFO] Final candidates: []
2025-04-11 17:43:52,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:52,293 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(2), np.int64(5)))
2025-04-11 17:43:52,304 [INFO] Final candidates: []
2025-04-11 17:43:52,306 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,314 [INFO] Final candidates: []
2025-04-11 17:43:52,314 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,315 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,410 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:52,410 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(9), np.int64(6)))
2025-04-11 17:43:52,418 [INFO] Final candidates: []
2025-04-11 17:43:52,418 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,425 [INFO] Final candidates: []
2025-04-11 17:43:52,425 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,426 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,475 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:52,475 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:52,483 [INFO] Final candidates: []
2025-04-11 17:43:52,483 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,490 [INFO] Final candidates: []
2025-04-11 17:43:52,490 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,493 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,614 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:52,614 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:52,622 [INFO] Final candidates: []
2025-04-11 17:43:52,622 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,630 [INFO] Final candidates: []
2025-04-11 17:43:52,630 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,631 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,731 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:52,731 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:52,731 [DEBUG] board coords: [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)]
2025-04-11 17:43:52,731 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:52,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 0), (8, 2)]
2025-04-11 17:43:52,731 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)] triggers candidate.
2025-04-11 17:43:52,731 [DEBUG] board coords: [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)]
2025-04-11 17:43:52,731 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:52,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:52,732 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:52,739 [INFO] Final candidates: [(8, 2), (8, 0), (8, 6)]
2025-04-11 17:43:52,739 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 0)), ((8, 0), (8, 6)), ((8, 2), (8, 6))]
2025-04-11 17:43:52,739 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:52,747 [INFO] Final candidates: []
2025-04-11 17:43:52,747 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,748 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:52,906 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:52,906 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(0), np.int64(12)))
2025-04-11 17:43:52,916 [INFO] Final candidates: []
2025-04-11 17:43:52,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,924 [INFO] Final candidates: []
2025-04-11 17:43:52,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:52,926 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:53,062 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:53,063 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:53,063 [DEBUG] board coords: [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)]
2025-04-11 17:43:53,063 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:53,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 0), (8, 2)]
2025-04-11 17:43:53,063 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)] triggers candidate.
2025-04-11 17:43:53,063 [DEBUG] board coords: [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)]
2025-04-11 17:43:53,063 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:53,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:53,063 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:53,069 [DEBUG] board coords: [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)]
2025-04-11 17:43:53,069 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:53,069 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 6), (6, 5)]
2025-04-11 17:43:53,069 [DEBUG] check_window_intermediate_custom (only one inserted(6, 5)): For L=6, window [0 0 2 2 2 2] with coords [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)] triggers candidate.
2025-04-11 17:43:53,069 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)] triggers candidate.
2025-04-11 17:43:53,069 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:53,071 [INFO] Final candidates: [(6, 5), (11, 0), (8, 0), (8, 6), (8, 2)]
2025-04-11 17:43:53,071 [INFO] Phase win: Collected 10unique candidate(s):[((8, 0), (8, 2)), ((11, 0), (8, 0)), ((8, 0), (8, 6)), ((11, 0), (8, 2)), ((8, 6), (8, 2)), ((11, 0), (8, 6)), ((6, 5), (11, 0)), ((6, 5), (8, 0)), ((6, 5), (8, 2)), ((6, 5), (8, 6))]
2025-04-11 17:43:53,071 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:43:53,082 [INFO] Final candidates: []
2025-04-11 17:43:53,082 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,084 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:53,192 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:53,192 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(9), np.int64(2)))
2025-04-11 17:43:53,199 [DEBUG] board coords: [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)]
2025-04-11 17:43:53,199 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:53,199 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 6), (6, 5)]
2025-04-11 17:43:53,199 [DEBUG] check_window_intermediate_custom (only one inserted(6, 5)): For L=6, window [0 0 2 2 2 2] with coords [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)] triggers candidate.
2025-04-11 17:43:53,199 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)] triggers candidate.
2025-04-11 17:43:53,199 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:53,201 [INFO] Final candidates: [(6, 5), (11, 0)]
2025-04-11 17:43:53,201 [INFO] Phase win: Collected 1unique candidate(s):[((6, 5), (11, 0))]
2025-04-11 17:43:53,201 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:53,209 [INFO] Final candidates: []
2025-04-11 17:43:53,209 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,210 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:53,435 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:53,435 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(2), np.int64(15)))
2025-04-11 17:43:53,443 [INFO] Final candidates: []
2025-04-11 17:43:53,443 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,450 [INFO] Final candidates: []
2025-04-11 17:43:53,450 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,451 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:53,645 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:53,646 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(13), np.int64(2)))
2025-04-11 17:43:53,653 [INFO] Final candidates: []
2025-04-11 17:43:53,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,661 [INFO] Final candidates: []
2025-04-11 17:43:53,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:53,770 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:53,770 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:53,771 [DEBUG] board coords: [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
2025-04-11 17:43:53,771 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:43:53,771 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:53,771 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:53,771 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:43:53,771 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:43:53,771 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:43:53,771 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:43:53,778 [INFO] Final candidates: [(8, 8), (8, 2), (8, 6)]
2025-04-11 17:43:53,778 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 6)), ((8, 8), (8, 6)), ((8, 8), (8, 2))]
2025-04-11 17:43:53,778 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:53,786 [INFO] Final candidates: []
2025-04-11 17:43:53,786 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,787 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:53,881 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:53,882 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(0), np.int64(12)))
2025-04-11 17:43:53,892 [INFO] Final candidates: []
2025-04-11 17:43:53,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,902 [INFO] Final candidates: []
2025-04-11 17:43:53,902 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:53,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:54,008 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:54,008 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(4), np.int64(5)))
2025-04-11 17:43:54,016 [INFO] Final candidates: []
2025-04-11 17:43:54,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,024 [INFO] Final candidates: []
2025-04-11 17:43:54,024 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,024 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:54,137 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:54,137 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(12), np.int64(1)))
2025-04-11 17:43:54,145 [INFO] Final candidates: []
2025-04-11 17:43:54,145 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,152 [INFO] Final candidates: []
2025-04-11 17:43:54,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,153 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:54,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:54,380 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:54,388 [INFO] Final candidates: []
2025-04-11 17:43:54,388 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,396 [INFO] Final candidates: []
2025-04-11 17:43:54,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,397 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:54,424 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:54,424 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(5)), (np.int64(0), np.int64(12)))
2025-04-11 17:43:54,432 [INFO] Final candidates: []
2025-04-11 17:43:54,432 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,440 [INFO] Final candidates: []
2025-04-11 17:43:54,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,440 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:54,719 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:54,719 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 17:43:54,728 [INFO] Final candidates: []
2025-04-11 17:43:54,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,736 [INFO] Final candidates: []
2025-04-11 17:43:54,736 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,737 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:54,831 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:54,831 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(13)), (np.int64(8), np.int64(1)))
2025-04-11 17:43:54,832 [DEBUG] board coords: [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)]
2025-04-11 17:43:54,832 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:54,832 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 0), (8, 2)]
2025-04-11 17:43:54,832 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)] triggers candidate.
2025-04-11 17:43:54,832 [DEBUG] board coords: [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)]
2025-04-11 17:43:54,832 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:43:54,832 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:54,832 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:54,839 [INFO] Final candidates: [(8, 2), (8, 0), (8, 6)]
2025-04-11 17:43:54,839 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 0)), ((8, 0), (8, 6)), ((8, 2), (8, 6))]
2025-04-11 17:43:54,839 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:54,847 [INFO] Final candidates: []
2025-04-11 17:43:54,847 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:54,911 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:54,912 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(8), np.int64(6)))
2025-04-11 17:43:54,912 [DEBUG] board coords: [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)]
2025-04-11 17:43:54,912 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:54,912 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (8, 2)]
2025-04-11 17:43:54,912 [DEBUG] check_window_intermediate_custom (only one inserted(8, 2)): For L=6, window [0 0 2 2 2 2] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:54,912 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:54,912 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:54,912 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:43:54,912 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:54,912 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (8, 8)]
2025-04-11 17:43:54,912 [DEBUG] check_window_intermediate_custom (only one inserted(8, 7)): For L=6, window [2 2 2 2 0 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:43:54,923 [INFO] Final candidates: [(8, 7), (8, 2)]
2025-04-11 17:43:54,923 [INFO] Phase win: Collected 1unique candidate(s):[((8, 7), (8, 2))]
2025-04-11 17:43:54,923 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:54,932 [INFO] Final candidates: []
2025-04-11 17:43:54,932 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:54,933 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,087 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:55,088 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(5)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:55,095 [INFO] Final candidates: []
2025-04-11 17:43:55,095 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,113 [INFO] Final candidates: []
2025-04-11 17:43:55,114 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,114 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,265 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:55,265 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(3), np.int64(11)))
2025-04-11 17:43:55,273 [INFO] Final candidates: []
2025-04-11 17:43:55,273 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,281 [INFO] Final candidates: []
2025-04-11 17:43:55,281 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,281 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,426 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:55,426 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(10), np.int64(0)))
2025-04-11 17:43:55,434 [INFO] Final candidates: []
2025-04-11 17:43:55,434 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,442 [INFO] Final candidates: []
2025-04-11 17:43:55,442 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,443 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,518 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:55,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(13), np.int64(2)))
2025-04-11 17:43:55,526 [INFO] Final candidates: []
2025-04-11 17:43:55,526 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,534 [INFO] Final candidates: []
2025-04-11 17:43:55,534 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,535 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,611 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:55,611 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(3), np.int64(4)))
2025-04-11 17:43:55,619 [INFO] Final candidates: []
2025-04-11 17:43:55,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,627 [INFO] Final candidates: []
2025-04-11 17:43:55,627 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,628 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:43:55,628 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,642 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:55,642 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(0), np.int64(13)))
2025-04-11 17:43:55,650 [INFO] Final candidates: []
2025-04-11 17:43:55,650 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,658 [INFO] Final candidates: []
2025-04-11 17:43:55,658 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,659 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,814 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:55,814 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(4), np.int64(13)))
2025-04-11 17:43:55,822 [INFO] Final candidates: []
2025-04-11 17:43:55,822 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,829 [INFO] Final candidates: []
2025-04-11 17:43:55,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,855 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:55,855 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(1), np.int64(16)))
2025-04-11 17:43:55,863 [INFO] Final candidates: []
2025-04-11 17:43:55,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,870 [INFO] Final candidates: []
2025-04-11 17:43:55,870 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,871 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:55,928 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:55,929 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(11), np.int64(3)))
2025-04-11 17:43:55,936 [INFO] Final candidates: []
2025-04-11 17:43:55,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,945 [INFO] Final candidates: []
2025-04-11 17:43:55,945 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:55,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:56,036 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:56,036 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 17:43:56,044 [INFO] Final candidates: []
2025-04-11 17:43:56,044 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,052 [INFO] Final candidates: []
2025-04-11 17:43:56,052 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,053 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:56,101 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:56,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(14)))
2025-04-11 17:43:56,109 [INFO] Final candidates: []
2025-04-11 17:43:56,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,117 [INFO] Final candidates: []
2025-04-11 17:43:56,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:56,232 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:56,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(4), np.int64(15)))
2025-04-11 17:43:56,242 [INFO] Final candidates: []
2025-04-11 17:43:56,242 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,250 [INFO] Final candidates: []
2025-04-11 17:43:56,250 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,250 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:56,388 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:56,389 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(2), np.int64(12)))
2025-04-11 17:43:56,396 [INFO] Final candidates: []
2025-04-11 17:43:56,396 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,404 [INFO] Final candidates: []
2025-04-11 17:43:56,404 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:56,571 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:56,571 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:56,579 [INFO] Final candidates: []
2025-04-11 17:43:56,579 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,586 [INFO] Final candidates: []
2025-04-11 17:43:56,586 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,587 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:56,755 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:56,755 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(6)), (np.int64(3), np.int64(11)))
2025-04-11 17:43:56,763 [INFO] Final candidates: []
2025-04-11 17:43:56,763 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,772 [INFO] Final candidates: []
2025-04-11 17:43:56,772 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:56,773 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:56,993 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:56,993 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(11), np.int64(1)))
2025-04-11 17:43:57,001 [INFO] Final candidates: []
2025-04-11 17:43:57,001 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,009 [INFO] Final candidates: []
2025-04-11 17:43:57,009 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,010 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:57,107 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:57,107 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(0), np.int64(15)))
2025-04-11 17:43:57,115 [INFO] Final candidates: []
2025-04-11 17:43:57,115 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,123 [INFO] Final candidates: []
2025-04-11 17:43:57,123 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:57,177 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:57,177 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(6), np.int64(14)))
2025-04-11 17:43:57,184 [INFO] Final candidates: []
2025-04-11 17:43:57,185 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,194 [INFO] Final candidates: []
2025-04-11 17:43:57,194 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,195 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:57,228 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:57,229 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(1), np.int64(4)))
2025-04-11 17:43:57,236 [INFO] Final candidates: []
2025-04-11 17:43:57,236 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,244 [INFO] Final candidates: []
2025-04-11 17:43:57,244 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,245 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:57,309 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:57,310 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(2)), (np.int64(5), np.int64(12)))
2025-04-11 17:43:57,310 [DEBUG] board coords: [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)]
2025-04-11 17:43:57,310 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:57,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 0), (8, 1)]
2025-04-11 17:43:57,310 [DEBUG] check_window_intermediate_custom (only one inserted(8, 1)): For L=6, window [0 0 2 2 2 2] with coords [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5)] triggers candidate.
2025-04-11 17:43:57,310 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6)] triggers candidate.
2025-04-11 17:43:57,310 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:57,310 [DEBUG] board coords: [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
2025-04-11 17:43:57,310 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:43:57,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 7)]
2025-04-11 17:43:57,310 [DEBUG] check_window_intermediate_custom (only one inserted(8, 6)): For L=6, window [2 2 2 2 0 0] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:57,318 [INFO] Final candidates: [(8, 6), (8, 1)]
2025-04-11 17:43:57,318 [INFO] Phase win: Collected 1unique candidate(s):[((8, 6), (8, 1))]
2025-04-11 17:43:57,318 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:57,326 [INFO] Final candidates: []
2025-04-11 17:43:57,326 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,326 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:57,547 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:57,548 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(12), np.int64(3)))
2025-04-11 17:43:57,555 [INFO] Final candidates: []
2025-04-11 17:43:57,555 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,563 [INFO] Final candidates: []
2025-04-11 17:43:57,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,564 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:57,762 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:57,762 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(6), np.int64(12)))
2025-04-11 17:43:57,770 [INFO] Final candidates: []
2025-04-11 17:43:57,770 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,777 [INFO] Final candidates: []
2025-04-11 17:43:57,777 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:57,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:57,972 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(2), np.int64(5)))
2025-04-11 17:43:57,979 [INFO] Final candidates: []
2025-04-11 17:43:57,979 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,987 [INFO] Final candidates: []
2025-04-11 17:43:57,987 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:57,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:58,171 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:58,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(2), np.int64(6)))
2025-04-11 17:43:58,179 [INFO] Final candidates: []
2025-04-11 17:43:58,179 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,187 [INFO] Final candidates: []
2025-04-11 17:43:58,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,188 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:58,267 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:58,267 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(7), np.int64(6)))
2025-04-11 17:43:58,275 [INFO] Final candidates: []
2025-04-11 17:43:58,275 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,283 [INFO] Final candidates: []
2025-04-11 17:43:58,283 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,284 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:58,342 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:58,343 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(4), np.int64(16)))
2025-04-11 17:43:58,350 [INFO] Final candidates: []
2025-04-11 17:43:58,350 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,358 [INFO] Final candidates: []
2025-04-11 17:43:58,358 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,359 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:58,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:58,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:58,453 [DEBUG] board coords: [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
2025-04-11 17:43:58,453 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:43:58,453 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:58,453 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:58,453 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:43:58,453 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:43:58,453 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:43:58,453 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:43:58,461 [INFO] Final candidates: [(8, 8), (8, 2), (8, 6)]
2025-04-11 17:43:58,461 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 6)), ((8, 8), (8, 6)), ((8, 8), (8, 2))]
2025-04-11 17:43:58,461 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:58,470 [INFO] Final candidates: []
2025-04-11 17:43:58,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:58,565 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:58,566 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(10), np.int64(5)))
2025-04-11 17:43:58,573 [INFO] Final candidates: []
2025-04-11 17:43:58,574 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,581 [INFO] Final candidates: []
2025-04-11 17:43:58,581 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,582 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:58,854 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:58,854 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(9), np.int64(2)))
2025-04-11 17:43:58,860 [DEBUG] board coords: [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)]
2025-04-11 17:43:58,860 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:58,860 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 6), (6, 5)]
2025-04-11 17:43:58,860 [DEBUG] check_window_intermediate_custom (only one inserted(6, 5)): For L=6, window [0 0 2 2 2 2] with coords [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)] triggers candidate.
2025-04-11 17:43:58,860 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)] triggers candidate.
2025-04-11 17:43:58,860 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:58,862 [INFO] Final candidates: [(6, 5), (11, 0)]
2025-04-11 17:43:58,862 [INFO] Phase win: Collected 1unique candidate(s):[((6, 5), (11, 0))]
2025-04-11 17:43:58,862 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:58,872 [INFO] Final candidates: []
2025-04-11 17:43:58,872 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:58,872 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,006 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:59,006 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(5), np.int64(15)))
2025-04-11 17:43:59,014 [INFO] Final candidates: []
2025-04-11 17:43:59,014 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,021 [INFO] Final candidates: []
2025-04-11 17:43:59,021 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,022 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:59,089 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(4), np.int64(6)))
2025-04-11 17:43:59,097 [INFO] Final candidates: []
2025-04-11 17:43:59,097 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,106 [INFO] Final candidates: []
2025-04-11 17:43:59,106 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,107 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,168 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:59,168 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(9), np.int64(2)))
2025-04-11 17:43:59,175 [DEBUG] board coords: [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)]
2025-04-11 17:43:59,175 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:43:59,175 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 6), (6, 5)]
2025-04-11 17:43:59,175 [DEBUG] check_window_intermediate_custom (only one inserted(6, 5)): For L=6, window [0 0 2 2 2 2] with coords [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)] triggers candidate.
2025-04-11 17:43:59,175 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)] triggers candidate.
2025-04-11 17:43:59,175 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:43:59,176 [INFO] Final candidates: [(6, 5), (11, 0)]
2025-04-11 17:43:59,176 [INFO] Phase win: Collected 1unique candidate(s):[((6, 5), (11, 0))]
2025-04-11 17:43:59,176 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:43:59,184 [INFO] Final candidates: []
2025-04-11 17:43:59,184 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,185 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,252 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:59,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(6), np.int64(12)))
2025-04-11 17:43:59,260 [INFO] Final candidates: []
2025-04-11 17:43:59,260 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,267 [INFO] Final candidates: []
2025-04-11 17:43:59,267 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,268 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,413 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:59,414 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(3), np.int64(4)))
2025-04-11 17:43:59,421 [INFO] Final candidates: []
2025-04-11 17:43:59,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,429 [INFO] Final candidates: []
2025-04-11 17:43:59,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,474 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:59,475 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(4), np.int64(15)))
2025-04-11 17:43:59,494 [INFO] Final candidates: []
2025-04-11 17:43:59,494 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,503 [INFO] Final candidates: []
2025-04-11 17:43:59,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,504 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,580 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:59,580 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(0), np.int64(13)))
2025-04-11 17:43:59,588 [INFO] Final candidates: []
2025-04-11 17:43:59,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,596 [INFO] Final candidates: []
2025-04-11 17:43:59,596 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,597 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,750 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:43:59,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(11), np.int64(4)))
2025-04-11 17:43:59,758 [INFO] Final candidates: []
2025-04-11 17:43:59,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,766 [INFO] Final candidates: []
2025-04-11 17:43:59,766 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:43:59,957 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:43:59,957 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(8), np.int64(7)))
2025-04-11 17:43:59,958 [DEBUG] board coords: [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)]
2025-04-11 17:43:59,958 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:43:59,958 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (8, 6)]
2025-04-11 17:43:59,958 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)] triggers candidate.
2025-04-11 17:43:59,958 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:43:59,958 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:43:59,958 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:43:59,958 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:43:59,965 [INFO] Final candidates: [(8, 8), (8, 2), (8, 6)]
2025-04-11 17:43:59,965 [INFO] Phase win: Collected 3unique candidate(s):[((8, 2), (8, 6)), ((8, 8), (8, 6)), ((8, 8), (8, 2))]
2025-04-11 17:43:59,965 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:43:59,975 [INFO] Final candidates: []
2025-04-11 17:43:59,975 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:43:59,975 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,129 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:00,129 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(12), np.int64(2)))
2025-04-11 17:44:00,137 [INFO] Final candidates: []
2025-04-11 17:44:00,137 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,145 [INFO] Final candidates: []
2025-04-11 17:44:00,145 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,145 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,278 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:00,278 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(0), np.int64(13)))
2025-04-11 17:44:00,291 [INFO] Final candidates: []
2025-04-11 17:44:00,291 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,303 [INFO] Final candidates: []
2025-04-11 17:44:00,303 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,304 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,394 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:00,394 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(12), np.int64(3)))
2025-04-11 17:44:00,404 [INFO] Final candidates: []
2025-04-11 17:44:00,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,422 [INFO] Final candidates: []
2025-04-11 17:44:00,422 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,423 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,639 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:00,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(0), np.int64(13)))
2025-04-11 17:44:00,647 [INFO] Final candidates: []
2025-04-11 17:44:00,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,655 [INFO] Final candidates: []
2025-04-11 17:44:00,655 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,656 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,758 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:00,758 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(2), np.int64(6)))
2025-04-11 17:44:00,766 [INFO] Final candidates: []
2025-04-11 17:44:00,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,774 [INFO] Final candidates: []
2025-04-11 17:44:00,774 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,774 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,813 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:00,814 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(3), np.int64(14)))
2025-04-11 17:44:00,821 [INFO] Final candidates: []
2025-04-11 17:44:00,821 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,829 [INFO] Final candidates: []
2025-04-11 17:44:00,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,886 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:00,886 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(1), np.int64(2)))
2025-04-11 17:44:00,894 [INFO] Final candidates: []
2025-04-11 17:44:00,894 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,903 [INFO] Final candidates: []
2025-04-11 17:44:00,903 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:00,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:00,988 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:00,989 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(10), np.int64(5)))
2025-04-11 17:44:00,996 [INFO] Final candidates: []
2025-04-11 17:44:00,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,004 [INFO] Final candidates: []
2025-04-11 17:44:01,004 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,005 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,149 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:01,149 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(0), np.int64(6)))
2025-04-11 17:44:01,166 [INFO] Final candidates: []
2025-04-11 17:44:01,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,174 [INFO] Final candidates: []
2025-04-11 17:44:01,174 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,256 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:01,256 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:01,264 [INFO] Final candidates: []
2025-04-11 17:44:01,264 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,272 [INFO] Final candidates: []
2025-04-11 17:44:01,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,272 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,329 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:01,330 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(3), np.int64(7)))
2025-04-11 17:44:01,337 [INFO] Final candidates: []
2025-04-11 17:44:01,337 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,345 [INFO] Final candidates: []
2025-04-11 17:44:01,345 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,346 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,416 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:01,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:01,423 [INFO] Final candidates: []
2025-04-11 17:44:01,424 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,431 [INFO] Final candidates: []
2025-04-11 17:44:01,431 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,432 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,548 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:01,548 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:01,556 [INFO] Final candidates: []
2025-04-11 17:44:01,556 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,563 [INFO] Final candidates: []
2025-04-11 17:44:01,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,564 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,603 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:01,603 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(5), np.int64(6)))
2025-04-11 17:44:01,609 [DEBUG] board coords: [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)]
2025-04-11 17:44:01,609 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:44:01,609 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (9, 2)]
2025-04-11 17:44:01,609 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)] triggers candidate.
2025-04-11 17:44:01,611 [INFO] Final candidates: [(9, 2), (6, 5)]
2025-04-11 17:44:01,611 [INFO] Phase win: Collected 1unique candidate(s):[((9, 2), (6, 5))]
2025-04-11 17:44:01,611 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:01,619 [INFO] Final candidates: []
2025-04-11 17:44:01,619 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,620 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,750 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:01,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:01,757 [INFO] Final candidates: []
2025-04-11 17:44:01,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,765 [INFO] Final candidates: []
2025-04-11 17:44:01,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:01,946 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:01,946 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(6), np.int64(5)))
2025-04-11 17:44:01,952 [DEBUG] board coords: [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)]
2025-04-11 17:44:01,952 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:44:01,952 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 6), (9, 2)]
2025-04-11 17:44:01,952 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)] triggers candidate.
2025-04-11 17:44:01,952 [DEBUG] board coords: [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)]
2025-04-11 17:44:01,952 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:01,952 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 2), (11, 0)]
2025-04-11 17:44:01,952 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)] triggers candidate.
2025-04-11 17:44:01,954 [INFO] Final candidates: [(9, 2), (5, 6), (11, 0)]
2025-04-11 17:44:01,954 [INFO] Phase win: Collected 3unique candidate(s):[((9, 2), (11, 0)), ((9, 2), (5, 6)), ((5, 6), (11, 0))]
2025-04-11 17:44:01,954 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:01,962 [INFO] Final candidates: []
2025-04-11 17:44:01,962 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:01,962 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:02,050 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:02,050 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:44:02,050 [INFO] MCTS selected move: O3,H4
2025-04-11 17:44:02,050 [INFO] ===============NEW MOVE================
2025-04-11 17:44:02,317 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:44:02,326 [INFO] Final candidates: []
2025-04-11 17:44:02,326 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,335 [INFO] Final candidates: []
2025-04-11 17:44:02,335 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,335 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:44:02,336 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:44:02,336 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(8), np.int64(2)))
2025-04-11 17:44:02,338 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:44:02,338 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:44:02,338 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 2), (12, 2)]
2025-04-11 17:44:02,338 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:44:02,344 [INFO] Final candidates: [(12, 2), (9, 2)]
2025-04-11 17:44:02,344 [INFO] Phase win: Collected 1unique candidate(s):[((12, 2), (9, 2))]
2025-04-11 17:44:02,344 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:02,353 [INFO] Final candidates: []
2025-04-11 17:44:02,353 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,354 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:44:02,354 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:02,493 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:02,493 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(5), np.int64(13)))
2025-04-11 17:44:02,501 [INFO] Final candidates: []
2025-04-11 17:44:02,501 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,508 [INFO] Final candidates: []
2025-04-11 17:44:02,508 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,509 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:02,615 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:02,616 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(3), np.int64(4)))
2025-04-11 17:44:02,623 [INFO] Final candidates: []
2025-04-11 17:44:02,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,631 [INFO] Final candidates: []
2025-04-11 17:44:02,631 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,632 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:02,685 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:02,685 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(4), np.int64(8)))
2025-04-11 17:44:02,693 [INFO] Final candidates: []
2025-04-11 17:44:02,693 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,700 [INFO] Final candidates: []
2025-04-11 17:44:02,700 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:02,827 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:02,827 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:02,835 [INFO] Final candidates: []
2025-04-11 17:44:02,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,842 [INFO] Final candidates: []
2025-04-11 17:44:02,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:02,976 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:02,976 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(1), np.int64(12)))
2025-04-11 17:44:02,984 [INFO] Final candidates: []
2025-04-11 17:44:02,984 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,991 [INFO] Final candidates: []
2025-04-11 17:44:02,991 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:02,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,209 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:03,209 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:03,217 [INFO] Final candidates: []
2025-04-11 17:44:03,217 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,224 [INFO] Final candidates: []
2025-04-11 17:44:03,224 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,225 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,348 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:03,349 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(12), np.int64(5)))
2025-04-11 17:44:03,356 [INFO] Final candidates: []
2025-04-11 17:44:03,356 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,364 [INFO] Final candidates: []
2025-04-11 17:44:03,364 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,365 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,455 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:03,455 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(1), np.int64(2)))
2025-04-11 17:44:03,463 [INFO] Final candidates: []
2025-04-11 17:44:03,463 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,470 [INFO] Final candidates: []
2025-04-11 17:44:03,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,528 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:03,528 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(0), np.int64(12)))
2025-04-11 17:44:03,536 [INFO] Final candidates: []
2025-04-11 17:44:03,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,543 [INFO] Final candidates: []
2025-04-11 17:44:03,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,544 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,600 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:03,600 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:03,608 [INFO] Final candidates: []
2025-04-11 17:44:03,608 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,617 [INFO] Final candidates: []
2025-04-11 17:44:03,617 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,618 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,707 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:03,707 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:03,715 [INFO] Final candidates: []
2025-04-11 17:44:03,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,722 [INFO] Final candidates: []
2025-04-11 17:44:03,722 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,723 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,799 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:03,800 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:03,807 [INFO] Final candidates: []
2025-04-11 17:44:03,807 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,815 [INFO] Final candidates: []
2025-04-11 17:44:03,815 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,816 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:03,919 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:03,919 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:03,927 [INFO] Final candidates: []
2025-04-11 17:44:03,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,934 [INFO] Final candidates: []
2025-04-11 17:44:03,934 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:03,935 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,115 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:04,115 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(2), np.int64(12)))
2025-04-11 17:44:04,126 [INFO] Final candidates: []
2025-04-11 17:44:04,126 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,135 [INFO] Final candidates: []
2025-04-11 17:44:04,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,190 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:04,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:04,198 [INFO] Final candidates: []
2025-04-11 17:44:04,198 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,206 [INFO] Final candidates: []
2025-04-11 17:44:04,206 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,342 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:04,342 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(12), np.int64(2)))
2025-04-11 17:44:04,345 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:44:04,345 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:04,345 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (9, 2)]
2025-04-11 17:44:04,345 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:44:04,350 [INFO] Final candidates: [(8, 2), (9, 2)]
2025-04-11 17:44:04,350 [INFO] Phase win: Collected 1unique candidate(s):[((8, 2), (9, 2))]
2025-04-11 17:44:04,350 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:04,358 [INFO] Final candidates: []
2025-04-11 17:44:04,358 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,359 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,419 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:04,419 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(5)), (np.int64(1), np.int64(4)))
2025-04-11 17:44:04,427 [INFO] Final candidates: []
2025-04-11 17:44:04,427 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,434 [INFO] Final candidates: []
2025-04-11 17:44:04,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,435 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,508 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:04,509 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(8), np.int64(6)))
2025-04-11 17:44:04,517 [INFO] Final candidates: []
2025-04-11 17:44:04,517 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,525 [INFO] Final candidates: []
2025-04-11 17:44:04,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,526 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,665 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:04,665 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(0), np.int64(15)))
2025-04-11 17:44:04,673 [INFO] Final candidates: []
2025-04-11 17:44:04,674 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,682 [INFO] Final candidates: []
2025-04-11 17:44:04,682 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,684 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,786 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:04,786 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:04,786 [DEBUG] board coords: [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)]
2025-04-11 17:44:04,786 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:04,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 4), (3, 6)]
2025-04-11 17:44:04,786 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)] triggers candidate.
2025-04-11 17:44:04,786 [DEBUG] board coords: [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)]
2025-04-11 17:44:04,787 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:44:04,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 6), (3, 10)]
2025-04-11 17:44:04,787 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)] triggers candidate.
2025-04-11 17:44:04,794 [INFO] Final candidates: [(3, 4), (3, 10), (3, 6)]
2025-04-11 17:44:04,794 [INFO] Phase win: Collected 3unique candidate(s):[((3, 4), (3, 10)), ((3, 10), (3, 6)), ((3, 4), (3, 6))]
2025-04-11 17:44:04,794 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:04,802 [INFO] Final candidates: []
2025-04-11 17:44:04,802 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,803 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:04,850 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:04,851 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(8), np.int64(6)))
2025-04-11 17:44:04,853 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:44:04,853 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:44:04,853 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:44:04,853 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:44:04,858 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:44:04,858 [INFO] Phase win: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:44:04,858 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:04,866 [INFO] Final candidates: []
2025-04-11 17:44:04,866 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:04,867 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:05,040 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:05,040 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(1), np.int64(2)))
2025-04-11 17:44:05,048 [INFO] Final candidates: []
2025-04-11 17:44:05,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,055 [INFO] Final candidates: []
2025-04-11 17:44:05,056 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,056 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:05,225 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:05,225 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(0), np.int64(6)))
2025-04-11 17:44:05,233 [INFO] Final candidates: []
2025-04-11 17:44:05,233 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,240 [INFO] Final candidates: []
2025-04-11 17:44:05,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,241 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:05,301 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:05,301 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:05,309 [INFO] Final candidates: []
2025-04-11 17:44:05,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,316 [INFO] Final candidates: []
2025-04-11 17:44:05,316 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:05,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:05,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:05,393 [INFO] Final candidates: []
2025-04-11 17:44:05,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,401 [INFO] Final candidates: []
2025-04-11 17:44:05,401 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:05,538 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:05,538 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(8), np.int64(1)))
2025-04-11 17:44:05,546 [INFO] Final candidates: []
2025-04-11 17:44:05,546 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,553 [INFO] Final candidates: []
2025-04-11 17:44:05,553 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,554 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:05,634 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:05,634 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:05,642 [INFO] Final candidates: []
2025-04-11 17:44:05,642 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,649 [INFO] Final candidates: []
2025-04-11 17:44:05,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,650 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:05,771 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:05,772 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(2), np.int64(16)))
2025-04-11 17:44:05,779 [INFO] Final candidates: []
2025-04-11 17:44:05,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,787 [INFO] Final candidates: []
2025-04-11 17:44:05,787 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:05,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:06,007 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:06,007 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(0)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:06,016 [INFO] Final candidates: []
2025-04-11 17:44:06,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,024 [INFO] Final candidates: []
2025-04-11 17:44:06,024 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:06,208 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:06,208 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(0), np.int64(15)))
2025-04-11 17:44:06,216 [INFO] Final candidates: []
2025-04-11 17:44:06,216 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,223 [INFO] Final candidates: []
2025-04-11 17:44:06,223 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,224 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:06,384 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:06,385 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(12), np.int64(3)))
2025-04-11 17:44:06,394 [INFO] Final candidates: []
2025-04-11 17:44:06,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,401 [INFO] Final candidates: []
2025-04-11 17:44:06,401 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:06,610 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:06,611 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(4), np.int64(15)))
2025-04-11 17:44:06,618 [INFO] Final candidates: []
2025-04-11 17:44:06,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,626 [INFO] Final candidates: []
2025-04-11 17:44:06,626 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,627 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:06,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:06,803 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(5), np.int64(14)))
2025-04-11 17:44:06,810 [INFO] Final candidates: []
2025-04-11 17:44:06,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,818 [INFO] Final candidates: []
2025-04-11 17:44:06,818 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:06,901 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:06,901 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:06,910 [INFO] Final candidates: []
2025-04-11 17:44:06,910 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,918 [INFO] Final candidates: []
2025-04-11 17:44:06,918 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:06,919 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:06,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:06,989 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(6), np.int64(6)))
2025-04-11 17:44:06,997 [INFO] Final candidates: []
2025-04-11 17:44:06,997 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,004 [INFO] Final candidates: []
2025-04-11 17:44:07,004 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,005 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,134 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:07,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(5), np.int64(13)))
2025-04-11 17:44:07,142 [INFO] Final candidates: []
2025-04-11 17:44:07,142 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,149 [INFO] Final candidates: []
2025-04-11 17:44:07,149 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,150 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,206 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:07,206 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(1)), (np.int64(1), np.int64(17)))
2025-04-11 17:44:07,214 [INFO] Final candidates: []
2025-04-11 17:44:07,214 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,221 [INFO] Final candidates: []
2025-04-11 17:44:07,221 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,341 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:07,341 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(7), np.int64(11)))
2025-04-11 17:44:07,349 [INFO] Final candidates: []
2025-04-11 17:44:07,349 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,356 [INFO] Final candidates: []
2025-04-11 17:44:07,356 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,357 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,518 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:07,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(16)), (np.int64(0), np.int64(12)))
2025-04-11 17:44:07,527 [INFO] Final candidates: []
2025-04-11 17:44:07,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,534 [INFO] Final candidates: []
2025-04-11 17:44:07,534 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,535 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,644 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:07,645 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:07,652 [INFO] Final candidates: []
2025-04-11 17:44:07,652 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,661 [INFO] Final candidates: []
2025-04-11 17:44:07,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,777 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:07,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(2), np.int64(5)))
2025-04-11 17:44:07,785 [INFO] Final candidates: []
2025-04-11 17:44:07,785 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,792 [INFO] Final candidates: []
2025-04-11 17:44:07,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,793 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:07,843 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(10), np.int64(0)))
2025-04-11 17:44:07,850 [INFO] Final candidates: []
2025-04-11 17:44:07,850 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,858 [INFO] Final candidates: []
2025-04-11 17:44:07,858 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,859 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:07,952 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:07,953 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(5), np.int64(15)))
2025-04-11 17:44:07,960 [INFO] Final candidates: []
2025-04-11 17:44:07,960 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,968 [INFO] Final candidates: []
2025-04-11 17:44:07,968 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:07,969 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:08,164 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:08,164 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(1), np.int64(4)))
2025-04-11 17:44:08,172 [INFO] Final candidates: []
2025-04-11 17:44:08,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,179 [INFO] Final candidates: []
2025-04-11 17:44:08,179 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,181 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:08,303 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:08,303 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:08,311 [INFO] Final candidates: []
2025-04-11 17:44:08,311 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,320 [INFO] Final candidates: []
2025-04-11 17:44:08,320 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:08,440 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:08,441 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(4), np.int64(15)))
2025-04-11 17:44:08,450 [INFO] Final candidates: []
2025-04-11 17:44:08,450 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,457 [INFO] Final candidates: []
2025-04-11 17:44:08,457 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,458 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:08,583 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:08,583 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(4), np.int64(8)))
2025-04-11 17:44:08,591 [INFO] Final candidates: []
2025-04-11 17:44:08,591 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,598 [INFO] Final candidates: []
2025-04-11 17:44:08,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,599 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:08,703 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:08,704 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(10), np.int64(0)))
2025-04-11 17:44:08,711 [INFO] Final candidates: []
2025-04-11 17:44:08,711 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,719 [INFO] Final candidates: []
2025-04-11 17:44:08,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:08,807 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:08,807 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(2), np.int64(16)))
2025-04-11 17:44:08,815 [INFO] Final candidates: []
2025-04-11 17:44:08,815 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,823 [INFO] Final candidates: []
2025-04-11 17:44:08,823 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,824 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:08,859 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:08,859 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(2), np.int64(8)))
2025-04-11 17:44:08,867 [INFO] Final candidates: []
2025-04-11 17:44:08,867 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,874 [INFO] Final candidates: []
2025-04-11 17:44:08,874 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:08,875 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:44:08,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:09,114 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:09,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(0), np.int64(2)))
2025-04-11 17:44:09,122 [INFO] Final candidates: []
2025-04-11 17:44:09,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,129 [INFO] Final candidates: []
2025-04-11 17:44:09,129 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:09,252 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:09,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(0), np.int64(6)))
2025-04-11 17:44:09,260 [INFO] Final candidates: []
2025-04-11 17:44:09,260 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,267 [INFO] Final candidates: []
2025-04-11 17:44:09,268 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,268 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:09,509 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:09,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:09,518 [INFO] Final candidates: []
2025-04-11 17:44:09,518 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,525 [INFO] Final candidates: []
2025-04-11 17:44:09,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,526 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:09,576 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:09,576 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(3), np.int64(8)))
2025-04-11 17:44:09,584 [INFO] Final candidates: []
2025-04-11 17:44:09,584 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,591 [INFO] Final candidates: []
2025-04-11 17:44:09,591 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,592 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:09,678 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:09,679 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(0), np.int64(13)))
2025-04-11 17:44:09,686 [INFO] Final candidates: []
2025-04-11 17:44:09,686 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,694 [INFO] Final candidates: []
2025-04-11 17:44:09,694 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:09,875 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:09,876 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(12), np.int64(2)))
2025-04-11 17:44:09,878 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(8, 2), (9, 2), (10, 2), (11, 2), (12, 2), (13, 2)] triggers candidate.
2025-04-11 17:44:09,878 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:44:09,878 [DEBUG] board coords: [(9, 2), (10, 2), (11, 2), (12, 2), (13, 2), (14, 2)]
2025-04-11 17:44:09,878 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:09,878 [DEBUG] check_window_intermediate_custom: empty_cells=[(13, 2), (14, 2)]
2025-04-11 17:44:09,878 [DEBUG] check_window_intermediate_custom (only one inserted(13, 2)): For L=6, window [1 1 1 1 0 0] with coords [(9, 2), (10, 2), (11, 2), (12, 2), (13, 2), (14, 2)] triggers candidate.
2025-04-11 17:44:09,879 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2), (13, 2)]
2025-04-11 17:44:09,879 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:44:09,879 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (13, 2)]
2025-04-11 17:44:09,879 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 1 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2), (13, 2)] triggers candidate.
2025-04-11 17:44:09,884 [INFO] Final candidates: [(13, 2), (8, 2)]
2025-04-11 17:44:09,884 [INFO] Phase win: Collected 1unique candidate(s):[((13, 2), (8, 2))]
2025-04-11 17:44:09,884 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:09,892 [INFO] Final candidates: []
2025-04-11 17:44:09,892 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:09,895 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,016 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:10,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:10,024 [INFO] Final candidates: []
2025-04-11 17:44:10,024 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,032 [INFO] Final candidates: []
2025-04-11 17:44:10,032 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,033 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,251 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:10,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(3), np.int64(12)))
2025-04-11 17:44:10,259 [INFO] Final candidates: []
2025-04-11 17:44:10,260 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,267 [INFO] Final candidates: []
2025-04-11 17:44:10,267 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,268 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,332 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:10,332 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(11), np.int64(6)))
2025-04-11 17:44:10,340 [INFO] Final candidates: []
2025-04-11 17:44:10,340 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,347 [INFO] Final candidates: []
2025-04-11 17:44:10,347 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,348 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,457 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:10,457 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:10,465 [INFO] Final candidates: []
2025-04-11 17:44:10,465 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,472 [INFO] Final candidates: []
2025-04-11 17:44:10,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,519 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:10,519 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(13), np.int64(2)))
2025-04-11 17:44:10,527 [INFO] Final candidates: []
2025-04-11 17:44:10,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,535 [INFO] Final candidates: []
2025-04-11 17:44:10,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,535 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,692 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:10,693 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(4), np.int64(13)))
2025-04-11 17:44:10,703 [INFO] Final candidates: []
2025-04-11 17:44:10,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,710 [INFO] Final candidates: []
2025-04-11 17:44:10,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,711 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,777 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:10,778 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(8), np.int64(6)))
2025-04-11 17:44:10,789 [INFO] Final candidates: []
2025-04-11 17:44:10,789 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,796 [INFO] Final candidates: []
2025-04-11 17:44:10,797 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,798 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:10,908 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:10,908 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:10,916 [INFO] Final candidates: []
2025-04-11 17:44:10,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,924 [INFO] Final candidates: []
2025-04-11 17:44:10,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:10,925 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:11,029 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:11,029 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:11,037 [INFO] Final candidates: []
2025-04-11 17:44:11,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,044 [INFO] Final candidates: []
2025-04-11 17:44:11,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:11,315 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:11,315 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:11,323 [INFO] Final candidates: []
2025-04-11 17:44:11,323 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,330 [INFO] Final candidates: []
2025-04-11 17:44:11,330 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,331 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:11,373 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:11,374 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(1), np.int64(7)))
2025-04-11 17:44:11,381 [INFO] Final candidates: []
2025-04-11 17:44:11,381 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,389 [INFO] Final candidates: []
2025-04-11 17:44:11,389 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,390 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:11,550 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:11,550 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(0), np.int64(12)))
2025-04-11 17:44:11,558 [INFO] Final candidates: []
2025-04-11 17:44:11,558 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,565 [INFO] Final candidates: []
2025-04-11 17:44:11,565 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,566 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:11,693 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:11,693 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:11,701 [INFO] Final candidates: []
2025-04-11 17:44:11,701 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,708 [INFO] Final candidates: []
2025-04-11 17:44:11,708 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:11,850 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:11,851 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:11,860 [INFO] Final candidates: []
2025-04-11 17:44:11,860 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,874 [INFO] Final candidates: []
2025-04-11 17:44:11,875 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,876 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:11,929 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:11,929 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:11,937 [INFO] Final candidates: []
2025-04-11 17:44:11,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,944 [INFO] Final candidates: []
2025-04-11 17:44:11,944 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:11,945 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,075 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:12,075 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:12,083 [INFO] Final candidates: []
2025-04-11 17:44:12,083 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,090 [INFO] Final candidates: []
2025-04-11 17:44:12,090 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,091 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,202 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:12,203 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(10), np.int64(7)))
2025-04-11 17:44:12,211 [INFO] Final candidates: []
2025-04-11 17:44:12,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,218 [INFO] Final candidates: []
2025-04-11 17:44:12,218 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,219 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,365 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:12,366 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(2), np.int64(12)))
2025-04-11 17:44:12,373 [INFO] Final candidates: []
2025-04-11 17:44:12,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,381 [INFO] Final candidates: []
2025-04-11 17:44:12,381 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,382 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,465 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:12,466 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(2), np.int64(16)))
2025-04-11 17:44:12,473 [INFO] Final candidates: []
2025-04-11 17:44:12,473 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,481 [INFO] Final candidates: []
2025-04-11 17:44:12,481 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,482 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,579 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:12,579 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(6)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:12,591 [INFO] Final candidates: []
2025-04-11 17:44:12,591 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,598 [INFO] Final candidates: []
2025-04-11 17:44:12,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,599 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,661 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:12,661 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(2), np.int64(12)))
2025-04-11 17:44:12,669 [INFO] Final candidates: []
2025-04-11 17:44:12,669 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,676 [INFO] Final candidates: []
2025-04-11 17:44:12,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,677 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,825 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:12,825 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(11), np.int64(6)))
2025-04-11 17:44:12,833 [INFO] Final candidates: []
2025-04-11 17:44:12,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,841 [INFO] Final candidates: []
2025-04-11 17:44:12,841 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,842 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,936 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:12,937 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(4), np.int64(11)))
2025-04-11 17:44:12,944 [INFO] Final candidates: []
2025-04-11 17:44:12,944 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,952 [INFO] Final candidates: []
2025-04-11 17:44:12,952 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,953 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:12,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:12,971 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(0), np.int64(6)))
2025-04-11 17:44:12,978 [INFO] Final candidates: []
2025-04-11 17:44:12,978 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,986 [INFO] Final candidates: []
2025-04-11 17:44:12,986 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:12,987 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:13,092 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:13,093 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(8), np.int64(7)))
2025-04-11 17:44:13,095 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:44:13,095 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:13,095 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (9, 2)]
2025-04-11 17:44:13,095 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:44:13,100 [INFO] Final candidates: [(8, 2), (9, 2)]
2025-04-11 17:44:13,100 [INFO] Phase win: Collected 1unique candidate(s):[((8, 2), (9, 2))]
2025-04-11 17:44:13,100 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:13,108 [INFO] Final candidates: []
2025-04-11 17:44:13,108 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,109 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:13,183 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:13,183 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(2), np.int64(8)))
2025-04-11 17:44:13,191 [INFO] Final candidates: []
2025-04-11 17:44:13,191 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,198 [INFO] Final candidates: []
2025-04-11 17:44:13,198 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,199 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:13,257 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:13,257 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(6)), (np.int64(11), np.int64(6)))
2025-04-11 17:44:13,265 [INFO] Final candidates: []
2025-04-11 17:44:13,265 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,272 [INFO] Final candidates: []
2025-04-11 17:44:13,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,273 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:13,376 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:13,376 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:13,384 [INFO] Final candidates: []
2025-04-11 17:44:13,384 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,391 [INFO] Final candidates: []
2025-04-11 17:44:13,391 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:13,605 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:13,606 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(8), np.int64(1)))
2025-04-11 17:44:13,616 [INFO] Final candidates: []
2025-04-11 17:44:13,616 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,628 [INFO] Final candidates: []
2025-04-11 17:44:13,628 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,630 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:13,806 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:13,806 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 17:44:13,820 [INFO] Final candidates: []
2025-04-11 17:44:13,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,833 [INFO] Final candidates: []
2025-04-11 17:44:13,833 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:13,834 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:14,029 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:14,029 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(7), np.int64(6)))
2025-04-11 17:44:14,037 [INFO] Final candidates: []
2025-04-11 17:44:14,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,044 [INFO] Final candidates: []
2025-04-11 17:44:14,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:14,215 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:14,215 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(7), np.int64(7)))
2025-04-11 17:44:14,223 [INFO] Final candidates: []
2025-04-11 17:44:14,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,230 [INFO] Final candidates: []
2025-04-11 17:44:14,230 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,231 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:14,373 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:14,374 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:14,382 [INFO] Final candidates: []
2025-04-11 17:44:14,382 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,389 [INFO] Final candidates: []
2025-04-11 17:44:14,389 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,390 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:14,571 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:14,571 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:14,580 [INFO] Final candidates: []
2025-04-11 17:44:14,580 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,598 [INFO] Final candidates: []
2025-04-11 17:44:14,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:14,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:14,749 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(11), np.int64(6)))
2025-04-11 17:44:14,764 [INFO] Final candidates: []
2025-04-11 17:44:14,764 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,782 [INFO] Final candidates: []
2025-04-11 17:44:14,782 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,783 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:14,955 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:14,956 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(13), np.int64(2)))
2025-04-11 17:44:14,963 [INFO] Final candidates: []
2025-04-11 17:44:14,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,972 [INFO] Final candidates: []
2025-04-11 17:44:14,972 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:14,973 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,073 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:15,074 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:15,082 [INFO] Final candidates: []
2025-04-11 17:44:15,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,089 [INFO] Final candidates: []
2025-04-11 17:44:15,089 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,090 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,215 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:15,215 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(2)), (np.int64(5), np.int64(6)))
2025-04-11 17:44:15,217 [DEBUG] board coords: [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)]
2025-04-11 17:44:15,217 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:44:15,217 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 2), (12, 2)]
2025-04-11 17:44:15,217 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(7, 2), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2)] triggers candidate.
2025-04-11 17:44:15,223 [INFO] Final candidates: [(8, 2), (12, 2)]
2025-04-11 17:44:15,223 [INFO] Phase win: Collected 1unique candidate(s):[((8, 2), (12, 2))]
2025-04-11 17:44:15,223 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:15,230 [INFO] Final candidates: []
2025-04-11 17:44:15,230 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,231 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,328 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:15,329 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(7), np.int64(0)))
2025-04-11 17:44:15,337 [INFO] Final candidates: []
2025-04-11 17:44:15,337 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,344 [INFO] Final candidates: []
2025-04-11 17:44:15,344 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,345 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,365 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:15,365 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:15,373 [INFO] Final candidates: []
2025-04-11 17:44:15,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,381 [INFO] Final candidates: []
2025-04-11 17:44:15,381 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,382 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,599 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:15,599 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(2), np.int64(5)))
2025-04-11 17:44:15,607 [INFO] Final candidates: []
2025-04-11 17:44:15,607 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,614 [INFO] Final candidates: []
2025-04-11 17:44:15,614 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,615 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,749 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:15,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:15,757 [INFO] Final candidates: []
2025-04-11 17:44:15,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,765 [INFO] Final candidates: []
2025-04-11 17:44:15,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,765 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:15,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:15,878 [INFO] Final candidates: []
2025-04-11 17:44:15,878 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,886 [INFO] Final candidates: []
2025-04-11 17:44:15,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:15,887 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:15,971 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:15,971 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:44:15,971 [INFO] MCTS selected move: L6,C9
2025-04-11 17:44:15,971 [INFO] ===============NEW MOVE================
2025-04-11 17:44:16,261 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:44:16,268 [INFO] Final candidates: []
2025-04-11 17:44:16,268 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,274 [DEBUG] board coords: [(4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (9, 2)]
2025-04-11 17:44:16,274 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:44:16,274 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 7), (5, 6)]
2025-04-11 17:44:16,274 [DEBUG] check_window_intermediate_custom (only one inserted(5, 6)): For L=6, window [0 0 2 2 2 2] with coords [(4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (9, 2)] triggers candidate.
2025-04-11 17:44:16,275 [DEBUG] board coords: [(4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)]
2025-04-11 17:44:16,275 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:44:16,275 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 7), (5, 6)]
2025-04-11 17:44:16,275 [DEBUG] check_window_intermediate_custom (only one inserted(5, 6)): For L=7, window [0 0 2 2 2 2 2] with coords [(4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1)] triggers candidate.
2025-04-11 17:44:16,275 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 6), (6, 5), (7, 4), (8, 3), (9, 2), (10, 1), (11, 0)] triggers candidate.
2025-04-11 17:44:16,275 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:44:16,276 [INFO] Final candidates: [(5, 6), (11, 0)]
2025-04-11 17:44:16,276 [INFO] Phase defense: Collected 1unique candidate(s):[((5, 6), (11, 0))]
2025-04-11 17:44:16,276 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:44:16,276 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:44:16,276 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 6), (11, 0))
2025-04-11 17:44:16,282 [DEBUG] board coords: [(3, 8), (4, 7), (5, 6), (6, 5), (7, 4), (8, 3)]
2025-04-11 17:44:16,282 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:44:16,282 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (4, 7)]
2025-04-11 17:44:16,282 [DEBUG] check_window_intermediate_custom (only one inserted(4, 7)): For L=6, window [0 0 2 2 2 2] with coords [(3, 8), (4, 7), (5, 6), (6, 5), (7, 4), (8, 3)] triggers candidate.
2025-04-11 17:44:16,283 [DEBUG] board coords: [(3, 8), (4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (9, 2)]
2025-04-11 17:44:16,283 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:44:16,283 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (4, 7)]
2025-04-11 17:44:16,283 [DEBUG] check_window_intermediate_custom (only one inserted(4, 7)): For L=7, window [0 0 2 2 2 2 2] with coords [(3, 8), (4, 7), (5, 6), (6, 5), (7, 4), (8, 3), (9, 2)] triggers candidate.
2025-04-11 17:44:16,284 [INFO] Final candidates: [(4, 7)]
2025-04-11 17:44:16,284 [INFO] Phase win: Found only one candidate: (4, 7)
2025-04-11 17:44:16,284 [INFO] Phase win: Collected 10unique candidate(s):[((4, 7), (np.int64(5), np.int64(8))), ((4, 7), (np.int64(4), np.int64(5))), ((4, 7), (np.int64(2), np.int64(7))), ((4, 7), (np.int64(4), np.int64(9))), ((4, 7), (np.int64(6), np.int64(7))), ((4, 7), (np.int64(3), np.int64(6))), ((4, 7), (np.int64(5), np.int64(7))), ((4, 7), (np.int64(3), np.int64(8))), ((4, 7), (np.int64(4), np.int64(8))), ((4, 7), (np.int64(4), np.int64(6)))]
2025-04-11 17:44:16,284 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:44:16,291 [INFO] Final candidates: []
2025-04-11 17:44:16,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,292 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:44:16,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,292 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,292 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,293 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,293 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,293 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,293 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,293 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,293 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,293 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,293 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,294 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,294 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,294 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,294 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,294 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,294 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,294 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,294 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,294 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,294 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,294 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,295 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,295 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,295 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,295 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,295 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,296 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,296 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,296 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,296 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,296 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,296 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,296 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,297 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,297 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,297 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,297 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,297 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,297 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,297 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,297 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,298 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,298 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,298 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,298 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,298 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,298 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,298 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,298 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,298 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,299 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,299 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,299 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,299 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,299 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,299 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,299 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,299 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,299 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,299 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,299 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,299 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,300 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,300 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,300 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,300 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,300 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,300 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,300 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,300 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,301 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,301 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,301 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,301 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,301 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,301 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,301 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,301 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,301 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,301 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,301 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,301 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,302 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,302 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,302 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,302 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,302 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,302 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,302 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,302 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,302 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,303 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,303 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,303 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,303 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,303 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,303 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,303 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,303 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,303 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,304 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,304 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,304 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,304 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,304 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,304 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,304 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,304 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,304 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,304 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,304 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,305 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,305 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,305 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,305 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,305 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,305 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,305 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,305 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,305 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,306 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,306 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,306 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,306 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,306 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,306 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,306 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,306 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,306 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,307 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,307 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,307 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,307 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,307 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,307 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,307 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,307 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,307 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,307 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,307 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,307 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,308 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,308 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,308 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,308 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,308 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,308 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,308 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,308 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,308 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,308 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,308 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,309 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,309 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,309 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,309 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,309 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,309 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,309 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,309 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,309 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,309 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,309 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,310 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,310 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,310 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,310 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,310 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,310 [DEBUG] MCTS iteration 50: reached a node with 50 visits.
2025-04-11 17:44:16,310 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,310 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,310 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,310 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,310 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,310 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,310 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,311 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,311 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,311 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,311 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,311 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,311 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,311 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,311 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,312 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,312 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,312 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,312 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,312 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,312 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,312 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,312 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,312 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,313 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,313 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,313 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,314 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,314 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,314 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,314 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,314 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,314 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,314 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,314 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,314 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,314 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,314 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,315 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,315 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,315 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,315 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,315 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,315 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,315 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,315 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,315 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,315 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,315 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,315 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,316 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,316 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,316 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,316 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,316 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,316 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,316 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,316 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,316 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,316 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,317 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,317 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,317 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,317 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,317 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,317 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,317 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,317 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,318 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,318 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,318 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,318 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,318 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,318 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,318 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,318 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,319 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,319 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,319 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,319 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,319 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,319 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,320 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,320 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,320 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,320 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,320 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,320 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,320 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,320 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,320 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,320 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,320 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,320 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,321 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,321 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,321 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,321 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,321 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,321 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,321 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,321 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,321 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,322 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,322 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,322 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,322 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,322 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,322 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,322 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,322 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,322 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,322 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,322 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,323 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,323 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,323 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,323 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,323 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,323 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,323 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,323 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,324 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,324 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,324 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,324 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,324 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,324 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,324 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,324 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,325 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,325 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,325 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,325 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,325 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,325 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,325 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,325 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,325 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,325 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,326 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,326 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,326 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,326 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,326 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,326 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,327 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,327 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,327 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,327 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,327 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,327 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,327 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,327 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,327 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,327 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,327 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,328 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,328 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,328 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,328 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,328 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,328 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,328 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,328 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,328 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,328 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:16,329 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:44:16,329 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,329 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,329 [INFO] MCTS: Search finished. Best move selected with 100 visits.
2025-04-11 17:44:16,329 [INFO] MCTS (defense candidates) selected move: G6,A12
2025-04-11 17:44:16,602 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:44:16,610 [INFO] Final candidates: []
2025-04-11 17:44:16,610 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,617 [INFO] Final candidates: []
2025-04-11 17:44:16,617 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,617 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:44:16,618 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:44:16,619 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(12)), (np.int64(2), np.int64(7)))
2025-04-11 17:44:16,626 [INFO] Final candidates: []
2025-04-11 17:44:16,626 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,633 [INFO] Final candidates: []
2025-04-11 17:44:16,633 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,634 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:44:16,634 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,772 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:16,772 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:16,779 [INFO] Final candidates: []
2025-04-11 17:44:16,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,786 [INFO] Final candidates: []
2025-04-11 17:44:16,786 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,787 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:16,908 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:16,908 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(5), np.int64(7)))
2025-04-11 17:44:16,916 [INFO] Final candidates: []
2025-04-11 17:44:16,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,923 [INFO] Final candidates: []
2025-04-11 17:44:16,923 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:16,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:17,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:17,122 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(10), np.int64(7)))
2025-04-11 17:44:17,130 [INFO] Final candidates: []
2025-04-11 17:44:17,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,136 [INFO] Final candidates: []
2025-04-11 17:44:17,136 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,137 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:17,333 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:17,333 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:17,341 [INFO] Final candidates: []
2025-04-11 17:44:17,341 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,348 [INFO] Final candidates: []
2025-04-11 17:44:17,348 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:17,460 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:17,460 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(5), np.int64(15)))
2025-04-11 17:44:17,468 [INFO] Final candidates: []
2025-04-11 17:44:17,468 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,475 [INFO] Final candidates: []
2025-04-11 17:44:17,475 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,476 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:17,627 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:17,628 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(0), np.int64(13)))
2025-04-11 17:44:17,635 [INFO] Final candidates: []
2025-04-11 17:44:17,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,642 [INFO] Final candidates: []
2025-04-11 17:44:17,642 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:17,704 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:17,704 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(1), np.int64(4)))
2025-04-11 17:44:17,717 [INFO] Final candidates: []
2025-04-11 17:44:17,717 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,727 [INFO] Final candidates: []
2025-04-11 17:44:17,727 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,728 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:17,958 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:17,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(3), np.int64(12)))
2025-04-11 17:44:17,965 [INFO] Final candidates: []
2025-04-11 17:44:17,965 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,972 [INFO] Final candidates: []
2025-04-11 17:44:17,972 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:17,973 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:18,218 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:18,218 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:18,225 [INFO] Final candidates: []
2025-04-11 17:44:18,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,232 [INFO] Final candidates: []
2025-04-11 17:44:18,232 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,233 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:18,438 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:18,438 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(17), np.int64(4)))
2025-04-11 17:44:18,446 [INFO] Final candidates: []
2025-04-11 17:44:18,446 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,453 [INFO] Final candidates: []
2025-04-11 17:44:18,453 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,456 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:18,580 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:18,581 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(2), np.int64(5)))
2025-04-11 17:44:18,588 [INFO] Final candidates: []
2025-04-11 17:44:18,588 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,595 [INFO] Final candidates: []
2025-04-11 17:44:18,595 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,596 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:18,701 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:18,702 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(15), np.int64(3)))
2025-04-11 17:44:18,709 [INFO] Final candidates: []
2025-04-11 17:44:18,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,718 [INFO] Final candidates: []
2025-04-11 17:44:18,718 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,719 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:18,822 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:18,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(0), np.int64(6)))
2025-04-11 17:44:18,830 [INFO] Final candidates: []
2025-04-11 17:44:18,830 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,837 [INFO] Final candidates: []
2025-04-11 17:44:18,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:18,838 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:18,995 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:18,996 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(9), np.int64(0)))
2025-04-11 17:44:19,003 [INFO] Final candidates: []
2025-04-11 17:44:19,003 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,010 [INFO] Final candidates: []
2025-04-11 17:44:19,010 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,011 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,047 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:19,048 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:19,055 [INFO] Final candidates: []
2025-04-11 17:44:19,055 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,062 [INFO] Final candidates: []
2025-04-11 17:44:19,062 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,063 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,155 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:19,155 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(6)), (np.int64(6), np.int64(9)))
2025-04-11 17:44:19,162 [INFO] Final candidates: []
2025-04-11 17:44:19,162 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,169 [INFO] Final candidates: []
2025-04-11 17:44:19,169 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,170 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,250 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:19,250 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:19,258 [INFO] Final candidates: []
2025-04-11 17:44:19,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,265 [INFO] Final candidates: []
2025-04-11 17:44:19,265 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,266 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,329 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:19,329 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(12), np.int64(2)))
2025-04-11 17:44:19,337 [INFO] Final candidates: []
2025-04-11 17:44:19,337 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,344 [INFO] Final candidates: []
2025-04-11 17:44:19,344 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,345 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,430 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:19,430 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(2), np.int64(7)))
2025-04-11 17:44:19,438 [INFO] Final candidates: []
2025-04-11 17:44:19,438 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,445 [INFO] Final candidates: []
2025-04-11 17:44:19,445 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,446 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,681 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:19,681 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(5)))
2025-04-11 17:44:19,689 [INFO] Final candidates: []
2025-04-11 17:44:19,689 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,696 [INFO] Final candidates: []
2025-04-11 17:44:19,696 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,796 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:19,796 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:19,803 [INFO] Final candidates: []
2025-04-11 17:44:19,803 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,810 [INFO] Final candidates: []
2025-04-11 17:44:19,810 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,811 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,881 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:19,882 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:19,889 [INFO] Final candidates: []
2025-04-11 17:44:19,889 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,896 [INFO] Final candidates: []
2025-04-11 17:44:19,896 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:19,955 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:19,956 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:19,963 [INFO] Final candidates: []
2025-04-11 17:44:19,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,970 [INFO] Final candidates: []
2025-04-11 17:44:19,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:19,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:20,175 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:20,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(2)), (np.int64(8), np.int64(7)))
2025-04-11 17:44:20,182 [INFO] Final candidates: []
2025-04-11 17:44:20,183 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,190 [INFO] Final candidates: []
2025-04-11 17:44:20,190 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,191 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:20,386 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:20,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(4), np.int64(6)))
2025-04-11 17:44:20,394 [INFO] Final candidates: []
2025-04-11 17:44:20,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,401 [INFO] Final candidates: []
2025-04-11 17:44:20,401 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,402 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:20,528 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:20,528 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(12)))
2025-04-11 17:44:20,536 [INFO] Final candidates: []
2025-04-11 17:44:20,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,543 [INFO] Final candidates: []
2025-04-11 17:44:20,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,544 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:20,696 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:20,696 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(13), np.int64(2)))
2025-04-11 17:44:20,703 [INFO] Final candidates: []
2025-04-11 17:44:20,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,710 [INFO] Final candidates: []
2025-04-11 17:44:20,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,711 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:20,789 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:20,789 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(0), np.int64(15)))
2025-04-11 17:44:20,797 [INFO] Final candidates: []
2025-04-11 17:44:20,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,804 [INFO] Final candidates: []
2025-04-11 17:44:20,804 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:20,805 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:21,013 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:21,014 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(5), np.int64(8)))
2025-04-11 17:44:21,021 [INFO] Final candidates: []
2025-04-11 17:44:21,021 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,029 [INFO] Final candidates: []
2025-04-11 17:44:21,029 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,030 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:21,160 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:21,160 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(6), np.int64(7)))
2025-04-11 17:44:21,167 [INFO] Final candidates: []
2025-04-11 17:44:21,167 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,174 [INFO] Final candidates: []
2025-04-11 17:44:21,174 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:21,333 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:21,333 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(4), np.int64(15)))
2025-04-11 17:44:21,340 [INFO] Final candidates: []
2025-04-11 17:44:21,340 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,348 [INFO] Final candidates: []
2025-04-11 17:44:21,348 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:21,526 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:21,526 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(4), np.int64(16)))
2025-04-11 17:44:21,533 [INFO] Final candidates: []
2025-04-11 17:44:21,534 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,541 [INFO] Final candidates: []
2025-04-11 17:44:21,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,542 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:21,763 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:21,765 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:21,772 [INFO] Final candidates: []
2025-04-11 17:44:21,772 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,784 [INFO] Final candidates: []
2025-04-11 17:44:21,784 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,786 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:21,939 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:21,939 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:21,946 [INFO] Final candidates: []
2025-04-11 17:44:21,946 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,953 [INFO] Final candidates: []
2025-04-11 17:44:21,953 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,954 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:21,984 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:21,984 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(0), np.int64(12)))
2025-04-11 17:44:21,992 [INFO] Final candidates: []
2025-04-11 17:44:21,992 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,998 [INFO] Final candidates: []
2025-04-11 17:44:21,998 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:21,999 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:22,216 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:22,216 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:22,223 [INFO] Final candidates: []
2025-04-11 17:44:22,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,231 [INFO] Final candidates: []
2025-04-11 17:44:22,231 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,232 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:22,503 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:22,503 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(5), np.int64(9)))
2025-04-11 17:44:22,510 [INFO] Final candidates: []
2025-04-11 17:44:22,510 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,517 [INFO] Final candidates: []
2025-04-11 17:44:22,517 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:22,713 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:22,714 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(15), np.int64(4)))
2025-04-11 17:44:22,721 [INFO] Final candidates: []
2025-04-11 17:44:22,721 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,728 [INFO] Final candidates: []
2025-04-11 17:44:22,728 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:22,976 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:22,977 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(4), np.int64(16)))
2025-04-11 17:44:22,984 [INFO] Final candidates: []
2025-04-11 17:44:22,984 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,991 [INFO] Final candidates: []
2025-04-11 17:44:22,991 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:22,993 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:23,269 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:23,269 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(13), np.int64(2)))
2025-04-11 17:44:23,277 [INFO] Final candidates: []
2025-04-11 17:44:23,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,284 [INFO] Final candidates: []
2025-04-11 17:44:23,284 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,285 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:23,522 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:23,523 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:23,530 [INFO] Final candidates: []
2025-04-11 17:44:23,530 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,537 [INFO] Final candidates: []
2025-04-11 17:44:23,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:23,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:23,736 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(2), np.int64(8)))
2025-04-11 17:44:23,744 [INFO] Final candidates: []
2025-04-11 17:44:23,744 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,751 [INFO] Final candidates: []
2025-04-11 17:44:23,751 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:23,952 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:23,953 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(11), np.int64(4)))
2025-04-11 17:44:23,962 [INFO] Final candidates: []
2025-04-11 17:44:23,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,969 [INFO] Final candidates: []
2025-04-11 17:44:23,969 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:23,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:24,216 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:24,216 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(4), np.int64(16)))
2025-04-11 17:44:24,224 [INFO] Final candidates: []
2025-04-11 17:44:24,224 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,231 [INFO] Final candidates: []
2025-04-11 17:44:24,231 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,236 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:24,355 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:24,355 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(16), np.int64(4)))
2025-04-11 17:44:24,363 [INFO] Final candidates: []
2025-04-11 17:44:24,363 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,370 [INFO] Final candidates: []
2025-04-11 17:44:24,370 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:24,467 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:24,467 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(2), np.int64(16)))
2025-04-11 17:44:24,477 [INFO] Final candidates: []
2025-04-11 17:44:24,477 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,484 [INFO] Final candidates: []
2025-04-11 17:44:24,484 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:24,555 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:24,555 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(11), np.int64(4)))
2025-04-11 17:44:24,563 [INFO] Final candidates: []
2025-04-11 17:44:24,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,571 [INFO] Final candidates: []
2025-04-11 17:44:24,571 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,572 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:24,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:24,811 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(16), np.int64(2)))
2025-04-11 17:44:24,818 [INFO] Final candidates: []
2025-04-11 17:44:24,818 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,825 [INFO] Final candidates: []
2025-04-11 17:44:24,825 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:24,965 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:24,965 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(2), np.int64(16)))
2025-04-11 17:44:24,973 [INFO] Final candidates: []
2025-04-11 17:44:24,973 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,979 [INFO] Final candidates: []
2025-04-11 17:44:24,979 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:24,980 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:25,035 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:25,036 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(9), np.int64(5)))
2025-04-11 17:44:25,043 [INFO] Final candidates: []
2025-04-11 17:44:25,043 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:25,050 [INFO] Final candidates: []
2025-04-11 17:44:25,051 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:25,052 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:44:25,052 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:25,352 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:25,353 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(8), np.int64(6)))
2025-04-11 17:44:25,362 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:44:25,362 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:25,362 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:44:25,362 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:44:25,368 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:44:25,368 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:44:25,368 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:44:25,368 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:44:25,377 [INFO] Final candidates: []
2025-04-11 17:44:25,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:25,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:25,604 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:25,605 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(12), np.int64(2)))
2025-04-11 17:44:25,613 [INFO] Final candidates: []
2025-04-11 17:44:25,613 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:25,620 [INFO] Final candidates: []
2025-04-11 17:44:25,620 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:25,621 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:25,890 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:25,890 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(8), np.int64(1)))
2025-04-11 17:44:25,898 [INFO] Final candidates: []
2025-04-11 17:44:25,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:25,907 [INFO] Final candidates: []
2025-04-11 17:44:25,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:25,910 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:26,026 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:26,027 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(12)), (np.int64(6), np.int64(7)))
2025-04-11 17:44:26,034 [INFO] Final candidates: []
2025-04-11 17:44:26,034 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,041 [INFO] Final candidates: []
2025-04-11 17:44:26,041 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,042 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:26,126 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:26,126 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(10), np.int64(7)))
2025-04-11 17:44:26,135 [INFO] Final candidates: []
2025-04-11 17:44:26,135 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,149 [INFO] Final candidates: []
2025-04-11 17:44:26,149 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:26,288 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:26,288 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:26,295 [INFO] Final candidates: []
2025-04-11 17:44:26,295 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,302 [INFO] Final candidates: []
2025-04-11 17:44:26,302 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:26,529 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:26,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(1), np.int64(2)))
2025-04-11 17:44:26,537 [INFO] Final candidates: []
2025-04-11 17:44:26,537 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,544 [INFO] Final candidates: []
2025-04-11 17:44:26,544 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,545 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:26,636 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:26,636 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(3), np.int64(4)))
2025-04-11 17:44:26,643 [INFO] Final candidates: []
2025-04-11 17:44:26,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,650 [INFO] Final candidates: []
2025-04-11 17:44:26,650 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,651 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:26,783 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:26,783 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(0), np.int64(6)))
2025-04-11 17:44:26,791 [INFO] Final candidates: []
2025-04-11 17:44:26,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,798 [INFO] Final candidates: []
2025-04-11 17:44:26,798 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:26,929 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:26,929 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:26,937 [INFO] Final candidates: []
2025-04-11 17:44:26,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,945 [INFO] Final candidates: []
2025-04-11 17:44:26,945 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:26,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:27,171 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:27,172 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(16), np.int64(1)))
2025-04-11 17:44:27,179 [INFO] Final candidates: []
2025-04-11 17:44:27,179 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,186 [INFO] Final candidates: []
2025-04-11 17:44:27,186 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:27,361 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:27,361 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(15), np.int64(3)))
2025-04-11 17:44:27,368 [INFO] Final candidates: []
2025-04-11 17:44:27,368 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,375 [INFO] Final candidates: []
2025-04-11 17:44:27,375 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,376 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:27,569 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:27,569 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(12), np.int64(1)))
2025-04-11 17:44:27,577 [INFO] Final candidates: []
2025-04-11 17:44:27,577 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,584 [INFO] Final candidates: []
2025-04-11 17:44:27,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,585 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:27,808 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:27,808 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(3)), (np.int64(18), np.int64(3)))
2025-04-11 17:44:27,816 [INFO] Final candidates: []
2025-04-11 17:44:27,816 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,823 [INFO] Final candidates: []
2025-04-11 17:44:27,823 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,824 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:27,925 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:27,926 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(0), np.int64(12)))
2025-04-11 17:44:27,934 [INFO] Final candidates: []
2025-04-11 17:44:27,934 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,941 [INFO] Final candidates: []
2025-04-11 17:44:27,941 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:27,942 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:28,046 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:28,046 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(1), np.int64(5)))
2025-04-11 17:44:28,053 [INFO] Final candidates: []
2025-04-11 17:44:28,053 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,061 [INFO] Final candidates: []
2025-04-11 17:44:28,061 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,062 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:28,277 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:28,278 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(12), np.int64(0)))
2025-04-11 17:44:28,285 [INFO] Final candidates: []
2025-04-11 17:44:28,285 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,292 [INFO] Final candidates: []
2025-04-11 17:44:28,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,293 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:28,385 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:28,385 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:28,393 [INFO] Final candidates: []
2025-04-11 17:44:28,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,400 [INFO] Final candidates: []
2025-04-11 17:44:28,400 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:28,556 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:28,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(12), np.int64(0)))
2025-04-11 17:44:28,564 [INFO] Final candidates: []
2025-04-11 17:44:28,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,571 [INFO] Final candidates: []
2025-04-11 17:44:28,571 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,572 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:28,681 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:28,681 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:28,689 [INFO] Final candidates: []
2025-04-11 17:44:28,689 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,696 [INFO] Final candidates: []
2025-04-11 17:44:28,696 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:28,797 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:28,798 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(11)))
2025-04-11 17:44:28,805 [INFO] Final candidates: []
2025-04-11 17:44:28,805 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,812 [INFO] Final candidates: []
2025-04-11 17:44:28,812 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:28,896 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:28,897 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:28,904 [INFO] Final candidates: []
2025-04-11 17:44:28,904 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,911 [INFO] Final candidates: []
2025-04-11 17:44:28,911 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:28,912 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:29,103 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:29,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(1), np.int64(4)))
2025-04-11 17:44:29,111 [INFO] Final candidates: []
2025-04-11 17:44:29,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,118 [INFO] Final candidates: []
2025-04-11 17:44:29,118 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:29,252 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:29,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:29,260 [INFO] Final candidates: []
2025-04-11 17:44:29,260 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,267 [INFO] Final candidates: []
2025-04-11 17:44:29,267 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,268 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:29,446 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:29,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(12)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:29,454 [INFO] Final candidates: []
2025-04-11 17:44:29,454 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,460 [INFO] Final candidates: []
2025-04-11 17:44:29,461 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,462 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:29,658 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:29,658 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:29,667 [INFO] Final candidates: []
2025-04-11 17:44:29,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,674 [INFO] Final candidates: []
2025-04-11 17:44:29,674 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,676 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:29,854 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:29,854 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:29,863 [INFO] Final candidates: []
2025-04-11 17:44:29,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,870 [INFO] Final candidates: []
2025-04-11 17:44:29,870 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,871 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:29,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:29,959 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:29,967 [INFO] Final candidates: []
2025-04-11 17:44:29,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,974 [INFO] Final candidates: []
2025-04-11 17:44:29,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:29,975 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:30,035 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:30,035 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(1), np.int64(7)))
2025-04-11 17:44:30,043 [INFO] Final candidates: []
2025-04-11 17:44:30,043 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,050 [INFO] Final candidates: []
2025-04-11 17:44:30,050 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,051 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:30,216 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:30,217 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(13), np.int64(0)))
2025-04-11 17:44:30,224 [INFO] Final candidates: []
2025-04-11 17:44:30,224 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,231 [INFO] Final candidates: []
2025-04-11 17:44:30,231 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,232 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:30,391 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:30,392 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(1), np.int64(7)))
2025-04-11 17:44:30,400 [INFO] Final candidates: []
2025-04-11 17:44:30,400 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,407 [INFO] Final candidates: []
2025-04-11 17:44:30,407 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:30,519 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:30,520 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(3)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:30,527 [INFO] Final candidates: []
2025-04-11 17:44:30,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,534 [INFO] Final candidates: []
2025-04-11 17:44:30,534 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,535 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:30,629 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:30,629 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(13), np.int64(2)))
2025-04-11 17:44:30,636 [INFO] Final candidates: []
2025-04-11 17:44:30,636 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,643 [INFO] Final candidates: []
2025-04-11 17:44:30,643 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,644 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:30,760 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:30,760 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(12), np.int64(1)))
2025-04-11 17:44:30,767 [INFO] Final candidates: []
2025-04-11 17:44:30,767 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,774 [INFO] Final candidates: []
2025-04-11 17:44:30,774 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,775 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:30,933 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:30,933 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(11), np.int64(6)))
2025-04-11 17:44:30,941 [INFO] Final candidates: []
2025-04-11 17:44:30,941 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,948 [INFO] Final candidates: []
2025-04-11 17:44:30,948 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:30,949 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:31,174 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:31,174 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:31,182 [INFO] Final candidates: []
2025-04-11 17:44:31,182 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,188 [INFO] Final candidates: []
2025-04-11 17:44:31,188 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:31,451 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:31,451 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(1), np.int64(12)))
2025-04-11 17:44:31,458 [INFO] Final candidates: []
2025-04-11 17:44:31,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,465 [INFO] Final candidates: []
2025-04-11 17:44:31,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,466 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:31,623 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:31,624 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:31,634 [INFO] Final candidates: []
2025-04-11 17:44:31,634 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,641 [INFO] Final candidates: []
2025-04-11 17:44:31,641 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,642 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:31,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:31,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(2), np.int64(7)))
2025-04-11 17:44:31,833 [INFO] Final candidates: []
2025-04-11 17:44:31,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,840 [INFO] Final candidates: []
2025-04-11 17:44:31,840 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,841 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:31,968 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:31,968 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(2), np.int64(8)))
2025-04-11 17:44:31,977 [INFO] Final candidates: []
2025-04-11 17:44:31,977 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,984 [INFO] Final candidates: []
2025-04-11 17:44:31,984 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:31,985 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:32,092 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:32,092 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(12), np.int64(5)))
2025-04-11 17:44:32,100 [INFO] Final candidates: []
2025-04-11 17:44:32,100 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,107 [INFO] Final candidates: []
2025-04-11 17:44:32,107 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:32,223 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:32,224 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:32,231 [INFO] Final candidates: []
2025-04-11 17:44:32,231 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,238 [INFO] Final candidates: []
2025-04-11 17:44:32,238 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,239 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:32,280 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:32,281 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(10), np.int64(7)))
2025-04-11 17:44:32,288 [INFO] Final candidates: []
2025-04-11 17:44:32,288 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,295 [INFO] Final candidates: []
2025-04-11 17:44:32,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:32,477 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:32,477 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:32,486 [INFO] Final candidates: []
2025-04-11 17:44:32,486 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,495 [INFO] Final candidates: []
2025-04-11 17:44:32,495 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,496 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:32,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:32,699 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:32,707 [INFO] Final candidates: []
2025-04-11 17:44:32,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,715 [INFO] Final candidates: []
2025-04-11 17:44:32,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:32,846 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:32,846 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:32,854 [INFO] Final candidates: []
2025-04-11 17:44:32,854 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,861 [INFO] Final candidates: []
2025-04-11 17:44:32,861 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:32,862 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:33,038 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:33,039 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(2)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:33,046 [INFO] Final candidates: []
2025-04-11 17:44:33,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:33,055 [INFO] Final candidates: []
2025-04-11 17:44:33,055 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:33,056 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:33,234 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:33,234 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(11), np.int64(4)))
2025-04-11 17:44:33,242 [INFO] Final candidates: []
2025-04-11 17:44:33,242 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:33,249 [INFO] Final candidates: []
2025-04-11 17:44:33,249 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:33,250 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:33,442 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:33,443 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:33,450 [INFO] Final candidates: []
2025-04-11 17:44:33,450 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:33,457 [INFO] Final candidates: []
2025-04-11 17:44:33,457 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:33,458 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:33,677 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:33,677 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:44:33,677 [INFO] MCTS selected move: N3,H3
2025-04-11 17:44:33,677 [INFO] ===============NEW MOVE================
2025-04-11 17:44:33,968 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:44:33,976 [INFO] Final candidates: []
2025-04-11 17:44:33,976 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:33,981 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8)]
2025-04-11 17:44:33,981 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:33,981 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (9, 8)]
2025-04-11 17:44:33,981 [DEBUG] check_window_intermediate_custom (only one inserted(8, 7)): For L=6, window [2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8)] triggers candidate.
2025-04-11 17:44:33,985 [INFO] Final candidates: [(8, 7)]
2025-04-11 17:44:33,985 [INFO] Phase defense: Found only one candidate: (8, 7)
2025-04-11 17:44:33,985 [INFO] Phase defense: Collected 10unique candidate(s):[((8, 7), (np.int64(8), np.int64(8))), ((8, 7), (np.int64(9), np.int64(6))), ((8, 7), (np.int64(8), np.int64(9))), ((8, 7), (np.int64(9), np.int64(8))), ((8, 7), (np.int64(7), np.int64(7))), ((8, 7), (np.int64(10), np.int64(7))), ((8, 7), (np.int64(8), np.int64(6))), ((8, 7), (np.int64(9), np.int64(7))), ((8, 7), (np.int64(6), np.int64(7))), ((8, 7), (np.int64(7), np.int64(8)))]
2025-04-11 17:44:33,985 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:44:33,985 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:44:33,985 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(7), np.int64(8)))
2025-04-11 17:44:33,986 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:33,986 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:33,986 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:33,986 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:33,989 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:33,989 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:33,989 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:33,989 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:33,990 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:33,990 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:33,990 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:33,990 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:33,993 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:33,993 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:33,993 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,001 [INFO] Final candidates: []
2025-04-11 17:44:34,001 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,002 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:44:34,002 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,105 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,106 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(9), np.int64(8)))
2025-04-11 17:44:34,106 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,106 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,106 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,106 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,110 [DEBUG] board coords: [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)]
2025-04-11 17:44:34,110 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,110 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (11, 10)]
2025-04-11 17:44:34,110 [DEBUG] check_window_intermediate_custom (only one inserted(10, 9)): For L=6, window [2 2 2 2 0 0] with coords [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)] triggers candidate.
2025-04-11 17:44:34,111 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)]
2025-04-11 17:44:34,111 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,111 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (11, 10)]
2025-04-11 17:44:34,111 [DEBUG] check_window_intermediate_custom (only one inserted(10, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)] triggers candidate.
2025-04-11 17:44:34,115 [INFO] Final candidates: [(10, 9), (8, 8), (8, 6)]
2025-04-11 17:44:34,115 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (8, 6)), ((10, 9), (8, 6)), ((10, 9), (8, 8))]
2025-04-11 17:44:34,115 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,123 [INFO] Final candidates: []
2025-04-11 17:44:34,123 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,124 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,125 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(7), np.int64(7)))
2025-04-11 17:44:34,125 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,125 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,125 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,125 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,129 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,129 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,129 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,129 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,130 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,130 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,130 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,130 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,133 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,133 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,133 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,140 [INFO] Final candidates: []
2025-04-11 17:44:34,140 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,141 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,183 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,184 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(6), np.int64(7)))
2025-04-11 17:44:34,184 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,184 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,184 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,184 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,188 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,188 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,188 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,188 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,189 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,189 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,189 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,192 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,192 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,192 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,200 [INFO] Final candidates: []
2025-04-11 17:44:34,200 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,201 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,378 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:34,378 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(8), np.int64(9)))
2025-04-11 17:44:34,379 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,379 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,379 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,379 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,379 [DEBUG] board coords: [(8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)]
2025-04-11 17:44:34,379 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:44:34,379 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,379 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)] triggers candidate.
2025-04-11 17:44:34,382 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)]
2025-04-11 17:44:34,382 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:44:34,382 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,382 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 0 2 0 2] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)] triggers candidate.
2025-04-11 17:44:34,388 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,388 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,388 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,389 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,389 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,389 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,389 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,392 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,392 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,392 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,401 [INFO] Final candidates: []
2025-04-11 17:44:34,401 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,456 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,457 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(8), np.int64(6)))
2025-04-11 17:44:34,457 [DEBUG] board coords: [(8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)]
2025-04-11 17:44:34,457 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,457 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 9)]
2025-04-11 17:44:34,457 [DEBUG] check_window_intermediate_custom (only one inserted(8, 8)): For L=6, window [2 2 2 2 0 0] with coords [(8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)] triggers candidate.
2025-04-11 17:44:34,458 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)]
2025-04-11 17:44:34,458 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,458 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 9)]
2025-04-11 17:44:34,458 [DEBUG] check_window_intermediate_custom (only one inserted(8, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)] triggers candidate.
2025-04-11 17:44:34,461 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,461 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,461 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,461 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,462 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,462 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,462 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,462 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,464 [INFO] Final candidates: [(8, 8), (9, 8)]
2025-04-11 17:44:34,464 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (9, 8))]
2025-04-11 17:44:34,464 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:34,472 [INFO] Final candidates: []
2025-04-11 17:44:34,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,580 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,580 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(9), np.int64(6)))
2025-04-11 17:44:34,581 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,581 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,581 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,581 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,584 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,584 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,584 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,584 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,585 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,585 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,585 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,585 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,587 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,588 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,588 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,595 [INFO] Final candidates: []
2025-04-11 17:44:34,595 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,596 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,661 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,661 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(9), np.int64(7)))
2025-04-11 17:44:34,662 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,662 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,662 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,662 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,666 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,666 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,666 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,666 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,666 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,667 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,667 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,667 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,669 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,669 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,669 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,678 [INFO] Final candidates: []
2025-04-11 17:44:34,678 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,679 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,706 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,706 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(10), np.int64(7)))
2025-04-11 17:44:34,707 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,707 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,707 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,707 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,711 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,711 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,711 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,711 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,712 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,712 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,712 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,712 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,716 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,716 [INFO] Phase win: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,716 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,723 [INFO] Final candidates: []
2025-04-11 17:44:34,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,724 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,782 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,783 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (np.int64(8), np.int64(8)))
2025-04-11 17:44:34,783 [DEBUG] board coords: [(8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)]
2025-04-11 17:44:34,783 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,783 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 9)]
2025-04-11 17:44:34,783 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)] triggers candidate.
2025-04-11 17:44:34,784 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)]
2025-04-11 17:44:34,784 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,784 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 9)]
2025-04-11 17:44:34,784 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 0 2 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9)] triggers candidate.
2025-04-11 17:44:34,787 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,787 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,787 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,788 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,788 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,788 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,790 [INFO] Final candidates: [(8, 9), (9, 8), (8, 6)]
2025-04-11 17:44:34,790 [INFO] Phase win: Collected 3unique candidate(s):[((8, 9), (9, 8)), ((8, 9), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,791 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:34,798 [INFO] Final candidates: []
2025-04-11 17:44:34,798 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,816 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,816 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:34,816 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(2), np.int64(10)))
2025-04-11 17:44:34,823 [INFO] Final candidates: []
2025-04-11 17:44:34,823 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:34,824 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,824 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,824 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,824 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,827 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,828 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,828 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,828 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,828 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,828 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,828 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,828 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,831 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,831 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,831 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:34,831 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:34,889 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:34,890 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:34,890 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(14), np.int64(3)))
2025-04-11 17:44:34,894 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:44:34,894 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,894 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:44:34,894 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:44:34,897 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:44:34,897 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:44:34,897 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:44:34,897 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:44:34,897 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:34,898 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:34,898 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:34,898 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:34,901 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,901 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,901 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,901 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,902 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:34,902 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:34,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:34,902 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:34,904 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:34,904 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:34,904 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:34,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,039 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:35,039 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,039 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(10)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:35,047 [INFO] Final candidates: []
2025-04-11 17:44:35,047 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,047 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,047 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,047 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,047 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,052 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,052 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,052 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,052 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,053 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,053 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,053 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,053 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,056 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,056 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,056 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,056 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,085 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:35,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,086 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(2), np.int64(5)))
2025-04-11 17:44:35,093 [INFO] Final candidates: []
2025-04-11 17:44:35,093 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,094 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,094 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,094 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,094 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,097 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,097 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,097 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,097 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,098 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,098 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,098 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,098 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,101 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,101 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,101 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,101 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,107 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:35,107 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,107 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(4)), (np.int64(2), np.int64(10)))
2025-04-11 17:44:35,115 [INFO] Final candidates: []
2025-04-11 17:44:35,115 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,115 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,115 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,115 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,115 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,119 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,119 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,119 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,119 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,119 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,119 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,119 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,120 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,122 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,122 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,122 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:35,260 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,260 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(2)), (np.int64(5), np.int64(8)))
2025-04-11 17:44:35,267 [INFO] Final candidates: []
2025-04-11 17:44:35,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,267 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,267 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,267 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,267 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,271 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,271 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,271 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,271 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,272 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,272 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,272 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,274 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,274 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,274 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,274 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,380 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:35,380 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,381 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(12)), (np.int64(3), np.int64(12)))
2025-04-11 17:44:35,383 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(0, 12), (1, 12), (2, 12), (3, 12), (4, 12), (5, 12)] triggers candidate.
2025-04-11 17:44:35,383 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:44:35,383 [DEBUG] board coords: [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12)]
2025-04-11 17:44:35,383 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,383 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 12), (6, 12)]
2025-04-11 17:44:35,383 [DEBUG] check_window_intermediate_custom (only one inserted(5, 12)): For L=6, window [1 1 1 1 0 0] with coords [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12)] triggers candidate.
2025-04-11 17:44:35,388 [INFO] Final candidates: [(0, 12), (5, 12)]
2025-04-11 17:44:35,388 [INFO] Phase win: Collected 1unique candidate(s):[((0, 12), (5, 12))]
2025-04-11 17:44:35,388 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:35,388 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,388 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,388 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,392 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,392 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,392 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,392 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,393 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,393 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,393 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,393 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,395 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,395 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,395 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,417 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:35,417 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,417 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(15)), (np.int64(2), np.int64(16)))
2025-04-11 17:44:35,424 [INFO] Final candidates: []
2025-04-11 17:44:35,424 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,425 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,425 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,425 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,429 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,429 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,429 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,429 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,430 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,430 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,430 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,430 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,432 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,432 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,432 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,432 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,448 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:35,448 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,448 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(1)), (np.int64(1), np.int64(12)))
2025-04-11 17:44:35,455 [INFO] Final candidates: []
2025-04-11 17:44:35,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,456 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,456 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,456 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,456 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,460 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,460 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,460 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,460 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,460 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,461 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,461 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,461 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,463 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,463 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,463 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,463 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,568 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:35,568 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,568 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(1), np.int64(4)))
2025-04-11 17:44:35,575 [INFO] Final candidates: []
2025-04-11 17:44:35,575 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,576 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,576 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,576 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,576 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,579 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,579 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,579 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,579 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,580 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,580 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,580 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,580 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,583 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,583 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,583 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,583 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:35,671 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,671 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(1)), (np.int64(2), np.int64(5)))
2025-04-11 17:44:35,679 [INFO] Final candidates: []
2025-04-11 17:44:35,679 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,679 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,679 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,679 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,679 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,683 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,683 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,683 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,683 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,683 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,684 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,686 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,686 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,686 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,686 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:35,861 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:35,861 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:35,861 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(4)), (np.int64(3), np.int64(14)))
2025-04-11 17:44:35,869 [INFO] Final candidates: []
2025-04-11 17:44:35,869 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:35,869 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:35,869 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:35,869 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:35,869 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:35,873 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,873 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,873 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,873 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,874 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:35,874 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:35,874 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:35,874 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:35,876 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:35,876 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:35,876 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:35,876 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:36,220 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:36,220 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:36,220 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:36,230 [INFO] Final candidates: []
2025-04-11 17:44:36,230 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:36,230 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:36,230 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:36,230 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:36,230 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:36,234 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,234 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,234 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,234 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,235 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,235 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,235 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,235 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,237 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:36,237 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:36,237 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:36,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:36,363 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:36,363 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:36,364 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(3)), (np.int64(13), np.int64(4)))
2025-04-11 17:44:36,371 [INFO] Final candidates: []
2025-04-11 17:44:36,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:36,371 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:36,371 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:36,371 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:36,371 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:36,375 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,375 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,375 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,375 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,376 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,376 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,376 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,376 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,378 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:36,378 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:36,378 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:36,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:36,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:36,385 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:36,385 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:36,396 [INFO] Final candidates: []
2025-04-11 17:44:36,396 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:36,396 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:36,396 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:36,396 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:36,396 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:36,400 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,400 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,400 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,400 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,401 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,401 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,401 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,401 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,403 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:36,403 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:36,403 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:36,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:36,528 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:36,528 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:36,529 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(11)), (np.int64(5), np.int64(8)))
2025-04-11 17:44:36,536 [INFO] Final candidates: []
2025-04-11 17:44:36,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:36,536 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:36,536 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:36,536 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:36,536 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:36,540 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,540 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,540 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,540 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,541 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,541 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,541 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,541 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,543 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:36,543 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:36,543 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:36,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:36,579 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:36,580 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:36,580 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(9), np.int64(7)))
2025-04-11 17:44:36,587 [INFO] Final candidates: []
2025-04-11 17:44:36,587 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:36,587 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:36,587 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:36,587 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:36,587 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:36,591 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,591 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,591 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,591 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,592 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,592 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,592 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,592 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,594 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:36,594 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:36,594 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:36,594 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:36,809 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:36,809 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:36,810 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(4)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:36,817 [INFO] Final candidates: []
2025-04-11 17:44:36,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:36,817 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:36,817 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:36,818 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:36,818 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:36,821 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,821 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,821 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,821 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,822 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,822 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,822 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,822 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,824 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:36,824 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:36,824 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:36,824 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:36,936 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:36,937 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:36,937 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(1), np.int64(12)))
2025-04-11 17:44:36,944 [INFO] Final candidates: []
2025-04-11 17:44:36,944 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:36,944 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:36,944 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:36,944 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:36,945 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:36,948 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,948 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,948 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,948 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,949 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:36,949 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:36,949 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:36,949 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:36,952 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:36,952 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:36,952 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:36,952 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,118 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:37,118 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,118 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(11), np.int64(4)))
2025-04-11 17:44:37,126 [INFO] Final candidates: []
2025-04-11 17:44:37,126 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,126 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,126 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,126 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,126 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,130 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,130 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,130 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,130 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,130 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,130 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,131 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,133 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,133 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,133 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,177 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:37,177 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,177 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(5)), (np.int64(12), np.int64(3)))
2025-04-11 17:44:37,184 [INFO] Final candidates: []
2025-04-11 17:44:37,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,185 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,185 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,185 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,185 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,188 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,188 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,189 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,189 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,189 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,189 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,192 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,192 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,192 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,192 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,268 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:37,269 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,269 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(13)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:37,276 [INFO] Final candidates: []
2025-04-11 17:44:37,276 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,277 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,277 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,277 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,277 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,280 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,280 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,280 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,280 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,281 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,281 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,281 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,281 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,284 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,284 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,284 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,284 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,379 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:37,380 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,380 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(5)), (np.int64(4), np.int64(15)))
2025-04-11 17:44:37,388 [INFO] Final candidates: []
2025-04-11 17:44:37,388 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,388 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,388 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,388 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,388 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,392 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,392 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,392 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,392 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,393 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,393 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,393 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,393 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,395 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,396 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,396 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,396 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,428 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:37,428 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,428 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(0)), (np.int64(10), np.int64(7)))
2025-04-11 17:44:37,435 [INFO] Final candidates: []
2025-04-11 17:44:37,435 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,436 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,436 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,436 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,436 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,439 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,439 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,439 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,440 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,440 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,440 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,440 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,440 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,443 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,443 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,443 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,443 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,710 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:37,710 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,710 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:37,720 [INFO] Final candidates: []
2025-04-11 17:44:37,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,720 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,721 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,721 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,721 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,724 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,724 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,724 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,725 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,725 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,725 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,725 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,728 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,728 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,728 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,728 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,740 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:37,740 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,741 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:37,748 [INFO] Final candidates: []
2025-04-11 17:44:37,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,748 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,748 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,748 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,748 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,752 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,752 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,752 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,753 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,753 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,753 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,753 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,755 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,755 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,755 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,755 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:37,875 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:37,875 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:37,875 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(0)), (np.int64(13), np.int64(2)))
2025-04-11 17:44:37,883 [INFO] Final candidates: []
2025-04-11 17:44:37,883 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:37,883 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:37,883 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:37,883 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:37,883 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:37,887 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,887 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,887 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,888 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:37,888 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:37,888 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:37,888 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:37,890 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:37,890 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:37,890 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:37,890 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:38,159 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:38,160 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:38,160 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(5)))
2025-04-11 17:44:38,167 [INFO] Final candidates: []
2025-04-11 17:44:38,167 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:38,168 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:38,168 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:38,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:38,168 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:38,171 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,171 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,171 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,171 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,172 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,172 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,172 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,172 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,175 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:38,175 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:38,175 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:38,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:38,299 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:38,300 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:38,300 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(3), np.int64(4)))
2025-04-11 17:44:38,307 [INFO] Final candidates: []
2025-04-11 17:44:38,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:38,308 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:38,308 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:38,308 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:38,308 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:38,313 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,313 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,313 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,313 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,315 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,315 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,315 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,319 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:38,319 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:38,319 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:38,319 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:38,479 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:38,479 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:38,479 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(16)), (np.int64(5), np.int64(8)))
2025-04-11 17:44:38,487 [INFO] Final candidates: []
2025-04-11 17:44:38,488 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:38,489 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:38,489 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:38,489 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:38,489 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:38,498 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,498 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,498 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,498 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,500 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,500 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,500 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,500 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,502 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:38,502 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:38,502 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:38,503 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:38,774 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:38,774 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:38,774 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(6)))
2025-04-11 17:44:38,781 [INFO] Final candidates: []
2025-04-11 17:44:38,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:38,782 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:38,782 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:38,782 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:38,782 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:38,786 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,786 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,786 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,786 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,786 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,786 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,789 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:38,789 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:38,789 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:38,789 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:38,824 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:38,824 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:38,824 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(6)), (np.int64(4), np.int64(15)))
2025-04-11 17:44:38,832 [INFO] Final candidates: []
2025-04-11 17:44:38,832 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:38,832 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:38,832 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:38,832 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:38,832 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:38,836 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,836 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,836 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,836 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,837 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:38,837 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:38,837 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:38,837 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:38,839 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:38,839 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:38,839 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:38,839 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,025 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:39,026 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,026 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(1)), (np.int64(1), np.int64(14)))
2025-04-11 17:44:39,033 [INFO] Final candidates: []
2025-04-11 17:44:39,033 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,033 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,034 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,034 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,034 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,037 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,037 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,037 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,037 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,038 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,038 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,038 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,038 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,041 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,041 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,041 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,041 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,121 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:39,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,122 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:39,129 [INFO] Final candidates: []
2025-04-11 17:44:39,129 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,129 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,129 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,129 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,129 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,133 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,133 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,133 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,133 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,134 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,134 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,134 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,134 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,136 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,136 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,136 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,246 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:39,246 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,246 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(0)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:39,254 [INFO] Final candidates: []
2025-04-11 17:44:39,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,254 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,254 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,254 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,254 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,258 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,258 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,258 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,258 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,259 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,259 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,259 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,259 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,261 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,261 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,261 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,261 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,283 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:39,284 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,284 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(6)), (np.int64(16), np.int64(2)))
2025-04-11 17:44:39,291 [INFO] Final candidates: []
2025-04-11 17:44:39,291 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,291 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,291 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,291 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,291 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,295 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,295 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,295 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,295 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,296 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,296 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,296 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,296 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,298 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,298 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,298 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,298 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,367 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:39,367 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,368 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(7)), (np.int64(4), np.int64(10)))
2025-04-11 17:44:39,375 [INFO] Final candidates: []
2025-04-11 17:44:39,375 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,375 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,375 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,375 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,375 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,379 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,379 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,379 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,379 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,380 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,380 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,380 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,380 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,382 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,382 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,382 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,382 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,386 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:39,386 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,387 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(17)), (np.int64(16), np.int64(1)))
2025-04-11 17:44:39,394 [INFO] Final candidates: []
2025-04-11 17:44:39,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,394 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,394 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,394 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,394 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,398 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,398 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,398 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,398 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,399 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,399 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,399 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,399 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,401 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,401 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,401 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,435 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:39,435 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,435 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:39,442 [INFO] Final candidates: []
2025-04-11 17:44:39,442 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,443 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,443 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,443 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,443 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,446 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,446 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,446 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,447 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,447 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,447 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,447 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,447 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,450 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,450 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,450 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,450 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,575 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:39,575 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,575 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(5)), (np.int64(14), np.int64(5)))
2025-04-11 17:44:39,582 [INFO] Final candidates: []
2025-04-11 17:44:39,582 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,583 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,583 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,583 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,583 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,586 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,586 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,586 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,586 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,587 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,587 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,587 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,587 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,590 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,590 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,590 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,590 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,778 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:39,778 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,778 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(17)), (np.int64(14), np.int64(3)))
2025-04-11 17:44:39,786 [INFO] Final candidates: []
2025-04-11 17:44:39,786 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,786 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,786 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,786 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,790 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,790 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,790 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,790 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,792 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,792 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,793 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,793 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,796 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,796 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,796 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,796 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:44:39,796 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:39,889 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:39,889 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:39,890 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(1)), (np.int64(7), np.int64(8)))
2025-04-11 17:44:39,901 [INFO] Final candidates: []
2025-04-11 17:44:39,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:39,901 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:39,901 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:39,901 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:39,901 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:39,905 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,905 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,905 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,905 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,905 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:39,905 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:39,905 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:39,906 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:39,908 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:39,908 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:39,908 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:39,908 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,046 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:40,046 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,047 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(3)), (np.int64(5), np.int64(15)))
2025-04-11 17:44:40,054 [INFO] Final candidates: []
2025-04-11 17:44:40,054 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,054 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,054 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,054 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,055 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,058 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,058 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,058 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,058 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,059 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,059 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,059 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,061 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:40,061 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:40,061 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:40,061 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,101 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:40,101 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,101 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(0), np.int64(16)))
2025-04-11 17:44:40,108 [INFO] Final candidates: []
2025-04-11 17:44:40,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,109 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,109 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,109 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,109 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,116 [INFO] Final candidates: [(8, 8), (8, 6)]
2025-04-11 17:44:40,116 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 6))]
2025-04-11 17:44:40,116 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:44:40,116 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,320 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:40,320 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,321 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(16)), (np.int64(2), np.int64(9)))
2025-04-11 17:44:40,328 [INFO] Final candidates: []
2025-04-11 17:44:40,328 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,328 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,328 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,328 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,332 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,332 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,332 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,332 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,333 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,333 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,333 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,333 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,335 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:40,335 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:40,335 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:40,335 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,483 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:40,483 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,483 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(5)), (np.int64(12), np.int64(5)))
2025-04-11 17:44:40,491 [INFO] Final candidates: []
2025-04-11 17:44:40,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,491 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,491 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,491 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,491 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,495 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,495 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,495 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,495 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,496 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,496 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,496 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,498 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:40,498 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:40,498 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:40,498 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,676 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:40,676 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,676 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(13), np.int64(4)))
2025-04-11 17:44:40,683 [INFO] Final candidates: []
2025-04-11 17:44:40,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,684 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,684 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,684 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,687 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,687 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,688 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,688 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,688 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,688 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,688 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,688 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,691 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:40,691 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:40,691 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:40,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:40,838 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,838 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(1)), (np.int64(7), np.int64(8)))
2025-04-11 17:44:40,845 [INFO] Final candidates: []
2025-04-11 17:44:40,845 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,845 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,845 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,845 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,845 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,849 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,849 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,849 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,849 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,850 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,850 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,850 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,850 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,852 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:40,852 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:40,852 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:40,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,859 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:40,859 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,859 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(2)), (np.int64(1), np.int64(4)))
2025-04-11 17:44:40,867 [INFO] Final candidates: []
2025-04-11 17:44:40,867 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,867 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,867 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,867 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,867 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,871 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,871 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,871 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,871 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,871 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,871 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,872 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,872 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,874 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:40,874 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:40,874 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:40,874 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:40,921 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:40,921 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:40,921 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(4)), (np.int64(1), np.int64(7)))
2025-04-11 17:44:40,928 [INFO] Final candidates: []
2025-04-11 17:44:40,928 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:40,929 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:40,929 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:40,929 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:40,929 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:40,932 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,932 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,932 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,932 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,933 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:40,933 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:40,933 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:40,933 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:40,936 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:40,936 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:40,936 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:40,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,006 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:41,006 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,006 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:41,016 [INFO] Final candidates: []
2025-04-11 17:44:41,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,016 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,016 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,017 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,017 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,021 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,021 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,022 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,022 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,022 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,022 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,022 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,025 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:41,025 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:41,025 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:41,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,035 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:41,035 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,036 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(6)), (np.int64(5), np.int64(12)))
2025-04-11 17:44:41,043 [INFO] Final candidates: []
2025-04-11 17:44:41,043 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,043 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,043 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,043 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,043 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,047 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,047 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,047 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,047 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,048 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,048 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,048 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,048 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,050 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:41,050 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:41,050 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:41,050 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,192 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:41,192 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,192 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(0), np.int64(15)))
2025-04-11 17:44:41,203 [INFO] Final candidates: []
2025-04-11 17:44:41,203 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,203 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,203 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,203 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,203 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,210 [INFO] Final candidates: [(8, 8), (8, 6)]
2025-04-11 17:44:41,210 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 6))]
2025-04-11 17:44:41,210 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:44:41,210 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,386 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:41,386 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,386 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:41,393 [INFO] Final candidates: []
2025-04-11 17:44:41,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,394 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,394 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,394 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,394 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,397 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,397 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,397 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,397 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,398 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,398 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,398 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,398 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,400 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:41,401 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:41,401 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:41,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,465 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:41,466 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,466 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(3)), (np.int64(12), np.int64(5)))
2025-04-11 17:44:41,475 [INFO] Final candidates: []
2025-04-11 17:44:41,475 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,476 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,476 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,476 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,476 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,483 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,483 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,483 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,483 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,485 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,485 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,485 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,485 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,491 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:41,491 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:41,491 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:41,491 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,633 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:41,633 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,633 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(2)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:41,641 [INFO] Final candidates: []
2025-04-11 17:44:41,641 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,641 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,641 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,641 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,641 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,645 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,645 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,645 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,645 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,645 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,645 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,645 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,645 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,648 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:41,648 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:41,648 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:41,648 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,873 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:41,873 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,874 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 17:44:41,881 [INFO] Final candidates: []
2025-04-11 17:44:41,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,881 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,881 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,881 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,881 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,885 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,886 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,886 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,886 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,886 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,886 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,889 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:41,889 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:41,889 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:41,889 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,901 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:41,901 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,902 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(1), np.int64(14)))
2025-04-11 17:44:41,909 [INFO] Final candidates: []
2025-04-11 17:44:41,909 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,909 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:41,909 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:41,909 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:41,909 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:41,913 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,913 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,913 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,913 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,914 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,914 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,914 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,914 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,916 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:41,916 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:41,916 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:41,916 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:41,923 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:41,923 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:41,924 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(6)), (np.int64(8), np.int64(6)))
2025-04-11 17:44:41,931 [INFO] Final candidates: []
2025-04-11 17:44:41,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:41,935 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,935 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,935 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,935 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,936 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:41,936 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:41,936 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:41,936 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:41,938 [INFO] Final candidates: [(9, 8)]
2025-04-11 17:44:41,938 [INFO] Phase defense: Found only one candidate: (9, 8)
2025-04-11 17:44:41,938 [INFO] Phase defense: Collected 11unique candidate(s):[((9, 8), (np.int64(9), np.int64(10))), ((9, 8), (np.int64(8), np.int64(9))), ((9, 8), (np.int64(10), np.int64(8))), ((9, 8), (np.int64(10), np.int64(7))), ((9, 8), (np.int64(9), np.int64(7))), ((9, 8), (np.int64(9), np.int64(9))), ((9, 8), (np.int64(10), np.int64(9))), ((9, 8), (np.int64(11), np.int64(8))), ((9, 8), (np.int64(7), np.int64(8))), ((9, 8), (np.int64(8), np.int64(8))), ((9, 8), (np.int64(9), np.int64(6)))]
2025-04-11 17:44:41,938 [INFO] Phase 2 (defense): 11 candidate(s) found.
2025-04-11 17:44:41,938 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:42,073 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,073 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(1), np.int64(7)))
2025-04-11 17:44:42,081 [INFO] Final candidates: []
2025-04-11 17:44:42,081 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:42,081 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,081 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,081 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,081 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,085 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,085 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,085 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,085 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,085 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,085 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,085 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,086 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,088 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,088 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,088 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,088 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,297 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:42,298 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,298 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(12)), (np.int64(7), np.int64(8)))
2025-04-11 17:44:42,305 [INFO] Final candidates: []
2025-04-11 17:44:42,305 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:42,305 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,305 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,305 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,305 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,309 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,309 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,309 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,309 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,310 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,310 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,310 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,312 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,312 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,312 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:42,320 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,320 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(1), np.int64(11)))
2025-04-11 17:44:42,327 [INFO] Final candidates: []
2025-04-11 17:44:42,327 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:42,327 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,327 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,327 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,331 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,331 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,331 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,331 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,332 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,332 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,332 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,332 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,334 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,334 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,334 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,334 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,504 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:42,504 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,504 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(6)), (np.int64(14), np.int64(6)))
2025-04-11 17:44:42,511 [INFO] Final candidates: []
2025-04-11 17:44:42,512 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:42,512 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,512 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,512 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,516 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,516 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,516 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,516 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,517 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,517 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,517 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,517 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,519 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,519 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,519 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:42,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,697 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(1), np.int64(2)))
2025-04-11 17:44:42,704 [INFO] Final candidates: []
2025-04-11 17:44:42,704 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:42,705 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,705 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,705 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,708 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,708 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,709 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,709 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,709 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,710 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,712 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,712 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,712 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,779 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:42,779 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,779 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(6)), (np.int64(3), np.int64(10)))
2025-04-11 17:44:42,780 [DEBUG] board coords: [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)]
2025-04-11 17:44:42,780 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)]
2025-04-11 17:44:42,780 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (3, 9)]
2025-04-11 17:44:42,780 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 0 1] with coords [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)] triggers candidate.
2025-04-11 17:44:42,787 [INFO] Final candidates: [(3, 8), (3, 9)]
2025-04-11 17:44:42,787 [INFO] Phase win: Collected 1unique candidate(s):[((3, 8), (3, 9))]
2025-04-11 17:44:42,787 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:42,787 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,787 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,787 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,791 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,791 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,791 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,791 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,792 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,792 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,792 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,792 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,794 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,794 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,794 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:42,802 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,803 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(0), np.int64(2)))
2025-04-11 17:44:42,810 [INFO] Final candidates: []
2025-04-11 17:44:42,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:42,810 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,810 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,810 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,810 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,814 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,814 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,814 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,814 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,815 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,815 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,815 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,817 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,817 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,817 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:42,873 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:42,873 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:42,873 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(1)), (np.int64(9), np.int64(7)))
2025-04-11 17:44:42,880 [INFO] Final candidates: []
2025-04-11 17:44:42,880 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:42,881 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:42,881 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:42,881 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:42,881 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:42,884 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,884 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,885 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,885 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,885 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:42,885 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:42,885 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:42,885 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:42,888 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:42,888 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:42,888 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:42,888 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,112 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:43,112 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,113 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(14), np.int64(6)))
2025-04-11 17:44:43,120 [INFO] Final candidates: []
2025-04-11 17:44:43,120 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:43,120 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,120 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,120 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,120 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:43,127 [INFO] Final candidates: [(8, 8), (8, 6)]
2025-04-11 17:44:43,127 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 6))]
2025-04-11 17:44:43,127 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:44:43,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,201 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:43,201 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,201 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(12)), (np.int64(4), np.int64(11)))
2025-04-11 17:44:43,214 [DEBUG] board coords: [(0, 15), (1, 14), (2, 13), (3, 12), (4, 11), (5, 10)]
2025-04-11 17:44:43,214 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:43,214 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 15), (1, 14)]
2025-04-11 17:44:43,214 [DEBUG] check_window_intermediate_custom (only one inserted(1, 14)): For L=6, window [0 0 1 1 1 1] with coords [(0, 15), (1, 14), (2, 13), (3, 12), (4, 11), (5, 10)] triggers candidate.
2025-04-11 17:44:43,214 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(1, 14), (2, 13), (3, 12), (4, 11), (5, 10), (6, 9)] triggers candidate.
2025-04-11 17:44:43,214 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:44:43,214 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:44:43,214 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,214 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 9), (7, 8)]
2025-04-11 17:44:43,214 [DEBUG] check_window_intermediate_custom (only one inserted(6, 9)): For L=6, window [1 1 1 1 0 0] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:44:43,216 [INFO] Final candidates: [(1, 14), (6, 9)]
2025-04-11 17:44:43,216 [INFO] Phase win: Collected 1unique candidate(s):[((1, 14), (6, 9))]
2025-04-11 17:44:43,216 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:43,216 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,216 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,216 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,216 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:43,220 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,220 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,220 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,220 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,220 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,220 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,220 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,220 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,223 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:43,223 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:43,223 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:43,223 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,306 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:43,306 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,306 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:43,321 [INFO] Final candidates: []
2025-04-11 17:44:43,321 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:43,322 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,322 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,322 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,322 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:43,332 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,332 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,332 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,333 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,335 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,335 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,335 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,335 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,340 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:43,340 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:43,340 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:43,340 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,361 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:43,362 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,362 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(17)), (np.int64(4), np.int64(10)))
2025-04-11 17:44:43,380 [INFO] Final candidates: []
2025-04-11 17:44:43,380 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:43,381 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,381 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,381 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,381 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:43,390 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,390 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,390 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,390 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,392 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,392 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,392 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,392 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,398 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:43,398 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:43,398 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:43,398 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,488 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:43,488 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,488 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:43,496 [INFO] Final candidates: []
2025-04-11 17:44:43,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:43,496 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,496 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,496 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:43,503 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,503 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,503 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,504 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,504 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,504 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,504 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,506 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:43,506 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:43,506 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:43,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,650 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:43,651 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,651 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(3), np.int64(14)))
2025-04-11 17:44:43,658 [INFO] Final candidates: []
2025-04-11 17:44:43,658 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:43,658 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,658 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,658 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,658 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:43,662 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,662 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,662 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,662 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,663 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,663 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,663 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,663 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,665 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:43,665 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:43,665 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:43,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,937 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:43,937 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,937 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(6)), (np.int64(1), np.int64(5)))
2025-04-11 17:44:43,945 [INFO] Final candidates: []
2025-04-11 17:44:43,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:43,945 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,945 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,945 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,945 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:43,952 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,952 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,952 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,952 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,954 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:43,954 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:43,954 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:43,954 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:43,957 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:43,957 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:43,957 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:43,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:43,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:43,989 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:43,989 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(5)), (np.int64(3), np.int64(4)))
2025-04-11 17:44:43,996 [INFO] Final candidates: []
2025-04-11 17:44:43,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:43,997 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:43,997 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:43,997 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:43,997 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:44,000 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,001 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,001 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,001 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,001 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,001 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,004 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:44,004 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:44,004 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:44,004 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:44,028 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:44,028 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:44,028 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(3)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:44,035 [INFO] Final candidates: []
2025-04-11 17:44:44,035 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:44,035 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:44,035 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:44,035 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:44,036 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:44,039 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,039 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,039 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,039 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,040 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,040 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,040 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,040 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,042 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:44,042 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:44,042 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:44,042 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:44,145 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:44,146 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:44,146 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(11)), (np.int64(11), np.int64(1)))
2025-04-11 17:44:44,153 [INFO] Final candidates: []
2025-04-11 17:44:44,153 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:44,153 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:44,153 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:44,153 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:44,154 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:44,157 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,157 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,157 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,158 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,158 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,158 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,160 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:44,160 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:44,160 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:44,160 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:44,230 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:44,230 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:44,230 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(1), np.int64(16)))
2025-04-11 17:44:44,238 [INFO] Final candidates: []
2025-04-11 17:44:44,238 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:44,238 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:44,238 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:44,238 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:44,238 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:44,242 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,242 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,242 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,242 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,243 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,243 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,243 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,243 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,245 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:44,245 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:44,245 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:44,245 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:44,355 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:44,356 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:44,356 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(14), np.int64(2)))
2025-04-11 17:44:44,363 [INFO] Final candidates: []
2025-04-11 17:44:44,363 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:44,363 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:44,363 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:44,364 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:44,364 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:44,367 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,367 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,367 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,367 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,368 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,368 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,368 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,368 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,371 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:44,371 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:44,371 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:44,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:44,651 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:44,651 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:44,652 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(14), np.int64(2)))
2025-04-11 17:44:44,659 [INFO] Final candidates: []
2025-04-11 17:44:44,659 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:44,659 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:44,659 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:44,659 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:44,659 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:44,663 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,663 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,663 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,663 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,664 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,664 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,664 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,666 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:44,666 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:44,666 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:44,666 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:44,856 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:44,856 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:44,856 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(17)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:44,863 [INFO] Final candidates: []
2025-04-11 17:44:44,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:44,864 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:44,864 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:44,864 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:44,864 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:44,867 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,867 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,867 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,867 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,868 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,868 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,868 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,868 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,871 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:44,871 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:44,871 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:44,871 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:44,875 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:44,875 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:44,875 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(8), np.int64(6)))
2025-04-11 17:44:44,883 [INFO] Final candidates: []
2025-04-11 17:44:44,883 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:44,886 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,886 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,887 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,887 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:44,887 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:44,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:44,887 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:44,890 [INFO] Final candidates: [(9, 8)]
2025-04-11 17:44:44,890 [INFO] Phase defense: Found only one candidate: (9, 8)
2025-04-11 17:44:44,890 [INFO] Phase defense: Collected 11unique candidate(s):[((9, 8), (np.int64(9), np.int64(10))), ((9, 8), (np.int64(8), np.int64(9))), ((9, 8), (np.int64(10), np.int64(8))), ((9, 8), (np.int64(10), np.int64(7))), ((9, 8), (np.int64(9), np.int64(7))), ((9, 8), (np.int64(9), np.int64(9))), ((9, 8), (np.int64(10), np.int64(9))), ((9, 8), (np.int64(11), np.int64(8))), ((9, 8), (np.int64(7), np.int64(8))), ((9, 8), (np.int64(8), np.int64(8))), ((9, 8), (np.int64(9), np.int64(6)))]
2025-04-11 17:44:44,890 [INFO] Phase 2 (defense): 11 candidate(s) found.
2025-04-11 17:44:44,890 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,028 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:45,029 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,029 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(1)), (np.int64(12), np.int64(3)))
2025-04-11 17:44:45,036 [INFO] Final candidates: []
2025-04-11 17:44:45,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,036 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,036 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,036 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,037 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,040 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,040 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,040 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,040 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,041 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,041 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,041 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,041 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,043 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,043 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,043 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,043 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,104 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:45,104 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,105 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(5)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:45,112 [INFO] Final candidates: []
2025-04-11 17:44:45,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,112 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,112 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,112 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,113 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,116 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,116 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,116 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,117 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,117 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,117 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,117 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,119 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,119 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,119 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,132 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:45,133 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,133 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(9)), (np.int64(16), np.int64(2)))
2025-04-11 17:44:45,140 [INFO] Final candidates: []
2025-04-11 17:44:45,140 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,140 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,140 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,140 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,141 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,144 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,144 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,144 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,144 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,145 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,145 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,145 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,145 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,148 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,148 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,148 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,148 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,356 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:45,356 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,356 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:45,365 [INFO] Final candidates: []
2025-04-11 17:44:45,365 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,366 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,366 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,366 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,366 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,370 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,370 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,370 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,370 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,371 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,371 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,371 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,371 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,373 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,373 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,373 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,373 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,401 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:45,401 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,401 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:45,408 [INFO] Final candidates: []
2025-04-11 17:44:45,408 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,409 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,409 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,409 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,412 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,412 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,412 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,412 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,413 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,413 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,413 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,413 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,416 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,416 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,416 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,416 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,452 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:45,452 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,452 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(7), np.int64(0)))
2025-04-11 17:44:45,460 [INFO] Final candidates: []
2025-04-11 17:44:45,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,460 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,460 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,460 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,460 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,464 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,464 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,464 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,464 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,465 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,465 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,465 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,465 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,468 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,468 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,468 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,672 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:45,673 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,673 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(2)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:45,680 [INFO] Final candidates: []
2025-04-11 17:44:45,680 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,681 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,681 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,681 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,681 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,684 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,684 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,684 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,685 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,685 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,685 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,685 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,688 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,688 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,688 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,688 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,754 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:45,754 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:44:45,754 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(4)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:45,761 [INFO] Final candidates: []
2025-04-11 17:44:45,762 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:45,762 [DEBUG] board coords: [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]
2025-04-11 17:44:45,762 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:44:45,762 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 8)]
2025-04-11 17:44:45,762 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)] triggers candidate.
2025-04-11 17:44:45,765 [DEBUG] board coords: [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,765 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,766 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,766 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=6, window [2 2 2 2 0 0] with coords [(5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,766 [DEBUG] board coords: [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)]
2025-04-11 17:44:45,766 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:44:45,766 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 9)]
2025-04-11 17:44:45,766 [DEBUG] check_window_intermediate_custom (only one inserted(9, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8), (10, 9)] triggers candidate.
2025-04-11 17:44:45,769 [INFO] Final candidates: [(8, 8), (9, 8), (8, 6)]
2025-04-11 17:44:45,769 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 8), (9, 8)), ((8, 8), (8, 6)), ((9, 8), (8, 6))]
2025-04-11 17:44:45,769 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:44:45,769 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:45,791 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:45,791 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:44:45,791 [INFO] MCTS (defense candidates) selected move: H9,J8
2025-04-11 17:44:46,072 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:44:46,080 [INFO] Final candidates: []
2025-04-11 17:44:46,080 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,088 [INFO] Final candidates: []
2025-04-11 17:44:46,088 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,088 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:44:46,089 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:44:46,089 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(1), np.int64(7)))
2025-04-11 17:44:46,097 [INFO] Final candidates: []
2025-04-11 17:44:46,097 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,104 [INFO] Final candidates: []
2025-04-11 17:44:46,104 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,105 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:44:46,105 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:46,250 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:46,250 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(6), np.int64(8)))
2025-04-11 17:44:46,258 [INFO] Final candidates: []
2025-04-11 17:44:46,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,265 [INFO] Final candidates: []
2025-04-11 17:44:46,265 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,266 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:46,372 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:46,372 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(17), np.int64(4)))
2025-04-11 17:44:46,380 [INFO] Final candidates: []
2025-04-11 17:44:46,380 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,386 [INFO] Final candidates: []
2025-04-11 17:44:46,386 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,387 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:46,521 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:46,521 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:46,529 [INFO] Final candidates: []
2025-04-11 17:44:46,529 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,542 [INFO] Final candidates: []
2025-04-11 17:44:46,542 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:46,661 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:46,661 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(13), np.int64(4)))
2025-04-11 17:44:46,668 [INFO] Final candidates: []
2025-04-11 17:44:46,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,675 [INFO] Final candidates: []
2025-04-11 17:44:46,675 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,676 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:46,737 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:46,737 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(15), np.int64(3)))
2025-04-11 17:44:46,745 [INFO] Final candidates: []
2025-04-11 17:44:46,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,751 [INFO] Final candidates: []
2025-04-11 17:44:46,751 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:46,848 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:46,848 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(14), np.int64(2)))
2025-04-11 17:44:46,856 [INFO] Final candidates: []
2025-04-11 17:44:46,856 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,863 [INFO] Final candidates: []
2025-04-11 17:44:46,863 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,864 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:46,947 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:46,947 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(15), np.int64(4)))
2025-04-11 17:44:46,955 [INFO] Final candidates: []
2025-04-11 17:44:46,955 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,961 [INFO] Final candidates: []
2025-04-11 17:44:46,961 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:46,963 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:47,069 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:47,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(7)), (np.int64(6), np.int64(6)))
2025-04-11 17:44:47,077 [INFO] Final candidates: []
2025-04-11 17:44:47,077 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,084 [INFO] Final candidates: []
2025-04-11 17:44:47,084 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,085 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:47,331 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:47,331 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:47,339 [INFO] Final candidates: []
2025-04-11 17:44:47,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,345 [INFO] Final candidates: []
2025-04-11 17:44:47,345 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,347 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:47,411 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:47,411 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(2), np.int64(10)))
2025-04-11 17:44:47,418 [INFO] Final candidates: []
2025-04-11 17:44:47,418 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,427 [INFO] Final candidates: []
2025-04-11 17:44:47,427 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,428 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:47,679 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:47,679 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(6), np.int64(12)))
2025-04-11 17:44:47,686 [INFO] Final candidates: []
2025-04-11 17:44:47,687 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,693 [INFO] Final candidates: []
2025-04-11 17:44:47,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:47,812 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:47,812 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(3), np.int64(12)))
2025-04-11 17:44:47,815 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(0, 12), (1, 12), (2, 12), (3, 12), (4, 12), (5, 12)] triggers candidate.
2025-04-11 17:44:47,815 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:44:47,815 [DEBUG] board coords: [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12)]
2025-04-11 17:44:47,815 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:47,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 12), (6, 12)]
2025-04-11 17:44:47,815 [DEBUG] check_window_intermediate_custom (only one inserted(5, 12)): For L=6, window [1 1 1 1 0 0] with coords [(1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12)] triggers candidate.
2025-04-11 17:44:47,818 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:44:47,818 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:44:47,818 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:44:47,818 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:44:47,818 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:47,818 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:44:47,818 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:44:47,818 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:47,819 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:47,819 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:44:47,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:44:47,819 [DEBUG] check_window_intermediate_custom: For L=7, window [1 1 0 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:47,820 [INFO] Final candidates: [(0, 12), (4, 11), (6, 9), (5, 12)]
2025-04-11 17:44:47,820 [INFO] Phase win: Collected 6unique candidate(s):[((0, 12), (4, 11)), ((6, 9), (5, 12)), ((4, 11), (6, 9)), ((0, 12), (5, 12)), ((0, 12), (6, 9)), ((4, 11), (5, 12))]
2025-04-11 17:44:47,820 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 17:44:47,827 [INFO] Final candidates: []
2025-04-11 17:44:47,827 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,828 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:47,902 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:47,903 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(9), np.int64(7)))
2025-04-11 17:44:47,910 [INFO] Final candidates: []
2025-04-11 17:44:47,910 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,917 [INFO] Final candidates: []
2025-04-11 17:44:47,917 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:47,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:48,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:48,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(5), np.int64(7)))
2025-04-11 17:44:48,110 [INFO] Final candidates: []
2025-04-11 17:44:48,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,117 [INFO] Final candidates: []
2025-04-11 17:44:48,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:48,146 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:48,146 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:48,154 [INFO] Final candidates: []
2025-04-11 17:44:48,154 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,160 [INFO] Final candidates: []
2025-04-11 17:44:48,160 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,161 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:48,326 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:48,326 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:48,327 [DEBUG] board coords: [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)]
2025-04-11 17:44:48,327 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:48,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 4), (3, 6)]
2025-04-11 17:44:48,327 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)] triggers candidate.
2025-04-11 17:44:48,327 [DEBUG] board coords: [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)]
2025-04-11 17:44:48,327 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:44:48,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 6), (3, 10)]
2025-04-11 17:44:48,327 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)] triggers candidate.
2025-04-11 17:44:48,334 [INFO] Final candidates: [(3, 4), (3, 10), (3, 6)]
2025-04-11 17:44:48,334 [INFO] Phase win: Collected 3unique candidate(s):[((3, 4), (3, 10)), ((3, 10), (3, 6)), ((3, 4), (3, 6))]
2025-04-11 17:44:48,334 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:48,341 [INFO] Final candidates: []
2025-04-11 17:44:48,341 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,342 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:48,423 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:48,424 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(3)), (np.int64(9), np.int64(1)))
2025-04-11 17:44:48,438 [INFO] Final candidates: []
2025-04-11 17:44:48,438 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,444 [INFO] Final candidates: []
2025-04-11 17:44:48,444 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,446 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:48,610 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:48,611 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(2), np.int64(8)))
2025-04-11 17:44:48,624 [INFO] Final candidates: []
2025-04-11 17:44:48,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,635 [INFO] Final candidates: []
2025-04-11 17:44:48,635 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,636 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:48,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:48,810 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:48,817 [INFO] Final candidates: []
2025-04-11 17:44:48,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,824 [INFO] Final candidates: []
2025-04-11 17:44:48,824 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,825 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:48,911 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:48,912 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(4), np.int64(16)))
2025-04-11 17:44:48,919 [INFO] Final candidates: []
2025-04-11 17:44:48,919 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,926 [INFO] Final candidates: []
2025-04-11 17:44:48,926 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:48,927 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,104 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:49,104 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(7), np.int64(9)))
2025-04-11 17:44:49,111 [INFO] Final candidates: []
2025-04-11 17:44:49,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,118 [INFO] Final candidates: []
2025-04-11 17:44:49,118 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,178 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:49,179 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(4), np.int64(15)))
2025-04-11 17:44:49,186 [INFO] Final candidates: []
2025-04-11 17:44:49,186 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,193 [INFO] Final candidates: []
2025-04-11 17:44:49,193 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,194 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,312 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:49,312 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(10), np.int64(0)))
2025-04-11 17:44:49,320 [INFO] Final candidates: []
2025-04-11 17:44:49,320 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,326 [INFO] Final candidates: []
2025-04-11 17:44:49,326 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,328 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,437 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:49,438 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:49,445 [INFO] Final candidates: []
2025-04-11 17:44:49,445 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,452 [INFO] Final candidates: []
2025-04-11 17:44:49,452 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,453 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,636 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:49,636 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(3)), (np.int64(8), np.int64(1)))
2025-04-11 17:44:49,643 [INFO] Final candidates: []
2025-04-11 17:44:49,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,650 [INFO] Final candidates: []
2025-04-11 17:44:49,650 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,652 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,728 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:49,728 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(0), np.int64(15)))
2025-04-11 17:44:49,736 [INFO] Final candidates: []
2025-04-11 17:44:49,736 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,743 [INFO] Final candidates: []
2025-04-11 17:44:49,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,745 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,826 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:49,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(7)), (np.int64(13), np.int64(5)))
2025-04-11 17:44:49,834 [INFO] Final candidates: []
2025-04-11 17:44:49,834 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,840 [INFO] Final candidates: []
2025-04-11 17:44:49,840 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,842 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:49,941 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:49,941 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(5), np.int64(7)))
2025-04-11 17:44:49,949 [INFO] Final candidates: []
2025-04-11 17:44:49,949 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,955 [INFO] Final candidates: []
2025-04-11 17:44:49,955 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:49,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:50,105 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:50,106 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(4), np.int64(10)))
2025-04-11 17:44:50,113 [INFO] Final candidates: []
2025-04-11 17:44:50,113 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,120 [INFO] Final candidates: []
2025-04-11 17:44:50,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:50,311 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:50,311 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(7), np.int64(11)))
2025-04-11 17:44:50,318 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:44:50,318 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:44:50,318 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:44:50,318 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:44:50,318 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:50,318 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:44:50,318 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:44:50,318 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:50,321 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:50,321 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:44:50,321 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:44:50,321 [DEBUG] check_window_intermediate_custom: For L=7, window [1 1 0 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:50,323 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:44:50,323 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:44:50,323 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:50,335 [INFO] Final candidates: []
2025-04-11 17:44:50,335 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:50,429 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:50,430 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(5)), (np.int64(6), np.int64(9)))
2025-04-11 17:44:50,435 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:44:50,435 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:50,435 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:44:50,435 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:44:50,436 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:50,436 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:50,436 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:44:50,436 [DEBUG] check_window_intermediate_custom (only one inserted(4, 11)): For L=6, window [0 0 1 1 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:50,436 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:44:50,436 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:44:50,437 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:50,437 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:50,437 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:44:50,437 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 0 1 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:50,437 [INFO] Final candidates: [(3, 12), (4, 11), (9, 6)]
2025-04-11 17:44:50,437 [INFO] Phase win: Collected 3unique candidate(s):[((4, 11), (9, 6)), ((3, 12), (4, 11)), ((3, 12), (9, 6))]
2025-04-11 17:44:50,437 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:50,444 [INFO] Final candidates: []
2025-04-11 17:44:50,444 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,445 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:50,535 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:50,535 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:50,543 [INFO] Final candidates: []
2025-04-11 17:44:50,543 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,550 [INFO] Final candidates: []
2025-04-11 17:44:50,550 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,551 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:50,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:50,699 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:44:50,707 [INFO] Final candidates: []
2025-04-11 17:44:50,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,714 [INFO] Final candidates: []
2025-04-11 17:44:50,714 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,715 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:50,867 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:50,867 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(0), np.int64(15)))
2025-04-11 17:44:50,875 [INFO] Final candidates: []
2025-04-11 17:44:50,875 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,881 [INFO] Final candidates: []
2025-04-11 17:44:50,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:50,955 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:50,956 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(14), np.int64(3)))
2025-04-11 17:44:50,963 [INFO] Final candidates: []
2025-04-11 17:44:50,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,970 [INFO] Final candidates: []
2025-04-11 17:44:50,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:50,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:51,202 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:51,202 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(15), np.int64(2)))
2025-04-11 17:44:51,211 [INFO] Final candidates: []
2025-04-11 17:44:51,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,221 [INFO] Final candidates: []
2025-04-11 17:44:51,221 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:51,361 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:51,361 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(12), np.int64(0)))
2025-04-11 17:44:51,368 [INFO] Final candidates: []
2025-04-11 17:44:51,368 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,375 [INFO] Final candidates: []
2025-04-11 17:44:51,375 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,376 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:51,468 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:51,468 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(1), np.int64(13)))
2025-04-11 17:44:51,475 [INFO] Final candidates: []
2025-04-11 17:44:51,475 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,483 [INFO] Final candidates: []
2025-04-11 17:44:51,483 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:51,532 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:51,532 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(4), np.int64(11)))
2025-04-11 17:44:51,539 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:44:51,539 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:44:51,539 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:44:51,539 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:44:51,539 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:51,539 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:44:51,539 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:44:51,540 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:51,540 [DEBUG] board coords: [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)]
2025-04-11 17:44:51,540 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:44:51,540 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 9), (9, 6)]
2025-04-11 17:44:51,540 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:44:51,540 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:51,541 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:44:51,541 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:44:51,541 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 1 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:51,541 [INFO] Final candidates: [(3, 12), (9, 6), (6, 9)]
2025-04-11 17:44:51,541 [INFO] Phase win: Collected 3unique candidate(s):[((3, 12), (9, 6)), ((3, 12), (6, 9)), ((9, 6), (6, 9))]
2025-04-11 17:44:51,541 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:51,548 [INFO] Final candidates: []
2025-04-11 17:44:51,548 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,549 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:51,666 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:51,666 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(2), np.int64(10)))
2025-04-11 17:44:51,674 [INFO] Final candidates: []
2025-04-11 17:44:51,675 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,681 [INFO] Final candidates: []
2025-04-11 17:44:51,681 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,683 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:51,897 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:51,897 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(6), np.int64(9)))
2025-04-11 17:44:51,903 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:44:51,903 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:51,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:44:51,903 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:44:51,903 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:51,903 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:51,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:44:51,903 [DEBUG] check_window_intermediate_custom (only one inserted(4, 11)): For L=6, window [0 0 1 1 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:51,903 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:44:51,903 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:44:51,904 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:44:51,904 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:51,904 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:44:51,904 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 0 1 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:44:51,905 [INFO] Final candidates: [(3, 12), (4, 11), (9, 6)]
2025-04-11 17:44:51,905 [INFO] Phase win: Collected 3unique candidate(s):[((4, 11), (9, 6)), ((3, 12), (4, 11)), ((3, 12), (9, 6))]
2025-04-11 17:44:51,905 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:51,912 [INFO] Final candidates: []
2025-04-11 17:44:51,912 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,913 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:51,930 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:51,931 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(4), np.int64(15)))
2025-04-11 17:44:51,938 [INFO] Final candidates: []
2025-04-11 17:44:51,938 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,947 [INFO] Final candidates: []
2025-04-11 17:44:51,947 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:51,948 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,030 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:52,030 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(4), np.int64(5)))
2025-04-11 17:44:52,037 [INFO] Final candidates: []
2025-04-11 17:44:52,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,044 [INFO] Final candidates: []
2025-04-11 17:44:52,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,195 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:52,195 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(7)), (np.int64(9), np.int64(6)))
2025-04-11 17:44:52,201 [DEBUG] board coords: [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)]
2025-04-11 17:44:52,201 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:44:52,201 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:44:52,201 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:44:52,203 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:44:52,203 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:44:52,203 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:44:52,209 [INFO] Final candidates: []
2025-04-11 17:44:52,209 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,210 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,250 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:52,250 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(0)), (np.int64(5), np.int64(15)))
2025-04-11 17:44:52,257 [INFO] Final candidates: []
2025-04-11 17:44:52,257 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,264 [INFO] Final candidates: []
2025-04-11 17:44:52,264 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,265 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,416 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:52,417 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(15), np.int64(3)))
2025-04-11 17:44:52,424 [INFO] Final candidates: []
2025-04-11 17:44:52,424 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,431 [INFO] Final candidates: []
2025-04-11 17:44:52,431 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,432 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,503 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:52,503 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(1), np.int64(7)))
2025-04-11 17:44:52,511 [INFO] Final candidates: []
2025-04-11 17:44:52,511 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,517 [INFO] Final candidates: []
2025-04-11 17:44:52,517 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,588 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:52,588 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:52,595 [INFO] Final candidates: []
2025-04-11 17:44:52,595 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,602 [INFO] Final candidates: []
2025-04-11 17:44:52,602 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,644 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:52,645 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(13), np.int64(0)))
2025-04-11 17:44:52,653 [INFO] Final candidates: []
2025-04-11 17:44:52,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,660 [INFO] Final candidates: []
2025-04-11 17:44:52,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,773 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:52,773 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(0)), (np.int64(8), np.int64(1)))
2025-04-11 17:44:52,780 [INFO] Final candidates: []
2025-04-11 17:44:52,780 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,787 [INFO] Final candidates: []
2025-04-11 17:44:52,787 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,788 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:44:52,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:52,930 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:52,930 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:52,938 [INFO] Final candidates: []
2025-04-11 17:44:52,938 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,944 [INFO] Final candidates: []
2025-04-11 17:44:52,944 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:52,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,025 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:53,025 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(5)), (np.int64(8), np.int64(8)))
2025-04-11 17:44:53,037 [INFO] Final candidates: []
2025-04-11 17:44:53,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,043 [INFO] Final candidates: []
2025-04-11 17:44:53,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,100 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:53,101 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(9), np.int64(0)))
2025-04-11 17:44:53,108 [INFO] Final candidates: []
2025-04-11 17:44:53,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,115 [INFO] Final candidates: []
2025-04-11 17:44:53,115 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,116 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,158 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:53,159 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(4), np.int64(16)))
2025-04-11 17:44:53,166 [INFO] Final candidates: []
2025-04-11 17:44:53,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,172 [INFO] Final candidates: []
2025-04-11 17:44:53,173 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,174 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,280 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:53,280 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(8), np.int64(8)))
2025-04-11 17:44:53,285 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:44:53,285 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:53,285 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:44:53,285 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:44:53,288 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:44:53,288 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:44:53,288 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:44:53,288 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:44:53,295 [INFO] Final candidates: []
2025-04-11 17:44:53,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,357 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:53,357 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(14), np.int64(5)))
2025-04-11 17:44:53,369 [INFO] Final candidates: []
2025-04-11 17:44:53,369 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,376 [INFO] Final candidates: []
2025-04-11 17:44:53,376 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,548 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:53,548 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(13), np.int64(2)))
2025-04-11 17:44:53,556 [INFO] Final candidates: []
2025-04-11 17:44:53,556 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,562 [INFO] Final candidates: []
2025-04-11 17:44:53,562 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,563 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,632 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:53,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(4), np.int64(6)))
2025-04-11 17:44:53,640 [INFO] Final candidates: []
2025-04-11 17:44:53,640 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,647 [INFO] Final candidates: []
2025-04-11 17:44:53,647 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,648 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,754 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:53,754 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:53,761 [INFO] Final candidates: []
2025-04-11 17:44:53,761 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,768 [INFO] Final candidates: []
2025-04-11 17:44:53,768 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,769 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:53,893 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:53,894 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(11), np.int64(6)))
2025-04-11 17:44:53,901 [INFO] Final candidates: []
2025-04-11 17:44:53,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,907 [INFO] Final candidates: []
2025-04-11 17:44:53,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:53,909 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,044 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:54,044 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(12), np.int64(2)))
2025-04-11 17:44:54,052 [INFO] Final candidates: []
2025-04-11 17:44:54,052 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,059 [INFO] Final candidates: []
2025-04-11 17:44:54,059 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,060 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,180 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:54,181 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(6)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:54,191 [INFO] Final candidates: []
2025-04-11 17:44:54,191 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,198 [INFO] Final candidates: []
2025-04-11 17:44:54,198 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,200 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,340 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:54,340 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(11), np.int64(3)))
2025-04-11 17:44:54,347 [INFO] Final candidates: []
2025-04-11 17:44:54,347 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,354 [INFO] Final candidates: []
2025-04-11 17:44:54,354 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,355 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,455 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:54,455 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(3), np.int64(9)))
2025-04-11 17:44:54,455 [DEBUG] board coords: [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)]
2025-04-11 17:44:54,455 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:44:54,455 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 4), (3, 8)]
2025-04-11 17:44:54,455 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)] triggers candidate.
2025-04-11 17:44:54,455 [DEBUG] board coords: [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)]
2025-04-11 17:44:54,455 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:44:54,455 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (3, 10)]
2025-04-11 17:44:54,455 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)] triggers candidate.
2025-04-11 17:44:54,463 [INFO] Final candidates: [(3, 8), (3, 4), (3, 10)]
2025-04-11 17:44:54,463 [INFO] Phase win: Collected 3unique candidate(s):[((3, 4), (3, 10)), ((3, 8), (3, 10)), ((3, 8), (3, 4))]
2025-04-11 17:44:54,463 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:44:54,472 [INFO] Final candidates: []
2025-04-11 17:44:54,472 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,514 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:54,515 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(0), np.int64(15)))
2025-04-11 17:44:54,522 [INFO] Final candidates: []
2025-04-11 17:44:54,522 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,529 [INFO] Final candidates: []
2025-04-11 17:44:54,529 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,530 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,655 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:54,655 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(5), np.int64(8)))
2025-04-11 17:44:54,663 [INFO] Final candidates: []
2025-04-11 17:44:54,663 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,669 [INFO] Final candidates: []
2025-04-11 17:44:54,669 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,671 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,758 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:54,759 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(4), np.int64(8)))
2025-04-11 17:44:54,766 [INFO] Final candidates: []
2025-04-11 17:44:54,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,773 [INFO] Final candidates: []
2025-04-11 17:44:54,773 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,774 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,859 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:54,859 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(15), np.int64(2)))
2025-04-11 17:44:54,867 [INFO] Final candidates: []
2025-04-11 17:44:54,867 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,874 [INFO] Final candidates: []
2025-04-11 17:44:54,874 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:54,978 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:54,978 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(12), np.int64(3)))
2025-04-11 17:44:54,985 [INFO] Final candidates: []
2025-04-11 17:44:54,985 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,992 [INFO] Final candidates: []
2025-04-11 17:44:54,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:54,994 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:55,151 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:55,152 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(3), np.int64(4)))
2025-04-11 17:44:55,159 [INFO] Final candidates: []
2025-04-11 17:44:55,159 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,166 [INFO] Final candidates: []
2025-04-11 17:44:55,166 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,167 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:55,268 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:55,269 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(1), np.int64(5)))
2025-04-11 17:44:55,276 [INFO] Final candidates: []
2025-04-11 17:44:55,276 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,283 [INFO] Final candidates: []
2025-04-11 17:44:55,283 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,284 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:55,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:55,380 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(3), np.int64(11)))
2025-04-11 17:44:55,387 [INFO] Final candidates: []
2025-04-11 17:44:55,387 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,394 [INFO] Final candidates: []
2025-04-11 17:44:55,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:55,586 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:55,586 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(9)))
2025-04-11 17:44:55,594 [INFO] Final candidates: []
2025-04-11 17:44:55,594 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,600 [INFO] Final candidates: []
2025-04-11 17:44:55,600 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:55,826 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:55,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(6), np.int64(6)))
2025-04-11 17:44:55,834 [INFO] Final candidates: []
2025-04-11 17:44:55,834 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,840 [INFO] Final candidates: []
2025-04-11 17:44:55,841 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,842 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:55,955 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:55,955 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(10), np.int64(7)))
2025-04-11 17:44:55,962 [INFO] Final candidates: []
2025-04-11 17:44:55,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,969 [INFO] Final candidates: []
2025-04-11 17:44:55,969 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:55,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:56,090 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:56,090 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(12), np.int64(3)))
2025-04-11 17:44:56,098 [INFO] Final candidates: []
2025-04-11 17:44:56,099 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,107 [INFO] Final candidates: []
2025-04-11 17:44:56,107 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:56,352 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:56,353 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(1)), (np.int64(15), np.int64(3)))
2025-04-11 17:44:56,360 [INFO] Final candidates: []
2025-04-11 17:44:56,360 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,367 [INFO] Final candidates: []
2025-04-11 17:44:56,367 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,368 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:56,601 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:56,601 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(7), np.int64(7)))
2025-04-11 17:44:56,609 [INFO] Final candidates: []
2025-04-11 17:44:56,609 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,616 [INFO] Final candidates: []
2025-04-11 17:44:56,616 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,617 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:56,712 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:56,712 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(7), np.int64(0)))
2025-04-11 17:44:56,720 [INFO] Final candidates: []
2025-04-11 17:44:56,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,726 [INFO] Final candidates: []
2025-04-11 17:44:56,726 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,727 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:56,864 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:56,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(5), np.int64(15)))
2025-04-11 17:44:56,872 [INFO] Final candidates: []
2025-04-11 17:44:56,872 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,878 [INFO] Final candidates: []
2025-04-11 17:44:56,878 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:56,879 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:57,018 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:57,019 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(6)), (np.int64(9), np.int64(1)))
2025-04-11 17:44:57,026 [INFO] Final candidates: []
2025-04-11 17:44:57,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,035 [INFO] Final candidates: []
2025-04-11 17:44:57,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,037 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:57,181 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:57,181 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(6), np.int64(10)))
2025-04-11 17:44:57,188 [INFO] Final candidates: []
2025-04-11 17:44:57,188 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,195 [INFO] Final candidates: []
2025-04-11 17:44:57,195 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,196 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:57,468 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:57,468 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(12), np.int64(3)))
2025-04-11 17:44:57,482 [INFO] Final candidates: []
2025-04-11 17:44:57,482 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,489 [INFO] Final candidates: []
2025-04-11 17:44:57,489 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,490 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:57,642 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:57,642 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(6), np.int64(0)))
2025-04-11 17:44:57,649 [INFO] Final candidates: []
2025-04-11 17:44:57,649 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,656 [INFO] Final candidates: []
2025-04-11 17:44:57,656 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,657 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:57,781 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:57,782 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(6), np.int64(14)))
2025-04-11 17:44:57,789 [INFO] Final candidates: []
2025-04-11 17:44:57,789 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,805 [INFO] Final candidates: []
2025-04-11 17:44:57,805 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:57,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:58,013 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:58,014 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(10), np.int64(0)))
2025-04-11 17:44:58,021 [INFO] Final candidates: []
2025-04-11 17:44:58,021 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,028 [INFO] Final candidates: []
2025-04-11 17:44:58,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,029 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:58,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:58,115 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:58,122 [INFO] Final candidates: []
2025-04-11 17:44:58,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,129 [INFO] Final candidates: []
2025-04-11 17:44:58,129 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:58,185 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:58,186 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(5)), (np.int64(7), np.int64(7)))
2025-04-11 17:44:58,193 [INFO] Final candidates: []
2025-04-11 17:44:58,193 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,200 [INFO] Final candidates: []
2025-04-11 17:44:58,200 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,201 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:58,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:58,347 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(10), np.int64(0)))
2025-04-11 17:44:58,363 [INFO] Final candidates: []
2025-04-11 17:44:58,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,371 [INFO] Final candidates: []
2025-04-11 17:44:58,371 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,373 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:58,610 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:58,610 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(2), np.int64(15)))
2025-04-11 17:44:58,615 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:44:58,615 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:44:58,615 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:44:58,615 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:44:58,618 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:44:58,618 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:44:58,618 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:44:58,618 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:44:58,625 [INFO] Final candidates: []
2025-04-11 17:44:58,625 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,626 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:58,714 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:58,714 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(3), np.int64(10)))
2025-04-11 17:44:58,721 [INFO] Final candidates: []
2025-04-11 17:44:58,721 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,728 [INFO] Final candidates: []
2025-04-11 17:44:58,728 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:58,907 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:58,908 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(13), np.int64(3)))
2025-04-11 17:44:58,916 [INFO] Final candidates: []
2025-04-11 17:44:58,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,922 [INFO] Final candidates: []
2025-04-11 17:44:58,922 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:58,923 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:59,063 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:59,063 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(13), np.int64(0)))
2025-04-11 17:44:59,074 [INFO] Final candidates: []
2025-04-11 17:44:59,074 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,083 [INFO] Final candidates: []
2025-04-11 17:44:59,083 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,087 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:59,201 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:59,201 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(7)))
2025-04-11 17:44:59,208 [INFO] Final candidates: []
2025-04-11 17:44:59,208 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,215 [INFO] Final candidates: []
2025-04-11 17:44:59,215 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,216 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:59,249 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:59,249 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(17), np.int64(2)))
2025-04-11 17:44:59,256 [INFO] Final candidates: []
2025-04-11 17:44:59,256 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,263 [INFO] Final candidates: []
2025-04-11 17:44:59,263 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,264 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:59,388 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:59,389 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(1), np.int64(6)))
2025-04-11 17:44:59,397 [INFO] Final candidates: []
2025-04-11 17:44:59,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,404 [INFO] Final candidates: []
2025-04-11 17:44:59,404 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:59,636 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:44:59,636 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(4), np.int64(10)))
2025-04-11 17:44:59,644 [INFO] Final candidates: []
2025-04-11 17:44:59,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,650 [INFO] Final candidates: []
2025-04-11 17:44:59,650 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,652 [INFO] Default policy: Starting random playout.
2025-04-11 17:44:59,850 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:44:59,850 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(14), np.int64(2)))
2025-04-11 17:44:59,862 [INFO] Final candidates: []
2025-04-11 17:44:59,862 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,869 [INFO] Final candidates: []
2025-04-11 17:44:59,869 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:44:59,870 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:00,020 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:00,021 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(5), np.int64(13)))
2025-04-11 17:45:00,028 [INFO] Final candidates: []
2025-04-11 17:45:00,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,039 [INFO] Final candidates: []
2025-04-11 17:45:00,039 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,042 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:00,212 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:00,213 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:45:00,213 [INFO] MCTS selected move: S2,H2
2025-04-11 17:45:00,213 [INFO] ===============NEW MOVE================
2025-04-11 17:45:00,558 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:45:00,566 [INFO] Final candidates: []
2025-04-11 17:45:00,566 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,572 [INFO] Final candidates: []
2025-04-11 17:45:00,572 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,572 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:45:00,574 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:45:00,574 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(2), np.int64(5)))
2025-04-11 17:45:00,581 [INFO] Final candidates: []
2025-04-11 17:45:00,581 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,588 [INFO] Final candidates: []
2025-04-11 17:45:00,588 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,589 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:45:00,589 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:00,773 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:00,774 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(1), np.int64(11)))
2025-04-11 17:45:00,782 [INFO] Final candidates: []
2025-04-11 17:45:00,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,790 [INFO] Final candidates: []
2025-04-11 17:45:00,790 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,791 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:00,881 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:00,882 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(2)), (np.int64(3), np.int64(12)))
2025-04-11 17:45:00,889 [INFO] Final candidates: []
2025-04-11 17:45:00,889 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,896 [INFO] Final candidates: []
2025-04-11 17:45:00,896 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:00,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,037 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:01,037 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(16), np.int64(5)))
2025-04-11 17:45:01,037 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:01,037 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:45:01,037 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:45:01,037 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:01,045 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:45:01,045 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:45:01,045 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:01,052 [INFO] Final candidates: []
2025-04-11 17:45:01,052 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,053 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,180 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:01,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(11), np.int64(1)))
2025-04-11 17:45:01,180 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:01,180 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:01,180 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:45:01,180 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:01,180 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:01,180 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:01,180 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:01,180 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:01,182 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:45:01,182 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:01,182 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:45:01,182 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:45:01,187 [INFO] Final candidates: [(8, 1), (0, 6), (0, 2), (0, 8), (9, 1)]
2025-04-11 17:45:01,187 [INFO] Phase win: Collected 10unique candidate(s):[((8, 1), (0, 2)), ((8, 1), (9, 1)), ((0, 2), (9, 1)), ((8, 1), (0, 8)), ((8, 1), (0, 6)), ((0, 8), (9, 1)), ((0, 2), (0, 8)), ((0, 6), (0, 2)), ((0, 6), (9, 1)), ((0, 6), (0, 8))]
2025-04-11 17:45:01,187 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:45:01,194 [INFO] Final candidates: []
2025-04-11 17:45:01,194 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,195 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,241 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:01,242 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(3), np.int64(17)))
2025-04-11 17:45:01,249 [INFO] Final candidates: []
2025-04-11 17:45:01,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,255 [INFO] Final candidates: []
2025-04-11 17:45:01,255 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,257 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,436 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:01,436 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(7), np.int64(7)))
2025-04-11 17:45:01,443 [INFO] Final candidates: []
2025-04-11 17:45:01,443 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,450 [INFO] Final candidates: []
2025-04-11 17:45:01,450 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,451 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,597 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:01,598 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(4), np.int64(10)))
2025-04-11 17:45:01,605 [INFO] Final candidates: []
2025-04-11 17:45:01,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,612 [INFO] Final candidates: []
2025-04-11 17:45:01,612 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,613 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:01,696 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(2), np.int64(10)))
2025-04-11 17:45:01,702 [INFO] Final candidates: []
2025-04-11 17:45:01,702 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,709 [INFO] Final candidates: []
2025-04-11 17:45:01,709 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,710 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,794 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:01,795 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(12), np.int64(0)))
2025-04-11 17:45:01,802 [INFO] Final candidates: []
2025-04-11 17:45:01,802 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,809 [INFO] Final candidates: []
2025-04-11 17:45:01,809 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,810 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:01,933 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:01,933 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(0), np.int64(12)))
2025-04-11 17:45:01,940 [INFO] Final candidates: []
2025-04-11 17:45:01,940 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,947 [INFO] Final candidates: []
2025-04-11 17:45:01,947 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:01,948 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,023 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:02,023 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(2), np.int64(17)))
2025-04-11 17:45:02,030 [INFO] Final candidates: []
2025-04-11 17:45:02,030 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,037 [INFO] Final candidates: []
2025-04-11 17:45:02,037 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,038 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:02,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(4)), (np.int64(4), np.int64(8)))
2025-04-11 17:45:02,121 [INFO] Final candidates: []
2025-04-11 17:45:02,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,128 [INFO] Final candidates: []
2025-04-11 17:45:02,128 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,228 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:02,228 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(5)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:02,234 [INFO] Final candidates: []
2025-04-11 17:45:02,234 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,241 [INFO] Final candidates: []
2025-04-11 17:45:02,241 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,243 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,405 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:02,405 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(1), np.int64(5)))
2025-04-11 17:45:02,412 [INFO] Final candidates: []
2025-04-11 17:45:02,412 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,419 [INFO] Final candidates: []
2025-04-11 17:45:02,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,420 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,557 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:02,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(14), np.int64(3)))
2025-04-11 17:45:02,564 [INFO] Final candidates: []
2025-04-11 17:45:02,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,578 [INFO] Final candidates: []
2025-04-11 17:45:02,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,581 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,679 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:02,679 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(0), np.int64(18)))
2025-04-11 17:45:02,686 [INFO] Final candidates: []
2025-04-11 17:45:02,686 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,693 [INFO] Final candidates: []
2025-04-11 17:45:02,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,776 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:02,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(1), np.int64(11)))
2025-04-11 17:45:02,784 [INFO] Final candidates: []
2025-04-11 17:45:02,784 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,791 [INFO] Final candidates: []
2025-04-11 17:45:02,791 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,792 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,913 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:02,913 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(6), np.int64(0)))
2025-04-11 17:45:02,913 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:02,913 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:02,913 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:45:02,914 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:02,914 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:02,914 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:45:02,914 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:45:02,914 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:02,920 [INFO] Final candidates: [(0, 2), (0, 5), (0, 8)]
2025-04-11 17:45:02,920 [INFO] Phase win: Collected 3unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (0, 8)), ((0, 2), (0, 5))]
2025-04-11 17:45:02,920 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:02,927 [INFO] Final candidates: []
2025-04-11 17:45:02,927 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:02,928 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:02,995 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:02,995 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(10), np.int64(7)))
2025-04-11 17:45:03,002 [INFO] Final candidates: []
2025-04-11 17:45:03,002 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,009 [INFO] Final candidates: []
2025-04-11 17:45:03,009 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,010 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:03,229 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:03,229 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(0)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:03,236 [INFO] Final candidates: []
2025-04-11 17:45:03,236 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,243 [INFO] Final candidates: []
2025-04-11 17:45:03,243 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:03,467 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:03,467 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(16), np.int64(1)))
2025-04-11 17:45:03,474 [INFO] Final candidates: []
2025-04-11 17:45:03,474 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,484 [INFO] Final candidates: []
2025-04-11 17:45:03,484 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,486 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:03,569 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:03,569 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(1), np.int64(6)))
2025-04-11 17:45:03,576 [INFO] Final candidates: []
2025-04-11 17:45:03,576 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,583 [INFO] Final candidates: []
2025-04-11 17:45:03,583 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,584 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:03,864 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:03,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(5), np.int64(8)))
2025-04-11 17:45:03,871 [INFO] Final candidates: []
2025-04-11 17:45:03,871 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,878 [INFO] Final candidates: []
2025-04-11 17:45:03,878 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,879 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:03,957 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:03,957 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(6), np.int64(8)))
2025-04-11 17:45:03,964 [INFO] Final candidates: []
2025-04-11 17:45:03,964 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,971 [INFO] Final candidates: []
2025-04-11 17:45:03,971 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:03,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:04,056 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:04,057 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(12), np.int64(0)))
2025-04-11 17:45:04,063 [INFO] Final candidates: []
2025-04-11 17:45:04,063 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,070 [INFO] Final candidates: []
2025-04-11 17:45:04,070 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,072 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:04,156 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:04,157 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(11), np.int64(6)))
2025-04-11 17:45:04,164 [INFO] Final candidates: []
2025-04-11 17:45:04,164 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,170 [INFO] Final candidates: []
2025-04-11 17:45:04,170 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,172 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:04,313 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:04,314 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(2), np.int64(18)))
2025-04-11 17:45:04,321 [INFO] Final candidates: []
2025-04-11 17:45:04,321 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,328 [INFO] Final candidates: []
2025-04-11 17:45:04,328 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,329 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:04,489 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:04,489 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(5), np.int64(5)))
2025-04-11 17:45:04,496 [INFO] Final candidates: []
2025-04-11 17:45:04,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,503 [INFO] Final candidates: []
2025-04-11 17:45:04,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:04,626 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:04,627 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(7), np.int64(11)))
2025-04-11 17:45:04,637 [INFO] Final candidates: []
2025-04-11 17:45:04,637 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,644 [INFO] Final candidates: []
2025-04-11 17:45:04,644 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:04,735 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:04,735 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(11), np.int64(4)))
2025-04-11 17:45:04,742 [INFO] Final candidates: []
2025-04-11 17:45:04,742 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,749 [INFO] Final candidates: []
2025-04-11 17:45:04,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,750 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:04,826 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:04,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(18)), (np.int64(5), np.int64(8)))
2025-04-11 17:45:04,833 [INFO] Final candidates: []
2025-04-11 17:45:04,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,840 [INFO] Final candidates: []
2025-04-11 17:45:04,840 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:04,841 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:05,085 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:05,086 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(0), np.int64(6)))
2025-04-11 17:45:05,086 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:05,086 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:05,086 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:45:05,086 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:05,086 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:05,086 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:45:05,086 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:45:05,086 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:05,093 [INFO] Final candidates: [(0, 2), (0, 5), (0, 8)]
2025-04-11 17:45:05,093 [INFO] Phase win: Collected 3unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (0, 8)), ((0, 2), (0, 5))]
2025-04-11 17:45:05,093 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:05,100 [INFO] Final candidates: []
2025-04-11 17:45:05,100 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,101 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:05,187 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:05,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(9), np.int64(5)))
2025-04-11 17:45:05,200 [INFO] Final candidates: []
2025-04-11 17:45:05,200 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,207 [INFO] Final candidates: []
2025-04-11 17:45:05,207 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:05,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:05,314 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(2), np.int64(15)))
2025-04-11 17:45:05,321 [INFO] Final candidates: []
2025-04-11 17:45:05,321 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,328 [INFO] Final candidates: []
2025-04-11 17:45:05,328 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,329 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:05,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:05,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(5)), (np.int64(5), np.int64(15)))
2025-04-11 17:45:05,535 [INFO] Final candidates: []
2025-04-11 17:45:05,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,543 [INFO] Final candidates: []
2025-04-11 17:45:05,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,544 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:05,773 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:05,774 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 17:45:05,774 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:05,774 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:05,774 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:45:05,774 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:05,780 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:45:05,780 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:45:05,780 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:05,787 [INFO] Final candidates: []
2025-04-11 17:45:05,787 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,789 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:05,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:05,888 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(10), np.int64(7)))
2025-04-11 17:45:05,895 [INFO] Final candidates: []
2025-04-11 17:45:05,895 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,902 [INFO] Final candidates: []
2025-04-11 17:45:05,902 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:05,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:06,041 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:06,041 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(6)), (np.int64(15), np.int64(3)))
2025-04-11 17:45:06,048 [INFO] Final candidates: []
2025-04-11 17:45:06,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,055 [INFO] Final candidates: []
2025-04-11 17:45:06,055 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,056 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:06,229 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:06,230 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(3)), (np.int64(11), np.int64(4)))
2025-04-11 17:45:06,236 [INFO] Final candidates: []
2025-04-11 17:45:06,237 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,244 [INFO] Final candidates: []
2025-04-11 17:45:06,244 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,246 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:06,365 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:06,366 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(15), np.int64(2)))
2025-04-11 17:45:06,375 [INFO] Final candidates: []
2025-04-11 17:45:06,375 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,382 [INFO] Final candidates: []
2025-04-11 17:45:06,383 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,384 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:06,504 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:06,505 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(14), np.int64(3)))
2025-04-11 17:45:06,512 [INFO] Final candidates: []
2025-04-11 17:45:06,512 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,519 [INFO] Final candidates: []
2025-04-11 17:45:06,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,520 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:06,667 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:06,667 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(12), np.int64(0)))
2025-04-11 17:45:06,674 [INFO] Final candidates: []
2025-04-11 17:45:06,674 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,681 [INFO] Final candidates: []
2025-04-11 17:45:06,681 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,682 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:06,808 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:06,808 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:06,815 [INFO] Final candidates: []
2025-04-11 17:45:06,815 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,822 [INFO] Final candidates: []
2025-04-11 17:45:06,822 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:06,823 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:06,996 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:06,996 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(0), np.int64(8)))
2025-04-11 17:45:06,996 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:06,996 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:06,996 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:45:06,996 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:07,003 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:45:07,003 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:45:07,003 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:07,010 [INFO] Final candidates: []
2025-04-11 17:45:07,010 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,011 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:07,142 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:07,142 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(0), np.int64(9)))
2025-04-11 17:45:07,149 [INFO] Final candidates: []
2025-04-11 17:45:07,149 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,156 [INFO] Final candidates: []
2025-04-11 17:45:07,156 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:07,244 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:07,244 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:07,251 [INFO] Final candidates: []
2025-04-11 17:45:07,251 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,258 [INFO] Final candidates: []
2025-04-11 17:45:07,258 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,259 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:07,386 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:07,387 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(0), np.int64(6)))
2025-04-11 17:45:07,387 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:07,387 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:07,387 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:45:07,387 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:07,387 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:07,387 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:45:07,387 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:45:07,387 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:07,394 [INFO] Final candidates: [(0, 2), (0, 5), (0, 8)]
2025-04-11 17:45:07,394 [INFO] Phase win: Collected 3unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (0, 8)), ((0, 2), (0, 5))]
2025-04-11 17:45:07,394 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:07,404 [INFO] Final candidates: []
2025-04-11 17:45:07,404 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:07,524 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:07,525 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(5)), (np.int64(14), np.int64(2)))
2025-04-11 17:45:07,531 [INFO] Final candidates: []
2025-04-11 17:45:07,531 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,538 [INFO] Final candidates: []
2025-04-11 17:45:07,538 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,540 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:07,674 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:07,674 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(6), np.int64(8)))
2025-04-11 17:45:07,675 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9)]
2025-04-11 17:45:07,675 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:07,675 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (6, 9)]
2025-04-11 17:45:07,675 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9)] triggers candidate.
2025-04-11 17:45:07,682 [INFO] Final candidates: [(6, 7), (6, 9)]
2025-04-11 17:45:07,682 [INFO] Phase win: Collected 1unique candidate(s):[((6, 7), (6, 9))]
2025-04-11 17:45:07,682 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:07,689 [INFO] Final candidates: []
2025-04-11 17:45:07,689 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:07,742 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:07,742 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(12), np.int64(0)))
2025-04-11 17:45:07,749 [INFO] Final candidates: []
2025-04-11 17:45:07,749 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,755 [INFO] Final candidates: []
2025-04-11 17:45:07,755 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,757 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:45:07,757 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:07,861 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:07,861 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(15), np.int64(4)))
2025-04-11 17:45:07,870 [INFO] Final candidates: []
2025-04-11 17:45:07,870 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,879 [INFO] Final candidates: []
2025-04-11 17:45:07,879 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:07,880 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:08,096 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:08,096 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(1), np.int64(2)))
2025-04-11 17:45:08,103 [INFO] Final candidates: []
2025-04-11 17:45:08,103 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,110 [INFO] Final candidates: []
2025-04-11 17:45:08,110 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,111 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:08,271 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:08,271 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(9), np.int64(0)))
2025-04-11 17:45:08,278 [INFO] Final candidates: []
2025-04-11 17:45:08,278 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,284 [INFO] Final candidates: []
2025-04-11 17:45:08,284 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,286 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:08,392 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:08,392 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(6), np.int64(8)))
2025-04-11 17:45:08,399 [INFO] Final candidates: []
2025-04-11 17:45:08,399 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,406 [INFO] Final candidates: []
2025-04-11 17:45:08,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:08,439 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:08,439 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(9), np.int64(0)))
2025-04-11 17:45:08,441 [DEBUG] board coords: [(4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]
2025-04-11 17:45:08,441 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:08,441 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 0), (8, 0)]
2025-04-11 17:45:08,441 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)] triggers candidate.
2025-04-11 17:45:08,446 [INFO] Final candidates: [(8, 0), (6, 0)]
2025-04-11 17:45:08,446 [INFO] Phase win: Collected 1unique candidate(s):[((8, 0), (6, 0))]
2025-04-11 17:45:08,446 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:08,453 [INFO] Final candidates: []
2025-04-11 17:45:08,453 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,454 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:08,603 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:08,603 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(4), np.int64(16)))
2025-04-11 17:45:08,610 [INFO] Final candidates: []
2025-04-11 17:45:08,610 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,617 [INFO] Final candidates: []
2025-04-11 17:45:08,617 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,619 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:08,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:08,700 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:08,707 [INFO] Final candidates: []
2025-04-11 17:45:08,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,714 [INFO] Final candidates: []
2025-04-11 17:45:08,714 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,715 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:08,945 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:08,945 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(13), np.int64(4)))
2025-04-11 17:45:08,952 [INFO] Final candidates: []
2025-04-11 17:45:08,952 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,958 [INFO] Final candidates: []
2025-04-11 17:45:08,958 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:08,960 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:09,217 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:09,218 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(14), np.int64(3)))
2025-04-11 17:45:09,224 [INFO] Final candidates: []
2025-04-11 17:45:09,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,231 [INFO] Final candidates: []
2025-04-11 17:45:09,231 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,233 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:09,461 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:09,461 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(2)), (np.int64(1), np.int64(6)))
2025-04-11 17:45:09,478 [INFO] Final candidates: []
2025-04-11 17:45:09,478 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,501 [INFO] Final candidates: []
2025-04-11 17:45:09,501 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:09,723 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:09,723 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 17:45:09,730 [INFO] Final candidates: []
2025-04-11 17:45:09,730 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,737 [INFO] Final candidates: []
2025-04-11 17:45:09,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:09,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:09,960 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(3), np.int64(4)))
2025-04-11 17:45:09,969 [INFO] Final candidates: []
2025-04-11 17:45:09,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,976 [INFO] Final candidates: []
2025-04-11 17:45:09,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:09,977 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:10,167 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:10,167 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(16), np.int64(2)))
2025-04-11 17:45:10,174 [INFO] Final candidates: []
2025-04-11 17:45:10,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,181 [INFO] Final candidates: []
2025-04-11 17:45:10,181 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,182 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:10,282 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:10,282 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(13), np.int64(0)))
2025-04-11 17:45:10,289 [INFO] Final candidates: []
2025-04-11 17:45:10,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,296 [INFO] Final candidates: []
2025-04-11 17:45:10,296 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:10,419 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:10,419 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(3), np.int64(8)))
2025-04-11 17:45:10,426 [INFO] Final candidates: []
2025-04-11 17:45:10,426 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,433 [INFO] Final candidates: []
2025-04-11 17:45:10,433 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,434 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:10,628 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:10,628 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(13), np.int64(0)))
2025-04-11 17:45:10,635 [INFO] Final candidates: []
2025-04-11 17:45:10,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,641 [INFO] Final candidates: []
2025-04-11 17:45:10,641 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:10,798 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:10,799 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:10,805 [INFO] Final candidates: []
2025-04-11 17:45:10,805 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,812 [INFO] Final candidates: []
2025-04-11 17:45:10,812 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:10,814 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:11,002 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:11,002 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(5), np.int64(15)))
2025-04-11 17:45:11,009 [INFO] Final candidates: []
2025-04-11 17:45:11,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,016 [INFO] Final candidates: []
2025-04-11 17:45:11,016 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,017 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:11,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:11,124 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(6), np.int64(0)))
2025-04-11 17:45:11,131 [INFO] Final candidates: []
2025-04-11 17:45:11,131 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,141 [INFO] Final candidates: []
2025-04-11 17:45:11,141 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,142 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:11,313 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:11,313 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(16), np.int64(2)))
2025-04-11 17:45:11,320 [INFO] Final candidates: []
2025-04-11 17:45:11,320 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,327 [INFO] Final candidates: []
2025-04-11 17:45:11,327 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,329 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:11,382 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:11,382 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(11), np.int64(3)))
2025-04-11 17:45:11,390 [INFO] Final candidates: []
2025-04-11 17:45:11,390 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,396 [INFO] Final candidates: []
2025-04-11 17:45:11,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,398 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:11,459 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:11,460 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(0), np.int64(18)))
2025-04-11 17:45:11,466 [INFO] Final candidates: []
2025-04-11 17:45:11,466 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,473 [INFO] Final candidates: []
2025-04-11 17:45:11,473 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,475 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:11,604 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:11,604 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(4), np.int64(6)))
2025-04-11 17:45:11,611 [INFO] Final candidates: []
2025-04-11 17:45:11,611 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,618 [INFO] Final candidates: []
2025-04-11 17:45:11,618 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,619 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:11,874 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:11,874 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:11,881 [INFO] Final candidates: []
2025-04-11 17:45:11,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,890 [INFO] Final candidates: []
2025-04-11 17:45:11,890 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:11,891 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:12,062 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:12,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(17), np.int64(4)))
2025-04-11 17:45:12,070 [INFO] Final candidates: []
2025-04-11 17:45:12,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,077 [INFO] Final candidates: []
2025-04-11 17:45:12,077 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,078 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:12,173 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:12,173 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:12,180 [INFO] Final candidates: []
2025-04-11 17:45:12,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,187 [INFO] Final candidates: []
2025-04-11 17:45:12,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,188 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:12,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:12,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(0), np.int64(12)))
2025-04-11 17:45:12,392 [INFO] Final candidates: []
2025-04-11 17:45:12,392 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,399 [INFO] Final candidates: []
2025-04-11 17:45:12,399 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,400 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:12,584 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:12,584 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(16), np.int64(5)))
2025-04-11 17:45:12,592 [INFO] Final candidates: []
2025-04-11 17:45:12,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,599 [INFO] Final candidates: []
2025-04-11 17:45:12,599 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:12,798 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:12,798 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(6), np.int64(12)))
2025-04-11 17:45:12,805 [INFO] Final candidates: []
2025-04-11 17:45:12,805 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,812 [INFO] Final candidates: []
2025-04-11 17:45:12,812 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:12,947 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:12,947 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(2), np.int64(15)))
2025-04-11 17:45:12,954 [INFO] Final candidates: []
2025-04-11 17:45:12,954 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,961 [INFO] Final candidates: []
2025-04-11 17:45:12,961 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:12,963 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:13,167 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:13,167 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(17)), (np.int64(6), np.int64(12)))
2025-04-11 17:45:13,174 [INFO] Final candidates: []
2025-04-11 17:45:13,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,180 [INFO] Final candidates: []
2025-04-11 17:45:13,180 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,182 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:13,416 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:13,417 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(5)), (np.int64(10), np.int64(7)))
2025-04-11 17:45:13,423 [INFO] Final candidates: []
2025-04-11 17:45:13,423 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,430 [INFO] Final candidates: []
2025-04-11 17:45:13,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,432 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:13,643 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:13,643 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(0), np.int64(17)))
2025-04-11 17:45:13,650 [INFO] Final candidates: []
2025-04-11 17:45:13,650 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,657 [INFO] Final candidates: []
2025-04-11 17:45:13,657 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,658 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:13,695 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:13,696 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(14), np.int64(6)))
2025-04-11 17:45:13,703 [INFO] Final candidates: []
2025-04-11 17:45:13,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,710 [INFO] Final candidates: []
2025-04-11 17:45:13,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:13,711 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:14,021 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:14,022 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:45:14,028 [INFO] Final candidates: []
2025-04-11 17:45:14,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,035 [INFO] Final candidates: []
2025-04-11 17:45:14,035 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,037 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:14,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:14,248 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(3), np.int64(14)))
2025-04-11 17:45:14,255 [INFO] Final candidates: []
2025-04-11 17:45:14,255 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,262 [INFO] Final candidates: []
2025-04-11 17:45:14,262 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,263 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:14,493 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:14,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(7), np.int64(10)))
2025-04-11 17:45:14,494 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:14,494 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:14,494 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:45:14,494 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:14,494 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:14,494 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:14,494 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:14,494 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:14,509 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:45:14,509 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:45:14,509 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:14,519 [INFO] Final candidates: []
2025-04-11 17:45:14,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,521 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:14,613 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:14,614 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(1), np.int64(9)))
2025-04-11 17:45:14,620 [INFO] Final candidates: []
2025-04-11 17:45:14,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,627 [INFO] Final candidates: []
2025-04-11 17:45:14,627 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,629 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:14,741 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:14,741 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(3)), (np.int64(7), np.int64(7)))
2025-04-11 17:45:14,748 [INFO] Final candidates: []
2025-04-11 17:45:14,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,755 [INFO] Final candidates: []
2025-04-11 17:45:14,755 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,756 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:14,959 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:14,960 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(3)), (np.int64(2), np.int64(18)))
2025-04-11 17:45:14,967 [INFO] Final candidates: []
2025-04-11 17:45:14,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,974 [INFO] Final candidates: []
2025-04-11 17:45:14,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:14,975 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:15,097 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:15,097 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(6), np.int64(7)))
2025-04-11 17:45:15,104 [INFO] Final candidates: []
2025-04-11 17:45:15,104 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,111 [INFO] Final candidates: []
2025-04-11 17:45:15,111 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,112 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:15,226 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:15,226 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(12), np.int64(3)))
2025-04-11 17:45:15,233 [INFO] Final candidates: []
2025-04-11 17:45:15,233 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,240 [INFO] Final candidates: []
2025-04-11 17:45:15,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,241 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:15,407 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:15,407 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(12), np.int64(3)))
2025-04-11 17:45:15,414 [INFO] Final candidates: []
2025-04-11 17:45:15,414 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,422 [INFO] Final candidates: []
2025-04-11 17:45:15,422 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,423 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:15,486 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:15,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(12), np.int64(0)))
2025-04-11 17:45:15,496 [INFO] Final candidates: []
2025-04-11 17:45:15,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,513 [INFO] Final candidates: []
2025-04-11 17:45:15,513 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,517 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:15,650 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:15,651 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:15,657 [INFO] Final candidates: []
2025-04-11 17:45:15,657 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,667 [INFO] Final candidates: []
2025-04-11 17:45:15,667 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,668 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:15,800 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:15,801 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(15), np.int64(4)))
2025-04-11 17:45:15,807 [INFO] Final candidates: []
2025-04-11 17:45:15,807 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,814 [INFO] Final candidates: []
2025-04-11 17:45:15,814 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:15,815 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:16,013 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:16,013 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(18)), (np.int64(6), np.int64(0)))
2025-04-11 17:45:16,020 [INFO] Final candidates: []
2025-04-11 17:45:16,020 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,027 [INFO] Final candidates: []
2025-04-11 17:45:16,027 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,029 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:16,159 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:16,159 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(5), np.int64(8)))
2025-04-11 17:45:16,166 [INFO] Final candidates: []
2025-04-11 17:45:16,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,172 [INFO] Final candidates: []
2025-04-11 17:45:16,172 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,174 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:16,276 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:16,277 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:16,283 [INFO] Final candidates: []
2025-04-11 17:45:16,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,291 [INFO] Final candidates: []
2025-04-11 17:45:16,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:16,409 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:16,410 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:45:16,410 [INFO] MCTS selected move: K9,F3
2025-04-11 17:45:16,410 [INFO] ===============NEW MOVE================
2025-04-11 17:45:16,688 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:45:16,695 [INFO] Final candidates: []
2025-04-11 17:45:16,695 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,702 [INFO] Final candidates: []
2025-04-11 17:45:16,702 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,702 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:45:16,703 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:45:16,704 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(6)), (np.int64(2), np.int64(18)))
2025-04-11 17:45:16,709 [DEBUG] board coords: [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)]
2025-04-11 17:45:16,709 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:16,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:16,709 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:16,711 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:45:16,711 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:45:16,711 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:16,717 [INFO] Final candidates: []
2025-04-11 17:45:16,717 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,718 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:45:16,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:16,938 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:16,938 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:16,945 [INFO] Final candidates: []
2025-04-11 17:45:16,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,952 [INFO] Final candidates: []
2025-04-11 17:45:16,952 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:16,954 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:17,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:17,078 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(3), np.int64(4)))
2025-04-11 17:45:17,085 [INFO] Final candidates: []
2025-04-11 17:45:17,085 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,091 [INFO] Final candidates: []
2025-04-11 17:45:17,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,093 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:17,187 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:17,187 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(3), np.int64(4)))
2025-04-11 17:45:17,194 [INFO] Final candidates: []
2025-04-11 17:45:17,194 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,201 [INFO] Final candidates: []
2025-04-11 17:45:17,201 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:17,341 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:17,341 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(9), np.int64(0)))
2025-04-11 17:45:17,349 [INFO] Final candidates: []
2025-04-11 17:45:17,349 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,355 [INFO] Final candidates: []
2025-04-11 17:45:17,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,357 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:17,571 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:17,571 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 17:45:17,578 [INFO] Final candidates: []
2025-04-11 17:45:17,579 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,585 [INFO] Final candidates: []
2025-04-11 17:45:17,585 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,586 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:17,690 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:17,690 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(1), np.int64(5)))
2025-04-11 17:45:17,697 [INFO] Final candidates: []
2025-04-11 17:45:17,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,703 [INFO] Final candidates: []
2025-04-11 17:45:17,703 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,705 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:17,725 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:17,725 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(4), np.int64(11)))
2025-04-11 17:45:17,731 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:17,731 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:17,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:45:17,731 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:17,731 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:17,731 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:17,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:45:17,731 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:17,731 [DEBUG] board coords: [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)]
2025-04-11 17:45:17,731 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:17,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 9), (9, 6)]
2025-04-11 17:45:17,731 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:17,732 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:17,732 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:17,732 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:45:17,732 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 1 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:17,733 [INFO] Final candidates: [(3, 12), (9, 6), (6, 9)]
2025-04-11 17:45:17,733 [INFO] Phase win: Collected 3unique candidate(s):[((3, 12), (9, 6)), ((3, 12), (6, 9)), ((9, 6), (6, 9))]
2025-04-11 17:45:17,733 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:17,739 [INFO] Final candidates: []
2025-04-11 17:45:17,739 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,741 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:17,930 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:17,930 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(3), np.int64(12)))
2025-04-11 17:45:17,936 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:17,936 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:17,936 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:17,936 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:17,936 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:17,936 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:17,936 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:17,936 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:17,937 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:17,937 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:17,937 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:17,937 [DEBUG] check_window_intermediate_custom: For L=7, window [1 1 0 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:17,938 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:45:17,938 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:45:17,938 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:17,944 [INFO] Final candidates: []
2025-04-11 17:45:17,945 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:17,946 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:18,054 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:18,054 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(4), np.int64(10)))
2025-04-11 17:45:18,061 [INFO] Final candidates: []
2025-04-11 17:45:18,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,068 [INFO] Final candidates: []
2025-04-11 17:45:18,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,069 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:18,355 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:18,356 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:18,364 [INFO] Final candidates: []
2025-04-11 17:45:18,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,371 [INFO] Final candidates: []
2025-04-11 17:45:18,371 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,372 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:18,541 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:18,542 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(8), np.int64(10)))
2025-04-11 17:45:18,548 [INFO] Final candidates: []
2025-04-11 17:45:18,549 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,555 [INFO] Final candidates: []
2025-04-11 17:45:18,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:18,757 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:18,757 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:18,764 [INFO] Final candidates: []
2025-04-11 17:45:18,764 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,771 [INFO] Final candidates: []
2025-04-11 17:45:18,771 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,772 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:18,834 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:18,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(2), np.int64(17)))
2025-04-11 17:45:18,841 [INFO] Final candidates: []
2025-04-11 17:45:18,841 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,848 [INFO] Final candidates: []
2025-04-11 17:45:18,848 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:18,849 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:19,040 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:19,041 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(9), np.int64(10)))
2025-04-11 17:45:19,048 [INFO] Final candidates: []
2025-04-11 17:45:19,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,054 [INFO] Final candidates: []
2025-04-11 17:45:19,054 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:19,154 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:19,154 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(17)), (np.int64(2), np.int64(16)))
2025-04-11 17:45:19,161 [INFO] Final candidates: []
2025-04-11 17:45:19,161 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,168 [INFO] Final candidates: []
2025-04-11 17:45:19,168 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,170 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:19,263 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:19,263 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(10), np.int64(9)))
2025-04-11 17:45:19,273 [INFO] Final candidates: []
2025-04-11 17:45:19,273 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,280 [INFO] Final candidates: []
2025-04-11 17:45:19,280 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,282 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:19,491 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:19,491 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(2), np.int64(10)))
2025-04-11 17:45:19,498 [INFO] Final candidates: []
2025-04-11 17:45:19,498 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,506 [INFO] Final candidates: []
2025-04-11 17:45:19,506 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,507 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:19,643 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:19,643 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(10), np.int64(9)))
2025-04-11 17:45:19,652 [INFO] Final candidates: []
2025-04-11 17:45:19,652 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,658 [INFO] Final candidates: []
2025-04-11 17:45:19,658 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,659 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:19,916 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:19,916 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(11), np.int64(3)))
2025-04-11 17:45:19,918 [DEBUG] board coords: [(9, 3), (10, 3), (11, 3), (12, 3), (13, 3), (14, 3)]
2025-04-11 17:45:19,918 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:19,918 [DEBUG] check_window_intermediate_custom: empty_cells=[(13, 3), (14, 3)]
2025-04-11 17:45:19,918 [DEBUG] check_window_intermediate_custom (only one inserted(13, 3)): For L=6, window [1 1 1 1 0 0] with coords [(9, 3), (10, 3), (11, 3), (12, 3), (13, 3), (14, 3)] triggers candidate.
2025-04-11 17:45:19,923 [INFO] Final candidates: [(13, 3)]
2025-04-11 17:45:19,923 [INFO] Phase win: Found only one candidate: (13, 3)
2025-04-11 17:45:19,923 [INFO] Phase win: Collected 9unique candidate(s):[((13, 3), (np.int64(12), np.int64(4))), ((13, 3), (np.int64(14), np.int64(3))), ((13, 3), (np.int64(13), np.int64(1))), ((13, 3), (np.int64(14), np.int64(2))), ((13, 3), (np.int64(13), np.int64(5))), ((13, 3), (np.int64(13), np.int64(2))), ((13, 3), (np.int64(13), np.int64(4))), ((13, 3), (np.int64(15), np.int64(3))), ((13, 3), (np.int64(12), np.int64(2)))]
2025-04-11 17:45:19,923 [INFO] Phase 1 (immediate win): 9 candidate(s) found.
2025-04-11 17:45:19,930 [INFO] Final candidates: []
2025-04-11 17:45:19,930 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:19,931 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:20,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:20,074 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(0), np.int64(6)))
2025-04-11 17:45:20,081 [INFO] Final candidates: []
2025-04-11 17:45:20,081 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,087 [INFO] Final candidates: []
2025-04-11 17:45:20,087 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,088 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:20,161 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:20,162 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(6), np.int64(9)))
2025-04-11 17:45:20,167 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:20,167 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:20,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:20,167 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:20,167 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:20,167 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:20,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:20,167 [DEBUG] check_window_intermediate_custom (only one inserted(4, 11)): For L=6, window [0 0 1 1 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:20,167 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:20,167 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:45:20,168 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:20,168 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:20,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:20,168 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 0 1 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:20,169 [INFO] Final candidates: [(3, 12), (4, 11), (9, 6)]
2025-04-11 17:45:20,169 [INFO] Phase win: Collected 3unique candidate(s):[((4, 11), (9, 6)), ((3, 12), (4, 11)), ((3, 12), (9, 6))]
2025-04-11 17:45:20,169 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:20,176 [INFO] Final candidates: []
2025-04-11 17:45:20,176 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,178 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:20,367 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:20,367 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(6), np.int64(9)))
2025-04-11 17:45:20,373 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:20,373 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:20,373 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:20,373 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:20,373 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:20,373 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:20,373 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:20,373 [DEBUG] check_window_intermediate_custom (only one inserted(4, 11)): For L=6, window [0 0 1 1 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:20,373 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:20,373 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:45:20,374 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:20,374 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:20,374 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:20,374 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 0 1 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:20,375 [INFO] Final candidates: [(3, 12), (4, 11), (9, 6)]
2025-04-11 17:45:20,375 [INFO] Phase win: Collected 3unique candidate(s):[((4, 11), (9, 6)), ((3, 12), (4, 11)), ((3, 12), (9, 6))]
2025-04-11 17:45:20,375 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:20,382 [INFO] Final candidates: []
2025-04-11 17:45:20,382 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:20,414 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:20,415 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(1), np.int64(13)))
2025-04-11 17:45:20,419 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:45:20,419 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:20,419 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:45:20,419 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:45:20,422 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:45:20,422 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:45:20,422 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:45:20,422 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:45:20,429 [INFO] Final candidates: []
2025-04-11 17:45:20,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:20,580 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:20,581 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(16), np.int64(2)))
2025-04-11 17:45:20,588 [INFO] Final candidates: []
2025-04-11 17:45:20,588 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,594 [INFO] Final candidates: []
2025-04-11 17:45:20,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,596 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:20,722 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:20,723 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(12), np.int64(0)))
2025-04-11 17:45:20,730 [INFO] Final candidates: []
2025-04-11 17:45:20,730 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,737 [INFO] Final candidates: []
2025-04-11 17:45:20,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:20,954 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:20,955 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(4), np.int64(13)))
2025-04-11 17:45:20,962 [INFO] Final candidates: []
2025-04-11 17:45:20,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,968 [INFO] Final candidates: []
2025-04-11 17:45:20,968 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:20,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:21,204 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:21,205 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(0), np.int64(15)))
2025-04-11 17:45:21,212 [INFO] Final candidates: []
2025-04-11 17:45:21,212 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,218 [INFO] Final candidates: []
2025-04-11 17:45:21,218 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:21,352 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:21,353 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(0), np.int64(18)))
2025-04-11 17:45:21,359 [INFO] Final candidates: []
2025-04-11 17:45:21,359 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,366 [INFO] Final candidates: []
2025-04-11 17:45:21,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,368 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:21,593 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:21,593 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(5), np.int64(8)))
2025-04-11 17:45:21,600 [INFO] Final candidates: []
2025-04-11 17:45:21,600 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,607 [INFO] Final candidates: []
2025-04-11 17:45:21,607 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,608 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:21,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:21,700 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(6), np.int64(9)))
2025-04-11 17:45:21,705 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:21,705 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:21,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:21,705 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:21,705 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:21,705 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:21,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:21,705 [DEBUG] check_window_intermediate_custom (only one inserted(4, 11)): For L=6, window [0 0 1 1 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:21,705 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:21,705 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:45:21,706 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:21,706 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:21,706 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (4, 11)]
2025-04-11 17:45:21,706 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 0 1 1 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:21,707 [INFO] Final candidates: [(3, 12), (4, 11), (9, 6)]
2025-04-11 17:45:21,707 [INFO] Phase win: Collected 3unique candidate(s):[((4, 11), (9, 6)), ((3, 12), (4, 11)), ((3, 12), (9, 6))]
2025-04-11 17:45:21,707 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:21,714 [INFO] Final candidates: []
2025-04-11 17:45:21,714 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,715 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:21,789 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:21,790 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(1)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:21,797 [INFO] Final candidates: []
2025-04-11 17:45:21,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,803 [INFO] Final candidates: []
2025-04-11 17:45:21,803 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,805 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:21,850 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:21,851 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:21,858 [INFO] Final candidates: []
2025-04-11 17:45:21,858 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,864 [INFO] Final candidates: []
2025-04-11 17:45:21,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:21,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:22,031 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:22,031 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(0), np.int64(6)))
2025-04-11 17:45:22,038 [INFO] Final candidates: []
2025-04-11 17:45:22,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,044 [INFO] Final candidates: []
2025-04-11 17:45:22,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,050 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:22,264 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:22,265 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(15), np.int64(3)))
2025-04-11 17:45:22,279 [INFO] Final candidates: []
2025-04-11 17:45:22,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,291 [INFO] Final candidates: []
2025-04-11 17:45:22,292 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,294 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:22,425 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:22,425 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(4), np.int64(6)))
2025-04-11 17:45:22,432 [INFO] Final candidates: []
2025-04-11 17:45:22,432 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,438 [INFO] Final candidates: []
2025-04-11 17:45:22,439 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,440 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:22,644 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:22,645 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(2), np.int64(10)))
2025-04-11 17:45:22,654 [INFO] Final candidates: []
2025-04-11 17:45:22,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,661 [INFO] Final candidates: []
2025-04-11 17:45:22,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:22,816 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:22,816 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(3), np.int64(11)))
2025-04-11 17:45:22,823 [INFO] Final candidates: []
2025-04-11 17:45:22,823 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,829 [INFO] Final candidates: []
2025-04-11 17:45:22,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:22,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:23,029 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:23,029 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:23,037 [INFO] Final candidates: []
2025-04-11 17:45:23,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,044 [INFO] Final candidates: []
2025-04-11 17:45:23,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:23,324 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:23,324 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(17)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:23,331 [INFO] Final candidates: []
2025-04-11 17:45:23,331 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,338 [INFO] Final candidates: []
2025-04-11 17:45:23,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:23,446 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:23,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(6)), (np.int64(9), np.int64(6)))
2025-04-11 17:45:23,454 [DEBUG] board coords: [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)]
2025-04-11 17:45:23,454 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:23,454 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:23,454 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:23,456 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:45:23,456 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:45:23,456 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:23,462 [INFO] Final candidates: []
2025-04-11 17:45:23,462 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,464 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:23,693 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:23,693 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(7), np.int64(0)))
2025-04-11 17:45:23,700 [INFO] Final candidates: []
2025-04-11 17:45:23,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,707 [INFO] Final candidates: []
2025-04-11 17:45:23,707 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,708 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:23,864 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:23,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:23,873 [INFO] Final candidates: []
2025-04-11 17:45:23,873 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,879 [INFO] Final candidates: []
2025-04-11 17:45:23,879 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:23,881 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:24,014 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:24,014 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(1), np.int64(9)))
2025-04-11 17:45:24,021 [INFO] Final candidates: []
2025-04-11 17:45:24,021 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,028 [INFO] Final candidates: []
2025-04-11 17:45:24,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,029 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:24,192 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:24,192 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(4), np.int64(8)))
2025-04-11 17:45:24,199 [INFO] Final candidates: []
2025-04-11 17:45:24,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,206 [INFO] Final candidates: []
2025-04-11 17:45:24,206 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:24,355 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:24,356 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(4), np.int64(6)))
2025-04-11 17:45:24,363 [INFO] Final candidates: []
2025-04-11 17:45:24,363 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,369 [INFO] Final candidates: []
2025-04-11 17:45:24,369 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,371 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:24,599 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:24,600 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(15), np.int64(3)))
2025-04-11 17:45:24,607 [INFO] Final candidates: []
2025-04-11 17:45:24,607 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,613 [INFO] Final candidates: []
2025-04-11 17:45:24,613 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,615 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:24,749 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:24,749 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:24,756 [INFO] Final candidates: []
2025-04-11 17:45:24,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,766 [INFO] Final candidates: []
2025-04-11 17:45:24,766 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:24,871 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:24,871 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(0), np.int64(15)))
2025-04-11 17:45:24,880 [INFO] Final candidates: []
2025-04-11 17:45:24,880 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,886 [INFO] Final candidates: []
2025-04-11 17:45:24,886 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,887 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:24,953 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:24,954 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(13)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:24,961 [INFO] Final candidates: []
2025-04-11 17:45:24,961 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,976 [INFO] Final candidates: []
2025-04-11 17:45:24,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:24,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:25,116 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:25,117 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:25,132 [INFO] Final candidates: []
2025-04-11 17:45:25,132 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,141 [INFO] Final candidates: []
2025-04-11 17:45:25,141 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,143 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:45:25,143 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:25,254 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:25,255 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(4), np.int64(10)))
2025-04-11 17:45:25,262 [INFO] Final candidates: []
2025-04-11 17:45:25,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,268 [INFO] Final candidates: []
2025-04-11 17:45:25,268 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,270 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:25,377 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:25,377 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(17)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:25,384 [INFO] Final candidates: []
2025-04-11 17:45:25,384 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,391 [INFO] Final candidates: []
2025-04-11 17:45:25,391 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:25,681 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:25,682 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(4)), (np.int64(0), np.int64(17)))
2025-04-11 17:45:25,689 [INFO] Final candidates: []
2025-04-11 17:45:25,689 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,695 [INFO] Final candidates: []
2025-04-11 17:45:25,695 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,702 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:25,920 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:25,921 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(4), np.int64(11)))
2025-04-11 17:45:25,926 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:25,926 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:25,926 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:45:25,926 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:25,926 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:25,926 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:25,926 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:45:25,926 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:25,927 [DEBUG] board coords: [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)]
2025-04-11 17:45:25,927 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:25,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 9), (9, 6)]
2025-04-11 17:45:25,927 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:25,927 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:25,927 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:25,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 9)]
2025-04-11 17:45:25,927 [DEBUG] check_window_intermediate_custom: For L=7, window [1 0 1 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:25,928 [INFO] Final candidates: [(3, 12), (9, 6), (6, 9)]
2025-04-11 17:45:25,928 [INFO] Phase win: Collected 3unique candidate(s):[((3, 12), (9, 6)), ((3, 12), (6, 9)), ((9, 6), (6, 9))]
2025-04-11 17:45:25,928 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:25,935 [INFO] Final candidates: []
2025-04-11 17:45:25,935 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:25,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:26,232 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:26,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:26,239 [INFO] Final candidates: []
2025-04-11 17:45:26,239 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,246 [INFO] Final candidates: []
2025-04-11 17:45:26,246 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,247 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:26,499 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:26,500 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(3), np.int64(6)))
2025-04-11 17:45:26,517 [INFO] Final candidates: []
2025-04-11 17:45:26,517 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,529 [INFO] Final candidates: []
2025-04-11 17:45:26,529 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,531 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:26,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:26,699 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(1)), (np.int64(8), np.int64(10)))
2025-04-11 17:45:26,706 [INFO] Final candidates: []
2025-04-11 17:45:26,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,715 [INFO] Final candidates: []
2025-04-11 17:45:26,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,716 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:26,911 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:26,911 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(2)), (np.int64(17), np.int64(4)))
2025-04-11 17:45:26,925 [INFO] Final candidates: []
2025-04-11 17:45:26,925 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,938 [INFO] Final candidates: []
2025-04-11 17:45:26,938 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:26,940 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:27,093 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:27,094 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(2), np.int64(15)))
2025-04-11 17:45:27,101 [INFO] Final candidates: []
2025-04-11 17:45:27,101 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,107 [INFO] Final candidates: []
2025-04-11 17:45:27,107 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:27,213 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:27,214 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(10), np.int64(9)))
2025-04-11 17:45:27,226 [INFO] Final candidates: []
2025-04-11 17:45:27,226 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,233 [INFO] Final candidates: []
2025-04-11 17:45:27,233 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,234 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:27,280 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:27,280 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(15), np.int64(3)))
2025-04-11 17:45:27,287 [INFO] Final candidates: []
2025-04-11 17:45:27,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,293 [INFO] Final candidates: []
2025-04-11 17:45:27,293 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:27,486 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:27,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(5), np.int64(15)))
2025-04-11 17:45:27,493 [INFO] Final candidates: []
2025-04-11 17:45:27,493 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,501 [INFO] Final candidates: []
2025-04-11 17:45:27,501 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,503 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:27,587 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:27,587 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(14), np.int64(6)))
2025-04-11 17:45:27,594 [INFO] Final candidates: []
2025-04-11 17:45:27,594 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,601 [INFO] Final candidates: []
2025-04-11 17:45:27,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,608 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:27,857 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:27,858 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(0), np.int64(8)))
2025-04-11 17:45:27,865 [INFO] Final candidates: []
2025-04-11 17:45:27,865 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,871 [INFO] Final candidates: []
2025-04-11 17:45:27,871 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:27,873 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:28,056 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:28,057 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(5)), (np.int64(13), np.int64(0)))
2025-04-11 17:45:28,063 [INFO] Final candidates: []
2025-04-11 17:45:28,064 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,070 [INFO] Final candidates: []
2025-04-11 17:45:28,070 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,071 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:28,174 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:28,174 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(10), np.int64(9)))
2025-04-11 17:45:28,181 [INFO] Final candidates: []
2025-04-11 17:45:28,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,188 [INFO] Final candidates: []
2025-04-11 17:45:28,188 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,189 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:28,386 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:28,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(3), np.int64(11)))
2025-04-11 17:45:28,393 [INFO] Final candidates: []
2025-04-11 17:45:28,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,402 [INFO] Final candidates: []
2025-04-11 17:45:28,402 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:28,486 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:28,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(3), np.int64(12)))
2025-04-11 17:45:28,491 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:28,491 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:28,491 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:28,491 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:28,491 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:28,492 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:28,492 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:28,492 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:28,492 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:28,492 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:28,492 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:28,493 [DEBUG] check_window_intermediate_custom: For L=7, window [1 1 0 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:28,493 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:45:28,493 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:45:28,493 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:28,503 [INFO] Final candidates: []
2025-04-11 17:45:28,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:28,594 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:28,594 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(2), np.int64(8)))
2025-04-11 17:45:28,605 [INFO] Final candidates: []
2025-04-11 17:45:28,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,612 [INFO] Final candidates: []
2025-04-11 17:45:28,612 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,614 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:28,868 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:28,868 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(5), np.int64(13)))
2025-04-11 17:45:28,875 [INFO] Final candidates: []
2025-04-11 17:45:28,875 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,882 [INFO] Final candidates: []
2025-04-11 17:45:28,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:28,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:29,075 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:29,076 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(16), np.int64(1)))
2025-04-11 17:45:29,086 [INFO] Final candidates: []
2025-04-11 17:45:29,086 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,093 [INFO] Final candidates: []
2025-04-11 17:45:29,093 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,095 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:29,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:29,249 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(6), np.int64(10)))
2025-04-11 17:45:29,256 [INFO] Final candidates: []
2025-04-11 17:45:29,256 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,262 [INFO] Final candidates: []
2025-04-11 17:45:29,262 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,264 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:29,342 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:29,343 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(13), np.int64(0)))
2025-04-11 17:45:29,350 [INFO] Final candidates: []
2025-04-11 17:45:29,350 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,357 [INFO] Final candidates: []
2025-04-11 17:45:29,357 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,358 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:29,564 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:29,564 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(5), np.int64(8)))
2025-04-11 17:45:29,571 [INFO] Final candidates: []
2025-04-11 17:45:29,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,577 [INFO] Final candidates: []
2025-04-11 17:45:29,577 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,579 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:29,745 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:29,745 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(7), np.int64(11)))
2025-04-11 17:45:29,751 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)]
2025-04-11 17:45:29,751 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:29,751 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:29,751 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 0 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8)] triggers candidate.
2025-04-11 17:45:29,751 [DEBUG] board coords: [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:29,751 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:29,751 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:29,751 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:29,752 [DEBUG] board coords: [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)]
2025-04-11 17:45:29,752 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:29,752 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:29,752 [DEBUG] check_window_intermediate_custom: For L=7, window [1 1 0 1 0 1 1] with coords [(2, 13), (3, 12), (4, 11), (5, 10), (6, 9), (7, 8), (8, 7)] triggers candidate.
2025-04-11 17:45:29,753 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:45:29,753 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:45:29,753 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:29,759 [INFO] Final candidates: []
2025-04-11 17:45:29,759 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:29,860 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:29,860 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(9), np.int64(6)))
2025-04-11 17:45:29,866 [DEBUG] board coords: [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)]
2025-04-11 17:45:29,866 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:29,866 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 11), (6, 9)]
2025-04-11 17:45:29,866 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(4, 11), (5, 10), (6, 9), (7, 8), (8, 7), (9, 6)] triggers candidate.
2025-04-11 17:45:29,867 [INFO] Final candidates: [(4, 11), (6, 9)]
2025-04-11 17:45:29,867 [INFO] Phase win: Collected 1unique candidate(s):[((4, 11), (6, 9))]
2025-04-11 17:45:29,867 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:29,874 [INFO] Final candidates: []
2025-04-11 17:45:29,874 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:29,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,188 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:30,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(4)), (np.int64(1), np.int64(4)))
2025-04-11 17:45:30,195 [INFO] Final candidates: []
2025-04-11 17:45:30,195 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,202 [INFO] Final candidates: []
2025-04-11 17:45:30,202 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,203 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,261 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:30,261 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(3), np.int64(8)))
2025-04-11 17:45:30,268 [INFO] Final candidates: []
2025-04-11 17:45:30,268 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,275 [INFO] Final candidates: []
2025-04-11 17:45:30,275 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,277 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,372 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:30,372 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:30,376 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:45:30,376 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:30,376 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:45:30,376 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:45:30,379 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:45:30,379 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:45:30,379 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:45:30,379 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:45:30,386 [INFO] Final candidates: []
2025-04-11 17:45:30,386 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,387 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,426 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:30,426 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(11), np.int64(3)))
2025-04-11 17:45:30,433 [INFO] Final candidates: []
2025-04-11 17:45:30,433 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,440 [INFO] Final candidates: []
2025-04-11 17:45:30,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,500 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:30,500 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(9), np.int64(9)))
2025-04-11 17:45:30,508 [INFO] Final candidates: []
2025-04-11 17:45:30,508 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,518 [INFO] Final candidates: []
2025-04-11 17:45:30,518 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,618 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:30,618 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(1), np.int64(13)))
2025-04-11 17:45:30,618 [DEBUG] board coords: [(1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17)]
2025-04-11 17:45:30,618 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:30,618 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 12), (1, 16)]
2025-04-11 17:45:30,618 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 1 1 0 1] with coords [(1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17)] triggers candidate.
2025-04-11 17:45:30,618 [DEBUG] board coords: [(1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18)]
2025-04-11 17:45:30,618 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:45:30,618 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 16), (1, 18)]
2025-04-11 17:45:30,618 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18)] triggers candidate.
2025-04-11 17:45:30,625 [INFO] Final candidates: [(1, 12), (1, 18), (1, 16)]
2025-04-11 17:45:30,625 [INFO] Phase win: Collected 3unique candidate(s):[((1, 12), (1, 16)), ((1, 12), (1, 18)), ((1, 18), (1, 16))]
2025-04-11 17:45:30,625 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:30,632 [INFO] Final candidates: []
2025-04-11 17:45:30,632 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,633 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,824 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:30,824 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(11), np.int64(6)))
2025-04-11 17:45:30,831 [INFO] Final candidates: []
2025-04-11 17:45:30,831 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,837 [INFO] Final candidates: []
2025-04-11 17:45:30,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,839 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:30,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:30,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(6), np.int64(10)))
2025-04-11 17:45:30,965 [INFO] Final candidates: []
2025-04-11 17:45:30,965 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,971 [INFO] Final candidates: []
2025-04-11 17:45:30,971 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:30,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:31,099 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:31,099 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(12), np.int64(3)))
2025-04-11 17:45:31,107 [INFO] Final candidates: []
2025-04-11 17:45:31,107 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,116 [INFO] Final candidates: []
2025-04-11 17:45:31,116 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:31,144 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:31,144 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(3)), (np.int64(9), np.int64(1)))
2025-04-11 17:45:31,153 [INFO] Final candidates: []
2025-04-11 17:45:31,153 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,160 [INFO] Final candidates: []
2025-04-11 17:45:31,160 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:31,226 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:31,227 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(16), np.int64(5)))
2025-04-11 17:45:31,234 [INFO] Final candidates: []
2025-04-11 17:45:31,234 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,240 [INFO] Final candidates: []
2025-04-11 17:45:31,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:31,414 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:31,415 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(0), np.int64(12)))
2025-04-11 17:45:31,421 [INFO] Final candidates: []
2025-04-11 17:45:31,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,428 [INFO] Final candidates: []
2025-04-11 17:45:31,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:31,566 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:31,566 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(17), np.int64(2)))
2025-04-11 17:45:31,573 [INFO] Final candidates: []
2025-04-11 17:45:31,573 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,579 [INFO] Final candidates: []
2025-04-11 17:45:31,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,581 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:31,646 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:31,646 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:31,653 [INFO] Final candidates: []
2025-04-11 17:45:31,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,661 [INFO] Final candidates: []
2025-04-11 17:45:31,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,663 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:31,866 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:31,867 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(10), np.int64(7)))
2025-04-11 17:45:31,874 [INFO] Final candidates: []
2025-04-11 17:45:31,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,880 [INFO] Final candidates: []
2025-04-11 17:45:31,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:31,882 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:32,070 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:32,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:32,077 [INFO] Final candidates: []
2025-04-11 17:45:32,077 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,084 [INFO] Final candidates: []
2025-04-11 17:45:32,084 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,085 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:32,195 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:32,195 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(7), np.int64(10)))
2025-04-11 17:45:32,200 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:45:32,200 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:32,200 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:45:32,200 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:45:32,202 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:45:32,202 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:45:32,203 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:45:32,203 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:45:32,209 [INFO] Final candidates: []
2025-04-11 17:45:32,209 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,210 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:32,265 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:32,265 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(5)), (np.int64(13), np.int64(4)))
2025-04-11 17:45:32,272 [INFO] Final candidates: []
2025-04-11 17:45:32,272 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,278 [INFO] Final candidates: []
2025-04-11 17:45:32,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:32,510 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:32,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(0), np.int64(17)))
2025-04-11 17:45:32,517 [INFO] Final candidates: []
2025-04-11 17:45:32,517 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,524 [INFO] Final candidates: []
2025-04-11 17:45:32,524 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,525 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:32,650 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:32,650 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:32,657 [INFO] Final candidates: []
2025-04-11 17:45:32,657 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,663 [INFO] Final candidates: []
2025-04-11 17:45:32,663 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:32,733 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:32,733 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(4)), (np.int64(13), np.int64(4)))
2025-04-11 17:45:32,740 [INFO] Final candidates: []
2025-04-11 17:45:32,740 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,746 [INFO] Final candidates: []
2025-04-11 17:45:32,746 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,748 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:32,984 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:32,985 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(14), np.int64(1)))
2025-04-11 17:45:32,992 [INFO] Final candidates: []
2025-04-11 17:45:32,992 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,998 [INFO] Final candidates: []
2025-04-11 17:45:32,998 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:32,999 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:33,088 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:33,089 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(9), np.int64(5)))
2025-04-11 17:45:33,096 [INFO] Final candidates: []
2025-04-11 17:45:33,096 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,102 [INFO] Final candidates: []
2025-04-11 17:45:33,102 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,104 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:33,191 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:33,191 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:45:33,191 [INFO] MCTS selected move: G10,T3
2025-04-11 17:45:33,191 [INFO] ===============NEW MOVE================
2025-04-11 17:45:33,489 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:45:33,496 [INFO] Final candidates: []
2025-04-11 17:45:33,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,496 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9)]
2025-04-11 17:45:33,496 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:33,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 6), (6, 8)]
2025-04-11 17:45:33,496 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9)] triggers candidate.
2025-04-11 17:45:33,501 [DEBUG] board coords: [(3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:33,501 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,501 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 10), (4, 9)]
2025-04-11 17:45:33,501 [DEBUG] check_window_intermediate_custom (only one inserted(4, 9)): For L=6, window [0 0 2 2 2 2] with coords [(3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:33,502 [INFO] Final candidates: [(6, 6), (4, 9), (6, 8)]
2025-04-11 17:45:33,502 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 6), (4, 9)), ((4, 9), (6, 8)), ((6, 6), (6, 8))]
2025-04-11 17:45:33,502 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:33,502 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:45:33,503 [DEBUG] Tree_policy iteration 1: Expanding move ((6, 6), (4, 9))
2025-04-11 17:45:33,503 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,503 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,503 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,503 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,504 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,504 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,504 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,504 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,508 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:33,508 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,508 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,508 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:33,509 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:33,509 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,509 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,509 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:33,510 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:33,510 [INFO] Phase win: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:33,510 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:33,516 [INFO] Final candidates: []
2025-04-11 17:45:33,516 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,518 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:45:33,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:33,574 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:33,575 [DEBUG] Tree_policy iteration 1: Expanding move ((4, 9), (6, 8))
2025-04-11 17:45:33,575 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,575 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,575 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 6), (6, 10)]
2025-04-11 17:45:33,575 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,576 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,576 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,576 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 6), (6, 10)]
2025-04-11 17:45:33,576 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,580 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:33,580 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,580 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,580 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:33,581 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:33,581 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,581 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,581 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:33,582 [INFO] Final candidates: [(6, 6), (6, 10), (3, 10)]
2025-04-11 17:45:33,582 [INFO] Phase win: Collected 3unique candidate(s):[((6, 6), (6, 10)), ((6, 6), (3, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:33,582 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:33,588 [INFO] Final candidates: []
2025-04-11 17:45:33,588 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,590 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:33,757 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:33,758 [DEBUG] Tree_policy iteration 1: Expanding move ((6, 6), (6, 8))
2025-04-11 17:45:33,758 [DEBUG] board coords: [(6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11)]
2025-04-11 17:45:33,758 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:45:33,758 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 10), (6, 11)]
2025-04-11 17:45:33,758 [DEBUG] check_window_intermediate_custom (only one inserted(6, 10)): For L=6, window [2 2 2 2 0 0] with coords [(6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:33,759 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11)]
2025-04-11 17:45:33,759 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:45:33,759 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 10), (6, 11)]
2025-04-11 17:45:33,759 [DEBUG] check_window_intermediate_custom (only one inserted(6, 10)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:33,763 [DEBUG] board coords: [(3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:33,763 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 10), (4, 9)]
2025-04-11 17:45:33,763 [DEBUG] check_window_intermediate_custom (only one inserted(4, 9)): For L=6, window [0 0 2 2 2 2] with coords [(3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:33,765 [INFO] Final candidates: [(4, 9), (6, 10)]
2025-04-11 17:45:33,765 [INFO] Phase win: Collected 1unique candidate(s):[((4, 9), (6, 10))]
2025-04-11 17:45:33,765 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:33,771 [INFO] Final candidates: []
2025-04-11 17:45:33,771 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,773 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:33,773 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:33,773 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:33,773 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(6)), (np.int64(4), np.int64(16)))
2025-04-11 17:45:33,780 [INFO] Final candidates: []
2025-04-11 17:45:33,780 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,780 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,780 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,780 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,780 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,781 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,781 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,781 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,781 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,785 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:33,785 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,785 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,785 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:33,786 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:33,786 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,786 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:33,787 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:33,787 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:33,787 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:33,787 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:33,916 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:33,916 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:33,917 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(14), np.int64(3)))
2025-04-11 17:45:33,926 [INFO] Final candidates: []
2025-04-11 17:45:33,926 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,927 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,927 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,927 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,929 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,929 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,929 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,929 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,939 [INFO] Final candidates: [(6, 8), (6, 10)]
2025-04-11 17:45:33,939 [INFO] Phase defense: Collected 1unique candidate(s):[((6, 8), (6, 10))]
2025-04-11 17:45:33,939 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:33,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:33,979 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:33,979 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:33,979 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(3), np.int64(6)))
2025-04-11 17:45:33,986 [INFO] Final candidates: []
2025-04-11 17:45:33,986 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:33,986 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,986 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,986 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,986 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,987 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:33,987 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:33,987 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:33,987 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:33,991 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:33,991 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,991 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,991 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:33,992 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:33,992 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:33,992 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:33,992 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:33,993 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:33,993 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:33,993 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:33,993 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,008 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,008 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,008 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 17:45:34,015 [INFO] Final candidates: []
2025-04-11 17:45:34,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,015 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,015 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,015 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,015 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,016 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,016 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,016 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,016 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,020 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,020 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,020 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,020 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,021 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,021 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,021 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,021 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,022 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,022 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,022 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,022 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,024 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,024 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,024 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(14), np.int64(2)))
2025-04-11 17:45:34,031 [INFO] Final candidates: []
2025-04-11 17:45:34,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,031 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,031 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,031 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,031 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,032 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,032 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,032 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,032 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,036 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,036 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,036 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,036 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,037 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,037 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,037 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,037 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,038 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,038 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,038 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,038 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,046 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,046 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,046 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(14), np.int64(1)))
2025-04-11 17:45:34,050 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:45:34,050 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:34,050 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:45:34,050 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:45:34,053 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:45:34,053 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:45:34,053 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:45:34,053 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:45:34,053 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,054 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,054 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,054 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,054 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,055 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,055 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,055 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,058 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,058 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,058 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,059 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,059 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,059 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,059 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,060 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,060 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,060 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,060 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,067 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,068 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,068 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(4)), (np.int64(2), np.int64(8)))
2025-04-11 17:45:34,074 [INFO] Final candidates: []
2025-04-11 17:45:34,074 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,075 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,075 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,075 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,075 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,076 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,076 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,076 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,076 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,080 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,080 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,080 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,080 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,080 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,081 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,081 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,081 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,081 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,081 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,081 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,081 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,215 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:34,216 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,216 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(6)), (np.int64(14), np.int64(1)))
2025-04-11 17:45:34,223 [INFO] Final candidates: []
2025-04-11 17:45:34,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,223 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,223 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,223 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,223 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,224 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,224 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,224 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,224 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,228 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,228 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,228 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,228 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,229 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,229 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,229 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,229 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,229 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,229 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,230 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,230 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,287 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,288 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,288 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(5), np.int64(15)))
2025-04-11 17:45:34,294 [INFO] Final candidates: []
2025-04-11 17:45:34,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,295 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,295 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,295 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,295 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,296 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,296 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,296 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,296 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,300 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,300 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,300 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,300 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,301 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,301 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,301 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,301 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,301 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,301 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,301 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,301 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,407 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:34,407 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,407 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(9), np.int64(10)))
2025-04-11 17:45:34,414 [INFO] Final candidates: []
2025-04-11 17:45:34,414 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,414 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,414 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,414 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,414 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,415 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,415 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,415 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,415 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,419 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,419 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,419 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,419 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,420 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,420 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,420 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,420 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,421 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,421 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,421 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,421 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,422 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,423 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,423 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(8), np.int64(1)))
2025-04-11 17:45:34,429 [INFO] Final candidates: []
2025-04-11 17:45:34,430 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,430 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,430 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,430 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,430 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,431 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,431 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,431 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,431 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,435 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,435 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,435 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,435 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,436 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,436 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,436 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,436 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,436 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,436 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,436 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,488 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,488 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,488 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(0)), (np.int64(11), np.int64(6)))
2025-04-11 17:45:34,495 [INFO] Final candidates: []
2025-04-11 17:45:34,495 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,495 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,495 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,495 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,495 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,496 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,496 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,496 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,496 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,500 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,500 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,500 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,500 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,501 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,501 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,501 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,501 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,502 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,502 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,502 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,517 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,517 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,517 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(1)), (np.int64(11), np.int64(4)))
2025-04-11 17:45:34,524 [INFO] Final candidates: []
2025-04-11 17:45:34,524 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,524 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,524 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,524 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,524 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,525 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,525 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,525 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,525 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,529 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,529 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,529 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,529 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,530 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,530 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,530 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,530 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,530 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,531 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,531 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,531 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,631 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:34,631 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,631 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(17)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:34,638 [INFO] Final candidates: []
2025-04-11 17:45:34,638 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,638 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,638 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,638 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,638 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,639 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,639 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,639 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,639 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,643 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,643 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,643 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,643 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,645 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,645 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,645 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,645 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,646 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,646 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,646 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,646 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,698 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(5)), (np.int64(3), np.int64(12)))
2025-04-11 17:45:34,705 [INFO] Final candidates: []
2025-04-11 17:45:34,705 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,705 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,705 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,705 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,706 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,706 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,706 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,706 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,710 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,710 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,710 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,710 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,711 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,711 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,711 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,711 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,711 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,712 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,712 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,873 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,873 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,873 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(2)), (np.int64(1), np.int64(2)))
2025-04-11 17:45:34,880 [INFO] Final candidates: []
2025-04-11 17:45:34,880 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,880 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,880 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,880 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,880 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,881 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,881 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,881 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,881 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,885 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,885 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,885 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,885 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,886 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,886 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,886 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,887 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,887 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,887 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,887 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,889 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,889 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(8)), (np.int64(1), np.int64(14)))
2025-04-11 17:45:34,895 [INFO] Final candidates: []
2025-04-11 17:45:34,895 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,896 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,896 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,896 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,896 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,897 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,897 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,897 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,897 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,900 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,900 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,900 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,901 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,901 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,901 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,901 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,901 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,902 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,902 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,902 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,902 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:34,957 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:34,957 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:34,957 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(5)), (np.int64(9), np.int64(9)))
2025-04-11 17:45:34,964 [INFO] Final candidates: []
2025-04-11 17:45:34,964 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:34,964 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,964 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,964 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,964 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,965 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:34,965 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:34,965 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:34,965 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:34,969 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:34,969 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,969 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,969 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:34,970 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:34,970 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:34,970 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:34,970 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:34,971 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:34,971 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:34,971 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:34,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,168 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:35,168 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,168 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(0)), (np.int64(2), np.int64(15)))
2025-04-11 17:45:35,175 [INFO] Final candidates: []
2025-04-11 17:45:35,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,175 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,175 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,175 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,175 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,176 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,176 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,176 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,176 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,180 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,180 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,180 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,180 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,181 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,181 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,181 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,182 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,182 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,182 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,182 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,275 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:35,275 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,275 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(8)), (np.int64(13), np.int64(0)))
2025-04-11 17:45:35,282 [INFO] Final candidates: []
2025-04-11 17:45:35,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,283 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,283 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,283 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,283 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,284 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,284 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,284 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,284 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,288 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,288 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,288 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,288 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,289 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,289 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,289 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,289 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,290 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,290 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,290 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,422 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:35,423 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,423 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(3), np.int64(4)))
2025-04-11 17:45:35,432 [INFO] Final candidates: []
2025-04-11 17:45:35,432 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,432 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,432 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,432 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,432 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,435 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,435 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,435 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,435 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,439 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,439 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,439 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,439 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,440 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,440 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,440 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,440 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,441 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,441 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,441 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,443 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:35,443 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,443 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(5), np.int64(12)))
2025-04-11 17:45:35,452 [INFO] Final candidates: []
2025-04-11 17:45:35,452 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,452 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,452 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,452 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,452 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,453 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,453 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,453 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,453 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,457 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,457 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,457 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,457 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,458 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,458 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,458 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,458 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,459 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,459 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,459 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,459 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,471 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:35,471 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,471 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(5)), (np.int64(0), np.int64(6)))
2025-04-11 17:45:35,478 [INFO] Final candidates: []
2025-04-11 17:45:35,478 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,479 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,479 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,479 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,479 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,480 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,480 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,480 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,480 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,484 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,484 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,484 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,484 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,485 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,485 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,485 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,485 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,486 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,486 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,486 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,486 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,491 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:35,491 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,492 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:35,499 [INFO] Final candidates: []
2025-04-11 17:45:35,499 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,499 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,499 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,499 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,499 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,500 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,500 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,500 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,500 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,504 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,504 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,504 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,504 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,505 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,505 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,505 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,505 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,506 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,506 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,506 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,511 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:35,511 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,511 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(0)), (np.int64(1), np.int64(16)))
2025-04-11 17:45:35,518 [INFO] Final candidates: []
2025-04-11 17:45:35,518 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,518 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,518 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,518 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,518 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,519 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,519 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,519 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,519 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,523 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,523 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,523 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,523 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,524 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,524 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,524 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,524 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,525 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,525 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,525 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,525 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,766 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:35,766 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,767 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(6)), (np.int64(1), np.int64(5)))
2025-04-11 17:45:35,773 [INFO] Final candidates: []
2025-04-11 17:45:35,773 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,773 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,773 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,773 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,774 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,774 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,774 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,774 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,775 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,778 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,778 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,778 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,779 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,779 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,779 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,779 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,780 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,780 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,780 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,780 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,839 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:35,839 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,839 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(13)), (np.int64(11), np.int64(1)))
2025-04-11 17:45:35,846 [INFO] Final candidates: []
2025-04-11 17:45:35,846 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,846 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,846 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,846 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,846 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,847 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,847 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,847 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,847 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,851 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:35,851 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,851 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,851 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:35,852 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:35,852 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:35,852 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:35,852 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:35,853 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,853 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,853 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,853 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:35,894 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:35,894 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:35,894 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(11)), (np.int64(4), np.int64(18)))
2025-04-11 17:45:35,901 [INFO] Final candidates: []
2025-04-11 17:45:35,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:35,901 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,901 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,901 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,901 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,902 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:35,902 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:35,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:35,902 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:35,907 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:35,907 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:35,907 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:35,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,016 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:36,016 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,016 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(3)), (np.int64(1), np.int64(8)))
2025-04-11 17:45:36,024 [INFO] Final candidates: []
2025-04-11 17:45:36,024 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,024 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,025 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,025 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,025 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,026 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,026 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,026 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,026 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,030 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,030 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,030 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,030 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,031 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,031 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,031 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,031 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,032 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,032 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,032 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,032 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,043 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:36,043 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,044 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(6), np.int64(8)))
2025-04-11 17:45:36,060 [INFO] Final candidates: []
2025-04-11 17:45:36,060 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,072 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,072 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,072 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,072 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,074 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,074 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,074 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,074 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,076 [INFO] Final candidates: [(3, 10)]
2025-04-11 17:45:36,076 [INFO] Phase defense: Found only one candidate: (3, 10)
2025-04-11 17:45:36,076 [INFO] Phase defense: Collected 10unique candidate(s):[((3, 10), (np.int64(3), np.int64(9))), ((3, 10), (np.int64(4), np.int64(10))), ((3, 10), (np.int64(1), np.int64(10))), ((3, 10), (np.int64(2), np.int64(11))), ((3, 10), (np.int64(3), np.int64(11))), ((3, 10), (np.int64(4), np.int64(11))), ((3, 10), (np.int64(3), np.int64(8))), ((3, 10), (np.int64(3), np.int64(12))), ((3, 10), (np.int64(2), np.int64(10))), ((3, 10), (np.int64(2), np.int64(9)))]
2025-04-11 17:45:36,076 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:45:36,076 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,252 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:36,252 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,252 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(0), np.int64(13)))
2025-04-11 17:45:36,261 [INFO] Final candidates: []
2025-04-11 17:45:36,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,261 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,261 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,261 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,261 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,262 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,262 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,262 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,262 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,270 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,270 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,271 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,273 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,273 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,273 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,273 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,275 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,275 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,275 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,275 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,419 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:36,419 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,420 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(5)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:36,426 [INFO] Final candidates: []
2025-04-11 17:45:36,426 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,427 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,427 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,427 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,427 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,428 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,428 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,428 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,428 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,431 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,431 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,431 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,431 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,432 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,432 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,432 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,432 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,433 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,433 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,433 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,433 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,447 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:36,448 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,448 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(0), np.int64(15)))
2025-04-11 17:45:36,455 [INFO] Final candidates: []
2025-04-11 17:45:36,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,455 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,455 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,455 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,455 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,456 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,456 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,456 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,456 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,460 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,460 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,460 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,460 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,461 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,461 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,461 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,461 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,461 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,461 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,461 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,462 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,662 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:36,662 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,663 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(5)), (np.int64(3), np.int64(14)))
2025-04-11 17:45:36,671 [INFO] Final candidates: []
2025-04-11 17:45:36,671 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,671 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,671 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,671 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,671 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,672 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,672 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,672 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,673 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,677 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,677 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,677 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,677 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,678 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,678 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,678 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,678 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,678 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,678 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,678 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,678 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,704 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:36,704 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,705 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(11)), (np.int64(1), np.int64(13)))
2025-04-11 17:45:36,711 [INFO] Final candidates: []
2025-04-11 17:45:36,711 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,711 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,711 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,711 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,711 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,712 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,712 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,712 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,712 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,716 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,716 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,716 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,716 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,717 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,717 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,717 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,717 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,718 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,718 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,718 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,750 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:36,751 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,751 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(1), np.int64(18)))
2025-04-11 17:45:36,757 [INFO] Final candidates: []
2025-04-11 17:45:36,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,758 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,758 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,758 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,758 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,759 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,759 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,759 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,759 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,762 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,763 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,763 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,763 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,763 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,764 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,764 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,764 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,764 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,764 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:36,870 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,870 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(16)), (np.int64(8), np.int64(10)))
2025-04-11 17:45:36,877 [INFO] Final candidates: []
2025-04-11 17:45:36,877 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,877 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,877 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,877 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,877 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,878 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,878 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,878 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,878 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,882 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,882 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,882 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,882 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,883 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,883 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,883 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,883 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,884 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,884 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,884 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,884 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:36,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:36,971 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:36,971 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(15), np.int64(3)))
2025-04-11 17:45:36,978 [INFO] Final candidates: []
2025-04-11 17:45:36,978 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:36,978 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,979 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,979 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,979 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,979 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:36,979 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:36,980 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:36,980 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:36,983 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:36,983 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,983 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,983 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:36,984 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:36,984 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:36,984 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:36,984 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:36,985 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:36,985 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:36,985 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:36,985 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:37,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:37,127 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:37,127 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(6)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:37,136 [INFO] Final candidates: []
2025-04-11 17:45:37,136 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:37,136 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,136 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,136 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,136 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,137 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,137 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,137 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,137 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,142 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:37,142 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,142 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,142 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:37,143 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:37,143 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,143 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,143 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:37,143 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:37,143 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:37,144 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:37,144 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:37,390 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:37,391 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:37,391 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(5)), (np.int64(1), np.int64(12)))
2025-04-11 17:45:37,398 [INFO] Final candidates: []
2025-04-11 17:45:37,398 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:37,398 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,398 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,398 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,398 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,399 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,399 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,399 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,399 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,406 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:37,406 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,406 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,406 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:37,408 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:37,408 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,408 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,408 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:37,409 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:37,409 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:37,409 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:37,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:37,446 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:37,446 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:37,446 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(3)), (np.int64(7), np.int64(11)))
2025-04-11 17:45:37,453 [INFO] Final candidates: []
2025-04-11 17:45:37,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:37,453 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,453 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,453 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,453 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,454 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,454 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,454 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,454 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,458 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:37,458 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,458 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,458 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:37,459 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:37,459 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,459 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,459 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:37,460 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:37,460 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:37,460 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:37,460 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:37,656 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:37,657 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:37,657 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(6)), (np.int64(11), np.int64(3)))
2025-04-11 17:45:37,664 [INFO] Final candidates: []
2025-04-11 17:45:37,664 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:37,664 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,664 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,664 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,665 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,665 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,665 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,665 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,669 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:37,669 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,669 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,669 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:37,670 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:37,670 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,670 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,670 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:37,671 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:37,671 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:37,671 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:37,671 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:37,841 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:37,841 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:37,842 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:37,850 [INFO] Final candidates: []
2025-04-11 17:45:37,850 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:37,851 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,851 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,851 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,851 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,852 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,852 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,852 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,852 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,858 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:37,858 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,858 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,858 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:37,860 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:37,860 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,860 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,860 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:37,862 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:37,862 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:37,862 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:37,862 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:37,881 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:37,882 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:37,882 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(18)), (np.int64(3), np.int64(18)))
2025-04-11 17:45:37,899 [INFO] Final candidates: []
2025-04-11 17:45:37,899 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:37,900 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,900 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,900 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,900 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,902 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:37,902 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:37,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:37,902 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:37,909 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:37,909 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,909 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,909 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:37,910 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:37,910 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:37,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:37,910 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:37,910 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:37,910 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:37,910 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:37,910 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,045 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:38,045 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,046 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(4), np.int64(15)))
2025-04-11 17:45:38,055 [INFO] Final candidates: []
2025-04-11 17:45:38,055 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,056 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,056 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,056 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,056 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,057 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,057 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,057 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,057 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,061 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,061 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,061 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,062 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,062 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,062 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,062 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,063 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,063 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,063 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,063 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,147 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:38,148 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,148 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(0)), (np.int64(1), np.int64(4)))
2025-04-11 17:45:38,155 [INFO] Final candidates: []
2025-04-11 17:45:38,155 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,155 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,155 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,155 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,155 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,156 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,156 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,156 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,156 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,160 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,160 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,160 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,160 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,161 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,161 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,161 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,161 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,161 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,161 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,161 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,263 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,264 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,264 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(13), np.int64(3)))
2025-04-11 17:45:38,270 [INFO] Final candidates: []
2025-04-11 17:45:38,270 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,271 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,271 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,271 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,271 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,272 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,272 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,272 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,276 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,276 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,276 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,276 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,277 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,277 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,277 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,277 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,277 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,277 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,277 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,277 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,316 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,317 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,318 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(14), np.int64(1)))
2025-04-11 17:45:38,325 [INFO] Final candidates: []
2025-04-11 17:45:38,325 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,326 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,326 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,326 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,326 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,326 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,327 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,327 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,330 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,330 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,330 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,330 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,333 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,333 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,333 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,333 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,334 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,334 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,334 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,334 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:45:38,334 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,479 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,479 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,479 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(7), np.int64(0)))
2025-04-11 17:45:38,485 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:45:38,485 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:38,485 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:45:38,485 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:45:38,489 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:45:38,489 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:45:38,489 [INFO] Phase win: Collected 11unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(10), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:45:38,489 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:45:38,489 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,489 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,489 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,489 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,490 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,490 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,490 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,490 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,495 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,495 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,495 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,496 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,497 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,497 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,497 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,497 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,497 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,497 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,497 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,503 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,503 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,503 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:38,511 [INFO] Final candidates: []
2025-04-11 17:45:38,511 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,511 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,511 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,511 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,512 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,512 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,512 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,516 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,516 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,516 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,516 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,517 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,517 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,517 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,517 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,518 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,518 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,518 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,551 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,552 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,552 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(1)), (np.int64(2), np.int64(16)))
2025-04-11 17:45:38,558 [INFO] Final candidates: []
2025-04-11 17:45:38,558 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,559 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,559 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,559 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,559 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,560 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,560 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,560 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,560 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,564 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,564 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,564 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,564 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,564 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,564 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,565 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,565 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,565 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,565 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,565 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,570 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,570 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,571 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:38,577 [INFO] Final candidates: []
2025-04-11 17:45:38,577 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,577 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,577 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,577 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,578 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,578 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,578 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,578 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,579 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,582 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,582 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,582 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,582 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,583 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,583 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,583 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,583 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,584 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,584 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,584 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,584 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,592 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,592 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,592 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(4)), (np.int64(4), np.int64(6)))
2025-04-11 17:45:38,599 [INFO] Final candidates: []
2025-04-11 17:45:38,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,599 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,599 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,599 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,599 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,600 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,600 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,600 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,600 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,604 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,604 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,604 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,604 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,605 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,605 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,605 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,605 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,606 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,606 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,606 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,606 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,611 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,611 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,611 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(11)), (np.int64(2), np.int64(16)))
2025-04-11 17:45:38,618 [INFO] Final candidates: []
2025-04-11 17:45:38,618 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,618 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,618 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,618 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,618 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,619 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,619 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,619 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,619 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,623 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,623 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,623 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,623 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,624 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,624 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,624 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,624 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,625 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,625 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,625 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,625 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,720 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,720 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,720 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(14), np.int64(3)))
2025-04-11 17:45:38,727 [INFO] Final candidates: []
2025-04-11 17:45:38,727 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,727 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,727 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,727 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,727 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,728 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,728 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,728 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,728 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,732 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,732 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,732 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,732 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,733 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,733 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,733 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,733 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,734 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,734 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,734 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,734 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,817 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,818 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,818 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(6)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:38,825 [INFO] Final candidates: []
2025-04-11 17:45:38,825 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,825 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,825 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,825 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,825 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,826 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,826 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,826 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,826 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,830 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,830 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,830 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,830 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,831 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,831 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,831 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,831 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,832 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,832 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,832 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,832 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,929 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,929 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,929 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(1), np.int64(11)))
2025-04-11 17:45:38,936 [INFO] Final candidates: []
2025-04-11 17:45:38,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,936 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,936 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,936 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,936 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,937 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,937 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,937 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,937 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,941 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,941 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,941 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,941 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,942 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,942 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,942 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,942 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,943 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,943 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,943 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,943 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:38,962 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:38,963 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:38,963 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(0), np.int64(2)))
2025-04-11 17:45:38,975 [INFO] Final candidates: []
2025-04-11 17:45:38,975 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:38,975 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,975 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,975 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,975 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,976 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:38,976 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:38,976 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:38,976 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:38,980 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:38,980 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,980 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,980 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:38,981 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:38,981 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:38,981 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:38,981 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:38,982 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:38,982 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:38,982 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:38,982 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:39,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:39,130 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:39,131 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(1), np.int64(13)))
2025-04-11 17:45:39,139 [INFO] Final candidates: []
2025-04-11 17:45:39,139 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:39,139 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,139 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,139 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,139 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,140 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,140 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,140 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,140 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,144 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:39,144 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,144 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,144 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:39,145 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:39,146 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,146 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,146 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:39,146 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:39,146 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:39,146 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:39,146 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:39,161 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:39,161 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:39,162 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(11)), (np.int64(2), np.int64(10)))
2025-04-11 17:45:39,168 [INFO] Final candidates: []
2025-04-11 17:45:39,168 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:39,168 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,168 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,168 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,169 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,169 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,169 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,173 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:39,173 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,173 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,173 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:39,174 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:39,174 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,174 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,174 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:39,175 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:39,175 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:39,175 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:39,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:39,421 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:39,422 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:39,422 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(5)), (np.int64(2), np.int64(17)))
2025-04-11 17:45:39,432 [INFO] Final candidates: []
2025-04-11 17:45:39,432 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:39,432 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,432 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,432 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,432 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,433 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,433 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,433 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,433 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,437 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:39,437 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,437 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,437 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:39,438 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:39,438 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,438 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,438 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:39,439 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:39,439 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:39,439 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:39,439 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:39,628 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:39,628 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:39,629 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(1)), (np.int64(16), np.int64(1)))
2025-04-11 17:45:39,635 [INFO] Final candidates: []
2025-04-11 17:45:39,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:39,636 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,636 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,636 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,636 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,637 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,637 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,637 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,637 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,641 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:39,641 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,641 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,641 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:39,642 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:39,642 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,642 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,642 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:39,643 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:39,643 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:39,643 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:39,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:39,730 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:39,730 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:39,730 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(18)), (np.int64(6), np.int64(12)))
2025-04-11 17:45:39,739 [INFO] Final candidates: []
2025-04-11 17:45:39,739 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:39,739 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,739 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,739 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,739 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,740 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,740 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,740 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,740 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,744 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:39,744 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,744 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,744 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:39,745 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:39,745 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,745 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,745 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:39,746 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:39,746 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:39,746 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:39,746 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:39,954 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:39,954 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:39,954 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(6)), (np.int64(8), np.int64(8)))
2025-04-11 17:45:39,961 [INFO] Final candidates: []
2025-04-11 17:45:39,961 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:39,961 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,961 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,961 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,961 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,962 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:39,962 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:39,962 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:39,962 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:39,966 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:39,966 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,966 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,966 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:39,967 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:39,967 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:39,967 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:39,967 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:39,968 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:39,968 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:39,968 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:39,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,050 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,050 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,050 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(0), np.int64(17)))
2025-04-11 17:45:40,057 [INFO] Final candidates: []
2025-04-11 17:45:40,057 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:40,057 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,057 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,057 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,057 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,058 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,058 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,058 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,058 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,062 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,062 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,062 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,062 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,063 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,063 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,063 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,063 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:40,063 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:40,063 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:40,064 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,256 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,256 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,256 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(1)), (np.int64(13), np.int64(2)))
2025-04-11 17:45:40,263 [INFO] Final candidates: []
2025-04-11 17:45:40,263 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:40,263 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,263 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,263 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,263 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,264 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,264 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,264 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,264 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,269 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,269 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,269 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,269 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,270 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,270 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,270 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,270 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,271 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:40,271 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:40,271 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:40,271 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,297 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,299 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,299 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(4), np.int64(15)))
2025-04-11 17:45:40,300 [DEBUG] board coords: [(9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8)]
2025-04-11 17:45:40,300 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:40,300 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (9, 8)]
2025-04-11 17:45:40,300 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [1 1 1 1 0 0] with coords [(9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8)] triggers candidate.
2025-04-11 17:45:40,308 [INFO] Final candidates: [(9, 7)]
2025-04-11 17:45:40,308 [INFO] Phase win: Found only one candidate: (9, 7)
2025-04-11 17:45:40,308 [INFO] Phase win: Collected 8unique candidate(s):[((9, 7), (np.int64(9), np.int64(9))), ((9, 7), (np.int64(8), np.int64(8))), ((9, 7), (np.int64(10), np.int64(6))), ((9, 7), (np.int64(11), np.int64(7))), ((9, 7), (np.int64(9), np.int64(8))), ((9, 7), (np.int64(10), np.int64(8))), ((9, 7), (np.int64(7), np.int64(7))), ((9, 7), (np.int64(10), np.int64(7)))]
2025-04-11 17:45:40,308 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 17:45:40,308 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,308 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,308 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,308 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,309 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,309 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,309 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,309 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,313 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,313 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,313 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,314 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,315 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,315 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,315 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,316 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:40,316 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:40,316 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:40,316 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,427 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,427 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,427 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 17:45:40,434 [INFO] Final candidates: []
2025-04-11 17:45:40,434 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:40,434 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,434 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,434 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,434 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,435 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,435 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,435 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,435 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,439 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,439 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,439 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,439 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,440 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,440 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,440 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,440 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,441 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:40,441 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:40,441 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:40,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,485 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,485 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,485 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(3)), (np.int64(6), np.int64(10)))
2025-04-11 17:45:40,492 [INFO] Final candidates: []
2025-04-11 17:45:40,492 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:40,497 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,497 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,497 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,498 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,498 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,498 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,498 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,498 [INFO] Final candidates: [(6, 8), (3, 10)]
2025-04-11 17:45:40,498 [INFO] Phase defense: Collected 1unique candidate(s):[((6, 8), (3, 10))]
2025-04-11 17:45:40,498 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:40,498 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,700 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(14), np.int64(6)))
2025-04-11 17:45:40,706 [INFO] Final candidates: []
2025-04-11 17:45:40,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:40,706 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,706 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,706 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,707 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,707 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,707 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,707 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,708 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,711 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,711 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,711 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,711 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,712 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,712 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,712 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,712 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,713 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:40,713 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:40,713 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:40,713 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,801 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,801 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,801 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(4)), (np.int64(11), np.int64(1)))
2025-04-11 17:45:40,808 [INFO] Final candidates: []
2025-04-11 17:45:40,808 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:40,808 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,808 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,808 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,808 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,809 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,809 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,809 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,809 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,813 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,813 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,813 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,813 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,814 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,814 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,814 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,814 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,815 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:40,815 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:40,815 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:40,815 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:40,942 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:40,942 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:40,943 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(2)), (np.int64(7), np.int64(11)))
2025-04-11 17:45:40,949 [INFO] Final candidates: []
2025-04-11 17:45:40,949 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:40,950 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,950 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,950 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,950 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,951 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:40,951 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:40,951 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:40,951 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:40,954 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:40,954 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,954 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,954 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:40,955 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:40,955 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:40,955 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:40,955 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:40,956 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:40,956 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:40,956 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:40,956 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,095 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:41,095 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,095 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(5), np.int64(15)))
2025-04-11 17:45:41,102 [INFO] Final candidates: []
2025-04-11 17:45:41,102 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,102 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,102 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,102 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,102 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,103 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,103 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,103 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,103 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,107 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,107 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,107 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,108 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,108 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,108 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,108 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,109 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,109 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,109 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,109 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,173 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:41,174 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,174 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:41,182 [INFO] Final candidates: []
2025-04-11 17:45:41,182 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,182 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,182 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,182 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,182 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,183 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,183 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,183 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,183 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,187 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,187 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,187 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,187 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,188 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,188 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,188 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,188 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,189 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,189 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,189 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,189 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,323 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:41,323 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,324 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(9), np.int64(7)))
2025-04-11 17:45:41,324 [DEBUG] board coords: [(9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8)]
2025-04-11 17:45:41,324 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:41,324 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 5), (9, 8)]
2025-04-11 17:45:41,324 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8)] triggers candidate.
2025-04-11 17:45:41,328 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:45:41,328 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:41,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:45:41,328 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:45:41,331 [INFO] Final candidates: [(9, 5), (12, 6), (9, 8)]
2025-04-11 17:45:41,331 [INFO] Phase win: Collected 3unique candidate(s):[((12, 6), (9, 8)), ((9, 5), (12, 6)), ((9, 5), (9, 8))]
2025-04-11 17:45:41,331 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:41,331 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,331 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,331 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,331 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,332 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,332 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,332 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,332 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,336 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,336 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,336 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,336 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,337 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,337 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,337 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,337 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,337 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,337 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,337 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,338 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,382 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:41,382 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,383 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(13)), (np.int64(16), np.int64(2)))
2025-04-11 17:45:41,390 [INFO] Final candidates: []
2025-04-11 17:45:41,391 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,391 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,391 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,391 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,391 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,392 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,392 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,392 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,392 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,396 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,396 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,396 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,396 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,397 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,397 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,397 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,397 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,398 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,398 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,398 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,398 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,415 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:41,415 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,415 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(15), np.int64(3)))
2025-04-11 17:45:41,422 [INFO] Final candidates: []
2025-04-11 17:45:41,422 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,422 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,422 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,422 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,422 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,423 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,423 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,423 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,423 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,427 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,427 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,427 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,427 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,428 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,428 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,428 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,428 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,429 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,429 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,429 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,436 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:41,436 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,437 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(5)), (np.int64(4), np.int64(5)))
2025-04-11 17:45:41,439 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5)] triggers candidate.
2025-04-11 17:45:41,439 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:45:41,445 [INFO] Final candidates: [(5, 5), (0, 5)]
2025-04-11 17:45:41,446 [INFO] Phase win: Collected 1unique candidate(s):[((5, 5), (0, 5))]
2025-04-11 17:45:41,446 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:41,446 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,446 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,446 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,446 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,447 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,447 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,447 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,447 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,451 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,451 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,451 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,451 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,452 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,452 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,452 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,452 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,453 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,453 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,453 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,453 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,585 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:41,585 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,585 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(8)), (np.int64(3), np.int64(17)))
2025-04-11 17:45:41,592 [INFO] Final candidates: []
2025-04-11 17:45:41,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,592 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,592 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,592 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,592 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,593 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,593 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,593 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,593 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,597 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,597 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,597 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,597 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,598 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,598 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,598 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,598 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,599 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,599 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,599 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,599 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,607 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:41,607 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,607 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(5)), (np.int64(0), np.int64(15)))
2025-04-11 17:45:41,614 [INFO] Final candidates: []
2025-04-11 17:45:41,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,614 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,614 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,614 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,614 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,615 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,615 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,615 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,615 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,621 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,621 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,621 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,621 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,623 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,623 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,623 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,623 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,623 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,623 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,623 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,623 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,650 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:41,650 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,650 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(1)), (np.int64(1), np.int64(5)))
2025-04-11 17:45:41,657 [INFO] Final candidates: []
2025-04-11 17:45:41,657 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,657 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,657 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,657 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,657 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,658 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,658 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,658 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,658 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,663 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,663 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,663 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,663 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,664 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,664 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,664 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,664 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,665 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,665 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,665 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:41,868 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:41,868 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:41,868 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(2), np.int64(16)))
2025-04-11 17:45:41,875 [INFO] Final candidates: []
2025-04-11 17:45:41,875 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:41,875 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,875 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,875 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,875 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,876 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:41,876 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:41,876 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:41,876 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:41,880 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:41,880 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,880 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,880 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:41,881 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:41,881 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:41,881 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:41,881 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:41,882 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:41,882 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:41,882 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:41,882 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:42,114 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,114 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(5), np.int64(15)))
2025-04-11 17:45:42,121 [INFO] Final candidates: []
2025-04-11 17:45:42,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,121 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,121 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,121 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,121 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,122 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,122 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,122 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,122 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,126 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,126 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,126 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,126 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,127 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,127 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,127 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,127 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,128 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,128 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,128 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:42,298 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,298 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(2)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:42,305 [INFO] Final candidates: []
2025-04-11 17:45:42,305 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,306 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,306 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,306 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,306 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,307 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,307 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,307 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,307 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,310 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,310 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,311 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,311 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,311 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,311 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,312 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,312 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,312 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,312 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,331 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:42,331 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,331 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(18)), (np.int64(1), np.int64(18)))
2025-04-11 17:45:42,338 [INFO] Final candidates: []
2025-04-11 17:45:42,338 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,338 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,338 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,338 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,338 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,339 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,339 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,339 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,339 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,343 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,343 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,343 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,343 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,344 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,344 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,344 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,344 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,345 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,345 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,345 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,345 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,385 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:42,385 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,385 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(9), np.int64(9)))
2025-04-11 17:45:42,392 [INFO] Final candidates: []
2025-04-11 17:45:42,392 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,392 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,392 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,392 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,392 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,393 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,393 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,393 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,393 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,397 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,397 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,397 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,397 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,398 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,398 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,398 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,398 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,399 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,399 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,399 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,399 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,506 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:42,507 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,507 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:42,514 [INFO] Final candidates: []
2025-04-11 17:45:42,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,514 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,514 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,514 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,514 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,515 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,515 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,515 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,515 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,519 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,519 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,519 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,519 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,520 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,520 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,520 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,520 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,522 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,522 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,522 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,522 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:42,671 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,671 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(16)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:42,678 [INFO] Final candidates: []
2025-04-11 17:45:42,678 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,679 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,679 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,679 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,679 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,680 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,680 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,680 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,680 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,683 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,683 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,683 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,684 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,684 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,684 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,684 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,685 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,685 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,685 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,738 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:42,738 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,738 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(13)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:42,745 [INFO] Final candidates: []
2025-04-11 17:45:42,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,745 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,745 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,745 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,745 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,746 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,746 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,746 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,746 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,750 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,750 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,750 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,750 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,751 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,751 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,751 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,751 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,752 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,752 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,752 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,752 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,869 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:42,870 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,871 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(3)), (np.int64(3), np.int64(18)))
2025-04-11 17:45:42,879 [INFO] Final candidates: []
2025-04-11 17:45:42,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:42,880 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,880 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,880 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,880 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,881 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:42,881 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:42,881 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:42,881 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:42,884 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:42,885 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,885 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,885 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:42,886 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:42,886 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:42,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:42,886 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:42,886 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:42,886 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:42,886 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:42,886 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:42,982 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:42,982 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:42,982 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(9)), (np.int64(7), np.int64(11)))
2025-04-11 17:45:43,000 [INFO] Final candidates: []
2025-04-11 17:45:43,000 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:43,001 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,001 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,001 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,003 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,003 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,003 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,003 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,012 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:43,013 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,013 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,013 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:43,014 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:43,014 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,014 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,014 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:43,015 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:43,015 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:43,015 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:43,015 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:43,164 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:43,164 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:43,164 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(12), np.int64(3)))
2025-04-11 17:45:43,175 [INFO] Final candidates: []
2025-04-11 17:45:43,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:43,176 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,176 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,176 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,176 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,177 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,177 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,177 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,177 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,181 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:43,181 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,181 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,181 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:43,182 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:43,182 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,182 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,182 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:43,183 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:43,183 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:43,183 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:43,183 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:43,265 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:43,265 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:43,265 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(4), np.int64(8)))
2025-04-11 17:45:43,272 [INFO] Final candidates: []
2025-04-11 17:45:43,272 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:43,272 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,272 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,272 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,273 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,273 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,273 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,273 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,273 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,277 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:43,277 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,277 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,277 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:43,278 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:43,278 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,278 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,278 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:43,279 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:43,279 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:43,279 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:43,279 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:43,449 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:43,450 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:43,450 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(0), np.int64(2)))
2025-04-11 17:45:43,457 [INFO] Final candidates: []
2025-04-11 17:45:43,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:43,457 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,457 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,457 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,457 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,458 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,458 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,458 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,458 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,462 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:43,462 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,462 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,462 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:43,463 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:43,463 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,463 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,463 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:43,464 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:43,464 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:43,464 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:43,464 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:43,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:43,553 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:43,553 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(5)), (np.int64(2), np.int64(15)))
2025-04-11 17:45:43,554 [DEBUG] board coords: [(9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8)]
2025-04-11 17:45:43,554 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:45:43,554 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (9, 8)]
2025-04-11 17:45:43,554 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [1 1 1 1 0 0] with coords [(9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8)] triggers candidate.
2025-04-11 17:45:43,560 [INFO] Final candidates: [(9, 7)]
2025-04-11 17:45:43,560 [INFO] Phase win: Found only one candidate: (9, 7)
2025-04-11 17:45:43,560 [INFO] Phase win: Collected 8unique candidate(s):[((9, 7), (np.int64(9), np.int64(9))), ((9, 7), (np.int64(8), np.int64(8))), ((9, 7), (np.int64(10), np.int64(6))), ((9, 7), (np.int64(11), np.int64(7))), ((9, 7), (np.int64(9), np.int64(8))), ((9, 7), (np.int64(10), np.int64(8))), ((9, 7), (np.int64(7), np.int64(7))), ((9, 7), (np.int64(10), np.int64(7)))]
2025-04-11 17:45:43,560 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 17:45:43,561 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,561 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,561 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,561 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,562 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,562 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,562 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,562 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,566 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:43,566 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,566 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,566 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:43,568 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:43,568 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,568 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,568 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:43,570 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:43,570 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:43,570 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:43,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:43,620 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:43,620 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:43,620 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(2), np.int64(8)))
2025-04-11 17:45:43,627 [INFO] Final candidates: []
2025-04-11 17:45:43,627 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:43,627 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,627 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,627 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,629 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,629 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,629 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,629 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,636 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:43,636 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,636 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,636 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:43,637 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:43,637 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,637 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,637 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:43,638 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:43,638 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:43,638 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:43,638 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:43,788 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:43,788 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:43,788 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(5)), (np.int64(4), np.int64(8)))
2025-04-11 17:45:43,800 [INFO] Final candidates: []
2025-04-11 17:45:43,800 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:43,801 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,801 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,801 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,801 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,803 [DEBUG] board coords: [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 17:45:43,803 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:43,803 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:45:43,803 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 17:45:43,813 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)]
2025-04-11 17:45:43,813 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,813 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,813 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=6, window [0 0 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6)] triggers candidate.
2025-04-11 17:45:43,815 [DEBUG] board coords: [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)]
2025-04-11 17:45:43,815 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:43,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 11), (3, 10)]
2025-04-11 17:45:43,816 [DEBUG] check_window_intermediate_custom (only one inserted(3, 10)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 11), (3, 10), (4, 9), (5, 8), (6, 7), (7, 6), (8, 5)] triggers candidate.
2025-04-11 17:45:43,817 [INFO] Final candidates: [(6, 8), (6, 10), (3, 10)]
2025-04-11 17:45:43,818 [INFO] Phase defense: Collected 3unique candidate(s):[((6, 8), (3, 10)), ((6, 8), (6, 10)), ((6, 10), (3, 10))]
2025-04-11 17:45:43,818 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:43,818 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:43,874 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:43,874 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:45:43,874 [INFO] MCTS (defense candidates) selected move: G7,K5
2025-04-11 17:45:44,173 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:45:44,181 [INFO] Final candidates: []
2025-04-11 17:45:44,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:44,184 [DEBUG] board coords: [(4, 7), (5, 8), (6, 9), (7, 10), (8, 11), (9, 12)]
2025-04-11 17:45:44,184 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:45:44,184 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 11), (9, 12)]
2025-04-11 17:45:44,184 [DEBUG] check_window_intermediate_custom (only one inserted(8, 11)): For L=6, window [2 2 2 2 0 0] with coords [(4, 7), (5, 8), (6, 9), (7, 10), (8, 11), (9, 12)] triggers candidate.
2025-04-11 17:45:44,185 [DEBUG] board coords: [(3, 6), (4, 7), (5, 8), (6, 9), (7, 10), (8, 11), (9, 12)]
2025-04-11 17:45:44,185 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:45:44,185 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 11), (9, 12)]
2025-04-11 17:45:44,185 [DEBUG] check_window_intermediate_custom (only one inserted(8, 11)): For L=7, window [2 2 2 2 2 0 0] with coords [(3, 6), (4, 7), (5, 8), (6, 9), (7, 10), (8, 11), (9, 12)] triggers candidate.
2025-04-11 17:45:44,187 [INFO] Final candidates: [(8, 11)]
2025-04-11 17:45:44,187 [INFO] Phase defense: Found only one candidate: (8, 11)
2025-04-11 17:45:44,188 [INFO] Phase defense: Collected 10unique candidate(s):[((8, 11), (np.int64(9), np.int64(10))), ((8, 11), (np.int64(7), np.int64(12))), ((8, 11), (np.int64(9), np.int64(12))), ((8, 11), (np.int64(7), np.int64(11))), ((8, 11), (np.int64(8), np.int64(13))), ((8, 11), (np.int64(8), np.int64(10))), ((8, 11), (np.int64(9), np.int64(11))), ((8, 11), (np.int64(10), np.int64(11))), ((8, 11), (np.int64(6), np.int64(11))), ((8, 11), (np.int64(8), np.int64(12)))]
2025-04-11 17:45:44,188 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:45:44,188 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:45:44,188 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(7), np.int64(12)))
2025-04-11 17:45:44,192 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:44,192 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:44,192 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:44,192 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:44,195 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:44,195 [INFO] Phase win: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:44,195 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:44,201 [INFO] Final candidates: []
2025-04-11 17:45:44,201 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:44,202 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:45:44,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:44,312 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:44,313 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(8), np.int64(13)))
2025-04-11 17:45:44,321 [INFO] Final candidates: []
2025-04-11 17:45:44,321 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:44,327 [INFO] Final candidates: []
2025-04-11 17:45:44,327 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:44,329 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:44,601 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:44,601 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(9), np.int64(10)))
2025-04-11 17:45:44,608 [INFO] Final candidates: []
2025-04-11 17:45:44,608 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:44,615 [INFO] Final candidates: []
2025-04-11 17:45:44,615 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:44,616 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:44,865 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:44,865 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(8), np.int64(10)))
2025-04-11 17:45:44,865 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:44,865 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:44,865 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:44,865 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:44,872 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:44,872 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:44,872 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:44,878 [INFO] Final candidates: []
2025-04-11 17:45:44,878 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:44,880 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:45,071 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:45,072 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(9), np.int64(12)))
2025-04-11 17:45:45,082 [INFO] Final candidates: []
2025-04-11 17:45:45,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,088 [INFO] Final candidates: []
2025-04-11 17:45:45,088 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,090 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:45,355 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:45,355 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(9), np.int64(11)))
2025-04-11 17:45:45,362 [INFO] Final candidates: []
2025-04-11 17:45:45,362 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,376 [INFO] Final candidates: []
2025-04-11 17:45:45,376 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:45,482 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:45,482 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(10), np.int64(11)))
2025-04-11 17:45:45,489 [INFO] Final candidates: []
2025-04-11 17:45:45,489 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,495 [INFO] Final candidates: []
2025-04-11 17:45:45,495 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,496 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:45,612 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:45,612 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(8), np.int64(12)))
2025-04-11 17:45:45,613 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:45,613 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:45:45,613 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 10)]
2025-04-11 17:45:45,613 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:45,623 [INFO] Final candidates: [(8, 8), (8, 10)]
2025-04-11 17:45:45,623 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (8, 10))]
2025-04-11 17:45:45,623 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:45,629 [INFO] Final candidates: []
2025-04-11 17:45:45,629 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,631 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:45,756 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:45,757 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(7), np.int64(11)))
2025-04-11 17:45:45,763 [INFO] Final candidates: []
2025-04-11 17:45:45,763 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,770 [INFO] Final candidates: []
2025-04-11 17:45:45,770 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,773 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:45,859 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:45,859 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 11), (np.int64(6), np.int64(11)))
2025-04-11 17:45:45,865 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:45,865 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:45,865 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:45,865 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:45,865 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:45,865 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:45,865 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:45,865 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:45,868 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:45,868 [INFO] Phase win: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:45,868 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:45,877 [INFO] Final candidates: []
2025-04-11 17:45:45,877 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,878 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:45,950 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:45,951 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:45,951 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(4)), (np.int64(1), np.int64(9)))
2025-04-11 17:45:45,958 [INFO] Final candidates: []
2025-04-11 17:45:45,958 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:45,961 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:45,961 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:45,961 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:45,961 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:45,964 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:45,964 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:45,964 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:45,964 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:46,019 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:46,020 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:46,020 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(5)), (np.int64(8), np.int64(12)))
2025-04-11 17:45:46,026 [INFO] Final candidates: []
2025-04-11 17:45:46,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:46,029 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:46,029 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:46,029 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:46,029 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:46,032 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:46,032 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:46,032 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:46,032 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:46,120 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:46,121 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:46,121 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(4), np.int64(5)))
2025-04-11 17:45:46,127 [INFO] Final candidates: []
2025-04-11 17:45:46,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:46,131 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:46,131 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:46,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:46,131 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:46,134 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:46,134 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:46,134 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:46,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:46,352 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:46,352 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:46,353 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(2)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:46,359 [INFO] Final candidates: []
2025-04-11 17:45:46,359 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:46,363 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:46,363 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:46,363 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:46,363 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:46,368 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:46,368 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:46,368 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:46,368 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:46,589 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:46,589 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:46,590 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(1), np.int64(4)))
2025-04-11 17:45:46,599 [INFO] Final candidates: []
2025-04-11 17:45:46,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:46,605 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:46,605 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:46,605 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:46,605 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:46,609 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:46,609 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:46,609 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:46,609 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:46,770 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:46,770 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:46,770 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(4)), (np.int64(4), np.int64(15)))
2025-04-11 17:45:46,777 [INFO] Final candidates: []
2025-04-11 17:45:46,777 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:46,780 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:46,780 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:46,780 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:46,780 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:46,783 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:46,783 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:46,783 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:46,783 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:46,978 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:46,978 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:46,978 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(0), np.int64(17)))
2025-04-11 17:45:46,985 [INFO] Final candidates: []
2025-04-11 17:45:46,985 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:46,988 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:46,988 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:46,988 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:46,988 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:46,991 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:46,991 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:46,991 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:46,991 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:47,161 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:47,161 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:47,161 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(4)), (np.int64(2), np.int64(10)))
2025-04-11 17:45:47,172 [INFO] Final candidates: []
2025-04-11 17:45:47,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:47,179 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:47,179 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:47,179 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:47,180 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:47,185 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:47,185 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:47,185 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:47,186 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:47,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:47,274 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:47,274 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(2), np.int64(17)))
2025-04-11 17:45:47,281 [INFO] Final candidates: []
2025-04-11 17:45:47,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:47,284 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:47,284 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:47,284 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:47,284 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:47,287 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:47,287 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:47,287 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:47,287 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:47,324 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:47,324 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:47,325 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(5), np.int64(13)))
2025-04-11 17:45:47,331 [INFO] Final candidates: []
2025-04-11 17:45:47,331 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:47,334 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:47,334 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:47,334 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:47,334 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:47,338 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:47,338 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:47,338 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:47,338 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:47,471 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:47,471 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:47,471 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(0), np.int64(2)))
2025-04-11 17:45:47,471 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:47,471 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:45:47,471 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:45:47,472 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:47,478 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:45:47,478 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:45:47,478 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:47,486 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:47,486 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:47,487 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:47,487 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:47,492 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:47,492 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:47,492 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:47,493 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:47,721 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:47,721 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:47,721 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(0), np.int64(17)))
2025-04-11 17:45:47,727 [INFO] Final candidates: []
2025-04-11 17:45:47,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:47,731 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:47,731 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:47,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:47,731 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:47,734 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:47,734 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:47,734 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:47,734 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:47,850 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:47,850 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:47,850 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(8)), (np.int64(4), np.int64(6)))
2025-04-11 17:45:47,857 [INFO] Final candidates: []
2025-04-11 17:45:47,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:47,860 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:47,860 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:47,860 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:47,860 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:47,863 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:47,863 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:47,863 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:47,863 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:47,999 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:48,000 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:48,000 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(0), np.int64(12)))
2025-04-11 17:45:48,006 [INFO] Final candidates: []
2025-04-11 17:45:48,006 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:48,010 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:48,010 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:48,010 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:48,010 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:48,013 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:48,013 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:48,013 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:48,013 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:48,174 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:48,174 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:48,174 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(16)), (np.int64(2), np.int64(16)))
2025-04-11 17:45:48,181 [INFO] Final candidates: []
2025-04-11 17:45:48,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:48,184 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:48,184 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:48,184 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:48,184 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:48,187 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:48,187 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:48,187 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:48,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:48,253 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:48,253 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:48,253 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(1), np.int64(9)))
2025-04-11 17:45:48,260 [INFO] Final candidates: []
2025-04-11 17:45:48,260 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:48,264 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:48,264 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:48,264 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:48,264 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:48,267 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:48,267 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:48,267 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:48,267 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:48,361 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:48,362 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:48,362 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(1), np.int64(6)))
2025-04-11 17:45:48,368 [INFO] Final candidates: []
2025-04-11 17:45:48,368 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:48,372 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:48,372 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:48,372 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:48,372 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:48,375 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:48,375 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:48,375 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:48,375 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:48,672 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:48,672 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:48,673 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(2), np.int64(10)))
2025-04-11 17:45:48,679 [INFO] Final candidates: []
2025-04-11 17:45:48,679 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:48,682 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:48,682 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:48,682 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:48,682 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:48,685 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:48,685 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:48,685 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:48,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:48,843 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:48,843 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:48,843 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(13)), (np.int64(4), np.int64(16)))
2025-04-11 17:45:48,850 [INFO] Final candidates: []
2025-04-11 17:45:48,850 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:48,853 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:48,853 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:48,853 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:48,853 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:48,856 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:48,856 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:48,856 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:48,856 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:48,938 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:48,938 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:48,939 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(9)), (np.int64(2), np.int64(16)))
2025-04-11 17:45:48,945 [INFO] Final candidates: []
2025-04-11 17:45:48,945 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:48,949 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:48,949 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:48,949 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:48,949 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:48,952 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:48,952 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:48,952 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:48,952 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:49,093 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:49,093 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:49,093 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(5)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:49,100 [INFO] Final candidates: []
2025-04-11 17:45:49,100 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:49,104 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:49,104 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:49,104 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:49,104 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:49,107 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:49,107 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:49,107 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:49,107 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:49,200 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:49,201 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:49,201 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 17:45:49,207 [INFO] Final candidates: []
2025-04-11 17:45:49,207 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:49,211 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:49,211 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:49,211 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:49,211 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:49,214 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:49,214 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:49,214 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:49,214 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:49,338 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:49,338 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:49,338 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(16), np.int64(1)))
2025-04-11 17:45:49,346 [INFO] Final candidates: []
2025-04-11 17:45:49,346 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:49,353 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:49,353 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:49,353 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:49,353 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:49,359 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:49,359 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:49,359 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:49,359 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:49,525 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:49,525 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:49,526 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(11)), (np.int64(5), np.int64(5)))
2025-04-11 17:45:49,532 [INFO] Final candidates: []
2025-04-11 17:45:49,532 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:49,536 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:49,536 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:49,536 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:49,536 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:49,539 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:49,539 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:49,539 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:49,539 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:49,800 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:49,800 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:49,800 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(4)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:49,806 [INFO] Final candidates: []
2025-04-11 17:45:49,806 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:49,810 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:49,810 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:49,810 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:49,810 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:49,813 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:49,813 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:49,813 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:49,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:49,925 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:49,926 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:49,926 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:49,932 [INFO] Final candidates: []
2025-04-11 17:45:49,932 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:49,936 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:49,936 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:49,936 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:49,936 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:49,939 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:49,939 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:49,939 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:49,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,016 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:50,017 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,017 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(4)), (np.int64(0), np.int64(15)))
2025-04-11 17:45:50,023 [INFO] Final candidates: []
2025-04-11 17:45:50,023 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,026 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,026 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,027 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,027 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,030 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,030 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,030 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,030 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,096 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:50,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,096 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(0), np.int64(2)))
2025-04-11 17:45:50,097 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:50,097 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:50,097 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:50,097 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:50,098 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:50,098 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:50,098 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:50,098 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:50,103 [INFO] Final candidates: [(0, 8), (0, 6)]
2025-04-11 17:45:50,103 [INFO] Phase win: Collected 1unique candidate(s):[((0, 8), (0, 6))]
2025-04-11 17:45:50,103 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:50,107 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,107 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,107 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,110 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,110 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,110 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,110 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,152 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:50,152 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,152 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(8), np.int64(8)))
2025-04-11 17:45:50,159 [INFO] Final candidates: []
2025-04-11 17:45:50,159 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,162 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,162 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,162 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,162 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,165 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,165 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,165 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,326 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:50,326 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,326 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(13)), (np.int64(2), np.int64(16)))
2025-04-11 17:45:50,333 [INFO] Final candidates: []
2025-04-11 17:45:50,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,336 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,336 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,336 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,336 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,339 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,339 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,339 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,433 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:50,433 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,433 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(3)), (np.int64(6), np.int64(8)))
2025-04-11 17:45:50,440 [INFO] Final candidates: []
2025-04-11 17:45:50,440 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,444 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,444 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,444 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,444 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,447 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,447 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,447 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,447 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,577 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:50,577 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,577 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(18)), (np.int64(0), np.int64(13)))
2025-04-11 17:45:50,583 [INFO] Final candidates: []
2025-04-11 17:45:50,583 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,587 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,587 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,587 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,587 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,590 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,590 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,590 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,590 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,661 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:50,662 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,662 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(4)), (np.int64(12), np.int64(2)))
2025-04-11 17:45:50,668 [INFO] Final candidates: []
2025-04-11 17:45:50,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,671 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,671 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,671 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,672 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,675 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,675 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,675 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,675 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,728 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:50,728 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,729 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(13)))
2025-04-11 17:45:50,735 [INFO] Final candidates: []
2025-04-11 17:45:50,735 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,738 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,738 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,738 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,738 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,741 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,741 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,741 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,741 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:50,973 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:50,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:50,973 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(4)), (np.int64(1), np.int64(4)))
2025-04-11 17:45:50,980 [INFO] Final candidates: []
2025-04-11 17:45:50,980 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:50,983 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:50,983 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:50,983 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:50,983 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:50,986 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:50,986 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:50,986 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:50,986 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:51,246 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:51,246 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:51,247 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(4), np.int64(6)))
2025-04-11 17:45:51,253 [INFO] Final candidates: []
2025-04-11 17:45:51,253 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:51,257 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:51,257 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:45:51,257 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (6, 11)]
2025-04-11 17:45:51,257 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:51,260 [INFO] Final candidates: [(3, 8), (6, 11)]
2025-04-11 17:45:51,260 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (6, 11))]
2025-04-11 17:45:51,260 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:51,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:51,395 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:51,395 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:51,396 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(15), np.int64(2)))
2025-04-11 17:45:51,407 [INFO] Final candidates: []
2025-04-11 17:45:51,407 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:51,418 [INFO] Final candidates: []
2025-04-11 17:45:51,418 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:51,419 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:51,510 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:51,510 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:51,510 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(13), np.int64(5)))
2025-04-11 17:45:51,519 [INFO] Final candidates: []
2025-04-11 17:45:51,520 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:51,526 [INFO] Final candidates: []
2025-04-11 17:45:51,526 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:51,527 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:51,637 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:51,638 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:51,638 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(7), np.int64(9)))
2025-04-11 17:45:51,653 [INFO] Final candidates: []
2025-04-11 17:45:51,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:51,654 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:51,654 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:51,654 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:51,654 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:51,660 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:51,660 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:51,660 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:51,660 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:51,952 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:51,952 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:51,952 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(1), np.int64(6)))
2025-04-11 17:45:51,958 [INFO] Final candidates: []
2025-04-11 17:45:51,958 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:51,958 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:51,958 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:51,958 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:51,958 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:51,965 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:51,965 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:51,965 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:51,965 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:52,078 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:52,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:52,078 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(5)), (np.int64(4), np.int64(16)))
2025-04-11 17:45:52,084 [INFO] Final candidates: []
2025-04-11 17:45:52,084 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:52,085 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:52,085 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:52,085 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:52,085 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:52,091 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:52,091 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:52,091 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:52,091 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:45:52,091 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:52,309 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:52,309 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:52,309 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(18)), (np.int64(2), np.int64(9)))
2025-04-11 17:45:52,316 [INFO] Final candidates: []
2025-04-11 17:45:52,316 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:52,316 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:52,316 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:52,316 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:52,316 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:52,322 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:52,322 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:52,322 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:52,322 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:52,428 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:52,428 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:52,428 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(9)), (np.int64(3), np.int64(11)))
2025-04-11 17:45:52,434 [INFO] Final candidates: []
2025-04-11 17:45:52,434 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:52,435 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:52,435 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:52,435 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:52,435 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:52,441 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:52,441 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:52,441 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:52,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:52,613 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:52,613 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:52,613 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(0), np.int64(12)))
2025-04-11 17:45:52,620 [INFO] Final candidates: []
2025-04-11 17:45:52,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:52,620 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:52,620 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:52,620 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:52,620 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:52,626 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:52,626 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:52,626 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:52,626 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:52,907 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:52,907 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:52,908 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(4)), (np.int64(1), np.int64(9)))
2025-04-11 17:45:52,916 [INFO] Final candidates: []
2025-04-11 17:45:52,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:52,917 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:45:52,917 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:52,917 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:45:52,917 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:45:52,923 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:45:52,923 [INFO] Phase defense: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:45:52,923 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:52,923 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:53,021 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:53,021 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:53,021 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(8)))
2025-04-11 17:45:53,027 [INFO] Final candidates: []
2025-04-11 17:45:53,027 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,033 [INFO] Final candidates: []
2025-04-11 17:45:53,033 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,035 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:53,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:53,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:53,123 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(0), np.int64(13)))
2025-04-11 17:45:53,129 [INFO] Final candidates: []
2025-04-11 17:45:53,129 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,135 [INFO] Final candidates: []
2025-04-11 17:45:53,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,137 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:53,266 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:53,266 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:53,266 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(15)), (np.int64(11), np.int64(3)))
2025-04-11 17:45:53,272 [INFO] Final candidates: []
2025-04-11 17:45:53,272 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,279 [INFO] Final candidates: []
2025-04-11 17:45:53,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:53,371 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:53,371 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:53,371 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(2), np.int64(10)))
2025-04-11 17:45:53,371 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:53,371 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:53,371 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:45:53,371 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:53,371 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:53,371 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:53,371 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:53,372 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:53,378 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:45:53,378 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:45:53,378 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:53,382 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:53,382 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:53,382 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:53,382 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:53,382 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:53,382 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:53,382 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:53,382 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:53,385 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:53,385 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:53,385 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:53,385 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:53,475 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:53,475 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:53,475 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(2)), (np.int64(0), np.int64(12)))
2025-04-11 17:45:53,485 [INFO] Final candidates: []
2025-04-11 17:45:53,485 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,489 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:53,489 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:53,489 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:53,489 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:53,489 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:53,489 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:53,489 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:53,489 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:53,492 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:53,492 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:53,492 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:53,492 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:53,631 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:53,631 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:53,631 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(1), np.int64(5)))
2025-04-11 17:45:53,639 [INFO] Final candidates: []
2025-04-11 17:45:53,639 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,642 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:53,642 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:53,642 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:53,642 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:53,642 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:53,642 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:53,642 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:53,642 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:53,645 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:53,645 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:53,645 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:53,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:53,845 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:53,845 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:53,845 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(3)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:53,851 [INFO] Final candidates: []
2025-04-11 17:45:53,851 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:53,855 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:53,855 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:53,855 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:53,855 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:53,855 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:53,855 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:53,855 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:53,855 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:53,858 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:53,858 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:53,858 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:53,858 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:54,049 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:54,049 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:54,049 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(13), np.int64(3)))
2025-04-11 17:45:54,055 [INFO] Final candidates: []
2025-04-11 17:45:54,056 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:54,059 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:54,059 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:54,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:54,059 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:54,059 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:54,059 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:54,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:54,059 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:54,062 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:54,062 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:54,062 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:54,062 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:54,215 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:54,215 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:54,215 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(5)), (np.int64(9), np.int64(7)))
2025-04-11 17:45:54,223 [INFO] Final candidates: []
2025-04-11 17:45:54,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:54,227 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:54,227 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:54,227 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:54,227 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:54,227 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:54,227 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:54,227 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:54,227 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:54,230 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:54,230 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:54,230 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:54,230 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:54,304 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:54,304 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:54,304 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(4), np.int64(5)))
2025-04-11 17:45:54,304 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:54,304 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:54,304 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:45:54,305 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:54,305 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:54,305 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:54,305 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:54,305 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:54,311 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:45:54,311 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:45:54,311 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:54,314 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:54,314 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:54,314 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:54,314 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:54,314 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:54,315 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:54,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:54,315 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:54,318 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:54,318 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:54,318 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:54,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:54,658 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:54,658 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:54,658 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(18)), (np.int64(11), np.int64(1)))
2025-04-11 17:45:54,660 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:45:54,660 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:54,660 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:45:54,660 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:45:54,667 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:45:54,667 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:45:54,667 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:54,671 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:54,671 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:54,671 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:54,671 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:54,671 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:54,671 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:54,671 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:54,671 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:54,674 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:54,674 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:54,674 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:54,674 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:54,808 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:54,808 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:54,809 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(1)), (np.int64(3), np.int64(9)))
2025-04-11 17:45:54,810 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:45:54,810 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:54,810 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (11, 1)]
2025-04-11 17:45:54,810 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:45:54,815 [INFO] Final candidates: [(11, 1), (8, 1)]
2025-04-11 17:45:54,815 [INFO] Phase win: Collected 1unique candidate(s):[((11, 1), (8, 1))]
2025-04-11 17:45:54,815 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:54,818 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:54,819 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:54,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:54,819 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:54,819 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:54,819 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:54,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:54,819 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:54,822 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:54,822 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:54,822 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:54,822 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:54,949 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:54,949 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:54,949 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(2)), (np.int64(6), np.int64(8)))
2025-04-11 17:45:54,950 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:54,950 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:45:54,950 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:45:54,950 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:54,956 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:45:54,956 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:45:54,956 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:54,959 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:54,959 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:54,960 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:54,960 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:54,960 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:54,960 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:54,960 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:54,960 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:54,963 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:54,963 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:54,963 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:54,963 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:55,154 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:55,154 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:55,155 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(1), np.int64(6)))
2025-04-11 17:45:55,161 [INFO] Final candidates: []
2025-04-11 17:45:55,161 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:55,164 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:55,164 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:55,164 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:55,164 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:55,167 [INFO] Final candidates: [(3, 8), (7, 12)]
2025-04-11 17:45:55,167 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 8), (7, 12))]
2025-04-11 17:45:55,167 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:55,167 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:55,349 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:55,349 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:55,349 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(17)), (np.int64(0), np.int64(17)))
2025-04-11 17:45:55,355 [INFO] Final candidates: []
2025-04-11 17:45:55,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:55,359 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:55,359 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:55,359 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:55,359 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:55,359 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:55,359 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:55,359 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:55,359 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:55,362 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:55,362 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:55,362 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:55,362 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:55,507 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:55,507 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:55,507 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(5), np.int64(5)))
2025-04-11 17:45:55,507 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:55,507 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:55,507 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:45:55,507 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:55,507 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:55,507 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:55,507 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:55,507 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:55,513 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:45:55,513 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:45:55,514 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:55,517 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:55,517 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:55,517 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:55,517 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:55,517 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:55,517 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:55,517 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:55,517 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:55,520 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:55,520 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:55,520 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:55,520 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:55,701 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:55,702 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:55,702 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(1)), (np.int64(0), np.int64(6)))
2025-04-11 17:45:55,702 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:55,702 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:55,702 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:45:55,702 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:55,702 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:55,702 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:45:55,702 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:45:55,702 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:55,704 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:45:55,704 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:55,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 1), (11, 1)]
2025-04-11 17:45:55,704 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:45:55,709 [INFO] Final candidates: [(11, 1), (0, 2), (0, 5), (0, 8), (9, 1)]
2025-04-11 17:45:55,709 [INFO] Phase win: Collected 10unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (9, 1)), ((11, 1), (0, 2)), ((11, 1), (9, 1)), ((11, 1), (0, 8)), ((0, 8), (9, 1)), ((0, 2), (0, 8)), ((11, 1), (0, 5)), ((0, 5), (9, 1)), ((0, 2), (0, 5))]
2025-04-11 17:45:55,709 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:45:55,712 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:55,712 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:55,712 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:55,712 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:55,712 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:55,712 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:55,712 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:55,712 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:55,715 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:55,715 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:55,715 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:55,716 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:55,937 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:55,938 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:55,938 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(18)), (np.int64(6), np.int64(8)))
2025-04-11 17:45:55,944 [INFO] Final candidates: []
2025-04-11 17:45:55,944 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:55,948 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:55,948 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:55,948 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:55,948 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:55,948 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:55,948 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:55,948 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:55,948 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:55,951 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:55,951 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:55,951 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:55,951 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:56,044 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:56,045 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:56,045 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(8)), (np.int64(14), np.int64(5)))
2025-04-11 17:45:56,051 [INFO] Final candidates: []
2025-04-11 17:45:56,051 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:56,055 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:56,055 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:56,055 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:56,055 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:56,055 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:56,055 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:56,055 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:56,055 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:56,058 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:56,058 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:56,058 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:56,058 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:56,368 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:56,369 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:56,369 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(1), np.int64(13)))
2025-04-11 17:45:56,375 [INFO] Final candidates: []
2025-04-11 17:45:56,375 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:56,379 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:56,379 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:56,379 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:56,379 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:56,379 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:56,379 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:56,379 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:56,379 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:56,383 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:56,384 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:56,384 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:56,384 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:56,629 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:56,629 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:56,630 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(12)), (np.int64(3), np.int64(18)))
2025-04-11 17:45:56,637 [INFO] Final candidates: []
2025-04-11 17:45:56,637 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:56,640 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:56,640 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:56,640 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:56,640 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:56,640 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:56,640 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:56,640 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:56,640 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:56,643 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:56,643 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:56,643 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:56,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:56,726 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:56,726 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:56,726 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(10), np.int64(0)))
2025-04-11 17:45:56,733 [INFO] Final candidates: []
2025-04-11 17:45:56,733 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:56,736 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:56,736 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:56,736 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:56,736 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:56,740 [INFO] Final candidates: [(1, 6), (3, 8)]
2025-04-11 17:45:56,740 [INFO] Phase defense: Collected 1unique candidate(s):[((1, 6), (3, 8))]
2025-04-11 17:45:56,740 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:45:56,740 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:56,917 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:56,918 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:56,918 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(2), np.int64(17)))
2025-04-11 17:45:56,924 [INFO] Final candidates: []
2025-04-11 17:45:56,924 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:56,927 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:56,927 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:56,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:56,927 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:56,928 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:56,928 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:56,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:56,928 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:56,931 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:56,931 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:56,931 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:56,931 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:56,972 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:56,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:56,973 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(2)), (np.int64(16), np.int64(4)))
2025-04-11 17:45:56,981 [INFO] Final candidates: []
2025-04-11 17:45:56,981 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:56,987 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:56,987 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:56,987 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:56,987 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:56,987 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:56,987 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:56,987 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:56,987 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:56,990 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:56,990 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:56,990 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:56,990 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:57,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:57,166 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:57,166 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(14), np.int64(6)))
2025-04-11 17:45:57,172 [INFO] Final candidates: []
2025-04-11 17:45:57,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:57,176 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:57,176 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:57,176 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:57,176 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:57,176 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:57,176 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:57,176 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:57,176 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:57,179 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:57,179 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:57,179 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:57,179 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:57,364 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:57,365 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:57,365 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(3), np.int64(11)))
2025-04-11 17:45:57,377 [DEBUG] board coords: [(3, 11), (4, 10), (5, 9), (6, 8), (7, 7), (8, 6)]
2025-04-11 17:45:57,377 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:57,377 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (6, 8)]
2025-04-11 17:45:57,377 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 0 2 2] with coords [(3, 11), (4, 10), (5, 9), (6, 8), (7, 7), (8, 6)] triggers candidate.
2025-04-11 17:45:57,380 [INFO] Final candidates: [(4, 10), (6, 8)]
2025-04-11 17:45:57,380 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (6, 8))]
2025-04-11 17:45:57,380 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:57,389 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:57,389 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:57,389 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:57,390 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:57,390 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:57,390 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:57,390 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:57,390 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:57,393 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:57,393 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:57,393 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:57,393 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:57,438 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:57,438 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:57,438 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(12), np.int64(5)))
2025-04-11 17:45:57,444 [INFO] Final candidates: []
2025-04-11 17:45:57,444 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:57,448 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:57,448 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:57,448 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:57,448 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:57,448 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:57,448 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:57,448 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:57,448 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:57,451 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:57,451 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:57,451 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:57,451 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:57,556 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:57,557 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:57,557 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(13), np.int64(3)))
2025-04-11 17:45:57,563 [INFO] Final candidates: []
2025-04-11 17:45:57,563 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:57,566 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:57,566 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:57,566 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:57,567 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:57,567 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:57,567 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:57,567 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:57,567 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:57,570 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:57,570 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:57,570 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:57,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:57,764 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:57,764 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:57,765 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(1), np.int64(12)))
2025-04-11 17:45:57,765 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:57,765 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:45:57,765 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:45:57,765 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:57,765 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:57,765 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:45:57,765 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:45:57,765 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:57,771 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:45:57,771 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:45:57,771 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:57,774 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:57,774 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:57,774 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:57,775 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:57,775 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:57,775 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:57,775 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:57,775 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:57,778 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:57,778 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:57,778 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:57,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:57,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:57,843 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:57,843 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(3)), (np.int64(11), np.int64(4)))
2025-04-11 17:45:57,849 [INFO] Final candidates: []
2025-04-11 17:45:57,849 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:57,853 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:57,853 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:57,853 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:57,853 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:57,853 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:57,853 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:57,853 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:57,853 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:57,856 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:57,857 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:57,857 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:57,857 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:58,029 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:58,030 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:58,030 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(6), np.int64(12)))
2025-04-11 17:45:58,037 [INFO] Final candidates: []
2025-04-11 17:45:58,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:58,041 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:58,041 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:58,041 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:58,041 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:58,041 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:58,041 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:58,041 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:58,041 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:58,044 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:58,044 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:58,044 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:58,044 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:58,251 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:58,251 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:58,251 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(11), np.int64(3)))
2025-04-11 17:45:58,257 [INFO] Final candidates: []
2025-04-11 17:45:58,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:58,261 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:58,261 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:58,261 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:58,261 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:58,261 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:58,261 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:58,261 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:58,261 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:58,264 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:58,264 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:58,264 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:58,264 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:58,486 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:58,487 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:58,487 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(2)), (np.int64(14), np.int64(5)))
2025-04-11 17:45:58,487 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:58,487 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:45:58,487 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:45:58,487 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:58,493 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:45:58,493 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:45:58,493 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:58,497 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:58,497 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:58,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:58,497 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:58,497 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:58,497 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:58,497 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:58,497 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:58,500 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:58,500 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:58,500 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:58,500 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:58,653 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:58,653 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:58,654 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(15)), (np.int64(1), np.int64(9)))
2025-04-11 17:45:58,662 [INFO] Final candidates: []
2025-04-11 17:45:58,663 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:58,668 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:58,668 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:58,668 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:58,668 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:58,669 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:58,669 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:58,669 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:58,669 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:58,672 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:58,672 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:58,672 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:58,672 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:58,852 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:58,852 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:58,853 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(9)), (np.int64(1), np.int64(11)))
2025-04-11 17:45:58,859 [INFO] Final candidates: []
2025-04-11 17:45:58,859 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:58,862 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:58,862 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:58,862 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:58,862 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:58,863 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:58,863 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:58,863 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:58,863 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:58,866 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:58,866 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:58,866 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:58,866 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:59,104 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:59,105 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:59,105 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(13)), (np.int64(6), np.int64(14)))
2025-04-11 17:45:59,111 [INFO] Final candidates: []
2025-04-11 17:45:59,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:59,116 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:59,116 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:59,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:59,116 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:59,116 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:59,116 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:59,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:59,116 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:59,119 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:59,119 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:59,119 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:59,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:59,162 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:59,162 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:59,163 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(4)), (np.int64(3), np.int64(13)))
2025-04-11 17:45:59,170 [INFO] Final candidates: []
2025-04-11 17:45:59,170 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:59,174 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:59,174 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:59,174 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:59,174 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:59,174 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:59,174 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:59,174 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:59,174 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:59,177 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:59,177 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:59,177 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:59,177 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:59,281 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:59,282 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:59,282 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(12), np.int64(5)))
2025-04-11 17:45:59,290 [INFO] Final candidates: []
2025-04-11 17:45:59,290 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:59,293 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:59,293 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:59,293 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:59,293 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:59,293 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:59,293 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:59,293 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:59,293 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:59,296 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:59,296 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:59,296 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:59,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:59,433 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:59,433 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:59,434 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(4)), (np.int64(11), np.int64(1)))
2025-04-11 17:45:59,435 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:45:59,435 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:45:59,435 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:45:59,435 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:45:59,440 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:45:59,440 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:45:59,440 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:45:59,444 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:59,444 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:59,444 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:59,444 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:59,444 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:59,444 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:59,444 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:59,444 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:59,449 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:59,449 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:59,449 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:59,449 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:59,571 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:59,572 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:59,572 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(11)), (np.int64(0), np.int64(6)))
2025-04-11 17:45:59,572 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:45:59,572 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:45:59,572 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:45:59,572 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:45:59,572 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:45:59,572 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:45:59,572 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:45:59,572 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:45:59,579 [INFO] Final candidates: [(0, 2), (0, 5), (0, 8)]
2025-04-11 17:45:59,579 [INFO] Phase win: Collected 3unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (0, 8)), ((0, 2), (0, 5))]
2025-04-11 17:45:59,579 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:45:59,584 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:59,584 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:59,584 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:59,584 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:59,584 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:59,584 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:59,584 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:59,584 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:59,587 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:59,587 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:59,587 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:59,587 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:59,706 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:45:59,706 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:59,706 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(7)))
2025-04-11 17:45:59,712 [INFO] Final candidates: []
2025-04-11 17:45:59,712 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:59,716 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:59,716 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:59,716 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:59,716 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:59,716 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:59,716 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:59,716 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:59,716 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:59,719 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:59,719 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:59,719 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:59,719 [INFO] Default policy: Starting random playout.
2025-04-11 17:45:59,867 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:45:59,868 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:45:59,868 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(3), np.int64(10)))
2025-04-11 17:45:59,874 [INFO] Final candidates: []
2025-04-11 17:45:59,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:45:59,877 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:45:59,877 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:45:59,877 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:45:59,878 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:45:59,878 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:45:59,878 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:45:59,878 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:45:59,878 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:45:59,881 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:45:59,881 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:45:59,881 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:45:59,881 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:00,045 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:00,045 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:00,045 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:00,051 [INFO] Final candidates: []
2025-04-11 17:46:00,051 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,057 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:46:00,057 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:00,057 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:46:00,057 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:46:00,057 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:46:00,057 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:46:00,057 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:46:00,057 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:46:00,063 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:46:00,063 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:46:00,064 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:46:00,064 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:00,096 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:00,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:00,096 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(1)), (np.int64(0), np.int64(6)))
2025-04-11 17:46:00,096 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:46:00,097 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:46:00,097 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:46:00,097 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:46:00,097 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:46:00,097 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:46:00,097 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:46:00,097 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:46:00,103 [INFO] Final candidates: [(0, 2), (0, 5), (0, 8)]
2025-04-11 17:46:00,103 [INFO] Phase win: Collected 3unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (0, 8)), ((0, 2), (0, 5))]
2025-04-11 17:46:00,103 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:46:00,107 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:46:00,107 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:00,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:46:00,107 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:46:00,107 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:46:00,107 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:46:00,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:46:00,107 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:46:00,110 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:46:00,110 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:46:00,110 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:46:00,110 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:00,181 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:00,181 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:00,182 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:00,189 [INFO] Final candidates: []
2025-04-11 17:46:00,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,192 [DEBUG] board coords: [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)]
2025-04-11 17:46:00,192 [DEBUG] board values[np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:00,192 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 6), (3, 8)]
2025-04-11 17:46:00,193 [DEBUG] check_window_intermediate_custom: For L=6, window [0 1 0 1 1 1] with coords [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10), (6, 11)] triggers candidate.
2025-04-11 17:46:00,193 [DEBUG] board coords: [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)]
2025-04-11 17:46:00,193 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:46:00,193 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 8), (7, 12)]
2025-04-11 17:46:00,193 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(2, 7), (3, 8), (4, 9), (5, 10), (6, 11), (7, 12)] triggers candidate.
2025-04-11 17:46:00,196 [INFO] Final candidates: [(1, 6), (3, 8), (7, 12)]
2025-04-11 17:46:00,196 [INFO] Phase defense: Collected 3unique candidate(s):[((1, 6), (7, 12)), ((1, 6), (3, 8)), ((3, 8), (7, 12))]
2025-04-11 17:46:00,196 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:46:00,196 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:00,248 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:00,248 [INFO] MCTS: Search finished. Best move selected with 2 visits.
2025-04-11 17:46:00,248 [INFO] MCTS (defense candidates) selected move: M9,N8
2025-04-11 17:46:00,568 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:46:00,575 [INFO] Final candidates: []
2025-04-11 17:46:00,575 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,581 [INFO] Final candidates: []
2025-04-11 17:46:00,581 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,581 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:46:00,583 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:46:00,583 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(10), np.int64(11)))
2025-04-11 17:46:00,589 [INFO] Final candidates: []
2025-04-11 17:46:00,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,596 [INFO] Final candidates: []
2025-04-11 17:46:00,596 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,597 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:46:00,597 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:00,806 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:00,806 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(11), np.int64(4)))
2025-04-11 17:46:00,812 [INFO] Final candidates: []
2025-04-11 17:46:00,812 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,819 [INFO] Final candidates: []
2025-04-11 17:46:00,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:00,878 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:00,878 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(12), np.int64(5)))
2025-04-11 17:46:00,882 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:00,882 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:46:00,882 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (13, 5)]
2025-04-11 17:46:00,882 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:00,891 [INFO] Final candidates: [(13, 5), (11, 5)]
2025-04-11 17:46:00,891 [INFO] Phase win: Collected 1unique candidate(s):[((13, 5), (11, 5))]
2025-04-11 17:46:00,891 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:00,904 [INFO] Final candidates: []
2025-04-11 17:46:00,904 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:00,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:01,046 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:01,047 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:01,053 [INFO] Final candidates: []
2025-04-11 17:46:01,053 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,059 [INFO] Final candidates: []
2025-04-11 17:46:01,059 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,061 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:01,178 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:01,178 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(12), np.int64(2)))
2025-04-11 17:46:01,184 [INFO] Final candidates: []
2025-04-11 17:46:01,185 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,191 [INFO] Final candidates: []
2025-04-11 17:46:01,191 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,192 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:01,501 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:01,502 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(0), np.int64(17)))
2025-04-11 17:46:01,517 [INFO] Final candidates: []
2025-04-11 17:46:01,517 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,523 [INFO] Final candidates: []
2025-04-11 17:46:01,524 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,525 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:01,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:01,554 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(4)), (np.int64(10), np.int64(11)))
2025-04-11 17:46:01,560 [INFO] Final candidates: []
2025-04-11 17:46:01,560 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,566 [INFO] Final candidates: []
2025-04-11 17:46:01,566 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,568 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:01,780 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:01,780 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:01,787 [INFO] Final candidates: []
2025-04-11 17:46:01,787 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,793 [INFO] Final candidates: []
2025-04-11 17:46:01,793 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,795 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:01,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:01,970 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(6), np.int64(10)))
2025-04-11 17:46:01,976 [INFO] Final candidates: []
2025-04-11 17:46:01,977 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,983 [INFO] Final candidates: []
2025-04-11 17:46:01,983 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:01,984 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:02,137 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:02,137 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(5), np.int64(12)))
2025-04-11 17:46:02,143 [INFO] Final candidates: []
2025-04-11 17:46:02,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,149 [INFO] Final candidates: []
2025-04-11 17:46:02,149 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,151 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:02,273 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:02,273 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(13), np.int64(2)))
2025-04-11 17:46:02,279 [INFO] Final candidates: []
2025-04-11 17:46:02,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,286 [INFO] Final candidates: []
2025-04-11 17:46:02,286 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,287 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:02,540 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:02,541 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(18)), (np.int64(4), np.int64(13)))
2025-04-11 17:46:02,547 [INFO] Final candidates: []
2025-04-11 17:46:02,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,553 [INFO] Final candidates: []
2025-04-11 17:46:02,553 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,554 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:02,707 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:02,707 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(3), np.int64(10)))
2025-04-11 17:46:02,713 [INFO] Final candidates: []
2025-04-11 17:46:02,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,720 [INFO] Final candidates: []
2025-04-11 17:46:02,720 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,721 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:02,826 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:02,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(3)), (np.int64(4), np.int64(13)))
2025-04-11 17:46:02,833 [INFO] Final candidates: []
2025-04-11 17:46:02,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,839 [INFO] Final candidates: []
2025-04-11 17:46:02,839 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:02,840 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,002 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:03,003 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(6), np.int64(12)))
2025-04-11 17:46:03,009 [INFO] Final candidates: []
2025-04-11 17:46:03,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,015 [INFO] Final candidates: []
2025-04-11 17:46:03,015 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,017 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:03,131 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(1), np.int64(14)))
2025-04-11 17:46:03,138 [INFO] Final candidates: []
2025-04-11 17:46:03,138 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,145 [INFO] Final candidates: []
2025-04-11 17:46:03,145 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,146 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:03,314 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(13), np.int64(0)))
2025-04-11 17:46:03,320 [INFO] Final candidates: []
2025-04-11 17:46:03,320 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,326 [INFO] Final candidates: []
2025-04-11 17:46:03,326 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,328 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,449 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:03,449 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(1), np.int64(2)))
2025-04-11 17:46:03,455 [INFO] Final candidates: []
2025-04-11 17:46:03,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,461 [INFO] Final candidates: []
2025-04-11 17:46:03,461 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,463 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,566 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:03,566 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:03,572 [INFO] Final candidates: []
2025-04-11 17:46:03,572 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,578 [INFO] Final candidates: []
2025-04-11 17:46:03,578 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,580 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:03,700 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(3)), (np.int64(15), np.int64(2)))
2025-04-11 17:46:03,706 [INFO] Final candidates: []
2025-04-11 17:46:03,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,713 [INFO] Final candidates: []
2025-04-11 17:46:03,713 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,714 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,818 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:03,819 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:03,825 [INFO] Final candidates: []
2025-04-11 17:46:03,825 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,831 [INFO] Final candidates: []
2025-04-11 17:46:03,831 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,832 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,874 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:03,874 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(5)), (np.int64(0), np.int64(15)))
2025-04-11 17:46:03,881 [INFO] Final candidates: []
2025-04-11 17:46:03,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,891 [INFO] Final candidates: []
2025-04-11 17:46:03,891 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:03,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:03,998 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:03,998 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(0), np.int64(12)))
2025-04-11 17:46:04,004 [INFO] Final candidates: []
2025-04-11 17:46:04,004 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,011 [INFO] Final candidates: []
2025-04-11 17:46:04,011 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,012 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:04,211 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:04,212 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(2)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:04,218 [INFO] Final candidates: []
2025-04-11 17:46:04,218 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,224 [INFO] Final candidates: []
2025-04-11 17:46:04,224 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,226 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:04,341 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:04,341 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(6), np.int64(0)))
2025-04-11 17:46:04,348 [INFO] Final candidates: []
2025-04-11 17:46:04,348 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,354 [INFO] Final candidates: []
2025-04-11 17:46:04,354 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,355 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:04,450 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:04,450 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(1), np.int64(13)))
2025-04-11 17:46:04,457 [INFO] Final candidates: []
2025-04-11 17:46:04,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,466 [INFO] Final candidates: []
2025-04-11 17:46:04,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,467 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:04,665 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:04,665 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(3), np.int64(18)))
2025-04-11 17:46:04,672 [INFO] Final candidates: []
2025-04-11 17:46:04,672 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,678 [INFO] Final candidates: []
2025-04-11 17:46:04,678 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,680 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:04,741 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:04,742 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:04,748 [INFO] Final candidates: []
2025-04-11 17:46:04,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,754 [INFO] Final candidates: []
2025-04-11 17:46:04,754 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:04,755 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,016 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:05,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(17), np.int64(3)))
2025-04-11 17:46:05,023 [INFO] Final candidates: []
2025-04-11 17:46:05,023 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,029 [INFO] Final candidates: []
2025-04-11 17:46:05,029 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,031 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,091 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:05,092 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(4), np.int64(8)))
2025-04-11 17:46:05,100 [INFO] Final candidates: []
2025-04-11 17:46:05,100 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,106 [INFO] Final candidates: []
2025-04-11 17:46:05,106 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,180 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:05,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(5)), (np.int64(1), np.int64(14)))
2025-04-11 17:46:05,182 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:05,182 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:46:05,182 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (12, 5)]
2025-04-11 17:46:05,182 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:05,187 [INFO] Final candidates: [(12, 5), (11, 5)]
2025-04-11 17:46:05,187 [INFO] Phase win: Collected 1unique candidate(s):[((12, 5), (11, 5))]
2025-04-11 17:46:05,187 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:05,194 [INFO] Final candidates: []
2025-04-11 17:46:05,195 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,196 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,330 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:05,330 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(0), np.int64(12)))
2025-04-11 17:46:05,338 [INFO] Final candidates: []
2025-04-11 17:46:05,338 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,345 [INFO] Final candidates: []
2025-04-11 17:46:05,345 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,346 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,395 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:05,396 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(14)))
2025-04-11 17:46:05,402 [INFO] Final candidates: []
2025-04-11 17:46:05,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,410 [INFO] Final candidates: []
2025-04-11 17:46:05,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,415 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,568 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:05,568 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(8), np.int64(1)))
2025-04-11 17:46:05,571 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:05,571 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:46:05,571 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 1), (11, 1)]
2025-04-11 17:46:05,571 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:05,576 [INFO] Final candidates: [(11, 1), (9, 1)]
2025-04-11 17:46:05,576 [INFO] Phase win: Collected 1unique candidate(s):[((11, 1), (9, 1))]
2025-04-11 17:46:05,576 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:05,583 [INFO] Final candidates: []
2025-04-11 17:46:05,583 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,584 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,640 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:05,641 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(7), np.int64(0)))
2025-04-11 17:46:05,647 [INFO] Final candidates: []
2025-04-11 17:46:05,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,654 [INFO] Final candidates: []
2025-04-11 17:46:05,654 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:05,861 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:05,862 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(9)))
2025-04-11 17:46:05,877 [INFO] Final candidates: []
2025-04-11 17:46:05,877 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,894 [INFO] Final candidates: []
2025-04-11 17:46:05,894 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:05,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:06,157 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:06,157 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(7), np.int64(11)))
2025-04-11 17:46:06,164 [INFO] Final candidates: []
2025-04-11 17:46:06,164 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,177 [INFO] Final candidates: []
2025-04-11 17:46:06,177 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,178 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:06,318 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:06,318 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(1), np.int64(5)))
2025-04-11 17:46:06,324 [INFO] Final candidates: []
2025-04-11 17:46:06,324 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,330 [INFO] Final candidates: []
2025-04-11 17:46:06,330 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,332 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:06,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:06,406 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(0), np.int64(12)))
2025-04-11 17:46:06,412 [INFO] Final candidates: []
2025-04-11 17:46:06,412 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,419 [INFO] Final candidates: []
2025-04-11 17:46:06,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,420 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:06,595 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:06,596 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(9)), (np.int64(3), np.int64(11)))
2025-04-11 17:46:06,602 [INFO] Final candidates: []
2025-04-11 17:46:06,602 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,608 [INFO] Final candidates: []
2025-04-11 17:46:06,608 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,610 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:06,712 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:06,713 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(8), np.int64(1)))
2025-04-11 17:46:06,715 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:06,715 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:46:06,715 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 1), (11, 1)]
2025-04-11 17:46:06,715 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:06,720 [INFO] Final candidates: [(11, 1), (9, 1)]
2025-04-11 17:46:06,720 [INFO] Phase win: Collected 1unique candidate(s):[((11, 1), (9, 1))]
2025-04-11 17:46:06,720 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:06,726 [INFO] Final candidates: []
2025-04-11 17:46:06,726 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,728 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:06,965 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:06,965 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:06,971 [INFO] Final candidates: []
2025-04-11 17:46:06,971 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,978 [INFO] Final candidates: []
2025-04-11 17:46:06,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:06,979 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:07,152 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:07,153 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(0)), (np.int64(11), np.int64(3)))
2025-04-11 17:46:07,159 [INFO] Final candidates: []
2025-04-11 17:46:07,159 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,166 [INFO] Final candidates: []
2025-04-11 17:46:07,166 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,167 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:07,288 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:07,288 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(6), np.int64(10)))
2025-04-11 17:46:07,295 [INFO] Final candidates: []
2025-04-11 17:46:07,295 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,301 [INFO] Final candidates: []
2025-04-11 17:46:07,301 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:07,461 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:07,462 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(8), np.int64(1)))
2025-04-11 17:46:07,463 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:07,463 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:46:07,463 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 1), (11, 1)]
2025-04-11 17:46:07,464 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:07,464 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:07,464 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:46:07,464 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 5), (13, 5)]
2025-04-11 17:46:07,464 [DEBUG] check_window_intermediate_custom (only one inserted(12, 5)): For L=6, window [2 2 2 2 0 0] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:07,468 [INFO] Final candidates: [(11, 1), (12, 5), (9, 1)]
2025-04-11 17:46:07,468 [INFO] Phase win: Collected 3unique candidate(s):[((11, 1), (12, 5)), ((11, 1), (9, 1)), ((12, 5), (9, 1))]
2025-04-11 17:46:07,468 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:46:07,475 [INFO] Final candidates: []
2025-04-11 17:46:07,475 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,476 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:07,550 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:07,550 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:07,557 [INFO] Final candidates: []
2025-04-11 17:46:07,557 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,563 [INFO] Final candidates: []
2025-04-11 17:46:07,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:07,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:07,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:07,704 [INFO] Final candidates: []
2025-04-11 17:46:07,704 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,711 [INFO] Final candidates: []
2025-04-11 17:46:07,711 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:07,817 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:07,817 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(8), np.int64(10)))
2025-04-11 17:46:07,823 [INFO] Final candidates: []
2025-04-11 17:46:07,823 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,830 [INFO] Final candidates: []
2025-04-11 17:46:07,830 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:07,831 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,009 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:08,010 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(17), np.int64(4)))
2025-04-11 17:46:08,016 [INFO] Final candidates: []
2025-04-11 17:46:08,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,022 [INFO] Final candidates: []
2025-04-11 17:46:08,022 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,024 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,069 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:08,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(3), np.int64(17)))
2025-04-11 17:46:08,076 [INFO] Final candidates: []
2025-04-11 17:46:08,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,084 [INFO] Final candidates: []
2025-04-11 17:46:08,084 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,085 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,138 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:08,138 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(18)), (np.int64(9), np.int64(7)))
2025-04-11 17:46:08,144 [INFO] Final candidates: []
2025-04-11 17:46:08,144 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,151 [INFO] Final candidates: []
2025-04-11 17:46:08,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,152 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:46:08,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,277 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:08,277 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(14), np.int64(6)))
2025-04-11 17:46:08,283 [INFO] Final candidates: []
2025-04-11 17:46:08,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,289 [INFO] Final candidates: []
2025-04-11 17:46:08,289 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,291 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,528 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:08,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(9), np.int64(0)))
2025-04-11 17:46:08,535 [INFO] Final candidates: []
2025-04-11 17:46:08,535 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,541 [INFO] Final candidates: []
2025-04-11 17:46:08,541 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,595 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:08,595 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(4)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:08,604 [INFO] Final candidates: []
2025-04-11 17:46:08,604 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,614 [INFO] Final candidates: []
2025-04-11 17:46:08,614 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,616 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,735 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:08,736 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(12), np.int64(3)))
2025-04-11 17:46:08,744 [INFO] Final candidates: []
2025-04-11 17:46:08,744 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,752 [INFO] Final candidates: []
2025-04-11 17:46:08,752 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,753 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:08,942 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:08,943 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:08,949 [INFO] Final candidates: []
2025-04-11 17:46:08,949 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,955 [INFO] Final candidates: []
2025-04-11 17:46:08,955 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:08,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,136 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:09,136 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(13), np.int64(4)))
2025-04-11 17:46:09,142 [INFO] Final candidates: []
2025-04-11 17:46:09,142 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,149 [INFO] Final candidates: []
2025-04-11 17:46:09,149 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,150 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,234 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:09,235 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(1), np.int64(16)))
2025-04-11 17:46:09,241 [INFO] Final candidates: []
2025-04-11 17:46:09,241 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,247 [INFO] Final candidates: []
2025-04-11 17:46:09,247 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,249 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,287 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:09,287 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(11), np.int64(6)))
2025-04-11 17:46:09,294 [INFO] Final candidates: []
2025-04-11 17:46:09,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,304 [INFO] Final candidates: []
2025-04-11 17:46:09,304 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,403 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:09,404 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(4), np.int64(6)))
2025-04-11 17:46:09,410 [INFO] Final candidates: []
2025-04-11 17:46:09,410 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,416 [INFO] Final candidates: []
2025-04-11 17:46:09,416 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,418 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,454 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:09,454 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(3)), (np.int64(14), np.int64(1)))
2025-04-11 17:46:09,460 [INFO] Final candidates: []
2025-04-11 17:46:09,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,466 [INFO] Final candidates: []
2025-04-11 17:46:09,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,686 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:09,686 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(17)), (np.int64(14), np.int64(6)))
2025-04-11 17:46:09,692 [INFO] Final candidates: []
2025-04-11 17:46:09,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,699 [INFO] Final candidates: []
2025-04-11 17:46:09,699 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,700 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,802 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:09,802 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:46:09,808 [INFO] Final candidates: []
2025-04-11 17:46:09,809 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,822 [INFO] Final candidates: []
2025-04-11 17:46:09,822 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:09,885 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:09,885 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(4), np.int64(13)))
2025-04-11 17:46:09,891 [INFO] Final candidates: []
2025-04-11 17:46:09,891 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,897 [INFO] Final candidates: []
2025-04-11 17:46:09,897 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:09,899 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:10,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:10,073 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(9), np.int64(11)))
2025-04-11 17:46:10,079 [INFO] Final candidates: []
2025-04-11 17:46:10,079 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,086 [INFO] Final candidates: []
2025-04-11 17:46:10,086 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,087 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:10,126 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:10,126 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:10,132 [INFO] Final candidates: []
2025-04-11 17:46:10,132 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,140 [INFO] Final candidates: []
2025-04-11 17:46:10,140 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,143 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:10,293 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:10,293 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(13), np.int64(4)))
2025-04-11 17:46:10,300 [INFO] Final candidates: []
2025-04-11 17:46:10,300 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,306 [INFO] Final candidates: []
2025-04-11 17:46:10,306 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,307 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:10,546 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:10,547 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(2)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:10,553 [INFO] Final candidates: []
2025-04-11 17:46:10,553 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,559 [INFO] Final candidates: []
2025-04-11 17:46:10,559 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,561 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:10,652 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:10,653 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(0), np.int64(2)))
2025-04-11 17:46:10,653 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:46:10,653 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:46:10,653 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:46:10,653 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:46:10,659 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:46:10,659 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:46:10,659 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:10,665 [INFO] Final candidates: []
2025-04-11 17:46:10,666 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,667 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:10,756 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:10,756 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(16), np.int64(2)))
2025-04-11 17:46:10,763 [INFO] Final candidates: []
2025-04-11 17:46:10,763 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,769 [INFO] Final candidates: []
2025-04-11 17:46:10,769 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:10,897 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:10,897 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(8), np.int64(12)))
2025-04-11 17:46:10,903 [INFO] Final candidates: []
2025-04-11 17:46:10,903 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,910 [INFO] Final candidates: []
2025-04-11 17:46:10,910 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:10,911 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:11,023 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:11,023 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(17), np.int64(4)))
2025-04-11 17:46:11,023 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:46:11,023 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:46:11,023 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:46:11,023 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:46:11,023 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:46:11,023 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:46:11,023 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:46:11,023 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:46:11,030 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:46:11,030 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:46:11,030 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:46:11,036 [INFO] Final candidates: []
2025-04-11 17:46:11,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,038 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:11,246 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:11,246 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(4), np.int64(18)))
2025-04-11 17:46:11,252 [INFO] Final candidates: []
2025-04-11 17:46:11,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,259 [INFO] Final candidates: []
2025-04-11 17:46:11,259 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,261 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:11,592 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:11,592 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:11,605 [INFO] Final candidates: []
2025-04-11 17:46:11,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,618 [INFO] Final candidates: []
2025-04-11 17:46:11,618 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,621 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:11,744 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:11,745 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(2), np.int64(11)))
2025-04-11 17:46:11,751 [INFO] Final candidates: []
2025-04-11 17:46:11,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,760 [INFO] Final candidates: []
2025-04-11 17:46:11,761 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,762 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:11,963 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:11,964 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(8), np.int64(10)))
2025-04-11 17:46:11,972 [INFO] Final candidates: []
2025-04-11 17:46:11,972 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,978 [INFO] Final candidates: []
2025-04-11 17:46:11,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:11,979 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:12,151 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:12,151 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(1), np.int64(9)))
2025-04-11 17:46:12,157 [INFO] Final candidates: []
2025-04-11 17:46:12,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,172 [INFO] Final candidates: []
2025-04-11 17:46:12,172 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,176 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:12,385 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:12,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(4), np.int64(11)))
2025-04-11 17:46:12,392 [INFO] Final candidates: []
2025-04-11 17:46:12,392 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,398 [INFO] Final candidates: []
2025-04-11 17:46:12,398 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,400 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:12,593 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:12,593 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(12), np.int64(3)))
2025-04-11 17:46:12,599 [INFO] Final candidates: []
2025-04-11 17:46:12,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,606 [INFO] Final candidates: []
2025-04-11 17:46:12,606 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,607 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:12,763 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:12,763 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(16), np.int64(4)))
2025-04-11 17:46:12,771 [INFO] Final candidates: []
2025-04-11 17:46:12,771 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,778 [INFO] Final candidates: []
2025-04-11 17:46:12,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,779 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:12,876 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:12,876 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(8), np.int64(8)))
2025-04-11 17:46:12,882 [INFO] Final candidates: []
2025-04-11 17:46:12,882 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,889 [INFO] Final candidates: []
2025-04-11 17:46:12,889 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:12,890 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:13,019 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:13,020 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(4), np.int64(5)))
2025-04-11 17:46:13,026 [INFO] Final candidates: []
2025-04-11 17:46:13,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,032 [INFO] Final candidates: []
2025-04-11 17:46:13,033 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,034 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:13,084 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:13,084 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(11), np.int64(3)))
2025-04-11 17:46:13,090 [INFO] Final candidates: []
2025-04-11 17:46:13,090 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,096 [INFO] Final candidates: []
2025-04-11 17:46:13,096 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,098 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:13,237 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:13,237 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 17:46:13,237 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:46:13,237 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:46:13,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:46:13,237 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:46:13,237 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:46:13,237 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:46:13,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:46:13,237 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:46:13,243 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:46:13,243 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:46:13,243 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:46:13,250 [INFO] Final candidates: []
2025-04-11 17:46:13,250 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,251 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:13,325 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:13,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(6), np.int64(10)))
2025-04-11 17:46:13,333 [INFO] Final candidates: []
2025-04-11 17:46:13,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,342 [INFO] Final candidates: []
2025-04-11 17:46:13,342 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,343 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:13,494 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:13,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(3)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:13,500 [INFO] Final candidates: []
2025-04-11 17:46:13,500 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,507 [INFO] Final candidates: []
2025-04-11 17:46:13,507 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,508 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:13,644 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:13,644 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(16), np.int64(2)))
2025-04-11 17:46:13,653 [INFO] Final candidates: []
2025-04-11 17:46:13,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,660 [INFO] Final candidates: []
2025-04-11 17:46:13,660 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,661 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:13,815 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:13,815 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(0), np.int64(8)))
2025-04-11 17:46:13,815 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:46:13,815 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:46:13,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:46:13,815 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:46:13,821 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:46:13,821 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:46:13,821 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:13,828 [INFO] Final candidates: []
2025-04-11 17:46:13,828 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:13,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,060 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:14,060 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(4), np.int64(6)))
2025-04-11 17:46:14,066 [INFO] Final candidates: []
2025-04-11 17:46:14,066 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,073 [INFO] Final candidates: []
2025-04-11 17:46:14,073 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,074 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,133 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:14,133 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:14,138 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:46:14,138 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:46:14,138 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (7, 7)]
2025-04-11 17:46:14,138 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:46:14,139 [INFO] Final candidates: [(4, 10), (7, 7)]
2025-04-11 17:46:14,139 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (7, 7))]
2025-04-11 17:46:14,139 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:14,146 [INFO] Final candidates: []
2025-04-11 17:46:14,146 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,147 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,265 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:14,265 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(11), np.int64(4)))
2025-04-11 17:46:14,265 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:46:14,265 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:46:14,265 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:46:14,265 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:46:14,265 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:46:14,265 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:46:14,265 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:46:14,266 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:46:14,272 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:46:14,272 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:46:14,272 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:46:14,278 [INFO] Final candidates: []
2025-04-11 17:46:14,278 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,451 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:14,452 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(6)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:14,458 [INFO] Final candidates: []
2025-04-11 17:46:14,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,464 [INFO] Final candidates: []
2025-04-11 17:46:14,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,645 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:14,646 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(9), np.int64(0)))
2025-04-11 17:46:14,652 [INFO] Final candidates: []
2025-04-11 17:46:14,652 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,658 [INFO] Final candidates: []
2025-04-11 17:46:14,658 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,660 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,720 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:14,720 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(14), np.int64(5)))
2025-04-11 17:46:14,726 [INFO] Final candidates: []
2025-04-11 17:46:14,727 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,733 [INFO] Final candidates: []
2025-04-11 17:46:14,733 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,734 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:14,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(14), np.int64(2)))
2025-04-11 17:46:14,870 [INFO] Final candidates: []
2025-04-11 17:46:14,870 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,876 [INFO] Final candidates: []
2025-04-11 17:46:14,876 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,877 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:14,962 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:14,962 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(4), np.int64(16)))
2025-04-11 17:46:14,968 [INFO] Final candidates: []
2025-04-11 17:46:14,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,974 [INFO] Final candidates: []
2025-04-11 17:46:14,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:14,976 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:15,060 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:15,060 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(11), np.int64(6)))
2025-04-11 17:46:15,066 [INFO] Final candidates: []
2025-04-11 17:46:15,066 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,072 [INFO] Final candidates: []
2025-04-11 17:46:15,072 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,074 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:15,242 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:15,242 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(6), np.int64(14)))
2025-04-11 17:46:15,248 [INFO] Final candidates: []
2025-04-11 17:46:15,248 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,255 [INFO] Final candidates: []
2025-04-11 17:46:15,255 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,256 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:15,497 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:15,497 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(0), np.int64(17)))
2025-04-11 17:46:15,503 [INFO] Final candidates: []
2025-04-11 17:46:15,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,509 [INFO] Final candidates: []
2025-04-11 17:46:15,509 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,511 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:15,638 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:15,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(1), np.int64(9)))
2025-04-11 17:46:15,645 [INFO] Final candidates: []
2025-04-11 17:46:15,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,652 [INFO] Final candidates: []
2025-04-11 17:46:15,652 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:15,653 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:15,748 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:15,748 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:46:15,748 [INFO] MCTS selected move: G11,M11
2025-04-11 17:46:15,748 [INFO] ===============NEW MOVE================
2025-04-11 17:46:16,041 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:46:16,048 [INFO] Final candidates: []
2025-04-11 17:46:16,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,054 [INFO] Final candidates: []
2025-04-11 17:46:16,054 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,054 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:46:16,056 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:46:16,056 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(4)), (np.int64(0), np.int64(15)))
2025-04-11 17:46:16,062 [INFO] Final candidates: []
2025-04-11 17:46:16,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,068 [INFO] Final candidates: []
2025-04-11 17:46:16,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,070 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:46:16,070 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:16,156 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:16,156 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(6), np.int64(12)))
2025-04-11 17:46:16,159 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:46:16,159 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:46:16,159 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (5, 12)]
2025-04-11 17:46:16,159 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:46:16,163 [INFO] Final candidates: [(3, 12), (5, 12)]
2025-04-11 17:46:16,163 [INFO] Phase win: Collected 1unique candidate(s):[((3, 12), (5, 12))]
2025-04-11 17:46:16,163 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:16,169 [INFO] Final candidates: []
2025-04-11 17:46:16,169 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,170 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:16,245 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:16,245 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(4), np.int64(16)))
2025-04-11 17:46:16,252 [INFO] Final candidates: []
2025-04-11 17:46:16,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,257 [INFO] Final candidates: []
2025-04-11 17:46:16,257 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:16,322 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:16,323 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(12), np.int64(0)))
2025-04-11 17:46:16,329 [INFO] Final candidates: []
2025-04-11 17:46:16,329 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,335 [INFO] Final candidates: []
2025-04-11 17:46:16,335 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:16,512 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:16,512 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(13), np.int64(4)))
2025-04-11 17:46:16,519 [INFO] Final candidates: []
2025-04-11 17:46:16,519 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,525 [INFO] Final candidates: []
2025-04-11 17:46:16,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,526 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:16,658 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:16,659 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(18)), (np.int64(16), np.int64(2)))
2025-04-11 17:46:16,665 [INFO] Final candidates: []
2025-04-11 17:46:16,665 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,671 [INFO] Final candidates: []
2025-04-11 17:46:16,671 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,673 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:16,918 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:16,919 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(13), np.int64(0)))
2025-04-11 17:46:16,925 [INFO] Final candidates: []
2025-04-11 17:46:16,925 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,931 [INFO] Final candidates: []
2025-04-11 17:46:16,931 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:16,933 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:17,215 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:17,216 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(12), np.int64(3)))
2025-04-11 17:46:17,222 [INFO] Final candidates: []
2025-04-11 17:46:17,222 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:17,228 [INFO] Final candidates: []
2025-04-11 17:46:17,228 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:17,229 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:17,324 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:17,324 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(17), np.int64(2)))
2025-04-11 17:46:17,328 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:46:17,328 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:46:17,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:46:17,328 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:46:17,331 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:46:17,331 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:46:17,331 [INFO] Phase win: Collected 10unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:46:17,331 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:46:17,337 [INFO] Final candidates: []
2025-04-11 17:46:17,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:17,338 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:17,630 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:17,630 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(0), np.int64(15)))
2025-04-11 17:46:17,636 [INFO] Final candidates: []
2025-04-11 17:46:17,636 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:17,642 [INFO] Final candidates: []
2025-04-11 17:46:17,642 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:17,644 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:17,869 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:17,869 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(8)), (np.int64(1), np.int64(6)))
2025-04-11 17:46:17,875 [INFO] Final candidates: []
2025-04-11 17:46:17,875 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:17,881 [INFO] Final candidates: []
2025-04-11 17:46:17,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:17,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:18,202 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:18,203 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(3), np.int64(9)))
2025-04-11 17:46:18,209 [INFO] Final candidates: []
2025-04-11 17:46:18,209 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,215 [INFO] Final candidates: []
2025-04-11 17:46:18,215 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,216 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:18,378 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:18,378 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(4)), (np.int64(10), np.int64(7)))
2025-04-11 17:46:18,384 [INFO] Final candidates: []
2025-04-11 17:46:18,384 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,390 [INFO] Final candidates: []
2025-04-11 17:46:18,390 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:18,421 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:18,422 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(12), np.int64(11)))
2025-04-11 17:46:18,429 [INFO] Final candidates: []
2025-04-11 17:46:18,429 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,434 [INFO] Final candidates: []
2025-04-11 17:46:18,435 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:18,651 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:18,652 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(10)), (np.int64(14), np.int64(6)))
2025-04-11 17:46:18,658 [INFO] Final candidates: []
2025-04-11 17:46:18,658 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,664 [INFO] Final candidates: []
2025-04-11 17:46:18,664 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,666 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:18,845 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:18,845 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(18)), (np.int64(11), np.int64(6)))
2025-04-11 17:46:18,852 [INFO] Final candidates: []
2025-04-11 17:46:18,852 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,857 [INFO] Final candidates: []
2025-04-11 17:46:18,858 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:18,859 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:19,069 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:19,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(6), np.int64(0)))
2025-04-11 17:46:19,076 [INFO] Final candidates: []
2025-04-11 17:46:19,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,082 [INFO] Final candidates: []
2025-04-11 17:46:19,082 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,084 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:19,169 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:19,169 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(5)), (np.int64(11), np.int64(6)))
2025-04-11 17:46:19,175 [INFO] Final candidates: []
2025-04-11 17:46:19,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,181 [INFO] Final candidates: []
2025-04-11 17:46:19,181 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,183 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:19,230 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:19,231 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(3), np.int64(11)))
2025-04-11 17:46:19,234 [DEBUG] board coords: [(7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13)]
2025-04-11 17:46:19,234 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:46:19,234 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 12), (12, 13)]
2025-04-11 17:46:19,234 [DEBUG] check_window_intermediate_custom (only one inserted(11, 12)): For L=6, window [1 1 1 1 0 0] with coords [(7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13)] triggers candidate.
2025-04-11 17:46:19,237 [INFO] Final candidates: [(11, 12)]
2025-04-11 17:46:19,237 [INFO] Phase win: Found only one candidate: (11, 12)
2025-04-11 17:46:19,237 [INFO] Phase win: Collected 11unique candidate(s):[((11, 12), (np.int64(11), np.int64(14))), ((11, 12), (np.int64(12), np.int64(11))), ((11, 12), (np.int64(12), np.int64(13))), ((11, 12), (np.int64(9), np.int64(12))), ((11, 12), (np.int64(11), np.int64(11))), ((11, 12), (np.int64(10), np.int64(12))), ((11, 12), (np.int64(11), np.int64(13))), ((11, 12), (np.int64(13), np.int64(12))), ((11, 12), (np.int64(11), np.int64(10))), ((11, 12), (np.int64(10), np.int64(13))), ((11, 12), (np.int64(12), np.int64(12)))]
2025-04-11 17:46:19,237 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:46:19,243 [INFO] Final candidates: []
2025-04-11 17:46:19,243 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:19,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:19,347 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(1), np.int64(5)))
2025-04-11 17:46:19,355 [INFO] Final candidates: []
2025-04-11 17:46:19,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,361 [INFO] Final candidates: []
2025-04-11 17:46:19,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,363 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:19,573 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:19,573 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(15)), (np.int64(6), np.int64(12)))
2025-04-11 17:46:19,575 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:46:19,575 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:46:19,575 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (5, 12)]
2025-04-11 17:46:19,575 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:46:19,580 [INFO] Final candidates: [(3, 12), (5, 12)]
2025-04-11 17:46:19,580 [INFO] Phase win: Collected 1unique candidate(s):[((3, 12), (5, 12))]
2025-04-11 17:46:19,580 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:19,586 [INFO] Final candidates: []
2025-04-11 17:46:19,586 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,587 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:19,753 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:19,753 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(12), np.int64(9)))
2025-04-11 17:46:19,759 [INFO] Final candidates: []
2025-04-11 17:46:19,760 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,765 [INFO] Final candidates: []
2025-04-11 17:46:19,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:19,842 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:19,842 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(10), np.int64(16)))
2025-04-11 17:46:19,849 [INFO] Final candidates: []
2025-04-11 17:46:19,849 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,854 [INFO] Final candidates: []
2025-04-11 17:46:19,854 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:19,856 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:20,120 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:20,120 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(8)), (np.int64(10), np.int64(16)))
2025-04-11 17:46:20,127 [INFO] Final candidates: []
2025-04-11 17:46:20,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,133 [INFO] Final candidates: []
2025-04-11 17:46:20,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,135 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:20,387 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:20,387 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(6), np.int64(0)))
2025-04-11 17:46:20,394 [INFO] Final candidates: []
2025-04-11 17:46:20,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,400 [INFO] Final candidates: []
2025-04-11 17:46:20,400 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:20,557 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:20,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(18)), (np.int64(4), np.int64(15)))
2025-04-11 17:46:20,563 [INFO] Final candidates: []
2025-04-11 17:46:20,563 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,569 [INFO] Final candidates: []
2025-04-11 17:46:20,569 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:20,655 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:20,655 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(1), np.int64(16)))
2025-04-11 17:46:20,661 [INFO] Final candidates: []
2025-04-11 17:46:20,661 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,667 [INFO] Final candidates: []
2025-04-11 17:46:20,667 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,669 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:20,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:20,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(1), np.int64(11)))
2025-04-11 17:46:20,876 [INFO] Final candidates: []
2025-04-11 17:46:20,876 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,882 [INFO] Final candidates: []
2025-04-11 17:46:20,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:20,884 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:21,113 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:21,113 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(4), np.int64(15)))
2025-04-11 17:46:21,120 [INFO] Final candidates: []
2025-04-11 17:46:21,120 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,125 [INFO] Final candidates: []
2025-04-11 17:46:21,125 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,127 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:21,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:21,275 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(4), np.int64(15)))
2025-04-11 17:46:21,281 [INFO] Final candidates: []
2025-04-11 17:46:21,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,287 [INFO] Final candidates: []
2025-04-11 17:46:21,287 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,289 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:21,484 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:21,485 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(16), np.int64(4)))
2025-04-11 17:46:21,491 [INFO] Final candidates: []
2025-04-11 17:46:21,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,497 [INFO] Final candidates: []
2025-04-11 17:46:21,497 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,498 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:21,555 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:21,555 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(4), np.int64(13)))
2025-04-11 17:46:21,555 [DEBUG] board coords: [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)]
2025-04-11 17:46:21,555 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:21,555 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (4, 11)]
2025-04-11 17:46:21,555 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)] triggers candidate.
2025-04-11 17:46:21,562 [INFO] Final candidates: [(4, 10), (4, 11)]
2025-04-11 17:46:21,562 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (4, 11))]
2025-04-11 17:46:21,562 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:21,567 [INFO] Final candidates: []
2025-04-11 17:46:21,567 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,569 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:21,838 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:21,839 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(18)), (np.int64(3), np.int64(18)))
2025-04-11 17:46:21,846 [INFO] Final candidates: []
2025-04-11 17:46:21,847 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,852 [INFO] Final candidates: []
2025-04-11 17:46:21,852 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:21,854 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:22,145 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:22,145 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(9)), (np.int64(16), np.int64(2)))
2025-04-11 17:46:22,152 [INFO] Final candidates: []
2025-04-11 17:46:22,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,157 [INFO] Final candidates: []
2025-04-11 17:46:22,157 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,159 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:22,455 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:22,455 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(12), np.int64(9)))
2025-04-11 17:46:22,461 [INFO] Final candidates: []
2025-04-11 17:46:22,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,467 [INFO] Final candidates: []
2025-04-11 17:46:22,467 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,469 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:22,628 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:22,629 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(17)), (np.int64(7), np.int64(13)))
2025-04-11 17:46:22,635 [INFO] Final candidates: []
2025-04-11 17:46:22,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,641 [INFO] Final candidates: []
2025-04-11 17:46:22,641 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,642 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:22,963 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:22,964 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(18)), (np.int64(10), np.int64(16)))
2025-04-11 17:46:22,971 [INFO] Final candidates: []
2025-04-11 17:46:22,971 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,976 [INFO] Final candidates: []
2025-04-11 17:46:22,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:22,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:23,123 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:23,123 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(8)), (np.int64(1), np.int64(11)))
2025-04-11 17:46:23,130 [INFO] Final candidates: []
2025-04-11 17:46:23,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,138 [INFO] Final candidates: []
2025-04-11 17:46:23,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,140 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:23,280 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:23,280 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(15), np.int64(3)))
2025-04-11 17:46:23,289 [INFO] Final candidates: []
2025-04-11 17:46:23,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,295 [INFO] Final candidates: []
2025-04-11 17:46:23,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:23,447 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:23,447 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(3), np.int64(10)))
2025-04-11 17:46:23,453 [INFO] Final candidates: []
2025-04-11 17:46:23,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,459 [INFO] Final candidates: []
2025-04-11 17:46:23,459 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,461 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:23,628 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:23,629 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(1), np.int64(8)))
2025-04-11 17:46:23,635 [INFO] Final candidates: []
2025-04-11 17:46:23,635 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,641 [INFO] Final candidates: []
2025-04-11 17:46:23,641 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,642 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:23,829 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:23,829 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(14), np.int64(7)))
2025-04-11 17:46:23,836 [INFO] Final candidates: []
2025-04-11 17:46:23,836 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,842 [INFO] Final candidates: []
2025-04-11 17:46:23,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:23,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:24,006 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:24,006 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(4)), (np.int64(16), np.int64(9)))
2025-04-11 17:46:24,012 [INFO] Final candidates: []
2025-04-11 17:46:24,012 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,018 [INFO] Final candidates: []
2025-04-11 17:46:24,018 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,020 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:24,222 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:24,222 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(3)), (np.int64(0), np.int64(17)))
2025-04-11 17:46:24,229 [INFO] Final candidates: []
2025-04-11 17:46:24,229 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,234 [INFO] Final candidates: []
2025-04-11 17:46:24,235 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,236 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:24,353 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:24,354 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(12), np.int64(2)))
2025-04-11 17:46:24,360 [INFO] Final candidates: []
2025-04-11 17:46:24,360 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,366 [INFO] Final candidates: []
2025-04-11 17:46:24,366 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,368 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:24,524 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:24,524 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(14), np.int64(10)))
2025-04-11 17:46:24,531 [INFO] Final candidates: []
2025-04-11 17:46:24,531 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,538 [INFO] Final candidates: []
2025-04-11 17:46:24,538 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,540 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:24,747 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:24,748 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(9)), (np.int64(10), np.int64(8)))
2025-04-11 17:46:24,754 [INFO] Final candidates: []
2025-04-11 17:46:24,754 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,760 [INFO] Final candidates: []
2025-04-11 17:46:24,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:24,860 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:24,860 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(5)), (np.int64(0), np.int64(6)))
2025-04-11 17:46:24,867 [INFO] Final candidates: []
2025-04-11 17:46:24,867 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,873 [INFO] Final candidates: []
2025-04-11 17:46:24,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:24,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:25,108 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:25,109 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(6), np.int64(10)))
2025-04-11 17:46:25,115 [INFO] Final candidates: []
2025-04-11 17:46:25,115 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,121 [INFO] Final candidates: []
2025-04-11 17:46:25,121 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:25,241 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:25,241 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(12), np.int64(5)))
2025-04-11 17:46:25,249 [INFO] Final candidates: []
2025-04-11 17:46:25,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,257 [INFO] Final candidates: []
2025-04-11 17:46:25,257 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,258 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:25,503 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:25,503 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(4), np.int64(16)))
2025-04-11 17:46:25,506 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:46:25,506 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)]
2025-04-11 17:46:25,506 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (5, 12)]
2025-04-11 17:46:25,506 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 0 1 1] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:46:25,510 [INFO] Final candidates: [(3, 12), (5, 12)]
2025-04-11 17:46:25,510 [INFO] Phase win: Collected 1unique candidate(s):[((3, 12), (5, 12))]
2025-04-11 17:46:25,510 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:25,517 [INFO] Final candidates: []
2025-04-11 17:46:25,517 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,518 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:46:25,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:25,679 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:25,680 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(9), np.int64(11)))
2025-04-11 17:46:25,686 [INFO] Final candidates: []
2025-04-11 17:46:25,686 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,692 [INFO] Final candidates: []
2025-04-11 17:46:25,692 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,693 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:25,890 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:25,890 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(2), np.int64(8)))
2025-04-11 17:46:25,897 [INFO] Final candidates: []
2025-04-11 17:46:25,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,904 [INFO] Final candidates: []
2025-04-11 17:46:25,904 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:25,905 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:26,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:26,125 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(4), np.int64(5)))
2025-04-11 17:46:26,134 [INFO] Final candidates: []
2025-04-11 17:46:26,134 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:26,140 [INFO] Final candidates: []
2025-04-11 17:46:26,140 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:26,142 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:26,442 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:26,443 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(5)), (np.int64(9), np.int64(0)))
2025-04-11 17:46:26,450 [INFO] Final candidates: []
2025-04-11 17:46:26,450 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:26,457 [INFO] Final candidates: []
2025-04-11 17:46:26,457 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:26,460 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:26,631 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:26,631 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 17:46:26,631 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:46:26,631 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:46:26,631 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:46:26,631 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:46:26,637 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:46:26,637 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:46:26,637 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:26,643 [INFO] Final candidates: []
2025-04-11 17:46:26,643 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:26,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:26,859 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:26,859 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(7), np.int64(11)))
2025-04-11 17:46:26,863 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:46:26,863 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:46:26,863 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (13, 7)]
2025-04-11 17:46:26,863 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:46:26,866 [INFO] Final candidates: [(11, 5), (13, 7)]
2025-04-11 17:46:26,866 [INFO] Phase win: Collected 1unique candidate(s):[((11, 5), (13, 7))]
2025-04-11 17:46:26,866 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:26,872 [INFO] Final candidates: []
2025-04-11 17:46:26,872 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:26,874 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:27,121 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:27,121 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(17), np.int64(2)))
2025-04-11 17:46:27,127 [INFO] Final candidates: []
2025-04-11 17:46:27,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:27,133 [INFO] Final candidates: []
2025-04-11 17:46:27,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:27,135 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:27,398 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:27,398 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(11), np.int64(12)))
2025-04-11 17:46:27,399 [DEBUG] board coords: [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)]
2025-04-11 17:46:27,399 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:27,399 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (4, 11)]
2025-04-11 17:46:27,399 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)] triggers candidate.
2025-04-11 17:46:27,402 [DEBUG] board coords: [(7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13)]
2025-04-11 17:46:27,403 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:46:27,403 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 10), (12, 13)]
2025-04-11 17:46:27,403 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 0 1 1 0] with coords [(7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13)] triggers candidate.
2025-04-11 17:46:27,405 [INFO] Final candidates: [(9, 10), (4, 10), (4, 11), (12, 13)]
2025-04-11 17:46:27,405 [INFO] Phase win: Collected 6unique candidate(s):[((4, 10), (4, 11)), ((4, 10), (12, 13)), ((9, 10), (4, 11)), ((4, 11), (12, 13)), ((9, 10), (12, 13)), ((9, 10), (4, 10))]
2025-04-11 17:46:27,405 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 17:46:27,411 [INFO] Final candidates: []
2025-04-11 17:46:27,411 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:27,412 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:27,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:27,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(11)), (np.int64(10), np.int64(13)))
2025-04-11 17:46:27,536 [INFO] Final candidates: []
2025-04-11 17:46:27,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:27,542 [INFO] Final candidates: []
2025-04-11 17:46:27,542 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:27,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:27,735 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:27,736 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(14), np.int64(6)))
2025-04-11 17:46:27,742 [INFO] Final candidates: []
2025-04-11 17:46:27,742 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:27,749 [INFO] Final candidates: []
2025-04-11 17:46:27,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:27,751 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:28,019 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:28,019 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(3)), (np.int64(4), np.int64(6)))
2025-04-11 17:46:28,026 [INFO] Final candidates: []
2025-04-11 17:46:28,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,032 [INFO] Final candidates: []
2025-04-11 17:46:28,032 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,034 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:28,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:28,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(10), np.int64(0)))
2025-04-11 17:46:28,120 [INFO] Final candidates: []
2025-04-11 17:46:28,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,126 [INFO] Final candidates: []
2025-04-11 17:46:28,126 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,128 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:28,191 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:28,192 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(3), np.int64(4)))
2025-04-11 17:46:28,198 [INFO] Final candidates: []
2025-04-11 17:46:28,198 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,204 [INFO] Final candidates: []
2025-04-11 17:46:28,204 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,214 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:28,242 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:28,243 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(0), np.int64(15)))
2025-04-11 17:46:28,249 [INFO] Final candidates: []
2025-04-11 17:46:28,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,255 [INFO] Final candidates: []
2025-04-11 17:46:28,255 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,257 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:28,468 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:28,469 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(8), np.int64(1)))
2025-04-11 17:46:28,475 [INFO] Final candidates: []
2025-04-11 17:46:28,475 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,481 [INFO] Final candidates: []
2025-04-11 17:46:28,481 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,483 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:28,680 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:28,681 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(1), np.int64(13)))
2025-04-11 17:46:28,687 [INFO] Final candidates: []
2025-04-11 17:46:28,687 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,693 [INFO] Final candidates: []
2025-04-11 17:46:28,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:28,931 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:28,932 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(12), np.int64(5)))
2025-04-11 17:46:28,938 [INFO] Final candidates: []
2025-04-11 17:46:28,938 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,944 [INFO] Final candidates: []
2025-04-11 17:46:28,944 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:28,945 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:29,120 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:29,120 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(6)), (np.int64(11), np.int64(10)))
2025-04-11 17:46:29,127 [INFO] Final candidates: []
2025-04-11 17:46:29,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,132 [INFO] Final candidates: []
2025-04-11 17:46:29,132 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:29,279 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:29,279 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(18)), (np.int64(10), np.int64(13)))
2025-04-11 17:46:29,287 [INFO] Final candidates: []
2025-04-11 17:46:29,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,293 [INFO] Final candidates: []
2025-04-11 17:46:29,293 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:29,502 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:29,503 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(8)), (np.int64(8), np.int64(1)))
2025-04-11 17:46:29,509 [INFO] Final candidates: []
2025-04-11 17:46:29,509 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,515 [INFO] Final candidates: []
2025-04-11 17:46:29,515 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,517 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:29,869 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:29,869 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(18)), (np.int64(16), np.int64(4)))
2025-04-11 17:46:29,876 [INFO] Final candidates: []
2025-04-11 17:46:29,876 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,881 [INFO] Final candidates: []
2025-04-11 17:46:29,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:29,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:30,002 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:30,002 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(7), np.int64(14)))
2025-04-11 17:46:30,008 [INFO] Final candidates: []
2025-04-11 17:46:30,008 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,014 [INFO] Final candidates: []
2025-04-11 17:46:30,014 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,016 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:30,181 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:30,181 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(11), np.int64(11)))
2025-04-11 17:46:30,187 [INFO] Final candidates: []
2025-04-11 17:46:30,187 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,193 [INFO] Final candidates: []
2025-04-11 17:46:30,193 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,195 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:30,463 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:30,463 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(4), np.int64(16)))
2025-04-11 17:46:30,470 [INFO] Final candidates: []
2025-04-11 17:46:30,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,476 [INFO] Final candidates: []
2025-04-11 17:46:30,476 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:30,609 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:30,610 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(8)), (np.int64(14), np.int64(10)))
2025-04-11 17:46:30,616 [INFO] Final candidates: []
2025-04-11 17:46:30,616 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,622 [INFO] Final candidates: []
2025-04-11 17:46:30,622 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,623 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:30,913 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:30,913 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(15), np.int64(3)))
2025-04-11 17:46:30,920 [INFO] Final candidates: []
2025-04-11 17:46:30,920 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,926 [INFO] Final candidates: []
2025-04-11 17:46:30,926 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:30,928 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:31,208 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:31,208 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(5)), (np.int64(14), np.int64(7)))
2025-04-11 17:46:31,214 [INFO] Final candidates: []
2025-04-11 17:46:31,214 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,220 [INFO] Final candidates: []
2025-04-11 17:46:31,220 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:31,340 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:31,341 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(15), np.int64(2)))
2025-04-11 17:46:31,350 [INFO] Final candidates: []
2025-04-11 17:46:31,350 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,355 [INFO] Final candidates: []
2025-04-11 17:46:31,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,358 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:31,565 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:31,566 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(14), np.int64(5)))
2025-04-11 17:46:31,572 [INFO] Final candidates: []
2025-04-11 17:46:31,572 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,578 [INFO] Final candidates: []
2025-04-11 17:46:31,578 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,579 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:31,804 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:31,804 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(1), np.int64(9)))
2025-04-11 17:46:31,811 [INFO] Final candidates: []
2025-04-11 17:46:31,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,817 [INFO] Final candidates: []
2025-04-11 17:46:31,817 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,818 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:31,956 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:31,957 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:31,963 [INFO] Final candidates: []
2025-04-11 17:46:31,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,969 [INFO] Final candidates: []
2025-04-11 17:46:31,969 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:31,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:32,063 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:32,064 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(5)), (np.int64(10), np.int64(16)))
2025-04-11 17:46:32,070 [INFO] Final candidates: []
2025-04-11 17:46:32,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,076 [INFO] Final candidates: []
2025-04-11 17:46:32,076 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,077 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:32,274 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:32,274 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(1), np.int64(9)))
2025-04-11 17:46:32,280 [INFO] Final candidates: []
2025-04-11 17:46:32,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,286 [INFO] Final candidates: []
2025-04-11 17:46:32,286 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,288 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:32,457 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:32,457 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(0), np.int64(6)))
2025-04-11 17:46:32,464 [INFO] Final candidates: []
2025-04-11 17:46:32,464 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,470 [INFO] Final candidates: []
2025-04-11 17:46:32,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:32,664 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:32,665 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(10), np.int64(13)))
2025-04-11 17:46:32,671 [INFO] Final candidates: []
2025-04-11 17:46:32,671 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,677 [INFO] Final candidates: []
2025-04-11 17:46:32,677 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,679 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:32,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:32,887 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(1), np.int64(6)))
2025-04-11 17:46:32,891 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:46:32,891 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)]
2025-04-11 17:46:32,891 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (13, 7)]
2025-04-11 17:46:32,891 [DEBUG] check_window_intermediate_custom: For L=6, window [1 1 1 0 1 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:46:32,894 [INFO] Final candidates: [(11, 5), (13, 7)]
2025-04-11 17:46:32,894 [INFO] Phase win: Collected 1unique candidate(s):[((11, 5), (13, 7))]
2025-04-11 17:46:32,894 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:32,899 [INFO] Final candidates: []
2025-04-11 17:46:32,899 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:32,901 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:33,198 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:33,199 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(2), np.int64(11)))
2025-04-11 17:46:33,206 [INFO] Final candidates: []
2025-04-11 17:46:33,206 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,212 [INFO] Final candidates: []
2025-04-11 17:46:33,212 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,213 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:33,464 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:33,464 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(8), np.int64(1)))
2025-04-11 17:46:33,471 [INFO] Final candidates: []
2025-04-11 17:46:33,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,476 [INFO] Final candidates: []
2025-04-11 17:46:33,476 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,478 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:33,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:33,553 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(10)))
2025-04-11 17:46:33,553 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:46:33,553 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:46:33,553 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:46:33,553 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:46:33,559 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:46:33,559 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:46:33,559 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:33,565 [INFO] Final candidates: []
2025-04-11 17:46:33,565 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,567 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:33,620 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:33,620 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:33,627 [INFO] Final candidates: []
2025-04-11 17:46:33,627 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,633 [INFO] Final candidates: []
2025-04-11 17:46:33,633 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,634 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:33,833 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:33,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(7), np.int64(13)))
2025-04-11 17:46:33,833 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 17:46:33,833 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)]
2025-04-11 17:46:33,833 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (8, 12)]
2025-04-11 17:46:33,833 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 1 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 17:46:33,839 [INFO] Final candidates: [(8, 8), (8, 12)]
2025-04-11 17:46:33,839 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (8, 12))]
2025-04-11 17:46:33,840 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:33,845 [INFO] Final candidates: []
2025-04-11 17:46:33,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,847 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:33,974 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:33,974 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(1), np.int64(4)))
2025-04-11 17:46:33,980 [INFO] Final candidates: []
2025-04-11 17:46:33,980 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,986 [INFO] Final candidates: []
2025-04-11 17:46:33,986 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:33,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:34,088 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:34,089 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(15)), (np.int64(9), np.int64(11)))
2025-04-11 17:46:34,095 [INFO] Final candidates: []
2025-04-11 17:46:34,095 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,101 [INFO] Final candidates: []
2025-04-11 17:46:34,101 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,103 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:34,338 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:34,338 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(12), np.int64(2)))
2025-04-11 17:46:34,342 [DEBUG] board coords: [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)]
2025-04-11 17:46:34,342 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:46:34,342 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 6), (13, 7)]
2025-04-11 17:46:34,342 [DEBUG] check_window_intermediate_custom (only one inserted(12, 6)): For L=6, window [1 1 1 1 0 0] with coords [(8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7)] triggers candidate.
2025-04-11 17:46:34,345 [INFO] Final candidates: [(12, 6)]
2025-04-11 17:46:34,345 [INFO] Phase win: Found only one candidate: (12, 6)
2025-04-11 17:46:34,345 [INFO] Phase win: Collected 10unique candidate(s):[((12, 6), (np.int64(12), np.int64(7))), ((12, 6), (np.int64(14), np.int64(6))), ((12, 6), (np.int64(11), np.int64(7))), ((12, 6), (np.int64(13), np.int64(6))), ((12, 6), (np.int64(12), np.int64(4))), ((12, 6), (np.int64(11), np.int64(6))), ((12, 6), (np.int64(12), np.int64(8))), ((12, 6), (np.int64(13), np.int64(7))), ((12, 6), (np.int64(12), np.int64(5))), ((12, 6), (np.int64(13), np.int64(5)))]
2025-04-11 17:46:34,345 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:46:34,351 [INFO] Final candidates: []
2025-04-11 17:46:34,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:34,454 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:34,454 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(1), np.int64(4)))
2025-04-11 17:46:34,461 [INFO] Final candidates: []
2025-04-11 17:46:34,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,467 [INFO] Final candidates: []
2025-04-11 17:46:34,467 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:34,600 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:34,600 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(3)), (np.int64(3), np.int64(4)))
2025-04-11 17:46:34,607 [INFO] Final candidates: []
2025-04-11 17:46:34,607 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,613 [INFO] Final candidates: []
2025-04-11 17:46:34,613 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,615 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:34,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:34,791 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(0)), (np.int64(10), np.int64(12)))
2025-04-11 17:46:34,807 [INFO] Final candidates: []
2025-04-11 17:46:34,807 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,821 [INFO] Final candidates: []
2025-04-11 17:46:34,821 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,825 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:34,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:34,842 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(4), np.int64(5)))
2025-04-11 17:46:34,844 [DEBUG] board coords: [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)]
2025-04-11 17:46:34,844 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:46:34,844 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 12), (6, 12)]
2025-04-11 17:46:34,844 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12)] triggers candidate.
2025-04-11 17:46:34,848 [INFO] Final candidates: [(3, 12), (6, 12)]
2025-04-11 17:46:34,848 [INFO] Phase win: Collected 1unique candidate(s):[((3, 12), (6, 12))]
2025-04-11 17:46:34,848 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:34,854 [INFO] Final candidates: []
2025-04-11 17:46:34,854 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,856 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:34,986 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:34,986 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(2), np.int64(15)))
2025-04-11 17:46:34,992 [INFO] Final candidates: []
2025-04-11 17:46:34,992 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:34,998 [INFO] Final candidates: []
2025-04-11 17:46:34,998 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:35,000 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:35,267 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:35,267 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:46:35,267 [INFO] MCTS selected move: E14,Q1
2025-04-11 17:46:35,267 [INFO] ===============NEW MOVE================
2025-04-11 17:46:35,554 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:46:35,561 [INFO] Final candidates: []
2025-04-11 17:46:35,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:35,566 [INFO] Final candidates: []
2025-04-11 17:46:35,566 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:35,567 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:46:35,568 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:46:35,568 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(12), np.int64(9)))
2025-04-11 17:46:35,574 [INFO] Final candidates: []
2025-04-11 17:46:35,574 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:35,580 [INFO] Final candidates: []
2025-04-11 17:46:35,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:35,582 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:46:35,582 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:35,702 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:35,703 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:35,705 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:35,705 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:35,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:46:35,705 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:35,709 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:46:35,709 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:46:35,709 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:35,716 [INFO] Final candidates: []
2025-04-11 17:46:35,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:35,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:36,025 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:36,025 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(14), np.int64(3)))
2025-04-11 17:46:36,030 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:46:36,030 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:36,030 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (6, 8)]
2025-04-11 17:46:36,030 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:46:36,031 [INFO] Final candidates: [(4, 10), (6, 8)]
2025-04-11 17:46:36,031 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (6, 8))]
2025-04-11 17:46:36,031 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:36,037 [INFO] Final candidates: []
2025-04-11 17:46:36,037 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,039 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:36,208 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:36,209 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(2), np.int64(10)))
2025-04-11 17:46:36,215 [INFO] Final candidates: []
2025-04-11 17:46:36,215 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,221 [INFO] Final candidates: []
2025-04-11 17:46:36,221 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,222 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:36,404 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:36,404 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(8), np.int64(10)))
2025-04-11 17:46:36,410 [INFO] Final candidates: []
2025-04-11 17:46:36,410 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,416 [INFO] Final candidates: []
2025-04-11 17:46:36,416 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,418 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:36,575 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:36,575 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(13)), (np.int64(1), np.int64(18)))
2025-04-11 17:46:36,581 [INFO] Final candidates: []
2025-04-11 17:46:36,581 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,587 [INFO] Final candidates: []
2025-04-11 17:46:36,587 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,588 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:36,693 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:36,694 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(15), np.int64(3)))
2025-04-11 17:46:36,699 [INFO] Final candidates: []
2025-04-11 17:46:36,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,705 [INFO] Final candidates: []
2025-04-11 17:46:36,705 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,707 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:36,890 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:36,890 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:36,896 [INFO] Final candidates: []
2025-04-11 17:46:36,896 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,902 [INFO] Final candidates: []
2025-04-11 17:46:36,902 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:36,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:37,011 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:37,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(15), np.int64(10)))
2025-04-11 17:46:37,017 [INFO] Final candidates: []
2025-04-11 17:46:37,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,023 [INFO] Final candidates: []
2025-04-11 17:46:37,023 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,024 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:37,303 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:37,303 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(8)), (np.int64(3), np.int64(10)))
2025-04-11 17:46:37,309 [INFO] Final candidates: []
2025-04-11 17:46:37,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,315 [INFO] Final candidates: []
2025-04-11 17:46:37,315 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:37,589 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:37,589 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(4), np.int64(5)))
2025-04-11 17:46:37,595 [INFO] Final candidates: []
2025-04-11 17:46:37,595 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,601 [INFO] Final candidates: []
2025-04-11 17:46:37,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,602 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:37,759 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:37,760 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(5)), (np.int64(0), np.int64(13)))
2025-04-11 17:46:37,769 [INFO] Final candidates: []
2025-04-11 17:46:37,770 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,784 [INFO] Final candidates: []
2025-04-11 17:46:37,784 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:37,910 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:37,911 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(6), np.int64(14)))
2025-04-11 17:46:37,915 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:46:37,915 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:46:37,915 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (7, 7)]
2025-04-11 17:46:37,915 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:46:37,917 [INFO] Final candidates: [(4, 10), (7, 7)]
2025-04-11 17:46:37,917 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (7, 7))]
2025-04-11 17:46:37,917 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:37,923 [INFO] Final candidates: []
2025-04-11 17:46:37,923 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:37,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:38,030 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:38,031 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(3), np.int64(18)))
2025-04-11 17:46:38,045 [INFO] Final candidates: []
2025-04-11 17:46:38,045 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,059 [INFO] Final candidates: []
2025-04-11 17:46:38,060 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,061 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:38,173 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:38,173 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(18), np.int64(3)), (np.int64(12), np.int64(9)))
2025-04-11 17:46:38,179 [INFO] Final candidates: []
2025-04-11 17:46:38,179 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,185 [INFO] Final candidates: []
2025-04-11 17:46:38,185 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:38,328 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:38,329 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(6), np.int64(14)))
2025-04-11 17:46:38,334 [INFO] Final candidates: []
2025-04-11 17:46:38,334 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,340 [INFO] Final candidates: []
2025-04-11 17:46:38,340 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,344 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:38,451 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:38,452 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(7), np.int64(9)))
2025-04-11 17:46:38,460 [INFO] Final candidates: []
2025-04-11 17:46:38,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,467 [INFO] Final candidates: []
2025-04-11 17:46:38,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,470 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:38,603 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:38,604 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(1), np.int64(4)))
2025-04-11 17:46:38,610 [INFO] Final candidates: []
2025-04-11 17:46:38,610 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,616 [INFO] Final candidates: []
2025-04-11 17:46:38,616 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,617 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:38,707 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:38,707 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(7), np.int64(13)))
2025-04-11 17:46:38,713 [INFO] Final candidates: []
2025-04-11 17:46:38,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,720 [INFO] Final candidates: []
2025-04-11 17:46:38,720 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,722 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:38,905 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:38,905 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(1), np.int64(11)))
2025-04-11 17:46:38,911 [INFO] Final candidates: []
2025-04-11 17:46:38,911 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,917 [INFO] Final candidates: []
2025-04-11 17:46:38,917 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:38,919 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:39,116 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:39,116 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(0), np.int64(13)))
2025-04-11 17:46:39,122 [INFO] Final candidates: []
2025-04-11 17:46:39,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,128 [INFO] Final candidates: []
2025-04-11 17:46:39,128 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:39,446 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:39,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(0), np.int64(17)))
2025-04-11 17:46:39,456 [INFO] Final candidates: []
2025-04-11 17:46:39,456 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,462 [INFO] Final candidates: []
2025-04-11 17:46:39,462 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,463 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:39,678 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:39,679 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(8)), (np.int64(11), np.int64(10)))
2025-04-11 17:46:39,685 [INFO] Final candidates: []
2025-04-11 17:46:39,685 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,691 [INFO] Final candidates: []
2025-04-11 17:46:39,691 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,693 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:39,749 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:39,749 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(3), np.int64(11)))
2025-04-11 17:46:39,755 [INFO] Final candidates: []
2025-04-11 17:46:39,755 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,761 [INFO] Final candidates: []
2025-04-11 17:46:39,761 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,762 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:39,875 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:39,875 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 17:46:39,881 [INFO] Final candidates: []
2025-04-11 17:46:39,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,887 [INFO] Final candidates: []
2025-04-11 17:46:39,887 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:39,894 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:40,109 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:40,109 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(3), np.int64(17)))
2025-04-11 17:46:40,115 [INFO] Final candidates: []
2025-04-11 17:46:40,115 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:40,121 [INFO] Final candidates: []
2025-04-11 17:46:40,121 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:40,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:40,467 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:40,467 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(3), np.int64(11)))
2025-04-11 17:46:40,467 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:46:40,467 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:46:40,467 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:46:40,467 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:46:40,473 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:46:40,473 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:46:40,473 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:40,479 [INFO] Final candidates: []
2025-04-11 17:46:40,479 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:40,481 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:40,708 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:40,708 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(8)), (np.int64(3), np.int64(12)))
2025-04-11 17:46:40,714 [INFO] Final candidates: []
2025-04-11 17:46:40,714 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:40,720 [INFO] Final candidates: []
2025-04-11 17:46:40,720 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:40,722 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:40,881 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:40,882 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(13), np.int64(10)))
2025-04-11 17:46:40,889 [INFO] Final candidates: []
2025-04-11 17:46:40,889 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:40,895 [INFO] Final candidates: []
2025-04-11 17:46:40,895 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:40,901 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:41,138 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:41,138 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(9)), (np.int64(7), np.int64(14)))
2025-04-11 17:46:41,144 [INFO] Final candidates: []
2025-04-11 17:46:41,144 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,150 [INFO] Final candidates: []
2025-04-11 17:46:41,150 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,151 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:41,319 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:41,319 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(9)), (np.int64(15), np.int64(10)))
2025-04-11 17:46:41,325 [INFO] Final candidates: []
2025-04-11 17:46:41,325 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,331 [INFO] Final candidates: []
2025-04-11 17:46:41,331 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,333 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:41,524 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:41,525 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(8)), (np.int64(11), np.int64(12)))
2025-04-11 17:46:41,530 [INFO] Final candidates: []
2025-04-11 17:46:41,531 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,536 [INFO] Final candidates: []
2025-04-11 17:46:41,536 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:41,631 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:41,631 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(6), np.int64(14)))
2025-04-11 17:46:41,639 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:46:41,639 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:41,639 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (6, 8)]
2025-04-11 17:46:41,639 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:46:41,640 [INFO] Final candidates: [(4, 10), (6, 8)]
2025-04-11 17:46:41,640 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (6, 8))]
2025-04-11 17:46:41,640 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:41,647 [INFO] Final candidates: []
2025-04-11 17:46:41,647 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,648 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:41,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:41,792 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(18)), (np.int64(18), np.int64(3)))
2025-04-11 17:46:41,797 [INFO] Final candidates: []
2025-04-11 17:46:41,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,804 [INFO] Final candidates: []
2025-04-11 17:46:41,804 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,805 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:41,872 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:41,873 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(5), np.int64(7)))
2025-04-11 17:46:41,879 [INFO] Final candidates: []
2025-04-11 17:46:41,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,885 [INFO] Final candidates: []
2025-04-11 17:46:41,885 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:41,886 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:42,004 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:42,005 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(12), np.int64(0)))
2025-04-11 17:46:42,011 [INFO] Final candidates: []
2025-04-11 17:46:42,011 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,017 [INFO] Final candidates: []
2025-04-11 17:46:42,017 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,019 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:42,165 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:42,166 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(17)), (np.int64(4), np.int64(5)))
2025-04-11 17:46:42,172 [INFO] Final candidates: []
2025-04-11 17:46:42,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,178 [INFO] Final candidates: []
2025-04-11 17:46:42,178 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,179 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:42,339 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:42,339 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(10), np.int64(16)))
2025-04-11 17:46:42,345 [INFO] Final candidates: []
2025-04-11 17:46:42,345 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,351 [INFO] Final candidates: []
2025-04-11 17:46:42,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,358 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:42,555 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:42,555 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(4), np.int64(10)))
2025-04-11 17:46:42,560 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:46:42,560 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:46:42,560 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (7, 7)]
2025-04-11 17:46:42,560 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:46:42,561 [INFO] Final candidates: [(6, 8), (7, 7)]
2025-04-11 17:46:42,561 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (7, 7))]
2025-04-11 17:46:42,561 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:42,567 [INFO] Final candidates: []
2025-04-11 17:46:42,567 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,569 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:42,703 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:42,703 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(6), np.int64(8)))
2025-04-11 17:46:42,708 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:46:42,708 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:46:42,708 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (7, 7)]
2025-04-11 17:46:42,708 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:46:42,709 [INFO] Final candidates: [(4, 10), (7, 7)]
2025-04-11 17:46:42,709 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (7, 7))]
2025-04-11 17:46:42,709 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:42,715 [INFO] Final candidates: []
2025-04-11 17:46:42,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:42,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:43,058 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:43,058 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(18)), (np.int64(12), np.int64(6)))
2025-04-11 17:46:43,064 [INFO] Final candidates: []
2025-04-11 17:46:43,064 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,070 [INFO] Final candidates: []
2025-04-11 17:46:43,070 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,072 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:43,276 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:43,276 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(5)), (np.int64(2), np.int64(8)))
2025-04-11 17:46:43,282 [INFO] Final candidates: []
2025-04-11 17:46:43,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,288 [INFO] Final candidates: []
2025-04-11 17:46:43,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:43,447 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:43,447 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(2), np.int64(10)))
2025-04-11 17:46:43,453 [INFO] Final candidates: []
2025-04-11 17:46:43,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,459 [INFO] Final candidates: []
2025-04-11 17:46:43,459 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,461 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:43,613 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:43,614 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(0), np.int64(12)))
2025-04-11 17:46:43,620 [INFO] Final candidates: []
2025-04-11 17:46:43,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,626 [INFO] Final candidates: []
2025-04-11 17:46:43,626 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,628 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:43,792 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:43,792 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(18)), (np.int64(15), np.int64(8)))
2025-04-11 17:46:43,798 [INFO] Final candidates: []
2025-04-11 17:46:43,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,804 [INFO] Final candidates: []
2025-04-11 17:46:43,804 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:43,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:44,023 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:44,023 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(1), np.int64(4)))
2025-04-11 17:46:44,029 [INFO] Final candidates: []
2025-04-11 17:46:44,029 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,038 [INFO] Final candidates: []
2025-04-11 17:46:44,038 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,040 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:44,257 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:44,257 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(16), np.int64(2)))
2025-04-11 17:46:44,263 [INFO] Final candidates: []
2025-04-11 17:46:44,263 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,272 [INFO] Final candidates: []
2025-04-11 17:46:44,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,274 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:44,410 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:44,411 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(1)), (np.int64(0), np.int64(13)))
2025-04-11 17:46:44,418 [INFO] Final candidates: []
2025-04-11 17:46:44,418 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,424 [INFO] Final candidates: []
2025-04-11 17:46:44,424 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,433 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:44,519 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:44,520 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(18)), (np.int64(12), np.int64(0)))
2025-04-11 17:46:44,526 [INFO] Final candidates: []
2025-04-11 17:46:44,526 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,532 [INFO] Final candidates: []
2025-04-11 17:46:44,532 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,533 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:44,677 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:44,677 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(10), np.int64(13)))
2025-04-11 17:46:44,683 [INFO] Final candidates: []
2025-04-11 17:46:44,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,689 [INFO] Final candidates: []
2025-04-11 17:46:44,689 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:44,851 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:44,852 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(15), np.int64(9)))
2025-04-11 17:46:44,858 [INFO] Final candidates: []
2025-04-11 17:46:44,858 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,864 [INFO] Final candidates: []
2025-04-11 17:46:44,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:44,865 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:46:44,865 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:45,174 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:45,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(12), np.int64(5)))
2025-04-11 17:46:45,176 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:45,177 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:46:45,177 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (13, 5)]
2025-04-11 17:46:45,177 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:45,181 [INFO] Final candidates: [(13, 5), (11, 5)]
2025-04-11 17:46:45,181 [INFO] Phase win: Collected 1unique candidate(s):[((13, 5), (11, 5))]
2025-04-11 17:46:45,181 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:45,187 [INFO] Final candidates: []
2025-04-11 17:46:45,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,188 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:45,330 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:45,330 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(18)), (np.int64(5), np.int64(13)))
2025-04-11 17:46:45,339 [INFO] Final candidates: []
2025-04-11 17:46:45,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,350 [INFO] Final candidates: []
2025-04-11 17:46:45,350 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:45,590 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:45,590 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(5)), (np.int64(9), np.int64(18)))
2025-04-11 17:46:45,596 [INFO] Final candidates: []
2025-04-11 17:46:45,596 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,602 [INFO] Final candidates: []
2025-04-11 17:46:45,602 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,604 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:45,830 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:45,830 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(18)), (np.int64(1), np.int64(5)))
2025-04-11 17:46:45,839 [INFO] Final candidates: []
2025-04-11 17:46:45,839 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,846 [INFO] Final candidates: []
2025-04-11 17:46:45,846 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,847 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:45,903 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:45,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(12), np.int64(5)))
2025-04-11 17:46:45,905 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:45,905 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:46:45,905 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (13, 5)]
2025-04-11 17:46:45,906 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:45,910 [INFO] Final candidates: [(13, 5), (11, 5)]
2025-04-11 17:46:45,910 [INFO] Phase win: Collected 1unique candidate(s):[((13, 5), (11, 5))]
2025-04-11 17:46:45,910 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:45,916 [INFO] Final candidates: []
2025-04-11 17:46:45,916 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:45,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:46,112 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:46,113 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(10), np.int64(8)))
2025-04-11 17:46:46,120 [INFO] Final candidates: []
2025-04-11 17:46:46,120 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,127 [INFO] Final candidates: []
2025-04-11 17:46:46,127 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:46,325 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:46,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(11), np.int64(10)))
2025-04-11 17:46:46,331 [INFO] Final candidates: []
2025-04-11 17:46:46,332 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,338 [INFO] Final candidates: []
2025-04-11 17:46:46,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:46,407 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:46,407 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(8), np.int64(12)))
2025-04-11 17:46:46,413 [INFO] Final candidates: []
2025-04-11 17:46:46,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,419 [INFO] Final candidates: []
2025-04-11 17:46:46,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,420 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:46,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:46,562 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 17:46:46,568 [INFO] Final candidates: []
2025-04-11 17:46:46,568 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,574 [INFO] Final candidates: []
2025-04-11 17:46:46,574 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,576 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:46,600 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:46,600 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(6), np.int64(13)))
2025-04-11 17:46:46,606 [INFO] Final candidates: []
2025-04-11 17:46:46,606 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,614 [INFO] Final candidates: []
2025-04-11 17:46:46,614 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,616 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:46,830 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:46,830 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(4)), (np.int64(16), np.int64(1)))
2025-04-11 17:46:46,836 [INFO] Final candidates: []
2025-04-11 17:46:46,836 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,842 [INFO] Final candidates: []
2025-04-11 17:46:46,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:46,951 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:46,951 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(17)), (np.int64(6), np.int64(12)))
2025-04-11 17:46:46,957 [INFO] Final candidates: []
2025-04-11 17:46:46,957 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,963 [INFO] Final candidates: []
2025-04-11 17:46:46,963 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:46,965 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:47,246 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:47,247 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:47,248 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:47,248 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:47,248 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:46:47,248 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:47,253 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:46:47,253 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:46:47,253 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:47,259 [INFO] Final candidates: []
2025-04-11 17:46:47,259 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:47,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:47,407 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:47,408 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(3), np.int64(4)))
2025-04-11 17:46:47,414 [INFO] Final candidates: []
2025-04-11 17:46:47,414 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:47,420 [INFO] Final candidates: []
2025-04-11 17:46:47,420 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:47,422 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:47,649 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:47,650 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(15), np.int64(10)))
2025-04-11 17:46:47,656 [INFO] Final candidates: []
2025-04-11 17:46:47,656 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:47,662 [INFO] Final candidates: []
2025-04-11 17:46:47,662 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:47,663 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:47,889 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:47,889 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(3)), (np.int64(17), np.int64(4)))
2025-04-11 17:46:47,895 [INFO] Final candidates: []
2025-04-11 17:46:47,895 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:47,901 [INFO] Final candidates: []
2025-04-11 17:46:47,901 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:47,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:48,018 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:48,018 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(1), np.int64(6)))
2025-04-11 17:46:48,025 [INFO] Final candidates: []
2025-04-11 17:46:48,025 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,031 [INFO] Final candidates: []
2025-04-11 17:46:48,031 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,035 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:48,214 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:48,215 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(5)), (np.int64(1), np.int64(4)))
2025-04-11 17:46:48,227 [INFO] Final candidates: []
2025-04-11 17:46:48,227 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,233 [INFO] Final candidates: []
2025-04-11 17:46:48,233 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,236 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:48,502 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:48,502 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(3)), (np.int64(11), np.int64(6)))
2025-04-11 17:46:48,508 [INFO] Final candidates: []
2025-04-11 17:46:48,508 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,515 [INFO] Final candidates: []
2025-04-11 17:46:48,515 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,516 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:48,816 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:48,817 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(13), np.int64(6)))
2025-04-11 17:46:48,823 [INFO] Final candidates: []
2025-04-11 17:46:48,823 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,830 [INFO] Final candidates: []
2025-04-11 17:46:48,830 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:48,831 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:49,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:49,073 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(8), np.int64(10)))
2025-04-11 17:46:49,079 [INFO] Final candidates: []
2025-04-11 17:46:49,079 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,085 [INFO] Final candidates: []
2025-04-11 17:46:49,085 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,087 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:49,391 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:49,391 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(8)), (np.int64(6), np.int64(0)))
2025-04-11 17:46:49,397 [INFO] Final candidates: []
2025-04-11 17:46:49,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,403 [INFO] Final candidates: []
2025-04-11 17:46:49,403 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,405 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:49,551 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:49,551 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(10), np.int64(8)))
2025-04-11 17:46:49,557 [INFO] Final candidates: []
2025-04-11 17:46:49,557 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,563 [INFO] Final candidates: []
2025-04-11 17:46:49,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:49,654 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:49,655 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(17)), (np.int64(13), np.int64(6)))
2025-04-11 17:46:49,661 [INFO] Final candidates: []
2025-04-11 17:46:49,661 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,666 [INFO] Final candidates: []
2025-04-11 17:46:49,666 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,668 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:49,904 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:49,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(5), np.int64(14)))
2025-04-11 17:46:49,910 [INFO] Final candidates: []
2025-04-11 17:46:49,910 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,916 [INFO] Final candidates: []
2025-04-11 17:46:49,916 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:49,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:50,175 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:50,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(2)), (np.int64(6), np.int64(0)))
2025-04-11 17:46:50,181 [INFO] Final candidates: []
2025-04-11 17:46:50,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,187 [INFO] Final candidates: []
2025-04-11 17:46:50,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,189 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:50,325 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:50,325 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(18)), (np.int64(9), np.int64(9)))
2025-04-11 17:46:50,331 [INFO] Final candidates: []
2025-04-11 17:46:50,331 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,337 [INFO] Final candidates: []
2025-04-11 17:46:50,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,338 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:50,561 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:50,562 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(17), np.int64(2)))
2025-04-11 17:46:50,563 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:50,563 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:46:50,563 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 5), (13, 5)]
2025-04-11 17:46:50,564 [DEBUG] check_window_intermediate_custom (only one inserted(12, 5)): For L=6, window [2 2 2 2 0 0] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:50,568 [INFO] Final candidates: [(12, 5)]
2025-04-11 17:46:50,568 [INFO] Phase win: Found only one candidate: (12, 5)
2025-04-11 17:46:50,568 [INFO] Phase win: Collected 9unique candidate(s):[((12, 5), (np.int64(12), np.int64(3))), ((12, 5), (np.int64(13), np.int64(5))), ((12, 5), (np.int64(12), np.int64(7))), ((12, 5), (np.int64(13), np.int64(6))), ((12, 5), (np.int64(11), np.int64(4))), ((12, 5), (np.int64(12), np.int64(4))), ((12, 5), (np.int64(11), np.int64(6))), ((12, 5), (np.int64(12), np.int64(6))), ((12, 5), (np.int64(14), np.int64(5)))]
2025-04-11 17:46:50,568 [INFO] Phase 1 (immediate win): 9 candidate(s) found.
2025-04-11 17:46:50,574 [INFO] Final candidates: []
2025-04-11 17:46:50,574 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,576 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:50,687 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:50,687 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(6), np.int64(12)))
2025-04-11 17:46:50,693 [INFO] Final candidates: []
2025-04-11 17:46:50,693 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,701 [INFO] Final candidates: []
2025-04-11 17:46:50,701 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,703 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:50,759 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:50,759 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(13)))
2025-04-11 17:46:50,765 [INFO] Final candidates: []
2025-04-11 17:46:50,765 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,771 [INFO] Final candidates: []
2025-04-11 17:46:50,771 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,773 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:50,948 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:50,949 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(17)), (np.int64(12), np.int64(11)))
2025-04-11 17:46:50,959 [INFO] Final candidates: []
2025-04-11 17:46:50,959 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,969 [INFO] Final candidates: []
2025-04-11 17:46:50,969 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:50,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:51,147 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:51,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(12)), (np.int64(11), np.int64(12)))
2025-04-11 17:46:51,154 [INFO] Final candidates: []
2025-04-11 17:46:51,154 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:51,160 [INFO] Final candidates: []
2025-04-11 17:46:51,160 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:51,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:51,311 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:51,311 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(6), np.int64(10)))
2025-04-11 17:46:51,317 [INFO] Final candidates: []
2025-04-11 17:46:51,317 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:51,323 [INFO] Final candidates: []
2025-04-11 17:46:51,323 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:51,325 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:51,556 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:51,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(18)), (np.int64(15), np.int64(8)))
2025-04-11 17:46:51,563 [INFO] Final candidates: []
2025-04-11 17:46:51,563 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:51,569 [INFO] Final candidates: []
2025-04-11 17:46:51,569 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:51,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:51,753 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:51,753 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(18)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:51,755 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:51,755 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:51,755 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:46:51,755 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:51,760 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:46:51,760 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:46:51,760 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:51,766 [INFO] Final candidates: []
2025-04-11 17:46:51,766 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:51,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:52,027 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:52,028 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(14), np.int64(6)))
2025-04-11 17:46:52,034 [INFO] Final candidates: []
2025-04-11 17:46:52,034 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,039 [INFO] Final candidates: []
2025-04-11 17:46:52,039 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,041 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:52,238 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:52,239 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(6)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:52,240 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:52,240 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:52,240 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:46:52,240 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:52,245 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:46:52,245 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:46:52,245 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:52,251 [INFO] Final candidates: []
2025-04-11 17:46:52,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,252 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:52,385 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:52,385 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(0)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:52,387 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:52,387 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:52,387 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:46:52,387 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:52,391 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:46:52,391 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:46:52,391 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:52,398 [INFO] Final candidates: []
2025-04-11 17:46:52,398 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,400 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:52,613 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:52,613 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(15), np.int64(2)))
2025-04-11 17:46:52,619 [INFO] Final candidates: []
2025-04-11 17:46:52,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,625 [INFO] Final candidates: []
2025-04-11 17:46:52,625 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,627 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:52,834 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:52,835 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:52,840 [INFO] Final candidates: []
2025-04-11 17:46:52,840 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,846 [INFO] Final candidates: []
2025-04-11 17:46:52,846 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:52,848 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:53,152 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:53,152 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(2)), (np.int64(10), np.int64(13)))
2025-04-11 17:46:53,152 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:46:53,152 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:46:53,152 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:46:53,152 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:46:53,158 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:46:53,158 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:46:53,158 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:53,164 [INFO] Final candidates: []
2025-04-11 17:46:53,164 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,166 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:53,299 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:53,299 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(8), np.int64(12)))
2025-04-11 17:46:53,305 [INFO] Final candidates: []
2025-04-11 17:46:53,305 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,311 [INFO] Final candidates: []
2025-04-11 17:46:53,311 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:53,477 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:53,477 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(3), np.int64(4)))
2025-04-11 17:46:53,483 [INFO] Final candidates: []
2025-04-11 17:46:53,483 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,489 [INFO] Final candidates: []
2025-04-11 17:46:53,489 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,491 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:53,626 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:53,626 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(9), np.int64(9)))
2025-04-11 17:46:53,632 [INFO] Final candidates: []
2025-04-11 17:46:53,632 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,638 [INFO] Final candidates: []
2025-04-11 17:46:53,638 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,640 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:53,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:53,791 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(13)), (np.int64(12), np.int64(5)))
2025-04-11 17:46:53,793 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:53,793 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:46:53,793 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 5), (13, 5)]
2025-04-11 17:46:53,793 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:53,803 [INFO] Final candidates: [(13, 5), (11, 5)]
2025-04-11 17:46:53,803 [INFO] Phase win: Collected 1unique candidate(s):[((13, 5), (11, 5))]
2025-04-11 17:46:53,803 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:53,812 [INFO] Final candidates: []
2025-04-11 17:46:53,812 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:53,814 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:54,095 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:54,095 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(16), np.int64(4)))
2025-04-11 17:46:54,101 [INFO] Final candidates: []
2025-04-11 17:46:54,101 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,107 [INFO] Final candidates: []
2025-04-11 17:46:54,107 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,109 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:54,326 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:54,326 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(9)), (np.int64(5), np.int64(15)))
2025-04-11 17:46:54,332 [INFO] Final candidates: []
2025-04-11 17:46:54,332 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,338 [INFO] Final candidates: []
2025-04-11 17:46:54,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:54,397 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:54,398 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(10)), (np.int64(15), np.int64(10)))
2025-04-11 17:46:54,404 [INFO] Final candidates: []
2025-04-11 17:46:54,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,410 [INFO] Final candidates: []
2025-04-11 17:46:54,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,411 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:54,525 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:54,525 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(16), np.int64(4)))
2025-04-11 17:46:54,530 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:46:54,530 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:54,530 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (6, 8)]
2025-04-11 17:46:54,530 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:46:54,531 [INFO] Final candidates: [(4, 10), (6, 8)]
2025-04-11 17:46:54,531 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (6, 8))]
2025-04-11 17:46:54,531 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:54,537 [INFO] Final candidates: []
2025-04-11 17:46:54,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:54,706 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:54,707 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:46:54,707 [INFO] MCTS selected move: R1,K13
2025-04-11 17:46:54,707 [INFO] ===============NEW MOVE================
2025-04-11 17:46:54,981 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:46:54,987 [INFO] Final candidates: []
2025-04-11 17:46:54,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:54,989 [DEBUG] board coords: [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)]
2025-04-11 17:46:54,989 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:46:54,989 [DEBUG] check_window_intermediate_custom: empty_cells=[(12, 5), (13, 5)]
2025-04-11 17:46:54,989 [DEBUG] check_window_intermediate_custom (only one inserted(12, 5)): For L=6, window [2 2 2 2 0 0] with coords [(8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (13, 5)] triggers candidate.
2025-04-11 17:46:54,993 [INFO] Final candidates: [(12, 5)]
2025-04-11 17:46:54,993 [INFO] Phase defense: Found only one candidate: (12, 5)
2025-04-11 17:46:54,993 [INFO] Phase defense: Collected 9unique candidate(s):[((12, 5), (np.int64(12), np.int64(3))), ((12, 5), (np.int64(13), np.int64(5))), ((12, 5), (np.int64(12), np.int64(7))), ((12, 5), (np.int64(13), np.int64(6))), ((12, 5), (np.int64(11), np.int64(4))), ((12, 5), (np.int64(12), np.int64(4))), ((12, 5), (np.int64(11), np.int64(6))), ((12, 5), (np.int64(12), np.int64(6))), ((12, 5), (np.int64(14), np.int64(5)))]
2025-04-11 17:46:54,993 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 17:46:54,993 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:46:54,993 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(11), np.int64(6)))
2025-04-11 17:46:54,998 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:54,998 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:54,998 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:54,998 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:54,999 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:54,999 [INFO] Phase win: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:54,999 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:55,005 [INFO] Final candidates: []
2025-04-11 17:46:55,005 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,007 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:46:55,007 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:55,193 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:55,194 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(12), np.int64(6)))
2025-04-11 17:46:55,200 [INFO] Final candidates: []
2025-04-11 17:46:55,200 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,205 [INFO] Final candidates: []
2025-04-11 17:46:55,205 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,207 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:55,285 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:55,285 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(13), np.int64(6)))
2025-04-11 17:46:55,294 [INFO] Final candidates: []
2025-04-11 17:46:55,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,299 [INFO] Final candidates: []
2025-04-11 17:46:55,299 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,301 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:55,366 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:55,367 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(11), np.int64(4)))
2025-04-11 17:46:55,373 [INFO] Final candidates: []
2025-04-11 17:46:55,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,379 [INFO] Final candidates: []
2025-04-11 17:46:55,379 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,380 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:55,470 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:55,470 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(13), np.int64(5)))
2025-04-11 17:46:55,477 [INFO] Final candidates: []
2025-04-11 17:46:55,477 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,482 [INFO] Final candidates: []
2025-04-11 17:46:55,482 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,484 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:55,581 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:55,582 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(14), np.int64(5)))
2025-04-11 17:46:55,588 [INFO] Final candidates: []
2025-04-11 17:46:55,588 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,594 [INFO] Final candidates: []
2025-04-11 17:46:55,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,596 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:55,753 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:55,753 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(12), np.int64(7)))
2025-04-11 17:46:55,759 [INFO] Final candidates: []
2025-04-11 17:46:55,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,765 [INFO] Final candidates: []
2025-04-11 17:46:55,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:55,898 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:55,899 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(12), np.int64(4)))
2025-04-11 17:46:55,905 [INFO] Final candidates: []
2025-04-11 17:46:55,905 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,911 [INFO] Final candidates: []
2025-04-11 17:46:55,911 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:55,913 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:56,000 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:56,000 [DEBUG] Tree_policy iteration 1: Expanding move ((12, 5), (np.int64(12), np.int64(3)))
2025-04-11 17:46:56,006 [INFO] Final candidates: []
2025-04-11 17:46:56,006 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,012 [INFO] Final candidates: []
2025-04-11 17:46:56,012 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,014 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:56,124 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:56,124 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:56,125 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(4)), (np.int64(9), np.int64(11)))
2025-04-11 17:46:56,130 [INFO] Final candidates: []
2025-04-11 17:46:56,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,135 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:56,135 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:56,135 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:56,135 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:56,136 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:56,136 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:56,136 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:56,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:56,288 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:56,288 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:56,288 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(9)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:56,294 [INFO] Final candidates: []
2025-04-11 17:46:56,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,299 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:56,299 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:56,299 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:56,299 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:56,300 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:56,300 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:56,300 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:56,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:56,501 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:56,501 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:56,501 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(5)), (np.int64(16), np.int64(5)))
2025-04-11 17:46:56,507 [INFO] Final candidates: []
2025-04-11 17:46:56,507 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,512 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:56,512 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:56,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:56,512 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:56,513 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:56,513 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:56,513 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:56,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:56,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:56,562 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:56,562 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(13)), (np.int64(0), np.int64(12)))
2025-04-11 17:46:56,568 [INFO] Final candidates: []
2025-04-11 17:46:56,568 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,572 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:56,572 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:56,572 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:56,573 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:56,574 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:56,574 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:56,574 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:56,574 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:56,693 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:56,693 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:56,693 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(0)), (np.int64(10), np.int64(10)))
2025-04-11 17:46:56,699 [INFO] Final candidates: []
2025-04-11 17:46:56,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,703 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:56,703 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:56,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:56,703 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:56,704 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:56,704 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:56,704 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:56,705 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:56,857 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:56,858 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:56,858 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(1)), (np.int64(13), np.int64(0)))
2025-04-11 17:46:56,863 [INFO] Final candidates: []
2025-04-11 17:46:56,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:56,870 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:56,870 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:56,870 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:56,871 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:56,872 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:56,872 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:56,872 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:56,872 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:57,039 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:57,040 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:57,040 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(3)), (np.int64(10), np.int64(9)))
2025-04-11 17:46:57,045 [INFO] Final candidates: []
2025-04-11 17:46:57,045 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:57,050 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:57,050 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:57,050 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:57,050 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:57,051 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:57,051 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:57,051 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:57,052 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:57,293 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:57,293 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:57,293 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(18)), (np.int64(12), np.int64(18)))
2025-04-11 17:46:57,299 [INFO] Final candidates: []
2025-04-11 17:46:57,299 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:57,304 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:57,304 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:57,304 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:57,304 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:57,305 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:57,305 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:57,305 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:57,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:57,517 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:57,517 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:57,517 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(2)), (np.int64(2), np.int64(10)))
2025-04-11 17:46:57,523 [INFO] Final candidates: []
2025-04-11 17:46:57,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:57,527 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:57,527 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:57,527 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:57,528 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:57,529 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:57,529 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:57,529 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:57,529 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:57,638 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:57,638 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:57,639 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(4)), (np.int64(11), np.int64(8)))
2025-04-11 17:46:57,644 [INFO] Final candidates: []
2025-04-11 17:46:57,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:57,649 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:57,649 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:57,649 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:57,649 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:57,650 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:57,650 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:57,650 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:57,651 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:57,816 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:57,816 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:57,816 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(9)), (np.int64(15), np.int64(2)))
2025-04-11 17:46:57,822 [INFO] Final candidates: []
2025-04-11 17:46:57,822 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:57,826 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:57,826 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:57,827 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:57,827 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:57,828 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:57,828 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:57,828 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:57,828 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:57,981 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:57,982 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:57,982 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(4)), (np.int64(16), np.int64(4)))
2025-04-11 17:46:57,996 [INFO] Final candidates: []
2025-04-11 17:46:57,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:58,008 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:58,008 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:58,008 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:58,008 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:58,011 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:58,011 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:58,011 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:58,011 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:58,245 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:58,246 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:58,246 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(5), np.int64(14)))
2025-04-11 17:46:58,252 [INFO] Final candidates: []
2025-04-11 17:46:58,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:58,256 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:58,256 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:58,256 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:58,257 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:58,258 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:58,258 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:58,258 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:58,258 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:58,363 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:46:58,363 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:58,363 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(9)), (np.int64(1), np.int64(11)))
2025-04-11 17:46:58,369 [INFO] Final candidates: []
2025-04-11 17:46:58,369 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:58,374 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:58,374 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:58,374 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:58,374 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:58,375 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:58,375 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:58,375 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:58,375 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:58,559 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:58,559 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:58,559 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(12)), (np.int64(4), np.int64(6)))
2025-04-11 17:46:58,565 [INFO] Final candidates: []
2025-04-11 17:46:58,565 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:58,570 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:58,570 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:58,570 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:58,570 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:58,571 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:58,571 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:58,571 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:58,571 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:58,759 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:58,759 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:58,760 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(8)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:58,764 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:58,764 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:58,764 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:46:58,764 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:58,770 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:46:58,770 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:46:58,770 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:58,775 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:58,775 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:58,775 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:58,775 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:58,776 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:58,776 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:58,776 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:58,776 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:58,908 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:58,908 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:58,909 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(5)), (np.int64(11), np.int64(1)))
2025-04-11 17:46:58,910 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:46:58,910 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:46:58,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:46:58,910 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:46:58,914 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:46:58,914 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:46:58,914 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:46:58,922 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:58,923 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:58,923 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:58,923 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:58,924 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:58,924 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:58,924 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:58,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:59,126 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:59,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:59,126 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(9)), (np.int64(1), np.int64(11)))
2025-04-11 17:46:59,132 [INFO] Final candidates: []
2025-04-11 17:46:59,132 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:59,137 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:59,137 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:59,137 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:59,137 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:59,138 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:59,138 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:59,138 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:59,138 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:59,283 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:59,283 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:59,284 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(4), np.int64(5)))
2025-04-11 17:46:59,289 [INFO] Final candidates: []
2025-04-11 17:46:59,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:59,294 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:59,294 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:59,294 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:59,294 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:59,295 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:59,295 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:59,295 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:59,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:59,447 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:59,447 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:59,448 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(18)), (np.int64(12), np.int64(7)))
2025-04-11 17:46:59,453 [INFO] Final candidates: []
2025-04-11 17:46:59,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:59,458 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:59,458 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:59,458 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:59,458 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:59,459 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:59,459 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:59,459 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:59,459 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:59,528 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:59,529 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:59,529 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(3)), (np.int64(16), np.int64(1)))
2025-04-11 17:46:59,535 [INFO] Final candidates: []
2025-04-11 17:46:59,535 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:59,540 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:59,540 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:59,540 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:59,540 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:59,541 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:59,541 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:59,541 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:59,541 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:59,767 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:59,767 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:59,767 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(15)), (np.int64(2), np.int64(16)))
2025-04-11 17:46:59,774 [INFO] Final candidates: []
2025-04-11 17:46:59,774 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:59,779 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:59,779 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:59,779 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:59,779 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:59,780 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:59,780 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:59,780 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:59,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:46:59,941 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:46:59,941 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:46:59,941 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(12), np.int64(10)))
2025-04-11 17:46:59,947 [INFO] Final candidates: []
2025-04-11 17:46:59,947 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:46:59,952 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:46:59,952 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:46:59,952 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:46:59,952 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:46:59,953 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:46:59,953 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:46:59,953 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:46:59,953 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:00,178 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:00,178 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:00,178 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(4)), (np.int64(9), np.int64(11)))
2025-04-11 17:47:00,184 [INFO] Final candidates: []
2025-04-11 17:47:00,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:00,189 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:00,189 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:00,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:00,189 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:00,190 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:00,190 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:00,190 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:00,190 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:00,289 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:00,290 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:00,290 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(18), np.int64(3)), (np.int64(7), np.int64(11)))
2025-04-11 17:47:00,296 [INFO] Final candidates: []
2025-04-11 17:47:00,296 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:00,300 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:00,300 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:00,300 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:00,301 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:00,302 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:00,302 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:00,302 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:00,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:00,395 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:00,395 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:00,396 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(8)), (np.int64(11), np.int64(3)))
2025-04-11 17:47:00,401 [INFO] Final candidates: []
2025-04-11 17:47:00,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:00,407 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:00,407 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:00,407 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:00,407 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:00,408 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:00,408 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:00,408 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:00,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:00,583 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:00,583 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:00,583 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(5)), (np.int64(1), np.int64(18)))
2025-04-11 17:47:00,589 [INFO] Final candidates: []
2025-04-11 17:47:00,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:00,594 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:00,594 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:00,594 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:00,594 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:00,595 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:00,595 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:00,595 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:00,595 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:00,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:00,791 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:00,791 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(18)), (np.int64(13), np.int64(9)))
2025-04-11 17:47:00,797 [INFO] Final candidates: []
2025-04-11 17:47:00,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:00,802 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:00,802 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:00,802 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:00,802 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:00,803 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:00,803 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:00,803 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:00,803 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:00,943 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:00,944 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:00,944 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(9)), (np.int64(10), np.int64(9)))
2025-04-11 17:47:00,949 [INFO] Final candidates: []
2025-04-11 17:47:00,949 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:00,954 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:00,954 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:00,954 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:00,955 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:00,956 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:00,956 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:00,956 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:00,956 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:01,126 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:01,126 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:01,126 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(16), np.int64(9)))
2025-04-11 17:47:01,133 [INFO] Final candidates: []
2025-04-11 17:47:01,133 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:01,139 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:01,139 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:01,139 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:01,139 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:01,140 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:01,140 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:01,140 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:01,140 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:01,267 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:01,267 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:01,267 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(9)), (np.int64(12), np.int64(11)))
2025-04-11 17:47:01,273 [INFO] Final candidates: []
2025-04-11 17:47:01,273 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:01,278 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:01,278 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:01,278 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:01,278 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:01,279 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:01,279 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:01,279 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:01,279 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:01,587 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:01,587 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:01,587 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(13)), (np.int64(15), np.int64(10)))
2025-04-11 17:47:01,593 [INFO] Final candidates: []
2025-04-11 17:47:01,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:01,597 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:01,597 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:01,597 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:01,597 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:01,598 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:01,598 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:01,598 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:01,599 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:01,809 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:01,810 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:01,810 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(9)), (np.int64(4), np.int64(6)))
2025-04-11 17:47:01,815 [INFO] Final candidates: []
2025-04-11 17:47:01,815 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:01,820 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:01,820 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:01,820 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:01,820 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:01,821 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:01,821 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:01,821 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:01,821 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:01,981 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:01,981 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:01,982 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(12)), (np.int64(10), np.int64(10)))
2025-04-11 17:47:01,987 [INFO] Final candidates: []
2025-04-11 17:47:01,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:01,992 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:01,992 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:01,992 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:01,993 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:01,994 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:01,994 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:01,994 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:01,994 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:02,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:02,274 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:02,275 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(3), np.int64(9)))
2025-04-11 17:47:02,279 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:47:02,279 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:47:02,279 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (6, 8)]
2025-04-11 17:47:02,279 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:47:02,280 [INFO] Final candidates: [(4, 10), (6, 8)]
2025-04-11 17:47:02,280 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (6, 8))]
2025-04-11 17:47:02,280 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:02,285 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:02,285 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:02,285 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:02,285 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:02,286 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:02,286 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:02,286 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:02,286 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:02,367 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:02,367 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:02,367 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(13)), (np.int64(15), np.int64(3)))
2025-04-11 17:47:02,373 [INFO] Final candidates: []
2025-04-11 17:47:02,373 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:02,378 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:02,378 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:02,379 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:02,379 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:02,380 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:02,380 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:02,380 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:02,380 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:02,541 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:02,542 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:02,542 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(9)), (np.int64(13), np.int64(9)))
2025-04-11 17:47:02,547 [INFO] Final candidates: []
2025-04-11 17:47:02,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:02,552 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:02,552 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:02,552 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:02,552 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:02,553 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:02,553 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:02,553 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:02,553 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:02,795 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:02,795 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:02,796 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(12), np.int64(0)))
2025-04-11 17:47:02,801 [INFO] Final candidates: []
2025-04-11 17:47:02,801 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:02,806 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:02,806 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:02,806 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:02,806 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:02,807 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:02,807 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:02,807 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:02,807 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:03,096 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:03,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:03,096 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(6)), (np.int64(11), np.int64(12)))
2025-04-11 17:47:03,102 [INFO] Final candidates: []
2025-04-11 17:47:03,102 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:03,107 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:03,107 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:03,107 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:03,107 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:03,108 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:03,108 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:03,108 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:03,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:03,371 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:03,371 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:03,371 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(0)), (np.int64(1), np.int64(13)))
2025-04-11 17:47:03,377 [INFO] Final candidates: []
2025-04-11 17:47:03,377 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:03,381 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:03,382 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:03,382 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:03,382 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:03,383 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:03,383 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:03,383 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:03,383 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:03,464 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:03,464 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:03,464 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(2)), (np.int64(10), np.int64(7)))
2025-04-11 17:47:03,470 [INFO] Final candidates: []
2025-04-11 17:47:03,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:03,476 [INFO] Final candidates: []
2025-04-11 17:47:03,476 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:03,478 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:03,687 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:03,688 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:03,688 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(0), np.int64(13)))
2025-04-11 17:47:03,693 [INFO] Final candidates: []
2025-04-11 17:47:03,693 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:03,699 [INFO] Final candidates: []
2025-04-11 17:47:03,699 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:03,701 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:47:03,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:03,939 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:03,939 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:03,939 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(2)), (np.int64(11), np.int64(1)))
2025-04-11 17:47:03,941 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:47:03,941 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:47:03,941 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:47:03,941 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:47:03,945 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:47:03,945 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:47:03,945 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:03,955 [INFO] Final candidates: []
2025-04-11 17:47:03,955 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:03,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:04,226 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:04,227 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:04,227 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(9), np.int64(7)))
2025-04-11 17:47:04,239 [INFO] Final candidates: []
2025-04-11 17:47:04,239 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,245 [INFO] Final candidates: []
2025-04-11 17:47:04,245 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,247 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:04,292 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:04,292 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:04,292 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(3)), (np.int64(13), np.int64(2)))
2025-04-11 17:47:04,298 [INFO] Final candidates: []
2025-04-11 17:47:04,298 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,312 [INFO] Final candidates: []
2025-04-11 17:47:04,312 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,315 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:04,443 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:04,443 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:04,443 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(1), np.int64(5)))
2025-04-11 17:47:04,452 [INFO] Final candidates: []
2025-04-11 17:47:04,452 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,457 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:04,457 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:04,457 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:04,457 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:04,458 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:04,458 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:04,458 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:04,458 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:04,552 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:04,553 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:04,553 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(6)), (np.int64(10), np.int64(10)))
2025-04-11 17:47:04,558 [INFO] Final candidates: []
2025-04-11 17:47:04,558 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,563 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:04,563 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:04,563 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:04,563 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:04,565 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:04,565 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:04,565 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:04,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:04,706 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:04,706 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:04,707 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(9)), (np.int64(11), np.int64(3)))
2025-04-11 17:47:04,720 [INFO] Final candidates: []
2025-04-11 17:47:04,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,726 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:04,726 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:04,726 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:04,726 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:04,727 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:04,727 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:04,727 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:04,727 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:04,772 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:04,773 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:04,773 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(3), np.int64(9)))
2025-04-11 17:47:04,778 [INFO] Final candidates: []
2025-04-11 17:47:04,778 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,783 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:04,783 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:04,783 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:04,783 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:04,785 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:04,785 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:04,785 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:04,785 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:04,862 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:04,862 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:04,863 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(15), np.int64(5)), (np.int64(6), np.int64(13)))
2025-04-11 17:47:04,869 [INFO] Final candidates: []
2025-04-11 17:47:04,869 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:04,873 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:04,873 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:04,873 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:04,873 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:04,874 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:04,874 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:04,874 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:04,874 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:05,001 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:05,001 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:05,001 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(1)), (np.int64(12), np.int64(11)))
2025-04-11 17:47:05,003 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:47:05,003 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:47:05,003 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (11, 1)]
2025-04-11 17:47:05,003 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:47:05,007 [INFO] Final candidates: [(11, 1), (8, 1)]
2025-04-11 17:47:05,007 [INFO] Phase win: Collected 1unique candidate(s):[((11, 1), (8, 1))]
2025-04-11 17:47:05,007 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:05,012 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:05,012 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:05,012 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:05,012 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:05,013 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:05,013 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:05,013 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:05,013 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:05,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:05,219 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:05,219 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(10)), (np.int64(12), np.int64(7)))
2025-04-11 17:47:05,224 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:47:05,224 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:05,224 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (7, 7)]
2025-04-11 17:47:05,224 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:47:05,225 [INFO] Final candidates: [(6, 8), (7, 7)]
2025-04-11 17:47:05,225 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (7, 7))]
2025-04-11 17:47:05,225 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:05,231 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:05,231 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:05,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:05,231 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:05,232 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:05,232 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:05,232 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:05,232 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:05,404 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:05,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:05,404 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(18)), (np.int64(2), np.int64(10)))
2025-04-11 17:47:05,410 [INFO] Final candidates: []
2025-04-11 17:47:05,410 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:05,415 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:05,415 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:05,415 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:05,416 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:05,419 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:05,419 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:05,419 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:05,419 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:05,576 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:05,577 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:05,577 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(10), np.int64(0)))
2025-04-11 17:47:05,583 [INFO] Final candidates: []
2025-04-11 17:47:05,583 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:05,587 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:05,587 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:05,588 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:05,588 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:05,589 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:05,589 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:05,589 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:05,589 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:05,733 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:05,735 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:05,735 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(10), np.int64(10)))
2025-04-11 17:47:05,741 [INFO] Final candidates: []
2025-04-11 17:47:05,741 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:05,746 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:05,746 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:05,746 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:05,746 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:05,747 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:05,747 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:05,747 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:05,747 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:05,938 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:05,938 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:05,938 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(16), np.int64(1)))
2025-04-11 17:47:05,944 [INFO] Final candidates: []
2025-04-11 17:47:05,944 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:05,948 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:05,949 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:05,949 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:05,949 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:05,950 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:05,950 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:05,950 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:05,950 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:06,104 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:06,105 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:06,105 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(5)), (np.int64(13), np.int64(5)))
2025-04-11 17:47:06,105 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:47:06,105 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:47:06,105 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:47:06,105 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:47:06,105 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:06,106 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:47:06,106 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:47:06,106 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:06,111 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:47:06,111 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:47:06,111 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:47:06,120 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:06,120 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:06,120 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:06,120 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:06,122 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:06,122 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:06,122 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:06,122 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:06,188 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:06,189 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:06,189 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(11), np.int64(10)))
2025-04-11 17:47:06,195 [INFO] Final candidates: []
2025-04-11 17:47:06,195 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:06,200 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:06,200 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:06,200 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:06,200 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:06,201 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:06,201 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:06,201 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:06,201 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:06,403 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:06,403 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:06,403 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(13), np.int64(10)))
2025-04-11 17:47:06,409 [INFO] Final candidates: []
2025-04-11 17:47:06,409 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:06,414 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:06,414 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:06,414 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:06,414 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:06,415 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:06,415 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:06,415 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:06,415 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:06,615 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:06,615 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:06,615 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 17:47:06,622 [INFO] Final candidates: []
2025-04-11 17:47:06,622 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:06,627 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:06,627 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:06,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:06,627 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:06,628 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:06,628 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:06,628 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:06,628 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:06,777 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:06,778 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:06,778 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(5)), (np.int64(7), np.int64(13)))
2025-04-11 17:47:06,783 [INFO] Final candidates: []
2025-04-11 17:47:06,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:06,788 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:06,788 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:06,788 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:06,788 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:06,789 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:06,789 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:06,789 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:06,789 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:07,046 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:07,047 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:07,047 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(9), np.int64(11)))
2025-04-11 17:47:07,052 [INFO] Final candidates: []
2025-04-11 17:47:07,052 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:07,057 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:07,057 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:07,057 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:07,057 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:07,058 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:07,059 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:07,059 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:07,059 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:07,127 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:07,128 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:07,128 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(2)), (np.int64(13), np.int64(9)))
2025-04-11 17:47:07,133 [INFO] Final candidates: []
2025-04-11 17:47:07,134 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:07,138 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:07,138 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:07,138 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:07,139 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:07,140 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:07,140 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:07,140 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:07,140 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:07,306 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:07,306 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:07,306 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(17), np.int64(4)), (np.int64(12), np.int64(0)))
2025-04-11 17:47:07,312 [INFO] Final candidates: []
2025-04-11 17:47:07,312 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:07,317 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:07,317 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:07,317 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:07,317 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:07,320 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:07,320 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:07,320 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:07,320 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:07,540 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:07,540 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:07,541 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(4)), (np.int64(3), np.int64(18)))
2025-04-11 17:47:07,546 [INFO] Final candidates: []
2025-04-11 17:47:07,546 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:07,551 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:07,551 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:07,551 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:07,551 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:07,552 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:07,552 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:07,552 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:07,552 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:07,672 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:07,672 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:07,672 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(1), np.int64(2)))
2025-04-11 17:47:07,679 [INFO] Final candidates: []
2025-04-11 17:47:07,679 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:07,684 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:07,684 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:07,684 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:07,684 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:07,685 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:07,685 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:07,685 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:07,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:07,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:07,823 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:07,824 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(10), np.int64(9)))
2025-04-11 17:47:07,829 [INFO] Final candidates: []
2025-04-11 17:47:07,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:07,834 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:07,834 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:07,834 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:07,834 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:07,835 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:07,835 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:07,835 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:07,835 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:07,874 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:07,874 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:07,874 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(8)), (np.int64(11), np.int64(1)))
2025-04-11 17:47:07,876 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:47:07,876 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:47:07,876 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:47:07,876 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:47:07,880 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:47:07,880 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:47:07,880 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:07,885 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:07,885 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:07,885 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:07,885 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:07,886 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:07,886 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:07,886 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:07,886 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:08,076 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:08,076 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:08,076 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(10), np.int64(17)))
2025-04-11 17:47:08,082 [INFO] Final candidates: []
2025-04-11 17:47:08,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:08,086 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:08,087 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:08,087 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:08,087 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:08,088 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:08,088 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:08,088 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:08,088 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:08,246 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:08,247 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:08,247 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(1), np.int64(13)))
2025-04-11 17:47:08,252 [INFO] Final candidates: []
2025-04-11 17:47:08,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:08,259 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:08,259 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:08,259 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:08,259 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:08,260 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:08,260 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:08,260 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:08,260 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:08,586 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:08,586 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:08,587 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(9)), (np.int64(13), np.int64(3)))
2025-04-11 17:47:08,592 [INFO] Final candidates: []
2025-04-11 17:47:08,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:08,597 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:08,597 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:08,597 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:08,597 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:08,598 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:08,598 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:08,598 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:08,598 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:08,676 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:08,677 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:08,677 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(0)), (np.int64(14), np.int64(8)))
2025-04-11 17:47:08,683 [INFO] Final candidates: []
2025-04-11 17:47:08,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:08,688 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:08,688 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:08,688 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:08,688 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:08,689 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:08,689 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:08,689 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:08,689 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:08,800 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:08,801 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:08,801 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(2)), (np.int64(10), np.int64(0)))
2025-04-11 17:47:08,806 [INFO] Final candidates: []
2025-04-11 17:47:08,806 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:08,811 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:08,811 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:08,811 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:08,811 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:08,812 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:08,813 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:08,813 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:08,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:08,885 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:08,885 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:08,885 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(18)), (np.int64(4), np.int64(6)))
2025-04-11 17:47:08,891 [INFO] Final candidates: []
2025-04-11 17:47:08,891 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:08,896 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:08,896 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:08,896 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:08,896 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:08,897 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:08,897 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:08,897 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:08,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:09,024 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:09,024 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:09,025 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(11), np.int64(18)))
2025-04-11 17:47:09,030 [INFO] Final candidates: []
2025-04-11 17:47:09,030 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:09,035 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:09,035 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:09,035 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:09,035 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:09,036 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:09,036 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:09,036 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:09,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:09,270 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:09,270 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:09,270 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(8)), (np.int64(14), np.int64(5)))
2025-04-11 17:47:09,276 [INFO] Final candidates: []
2025-04-11 17:47:09,276 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:09,280 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:09,281 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:09,281 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:09,281 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:09,282 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:09,282 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:09,282 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:09,282 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:09,417 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:09,418 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:09,418 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(0), np.int64(13)))
2025-04-11 17:47:09,422 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:47:09,422 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:47:09,422 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (6, 8)]
2025-04-11 17:47:09,422 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:47:09,424 [INFO] Final candidates: [(4, 10), (6, 8)]
2025-04-11 17:47:09,424 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (6, 8))]
2025-04-11 17:47:09,424 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:09,428 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:09,428 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:09,428 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:09,429 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:09,430 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:09,430 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:09,430 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:09,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:09,553 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:09,553 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:09,553 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(18)), (np.int64(3), np.int64(9)))
2025-04-11 17:47:09,559 [INFO] Final candidates: []
2025-04-11 17:47:09,559 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:09,564 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:09,564 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:09,564 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:09,564 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:09,565 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:09,565 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:09,565 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:09,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:09,670 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:09,670 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:09,670 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(15), np.int64(10)))
2025-04-11 17:47:09,677 [INFO] Final candidates: []
2025-04-11 17:47:09,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:09,682 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:09,682 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:09,682 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:09,682 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:09,683 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:09,683 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:09,683 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:09,683 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:09,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:09,909 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:09,909 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(10), np.int64(13)))
2025-04-11 17:47:09,915 [INFO] Final candidates: []
2025-04-11 17:47:09,915 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:09,920 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:09,920 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:09,920 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:09,920 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:09,921 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:09,921 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:09,921 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:09,921 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:10,146 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:10,146 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:10,147 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(3), np.int64(9)))
2025-04-11 17:47:10,152 [INFO] Final candidates: []
2025-04-11 17:47:10,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:10,157 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:10,157 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:10,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:10,157 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:10,158 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:10,158 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:10,158 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:10,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:10,335 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:10,336 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:10,336 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(11)), (np.int64(9), np.int64(18)))
2025-04-11 17:47:10,341 [INFO] Final candidates: []
2025-04-11 17:47:10,341 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:10,346 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:10,346 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:10,346 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:10,347 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:10,348 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:10,348 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:10,348 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:10,348 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:10,472 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:10,472 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:10,472 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(14), np.int64(7)))
2025-04-11 17:47:10,479 [INFO] Final candidates: []
2025-04-11 17:47:10,479 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:10,484 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:10,484 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:10,484 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:10,484 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:10,485 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:10,485 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:10,485 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:10,485 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:10,596 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:10,597 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:10,597 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(6)), (np.int64(2), np.int64(9)))
2025-04-11 17:47:10,603 [INFO] Final candidates: []
2025-04-11 17:47:10,603 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:10,608 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:10,608 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:10,608 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:10,608 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:10,609 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:10,609 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:10,609 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:10,609 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:10,793 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:10,794 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:10,794 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(11)), (np.int64(13), np.int64(6)))
2025-04-11 17:47:10,800 [INFO] Final candidates: []
2025-04-11 17:47:10,800 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:10,805 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:10,805 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:10,805 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:10,805 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:10,806 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:10,806 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:10,806 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:10,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:11,056 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:11,056 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:11,056 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(11)), (np.int64(11), np.int64(12)))
2025-04-11 17:47:11,062 [INFO] Final candidates: []
2025-04-11 17:47:11,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:11,067 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:11,067 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:11,067 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:11,067 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:11,068 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:11,068 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:11,068 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:11,068 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:11,161 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:11,161 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:11,161 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(18)), (np.int64(11), np.int64(10)))
2025-04-11 17:47:11,167 [INFO] Final candidates: []
2025-04-11 17:47:11,167 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:11,172 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:11,172 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:11,172 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:11,172 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:11,173 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:11,173 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:11,173 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:11,173 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:11,199 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:11,199 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:11,199 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(12), np.int64(10)))
2025-04-11 17:47:11,205 [INFO] Final candidates: []
2025-04-11 17:47:11,205 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:11,210 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:11,210 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:11,210 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:11,210 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:11,211 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:11,211 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:11,211 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:11,211 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:11,414 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:11,414 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:11,414 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(16), np.int64(4)), (np.int64(2), np.int64(16)))
2025-04-11 17:47:11,420 [INFO] Final candidates: []
2025-04-11 17:47:11,420 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:11,425 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:11,425 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:11,425 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:11,425 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:11,426 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:11,426 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:11,426 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:11,426 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:11,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:11,671 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:11,671 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(14), np.int64(1)), (np.int64(9), np.int64(18)))
2025-04-11 17:47:11,677 [INFO] Final candidates: []
2025-04-11 17:47:11,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:11,682 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:11,682 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:11,682 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:11,682 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:11,683 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:11,683 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:11,683 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:11,683 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:11,847 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:11,848 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:11,848 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(2)), (np.int64(16), np.int64(1)))
2025-04-11 17:47:11,848 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:47:11,848 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:47:11,848 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:47:11,848 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:47:11,854 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:47:11,854 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:47:11,854 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:11,859 [DEBUG] board coords: [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)]
2025-04-11 17:47:11,859 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 17:47:11,859 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 8), (10, 7)]
2025-04-11 17:47:11,859 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 0 1 1 1] with coords [(8, 9), (9, 8), (10, 7), (11, 6), (12, 5), (13, 4)] triggers candidate.
2025-04-11 17:47:11,860 [INFO] Final candidates: [(10, 7), (9, 8)]
2025-04-11 17:47:11,860 [INFO] Phase defense: Collected 1unique candidate(s):[((10, 7), (9, 8))]
2025-04-11 17:47:11,860 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:47:11,860 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:12,053 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:12,053 [INFO] MCTS: Search finished. Best move selected with 2 visits.
2025-04-11 17:47:12,053 [INFO] MCTS (defense candidates) selected move: F13,G12
2025-04-11 17:47:12,306 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:47:12,312 [INFO] Final candidates: []
2025-04-11 17:47:12,312 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,318 [INFO] Final candidates: []
2025-04-11 17:47:12,318 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,318 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:47:12,320 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:47:12,320 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(9), np.int64(11)))
2025-04-11 17:47:12,325 [INFO] Final candidates: []
2025-04-11 17:47:12,325 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,331 [INFO] Final candidates: []
2025-04-11 17:47:12,331 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,333 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:47:12,333 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:12,448 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:12,448 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(8), np.int64(8)))
2025-04-11 17:47:12,454 [INFO] Final candidates: []
2025-04-11 17:47:12,454 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,460 [INFO] Final candidates: []
2025-04-11 17:47:12,460 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,462 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:12,534 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:12,534 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(8), np.int64(1)))
2025-04-11 17:47:12,536 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:47:12,536 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:47:12,536 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 1), (11, 1)]
2025-04-11 17:47:12,536 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:47:12,540 [INFO] Final candidates: [(11, 1), (9, 1)]
2025-04-11 17:47:12,540 [INFO] Phase win: Collected 1unique candidate(s):[((11, 1), (9, 1))]
2025-04-11 17:47:12,540 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:12,546 [INFO] Final candidates: []
2025-04-11 17:47:12,546 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,547 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:12,709 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:12,709 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(10), np.int64(10)))
2025-04-11 17:47:12,715 [INFO] Final candidates: []
2025-04-11 17:47:12,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,720 [INFO] Final candidates: []
2025-04-11 17:47:12,720 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,722 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:12,759 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:12,759 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(14), np.int64(7)))
2025-04-11 17:47:12,765 [INFO] Final candidates: []
2025-04-11 17:47:12,765 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,771 [INFO] Final candidates: []
2025-04-11 17:47:12,771 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:12,773 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:13,022 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:13,023 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(2), np.int64(16)))
2025-04-11 17:47:13,028 [INFO] Final candidates: []
2025-04-11 17:47:13,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,034 [INFO] Final candidates: []
2025-04-11 17:47:13,034 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:13,267 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:13,268 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(8), np.int64(8)))
2025-04-11 17:47:13,273 [INFO] Final candidates: []
2025-04-11 17:47:13,273 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,279 [INFO] Final candidates: []
2025-04-11 17:47:13,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:13,508 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:13,508 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(17)), (np.int64(10), np.int64(13)))
2025-04-11 17:47:13,514 [INFO] Final candidates: []
2025-04-11 17:47:13,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,519 [INFO] Final candidates: []
2025-04-11 17:47:13,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,521 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:13,711 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:13,712 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(2)), (np.int64(2), np.int64(9)))
2025-04-11 17:47:13,717 [INFO] Final candidates: []
2025-04-11 17:47:13,717 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,724 [INFO] Final candidates: []
2025-04-11 17:47:13,724 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,726 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:13,864 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:13,865 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(16)), (np.int64(12), np.int64(7)))
2025-04-11 17:47:13,870 [INFO] Final candidates: []
2025-04-11 17:47:13,870 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,876 [INFO] Final candidates: []
2025-04-11 17:47:13,876 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:13,878 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:14,058 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:14,058 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(11), np.int64(4)))
2025-04-11 17:47:14,064 [INFO] Final candidates: []
2025-04-11 17:47:14,064 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,069 [INFO] Final candidates: []
2025-04-11 17:47:14,069 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,071 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:14,186 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:14,186 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(3), np.int64(10)))
2025-04-11 17:47:14,200 [INFO] Final candidates: []
2025-04-11 17:47:14,200 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,213 [INFO] Final candidates: []
2025-04-11 17:47:14,213 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,215 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:14,446 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:14,447 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(17)), (np.int64(12), np.int64(0)))
2025-04-11 17:47:14,460 [INFO] Final candidates: []
2025-04-11 17:47:14,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,466 [INFO] Final candidates: []
2025-04-11 17:47:14,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,468 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:14,606 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:14,607 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(1)))
2025-04-11 17:47:14,608 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:47:14,608 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:47:14,608 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 1), (11, 1)]
2025-04-11 17:47:14,608 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:47:14,612 [INFO] Final candidates: [(11, 1), (9, 1)]
2025-04-11 17:47:14,612 [INFO] Phase win: Collected 1unique candidate(s):[((11, 1), (9, 1))]
2025-04-11 17:47:14,612 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:14,618 [INFO] Final candidates: []
2025-04-11 17:47:14,618 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,620 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:14,677 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:14,678 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(13)))
2025-04-11 17:47:14,683 [INFO] Final candidates: []
2025-04-11 17:47:14,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,689 [INFO] Final candidates: []
2025-04-11 17:47:14,689 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,691 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:14,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:14,843 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(12), np.int64(10)))
2025-04-11 17:47:14,848 [INFO] Final candidates: []
2025-04-11 17:47:14,848 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,854 [INFO] Final candidates: []
2025-04-11 17:47:14,854 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,855 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:14,976 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:14,976 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(5)), (np.int64(14), np.int64(7)))
2025-04-11 17:47:14,983 [INFO] Final candidates: []
2025-04-11 17:47:14,983 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,989 [INFO] Final candidates: []
2025-04-11 17:47:14,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:14,991 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:15,048 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:15,048 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(9), np.int64(11)))
2025-04-11 17:47:15,052 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:47:15,052 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:15,052 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (7, 7)]
2025-04-11 17:47:15,053 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:47:15,054 [INFO] Final candidates: [(6, 8), (7, 7)]
2025-04-11 17:47:15,054 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (7, 7))]
2025-04-11 17:47:15,054 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:15,060 [INFO] Final candidates: []
2025-04-11 17:47:15,060 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,061 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:15,277 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:15,277 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(7), np.int64(13)))
2025-04-11 17:47:15,283 [INFO] Final candidates: []
2025-04-11 17:47:15,283 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,289 [INFO] Final candidates: []
2025-04-11 17:47:15,289 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:15,348 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:15,348 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(8), np.int64(8)))
2025-04-11 17:47:15,354 [INFO] Final candidates: []
2025-04-11 17:47:15,354 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,359 [INFO] Final candidates: []
2025-04-11 17:47:15,359 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,361 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:15,556 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:15,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(0)), (np.int64(11), np.int64(17)))
2025-04-11 17:47:15,562 [INFO] Final candidates: []
2025-04-11 17:47:15,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,568 [INFO] Final candidates: []
2025-04-11 17:47:15,568 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:15,826 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:15,826 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(2)), (np.int64(7), np.int64(13)))
2025-04-11 17:47:15,833 [INFO] Final candidates: []
2025-04-11 17:47:15,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,838 [INFO] Final candidates: []
2025-04-11 17:47:15,838 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,840 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:15,984 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:15,984 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(3)), (np.int64(6), np.int64(10)))
2025-04-11 17:47:15,984 [DEBUG] board coords: [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)]
2025-04-11 17:47:15,984 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:47:15,984 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 12)]
2025-04-11 17:47:15,984 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)] triggers candidate.
2025-04-11 17:47:15,990 [INFO] Final candidates: [(6, 12), (6, 8)]
2025-04-11 17:47:15,990 [INFO] Phase win: Collected 1unique candidate(s):[((6, 12), (6, 8))]
2025-04-11 17:47:15,990 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:15,995 [INFO] Final candidates: []
2025-04-11 17:47:15,995 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:15,997 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:16,159 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:16,159 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(11), np.int64(8)))
2025-04-11 17:47:16,165 [INFO] Final candidates: []
2025-04-11 17:47:16,165 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,171 [INFO] Final candidates: []
2025-04-11 17:47:16,171 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,172 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:16,385 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:16,386 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(10)), (np.int64(2), np.int64(8)))
2025-04-11 17:47:16,391 [INFO] Final candidates: []
2025-04-11 17:47:16,391 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,397 [INFO] Final candidates: []
2025-04-11 17:47:16,397 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,399 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:16,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:16,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(2)), (np.int64(16), np.int64(1)))
2025-04-11 17:47:16,500 [INFO] Final candidates: []
2025-04-11 17:47:16,500 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,506 [INFO] Final candidates: []
2025-04-11 17:47:16,506 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,508 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:16,730 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:16,731 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(1), np.int64(13)))
2025-04-11 17:47:16,737 [INFO] Final candidates: []
2025-04-11 17:47:16,737 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,742 [INFO] Final candidates: []
2025-04-11 17:47:16,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,744 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:16,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:16,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(3), np.int64(18)))
2025-04-11 17:47:16,829 [INFO] Final candidates: []
2025-04-11 17:47:16,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,835 [INFO] Final candidates: []
2025-04-11 17:47:16,835 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:16,836 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:17,045 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:17,045 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(1), np.int64(16)))
2025-04-11 17:47:17,051 [INFO] Final candidates: []
2025-04-11 17:47:17,051 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,059 [INFO] Final candidates: []
2025-04-11 17:47:17,059 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,061 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:17,324 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:17,324 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(2)), (np.int64(7), np.int64(11)))
2025-04-11 17:47:17,330 [INFO] Final candidates: []
2025-04-11 17:47:17,330 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,335 [INFO] Final candidates: []
2025-04-11 17:47:17,335 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:17,671 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:17,671 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(9)), (np.int64(3), np.int64(18)))
2025-04-11 17:47:17,677 [INFO] Final candidates: []
2025-04-11 17:47:17,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,683 [INFO] Final candidates: []
2025-04-11 17:47:17,683 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,685 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:17,881 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:17,881 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(5)), (np.int64(13), np.int64(6)))
2025-04-11 17:47:17,887 [INFO] Final candidates: []
2025-04-11 17:47:17,887 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,894 [INFO] Final candidates: []
2025-04-11 17:47:17,894 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:17,896 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:18,023 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:18,023 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(7)), (np.int64(11), np.int64(3)))
2025-04-11 17:47:18,029 [INFO] Final candidates: []
2025-04-11 17:47:18,029 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,035 [INFO] Final candidates: []
2025-04-11 17:47:18,035 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:18,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:18,293 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(4), np.int64(6)))
2025-04-11 17:47:18,293 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:47:18,293 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:47:18,293 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:47:18,293 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:47:18,293 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:18,293 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:47:18,293 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:47:18,293 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:18,302 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:47:18,302 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:47:18,302 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:47:18,307 [INFO] Final candidates: []
2025-04-11 17:47:18,308 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,309 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:18,520 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:18,520 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(0), np.int64(6)))
2025-04-11 17:47:18,521 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:47:18,521 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:18,521 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:47:18,521 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:47:18,521 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:18,521 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:47:18,521 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:47:18,521 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:18,527 [INFO] Final candidates: [(0, 2), (0, 5), (0, 8)]
2025-04-11 17:47:18,527 [INFO] Phase win: Collected 3unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (0, 8)), ((0, 2), (0, 5))]
2025-04-11 17:47:18,527 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:47:18,537 [INFO] Final candidates: []
2025-04-11 17:47:18,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,539 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:18,749 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:18,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(15), np.int64(4)))
2025-04-11 17:47:18,758 [INFO] Final candidates: []
2025-04-11 17:47:18,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,767 [INFO] Final candidates: []
2025-04-11 17:47:18,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,769 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:18,879 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:18,879 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(2)), (np.int64(10), np.int64(9)))
2025-04-11 17:47:18,885 [INFO] Final candidates: []
2025-04-11 17:47:18,885 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,891 [INFO] Final candidates: []
2025-04-11 17:47:18,891 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:18,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:19,108 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:19,108 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(7)), (np.int64(14), np.int64(6)))
2025-04-11 17:47:19,114 [INFO] Final candidates: []
2025-04-11 17:47:19,114 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,119 [INFO] Final candidates: []
2025-04-11 17:47:19,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:19,295 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:19,295 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(12), np.int64(3)))
2025-04-11 17:47:19,301 [INFO] Final candidates: []
2025-04-11 17:47:19,301 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,306 [INFO] Final candidates: []
2025-04-11 17:47:19,306 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,308 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:19,453 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:19,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(7), np.int64(13)))
2025-04-11 17:47:19,459 [INFO] Final candidates: []
2025-04-11 17:47:19,459 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,464 [INFO] Final candidates: []
2025-04-11 17:47:19,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,466 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:19,614 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:19,614 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(3), np.int64(17)))
2025-04-11 17:47:19,620 [INFO] Final candidates: []
2025-04-11 17:47:19,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,626 [INFO] Final candidates: []
2025-04-11 17:47:19,626 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,627 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:19,803 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:19,803 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(13), np.int64(5)))
2025-04-11 17:47:19,809 [INFO] Final candidates: []
2025-04-11 17:47:19,809 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,816 [INFO] Final candidates: []
2025-04-11 17:47:19,816 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:19,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:20,013 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:20,013 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(1), np.int64(12)))
2025-04-11 17:47:20,019 [INFO] Final candidates: []
2025-04-11 17:47:20,019 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,024 [INFO] Final candidates: []
2025-04-11 17:47:20,025 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:20,238 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:20,238 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(16), np.int64(9)))
2025-04-11 17:47:20,244 [INFO] Final candidates: []
2025-04-11 17:47:20,244 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,250 [INFO] Final candidates: []
2025-04-11 17:47:20,250 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,252 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:20,370 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:20,371 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(16), np.int64(4)), (np.int64(6), np.int64(0)))
2025-04-11 17:47:20,377 [INFO] Final candidates: []
2025-04-11 17:47:20,377 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,383 [INFO] Final candidates: []
2025-04-11 17:47:20,383 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,384 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:20,585 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:20,586 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(4), np.int64(6)))
2025-04-11 17:47:20,591 [INFO] Final candidates: []
2025-04-11 17:47:20,591 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,597 [INFO] Final candidates: []
2025-04-11 17:47:20,597 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:20,701 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:20,702 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(9), np.int64(11)))
2025-04-11 17:47:20,713 [INFO] Final candidates: []
2025-04-11 17:47:20,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,724 [INFO] Final candidates: []
2025-04-11 17:47:20,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,726 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:20,930 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:20,930 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(18)), (np.int64(3), np.int64(18)))
2025-04-11 17:47:20,936 [INFO] Final candidates: []
2025-04-11 17:47:20,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,942 [INFO] Final candidates: []
2025-04-11 17:47:20,942 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:20,944 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:21,156 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:21,156 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(1)), (np.int64(12), np.int64(2)))
2025-04-11 17:47:21,158 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:47:21,158 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:47:21,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (9, 1)]
2025-04-11 17:47:21,158 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:47:21,162 [INFO] Final candidates: [(9, 1), (8, 1)]
2025-04-11 17:47:21,162 [INFO] Phase win: Collected 1unique candidate(s):[((9, 1), (8, 1))]
2025-04-11 17:47:21,162 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:21,168 [INFO] Final candidates: []
2025-04-11 17:47:21,168 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:21,170 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:21,376 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:21,376 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(1), np.int64(4)))
2025-04-11 17:47:21,382 [INFO] Final candidates: []
2025-04-11 17:47:21,382 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:21,389 [INFO] Final candidates: []
2025-04-11 17:47:21,389 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:21,391 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:21,628 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:21,628 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(3), np.int64(9)))
2025-04-11 17:47:21,634 [INFO] Final candidates: []
2025-04-11 17:47:21,634 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:21,640 [INFO] Final candidates: []
2025-04-11 17:47:21,640 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:21,641 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:47:21,642 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:21,846 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:21,847 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(18)), (np.int64(4), np.int64(6)))
2025-04-11 17:47:21,852 [INFO] Final candidates: []
2025-04-11 17:47:21,852 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:21,858 [INFO] Final candidates: []
2025-04-11 17:47:21,858 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:21,860 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:22,026 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:22,026 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(12), np.int64(3)))
2025-04-11 17:47:22,032 [INFO] Final candidates: []
2025-04-11 17:47:22,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,037 [INFO] Final candidates: []
2025-04-11 17:47:22,037 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,039 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:22,170 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:22,170 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(10), np.int64(10)))
2025-04-11 17:47:22,176 [INFO] Final candidates: []
2025-04-11 17:47:22,176 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,181 [INFO] Final candidates: []
2025-04-11 17:47:22,181 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,183 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:22,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:22,274 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(5)), (np.int64(4), np.int64(8)))
2025-04-11 17:47:22,282 [INFO] Final candidates: []
2025-04-11 17:47:22,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,296 [INFO] Final candidates: []
2025-04-11 17:47:22,296 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:22,436 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:22,436 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(1), np.int64(4)))
2025-04-11 17:47:22,442 [INFO] Final candidates: []
2025-04-11 17:47:22,442 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,448 [INFO] Final candidates: []
2025-04-11 17:47:22,448 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,450 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:22,556 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:22,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(14), np.int64(10)))
2025-04-11 17:47:22,562 [INFO] Final candidates: []
2025-04-11 17:47:22,563 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,568 [INFO] Final candidates: []
2025-04-11 17:47:22,568 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:22,766 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:22,766 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(8), np.int64(13)))
2025-04-11 17:47:22,772 [INFO] Final candidates: []
2025-04-11 17:47:22,772 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,778 [INFO] Final candidates: []
2025-04-11 17:47:22,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,779 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:22,967 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:22,968 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(11), np.int64(8)))
2025-04-11 17:47:22,973 [INFO] Final candidates: []
2025-04-11 17:47:22,973 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,979 [INFO] Final candidates: []
2025-04-11 17:47:22,979 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:22,980 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:23,213 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:23,213 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(11), np.int64(10)))
2025-04-11 17:47:23,219 [INFO] Final candidates: []
2025-04-11 17:47:23,219 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,224 [INFO] Final candidates: []
2025-04-11 17:47:23,224 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,226 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:23,303 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:23,303 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(4), np.int64(8)))
2025-04-11 17:47:23,309 [INFO] Final candidates: []
2025-04-11 17:47:23,309 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,315 [INFO] Final candidates: []
2025-04-11 17:47:23,315 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,316 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:23,466 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:23,466 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(4), np.int64(11)))
2025-04-11 17:47:23,472 [INFO] Final candidates: []
2025-04-11 17:47:23,472 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,478 [INFO] Final candidates: []
2025-04-11 17:47:23,478 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,480 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:23,723 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:23,723 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(2)), (np.int64(9), np.int64(18)))
2025-04-11 17:47:23,729 [INFO] Final candidates: []
2025-04-11 17:47:23,729 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,737 [INFO] Final candidates: []
2025-04-11 17:47:23,737 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,739 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:23,926 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:23,926 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(4)), (np.int64(0), np.int64(13)))
2025-04-11 17:47:23,932 [INFO] Final candidates: []
2025-04-11 17:47:23,932 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,938 [INFO] Final candidates: []
2025-04-11 17:47:23,938 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:23,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:24,220 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:24,220 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(2), np.int64(8)))
2025-04-11 17:47:24,226 [INFO] Final candidates: []
2025-04-11 17:47:24,226 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,232 [INFO] Final candidates: []
2025-04-11 17:47:24,232 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,233 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:24,339 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:24,339 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(5)), (np.int64(3), np.int64(4)))
2025-04-11 17:47:24,339 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:47:24,339 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:47:24,339 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 6)]
2025-04-11 17:47:24,339 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:47:24,339 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:24,340 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:47:24,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 6), (0, 8)]
2025-04-11 17:47:24,340 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:24,345 [INFO] Final candidates: [(0, 2), (0, 8), (0, 6)]
2025-04-11 17:47:24,345 [INFO] Phase win: Collected 3unique candidate(s):[((0, 2), (0, 6)), ((0, 2), (0, 8)), ((0, 8), (0, 6))]
2025-04-11 17:47:24,345 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:47:24,351 [INFO] Final candidates: []
2025-04-11 17:47:24,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,353 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:24,608 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:24,608 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(4), np.int64(8)))
2025-04-11 17:47:24,614 [INFO] Final candidates: []
2025-04-11 17:47:24,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,620 [INFO] Final candidates: []
2025-04-11 17:47:24,620 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,621 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:24,702 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:24,702 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(8)), (np.int64(9), np.int64(7)))
2025-04-11 17:47:24,708 [INFO] Final candidates: []
2025-04-11 17:47:24,708 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,714 [INFO] Final candidates: []
2025-04-11 17:47:24,714 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,723 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:24,884 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:24,884 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(2), np.int64(9)))
2025-04-11 17:47:24,884 [DEBUG] board coords: [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)]
2025-04-11 17:47:24,884 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:24,884 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (6, 10)]
2025-04-11 17:47:24,884 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 0 2 2] with coords [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)] triggers candidate.
2025-04-11 17:47:24,890 [INFO] Final candidates: [(6, 8), (6, 10)]
2025-04-11 17:47:24,890 [INFO] Phase win: Collected 1unique candidate(s):[((6, 8), (6, 10))]
2025-04-11 17:47:24,890 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:24,895 [INFO] Final candidates: []
2025-04-11 17:47:24,895 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:24,897 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:25,080 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:26,018 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(7)), (np.int64(4), np.int64(8)))
2025-04-11 17:47:26,027 [INFO] Final candidates: []
2025-04-11 17:47:26,027 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,032 [INFO] Final candidates: []
2025-04-11 17:47:26,032 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,034 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:26,223 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:26,223 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(4)), (np.int64(10), np.int64(0)))
2025-04-11 17:47:26,229 [INFO] Final candidates: []
2025-04-11 17:47:26,229 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,235 [INFO] Final candidates: []
2025-04-11 17:47:26,235 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,236 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:26,352 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:26,353 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(15), np.int64(3)))
2025-04-11 17:47:26,358 [INFO] Final candidates: []
2025-04-11 17:47:26,358 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,364 [INFO] Final candidates: []
2025-04-11 17:47:26,364 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,366 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:26,541 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:26,541 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(5)), (np.int64(14), np.int64(5)))
2025-04-11 17:47:26,547 [INFO] Final candidates: []
2025-04-11 17:47:26,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,553 [INFO] Final candidates: []
2025-04-11 17:47:26,553 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,554 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:26,704 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:26,704 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(1), np.int64(2)))
2025-04-11 17:47:26,710 [INFO] Final candidates: []
2025-04-11 17:47:26,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,715 [INFO] Final candidates: []
2025-04-11 17:47:26,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:26,901 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:26,902 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(15), np.int64(3)))
2025-04-11 17:47:26,908 [INFO] Final candidates: []
2025-04-11 17:47:26,908 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,913 [INFO] Final candidates: []
2025-04-11 17:47:26,913 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:26,915 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:27,188 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:27,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(0), np.int64(6)))
2025-04-11 17:47:27,189 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:47:27,189 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:27,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:47:27,189 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:47:27,189 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:27,189 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:47:27,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:47:27,189 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:27,193 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:47:27,193 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:27,193 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 8), (7, 7)]
2025-04-11 17:47:27,193 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:47:27,195 [INFO] Final candidates: [(7, 7), (6, 8), (0, 2), (0, 5), (0, 8)]
2025-04-11 17:47:27,195 [INFO] Phase win: Collected 10unique candidate(s):[((0, 5), (0, 8)), ((7, 7), (6, 8)), ((7, 7), (0, 8)), ((6, 8), (0, 2)), ((7, 7), (0, 5)), ((0, 2), (0, 8)), ((6, 8), (0, 8)), ((7, 7), (0, 2)), ((0, 2), (0, 5)), ((6, 8), (0, 5))]
2025-04-11 17:47:27,195 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:47:27,200 [INFO] Final candidates: []
2025-04-11 17:47:27,201 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:27,442 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:27,442 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(15), np.int64(8)))
2025-04-11 17:47:27,448 [INFO] Final candidates: []
2025-04-11 17:47:27,448 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,454 [INFO] Final candidates: []
2025-04-11 17:47:27,454 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,455 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:27,596 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:27,596 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(2), np.int64(8)))
2025-04-11 17:47:27,602 [INFO] Final candidates: []
2025-04-11 17:47:27,602 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,607 [INFO] Final candidates: []
2025-04-11 17:47:27,607 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,609 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:27,703 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:27,703 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(10)), (np.int64(4), np.int64(16)))
2025-04-11 17:47:27,709 [INFO] Final candidates: []
2025-04-11 17:47:27,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,715 [INFO] Final candidates: []
2025-04-11 17:47:27,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:27,915 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:27,915 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(0), np.int64(12)))
2025-04-11 17:47:27,921 [INFO] Final candidates: []
2025-04-11 17:47:27,921 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,926 [INFO] Final candidates: []
2025-04-11 17:47:27,926 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:27,928 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:28,072 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:28,072 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(13), np.int64(6)))
2025-04-11 17:47:28,078 [INFO] Final candidates: []
2025-04-11 17:47:28,078 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,083 [INFO] Final candidates: []
2025-04-11 17:47:28,083 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,085 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:28,208 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:28,208 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(10), np.int64(12)))
2025-04-11 17:47:28,214 [INFO] Final candidates: []
2025-04-11 17:47:28,214 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,219 [INFO] Final candidates: []
2025-04-11 17:47:28,219 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,221 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:28,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:28,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(12), np.int64(0)))
2025-04-11 17:47:28,458 [INFO] Final candidates: []
2025-04-11 17:47:28,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,464 [INFO] Final candidates: []
2025-04-11 17:47:28,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,466 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:28,679 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:28,680 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(3)), (np.int64(10), np.int64(17)))
2025-04-11 17:47:28,685 [INFO] Final candidates: []
2025-04-11 17:47:28,685 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,691 [INFO] Final candidates: []
2025-04-11 17:47:28,691 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,693 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:28,885 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:28,885 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(0), np.int64(8)))
2025-04-11 17:47:28,886 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:28,886 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:28,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:47:28,886 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:28,891 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:47:28,891 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:47:28,891 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:28,898 [INFO] Final candidates: []
2025-04-11 17:47:28,898 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:28,902 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:29,024 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:29,025 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(0), np.int64(8)))
2025-04-11 17:47:29,025 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:29,025 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:29,025 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 6)]
2025-04-11 17:47:29,025 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:29,030 [INFO] Final candidates: [(0, 5), (0, 6)]
2025-04-11 17:47:29,030 [INFO] Phase win: Collected 1unique candidate(s):[((0, 5), (0, 6))]
2025-04-11 17:47:29,030 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:29,036 [INFO] Final candidates: []
2025-04-11 17:47:29,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,038 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:29,247 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:29,247 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(6), np.int64(14)))
2025-04-11 17:47:29,254 [INFO] Final candidates: []
2025-04-11 17:47:29,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,259 [INFO] Final candidates: []
2025-04-11 17:47:29,259 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,261 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:29,572 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:29,573 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(10), np.int64(17)))
2025-04-11 17:47:29,574 [DEBUG] board coords: [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]
2025-04-11 17:47:29,574 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:47:29,574 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 1), (11, 1)]
2025-04-11 17:47:29,574 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] triggers candidate.
2025-04-11 17:47:29,579 [INFO] Final candidates: [(11, 1), (8, 1)]
2025-04-11 17:47:29,579 [INFO] Phase win: Collected 1unique candidate(s):[((11, 1), (8, 1))]
2025-04-11 17:47:29,579 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:29,584 [INFO] Final candidates: []
2025-04-11 17:47:29,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,586 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:29,711 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:29,711 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(0)), (np.int64(12), np.int64(0)))
2025-04-11 17:47:29,717 [INFO] Final candidates: []
2025-04-11 17:47:29,717 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,723 [INFO] Final candidates: []
2025-04-11 17:47:29,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,725 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:29,795 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:29,795 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(17), np.int64(4)), (np.int64(0), np.int64(13)))
2025-04-11 17:47:29,800 [INFO] Final candidates: []
2025-04-11 17:47:29,800 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,806 [INFO] Final candidates: []
2025-04-11 17:47:29,806 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,808 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:29,930 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:29,931 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(4), np.int64(16)))
2025-04-11 17:47:29,936 [INFO] Final candidates: []
2025-04-11 17:47:29,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,942 [INFO] Final candidates: []
2025-04-11 17:47:29,942 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:29,944 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:30,095 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:30,095 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(15)), (np.int64(14), np.int64(6)))
2025-04-11 17:47:30,101 [INFO] Final candidates: []
2025-04-11 17:47:30,101 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,107 [INFO] Final candidates: []
2025-04-11 17:47:30,107 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,109 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:30,235 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:30,235 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(0)), (np.int64(3), np.int64(4)))
2025-04-11 17:47:30,241 [INFO] Final candidates: []
2025-04-11 17:47:30,241 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,247 [INFO] Final candidates: []
2025-04-11 17:47:30,247 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,250 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:30,371 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:30,372 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(15), np.int64(5)), (np.int64(3), np.int64(11)))
2025-04-11 17:47:30,386 [INFO] Final candidates: []
2025-04-11 17:47:30,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,393 [INFO] Final candidates: []
2025-04-11 17:47:30,393 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,395 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:30,572 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:30,573 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(4), np.int64(16)))
2025-04-11 17:47:30,578 [INFO] Final candidates: []
2025-04-11 17:47:30,578 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,584 [INFO] Final candidates: []
2025-04-11 17:47:30,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,586 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:30,734 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:30,734 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(3), np.int64(11)))
2025-04-11 17:47:30,740 [INFO] Final candidates: []
2025-04-11 17:47:30,740 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,745 [INFO] Final candidates: []
2025-04-11 17:47:30,745 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,747 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:30,860 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:30,860 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(6), np.int64(8)))
2025-04-11 17:47:30,861 [DEBUG] board coords: [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)]
2025-04-11 17:47:30,861 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:47:30,861 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 10), (6, 12)]
2025-04-11 17:47:30,861 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)] triggers candidate.
2025-04-11 17:47:30,865 [DEBUG] board coords: [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)]
2025-04-11 17:47:30,865 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:30,865 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (7, 7)]
2025-04-11 17:47:30,865 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(4, 10), (5, 9), (6, 8), (7, 7), (8, 6), (9, 5)] triggers candidate.
2025-04-11 17:47:30,866 [INFO] Final candidates: [(6, 12), (4, 10), (6, 10), (7, 7)]
2025-04-11 17:47:30,866 [INFO] Phase win: Collected 6unique candidate(s):[((6, 12), (7, 7)), ((6, 12), (6, 10)), ((4, 10), (7, 7)), ((6, 12), (4, 10)), ((4, 10), (6, 10)), ((6, 10), (7, 7))]
2025-04-11 17:47:30,866 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 17:47:30,872 [INFO] Final candidates: []
2025-04-11 17:47:30,872 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:30,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,000 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:31,001 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(0)), (np.int64(11), np.int64(7)))
2025-04-11 17:47:31,006 [INFO] Final candidates: []
2025-04-11 17:47:31,006 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:31,012 [INFO] Final candidates: []
2025-04-11 17:47:31,012 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:31,013 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,237 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:31,237 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(6)), (np.int64(11), np.int64(10)))
2025-04-11 17:47:31,237 [DEBUG] board coords: [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
2025-04-11 17:47:31,237 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:47:31,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 2), (0, 5)]
2025-04-11 17:47:31,237 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)] triggers candidate.
2025-04-11 17:47:31,237 [DEBUG] board coords: [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)]
2025-04-11 17:47:31,237 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:47:31,237 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 5), (0, 8)]
2025-04-11 17:47:31,238 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)] triggers candidate.
2025-04-11 17:47:31,243 [INFO] Final candidates: [(0, 2), (0, 5), (0, 8)]
2025-04-11 17:47:31,243 [INFO] Phase win: Collected 3unique candidate(s):[((0, 5), (0, 8)), ((0, 2), (0, 8)), ((0, 2), (0, 5))]
2025-04-11 17:47:31,243 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:47:31,250 [INFO] Final candidates: []
2025-04-11 17:47:31,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:31,252 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,365 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:47:31,366 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(16), np.int64(5)))
2025-04-11 17:47:31,371 [INFO] Final candidates: []
2025-04-11 17:47:31,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:47:31,377 [INFO] Final candidates: []
2025-04-11 17:47:31,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:31,379 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,488 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,488 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:47:31,488 [INFO] MCTS selected move: M5,M10
2025-04-11 17:47:31,488 [INFO] ===============NEW MOVE================
2025-04-11 17:47:31,762 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:47:31,762 [DEBUG] board coords: [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)]
2025-04-11 17:47:31,762 [DEBUG] board values[np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)]
2025-04-11 17:47:31,762 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (4, 13)]
2025-04-11 17:47:31,762 [DEBUG] check_window_intermediate_custom: For L=6, window [1 0 1 1 0 1] with coords [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)] triggers candidate.
2025-04-11 17:47:31,769 [INFO] Final candidates: [(4, 10), (4, 13)]
2025-04-11 17:47:31,769 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (4, 13))]
2025-04-11 17:47:31,769 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:31,769 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:47:31,769 [DEBUG] Tree_policy iteration 1: Expanding move ((4, 10), (4, 13))
2025-04-11 17:47:31,769 [DEBUG] board coords: [(4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16)]
2025-04-11 17:47:31,769 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:47:31,770 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 15), (4, 16)]
2025-04-11 17:47:31,770 [DEBUG] check_window_intermediate_custom (only one inserted(4, 15)): For L=6, window [1 1 1 1 0 0] with coords [(4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16)] triggers candidate.
2025-04-11 17:47:31,770 [DEBUG] board coords: [(4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16)]
2025-04-11 17:47:31,770 [DEBUG] board values[np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)]
2025-04-11 17:47:31,770 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 15), (4, 16)]
2025-04-11 17:47:31,770 [DEBUG] check_window_intermediate_custom (only one inserted(4, 15)): For L=7, window [1 1 1 1 1 0 0] with coords [(4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16)] triggers candidate.
2025-04-11 17:47:31,775 [INFO] Final candidates: [(4, 15), (4, 8)]
2025-04-11 17:47:31,775 [INFO] Phase win: Collected 1unique candidate(s):[((4, 15), (4, 8))]
2025-04-11 17:47:31,775 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:47:31,787 [INFO] Final candidates: []
2025-04-11 17:47:31,787 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:47:31,791 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:47:31,791 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,792 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,792 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,792 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,792 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,793 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,793 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,793 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,793 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,793 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,793 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,794 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,794 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,794 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,794 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,795 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,795 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,795 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,795 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,795 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,796 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,796 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,796 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,796 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,797 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,797 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,797 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,797 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,797 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,797 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,797 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,798 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,798 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,798 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,798 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,799 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,799 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,799 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,799 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,800 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,800 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,800 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,800 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,800 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,801 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,801 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,801 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,801 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,801 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,801 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,802 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,802 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,802 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,803 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,803 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,803 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,803 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,804 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,804 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,804 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,804 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,804 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,804 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,805 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,805 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,805 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,805 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,805 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,806 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,806 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,806 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,806 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,807 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,807 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,807 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,807 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,808 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,808 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,808 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,809 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,809 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,809 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,809 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,810 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,810 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,810 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,811 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,811 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,811 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,811 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,812 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,812 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,812 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,812 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,812 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,813 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,813 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,813 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,813 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,814 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,814 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,814 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,814 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,815 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,815 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,815 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,815 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,815 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,815 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,815 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,815 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,816 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,816 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,816 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,816 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,816 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,816 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,816 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,816 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,817 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,817 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,817 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,817 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,817 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,817 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,817 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,818 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,818 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,818 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,818 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,818 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,818 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,818 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,818 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,819 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,819 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,819 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,819 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,819 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,819 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,819 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,819 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,820 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,820 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,820 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,820 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,820 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,820 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,820 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,821 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,821 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,821 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,821 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,821 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,821 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,821 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,821 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,822 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,822 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,822 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,822 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,822 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,822 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,822 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,822 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,822 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,823 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,823 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,823 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,823 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,823 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,823 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,823 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,823 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,824 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,824 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,824 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,824 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,824 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,824 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,824 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,824 [DEBUG] MCTS iteration 50: reached a node with 50 visits.
2025-04-11 17:47:31,824 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,824 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,825 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,825 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,825 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,825 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,825 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,825 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,825 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,825 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,825 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,826 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,826 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,826 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,826 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,826 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,826 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,826 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,826 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,827 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,827 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,827 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,827 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,827 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,827 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,827 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,827 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,827 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,828 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,828 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,828 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,828 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,828 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,828 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,828 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,828 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,829 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,829 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,829 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,829 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,829 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,829 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,829 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,829 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,829 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,830 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,830 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,830 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,830 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,830 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,830 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,831 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,831 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,831 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,831 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,831 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,831 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,831 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,831 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,831 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,832 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,832 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,832 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,832 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,832 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,832 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,832 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,832 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,832 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,833 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,833 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,833 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,833 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,833 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,833 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,833 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,833 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,833 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,833 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,834 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,834 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,834 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,834 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,834 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,834 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,834 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,834 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,834 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,835 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,835 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,835 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,835 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,835 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,835 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,835 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,835 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,835 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,836 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,836 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,836 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,836 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,836 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,836 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,836 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,836 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,836 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,836 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,837 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,837 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,837 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,837 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,838 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,838 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,838 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,838 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,838 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,838 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,838 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,838 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,839 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,839 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,839 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,839 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,839 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,839 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,839 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,839 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,840 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,840 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,840 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,840 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,840 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,840 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,840 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,840 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,840 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,840 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,841 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,841 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,841 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,841 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,841 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,841 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,841 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,841 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,841 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,841 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,842 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,842 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,842 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,842 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,842 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,842 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,842 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,842 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,843 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,843 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,843 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,843 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,843 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,843 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,844 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,844 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,844 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,844 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,844 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,844 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,844 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,844 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,845 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,845 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,845 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,845 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,845 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,845 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,845 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,845 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,845 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,845 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,846 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,846 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:47:31,846 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:47:31,846 [INFO] Default policy: Starting random playout.
2025-04-11 17:47:31,846 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:47:31,846 [INFO] MCTS: Search finished. Best move selected with 100 visits.
2025-04-11 17:47:31,846 [INFO] MCTS (win candidates) selected move: L5,O5
2025-04-11 18:33:19,252 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:33:19,262 [INFO] Final candidates: []
2025-04-11 18:33:19,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,271 [INFO] Final candidates: []
2025-04-11 18:33:19,271 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,272 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 18:33:19,272 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:33:19,272 [DEBUG] Tree_policy iteration 1: Expanding move (8, 16)
2025-04-11 18:33:19,281 [INFO] Final candidates: []
2025-04-11 18:33:19,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,290 [INFO] Final candidates: []
2025-04-11 18:33:19,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,291 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:33:19,291 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:19,481 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:19,481 [DEBUG] Tree_policy iteration 1: Expanding move (10, 13)
2025-04-11 18:33:19,491 [INFO] Final candidates: []
2025-04-11 18:33:19,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,500 [INFO] Final candidates: []
2025-04-11 18:33:19,500 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,500 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:19,542 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:19,542 [DEBUG] Tree_policy iteration 1: Expanding move (1, 16)
2025-04-11 18:33:19,552 [INFO] Final candidates: []
2025-04-11 18:33:19,552 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,561 [INFO] Final candidates: []
2025-04-11 18:33:19,561 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,561 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:19,595 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:19,595 [DEBUG] Tree_policy iteration 1: Expanding move (5, 0)
2025-04-11 18:33:19,605 [INFO] Final candidates: []
2025-04-11 18:33:19,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,614 [INFO] Final candidates: []
2025-04-11 18:33:19,614 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,614 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:19,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:19,823 [DEBUG] Tree_policy iteration 1: Expanding move (13, 7)
2025-04-11 18:33:19,833 [INFO] Final candidates: []
2025-04-11 18:33:19,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,842 [INFO] Final candidates: []
2025-04-11 18:33:19,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,843 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:19,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:19,888 [DEBUG] Tree_policy iteration 1: Expanding move (9, 7)
2025-04-11 18:33:19,897 [INFO] Final candidates: []
2025-04-11 18:33:19,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,907 [INFO] Final candidates: []
2025-04-11 18:33:19,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,907 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:19,961 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:19,961 [DEBUG] Tree_policy iteration 1: Expanding move (15, 14)
2025-04-11 18:33:19,970 [INFO] Final candidates: []
2025-04-11 18:33:19,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,980 [INFO] Final candidates: []
2025-04-11 18:33:19,980 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:19,980 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:19,991 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:19,991 [DEBUG] Tree_policy iteration 1: Expanding move (17, 2)
2025-04-11 18:33:20,001 [INFO] Final candidates: []
2025-04-11 18:33:20,001 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,013 [INFO] Final candidates: []
2025-04-11 18:33:20,013 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,013 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:20,073 [DEBUG] Tree_policy iteration 1: Expanding move (12, 9)
2025-04-11 18:33:20,082 [INFO] Final candidates: []
2025-04-11 18:33:20,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,092 [INFO] Final candidates: []
2025-04-11 18:33:20,092 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,220 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:20,220 [DEBUG] Tree_policy iteration 1: Expanding move (1, 7)
2025-04-11 18:33:20,232 [INFO] Final candidates: []
2025-04-11 18:33:20,232 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,241 [INFO] Final candidates: []
2025-04-11 18:33:20,242 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,242 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,345 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:20,345 [DEBUG] Tree_policy iteration 1: Expanding move (7, 10)
2025-04-11 18:33:20,355 [INFO] Final candidates: []
2025-04-11 18:33:20,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,364 [INFO] Final candidates: []
2025-04-11 18:33:20,364 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,364 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,460 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:20,461 [DEBUG] Tree_policy iteration 1: Expanding move (12, 11)
2025-04-11 18:33:20,470 [INFO] Final candidates: []
2025-04-11 18:33:20,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,480 [INFO] Final candidates: []
2025-04-11 18:33:20,480 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,480 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,595 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:20,595 [DEBUG] Tree_policy iteration 1: Expanding move (15, 3)
2025-04-11 18:33:20,604 [INFO] Final candidates: []
2025-04-11 18:33:20,605 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,614 [INFO] Final candidates: []
2025-04-11 18:33:20,614 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,614 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,733 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:20,733 [DEBUG] Tree_policy iteration 1: Expanding move (5, 10)
2025-04-11 18:33:20,743 [INFO] Final candidates: []
2025-04-11 18:33:20,743 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,752 [INFO] Final candidates: []
2025-04-11 18:33:20,752 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,752 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:20,887 [DEBUG] Tree_policy iteration 1: Expanding move (1, 5)
2025-04-11 18:33:20,899 [INFO] Final candidates: []
2025-04-11 18:33:20,899 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,912 [INFO] Final candidates: []
2025-04-11 18:33:20,912 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:20,912 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:20,992 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:20,992 [DEBUG] Tree_policy iteration 1: Expanding move (7, 3)
2025-04-11 18:33:21,002 [INFO] Final candidates: []
2025-04-11 18:33:21,002 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,012 [INFO] Final candidates: []
2025-04-11 18:33:21,012 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,012 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:21,116 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:21,116 [DEBUG] Tree_policy iteration 1: Expanding move (13, 9)
2025-04-11 18:33:21,125 [INFO] Final candidates: []
2025-04-11 18:33:21,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,135 [INFO] Final candidates: []
2025-04-11 18:33:21,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,135 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:21,319 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:21,319 [DEBUG] Tree_policy iteration 1: Expanding move (13, 8)
2025-04-11 18:33:21,328 [INFO] Final candidates: []
2025-04-11 18:33:21,328 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,337 [INFO] Final candidates: []
2025-04-11 18:33:21,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,338 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:21,428 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:21,428 [DEBUG] Tree_policy iteration 1: Expanding move (3, 0)
2025-04-11 18:33:21,440 [INFO] Final candidates: []
2025-04-11 18:33:21,440 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,450 [INFO] Final candidates: []
2025-04-11 18:33:21,450 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,450 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:21,477 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:21,478 [DEBUG] Tree_policy iteration 1: Expanding move (1, 15)
2025-04-11 18:33:21,487 [INFO] Final candidates: []
2025-04-11 18:33:21,487 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,497 [INFO] Final candidates: []
2025-04-11 18:33:21,497 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,497 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:21,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:21,842 [DEBUG] Tree_policy iteration 1: Expanding move (8, 4)
2025-04-11 18:33:21,852 [INFO] Final candidates: []
2025-04-11 18:33:21,852 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,872 [INFO] Final candidates: []
2025-04-11 18:33:21,872 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:21,873 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,026 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:22,026 [DEBUG] Tree_policy iteration 1: Expanding move (5, 8)
2025-04-11 18:33:22,036 [INFO] Final candidates: []
2025-04-11 18:33:22,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,046 [INFO] Final candidates: []
2025-04-11 18:33:22,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,046 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,197 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:22,197 [DEBUG] Tree_policy iteration 1: Expanding move (0, 15)
2025-04-11 18:33:22,207 [INFO] Final candidates: []
2025-04-11 18:33:22,207 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,216 [INFO] Final candidates: []
2025-04-11 18:33:22,216 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,216 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,374 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:22,374 [DEBUG] Tree_policy iteration 1: Expanding move (17, 18)
2025-04-11 18:33:22,383 [INFO] Final candidates: []
2025-04-11 18:33:22,383 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,393 [INFO] Final candidates: []
2025-04-11 18:33:22,393 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,393 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,557 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:22,557 [DEBUG] Tree_policy iteration 1: Expanding move (0, 0)
2025-04-11 18:33:22,567 [INFO] Final candidates: []
2025-04-11 18:33:22,567 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,576 [INFO] Final candidates: []
2025-04-11 18:33:22,576 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,576 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,622 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:22,622 [DEBUG] Tree_policy iteration 1: Expanding move (6, 13)
2025-04-11 18:33:22,631 [INFO] Final candidates: []
2025-04-11 18:33:22,631 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,640 [INFO] Final candidates: []
2025-04-11 18:33:22,640 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,641 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,658 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:22,659 [DEBUG] Tree_policy iteration 1: Expanding move (13, 5)
2025-04-11 18:33:22,668 [INFO] Final candidates: []
2025-04-11 18:33:22,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,677 [INFO] Final candidates: []
2025-04-11 18:33:22,677 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,677 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,730 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:22,730 [DEBUG] Tree_policy iteration 1: Expanding move (15, 4)
2025-04-11 18:33:22,739 [INFO] Final candidates: []
2025-04-11 18:33:22,739 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,749 [INFO] Final candidates: []
2025-04-11 18:33:22,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,749 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:22,883 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:22,883 [DEBUG] Tree_policy iteration 1: Expanding move (9, 11)
2025-04-11 18:33:22,895 [INFO] Final candidates: []
2025-04-11 18:33:22,895 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,908 [INFO] Final candidates: []
2025-04-11 18:33:22,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:22,908 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,040 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:23,040 [DEBUG] Tree_policy iteration 1: Expanding move (10, 16)
2025-04-11 18:33:23,050 [INFO] Final candidates: []
2025-04-11 18:33:23,050 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,059 [INFO] Final candidates: []
2025-04-11 18:33:23,059 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,059 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,159 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:23,159 [DEBUG] Tree_policy iteration 1: Expanding move (0, 5)
2025-04-11 18:33:23,173 [INFO] Final candidates: []
2025-04-11 18:33:23,173 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,184 [INFO] Final candidates: []
2025-04-11 18:33:23,184 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,184 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,343 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:23,343 [DEBUG] Tree_policy iteration 1: Expanding move (4, 3)
2025-04-11 18:33:23,353 [INFO] Final candidates: []
2025-04-11 18:33:23,353 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,362 [INFO] Final candidates: []
2025-04-11 18:33:23,362 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,362 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,427 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:23,427 [DEBUG] Tree_policy iteration 1: Expanding move (17, 4)
2025-04-11 18:33:23,437 [INFO] Final candidates: []
2025-04-11 18:33:23,439 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,449 [INFO] Final candidates: []
2025-04-11 18:33:23,449 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,450 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,479 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:23,479 [DEBUG] Tree_policy iteration 1: Expanding move (17, 9)
2025-04-11 18:33:23,489 [INFO] Final candidates: []
2025-04-11 18:33:23,489 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,499 [INFO] Final candidates: []
2025-04-11 18:33:23,499 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,499 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,525 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:23,526 [DEBUG] Tree_policy iteration 1: Expanding move (14, 12)
2025-04-11 18:33:23,540 [INFO] Final candidates: []
2025-04-11 18:33:23,540 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,549 [INFO] Final candidates: []
2025-04-11 18:33:23,549 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,550 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:23,671 [DEBUG] Tree_policy iteration 1: Expanding move (17, 12)
2025-04-11 18:33:23,681 [INFO] Final candidates: []
2025-04-11 18:33:23,681 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,691 [INFO] Final candidates: []
2025-04-11 18:33:23,691 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,691 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,763 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:23,763 [DEBUG] Tree_policy iteration 1: Expanding move (12, 17)
2025-04-11 18:33:23,772 [INFO] Final candidates: []
2025-04-11 18:33:23,772 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,785 [INFO] Final candidates: []
2025-04-11 18:33:23,786 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,786 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,899 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:23,899 [DEBUG] Tree_policy iteration 1: Expanding move (14, 6)
2025-04-11 18:33:23,909 [INFO] Final candidates: []
2025-04-11 18:33:23,909 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,918 [INFO] Final candidates: []
2025-04-11 18:33:23,918 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,919 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:23,951 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:23,952 [DEBUG] Tree_policy iteration 1: Expanding move (0, 10)
2025-04-11 18:33:23,961 [INFO] Final candidates: []
2025-04-11 18:33:23,961 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,970 [INFO] Final candidates: []
2025-04-11 18:33:23,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:23,970 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:24,014 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:24,014 [DEBUG] Tree_policy iteration 1: Expanding move (9, 12)
2025-04-11 18:33:24,023 [INFO] Final candidates: []
2025-04-11 18:33:24,023 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,032 [INFO] Final candidates: []
2025-04-11 18:33:24,032 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,033 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:24,354 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:24,354 [DEBUG] Tree_policy iteration 1: Expanding move (12, 18)
2025-04-11 18:33:24,364 [INFO] Final candidates: []
2025-04-11 18:33:24,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,373 [INFO] Final candidates: []
2025-04-11 18:33:24,373 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,374 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:24,552 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:24,552 [DEBUG] Tree_policy iteration 1: Expanding move (7, 2)
2025-04-11 18:33:24,564 [INFO] Final candidates: []
2025-04-11 18:33:24,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,575 [INFO] Final candidates: []
2025-04-11 18:33:24,575 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,575 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:24,681 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:24,681 [DEBUG] Tree_policy iteration 1: Expanding move (0, 14)
2025-04-11 18:33:24,690 [INFO] Final candidates: []
2025-04-11 18:33:24,690 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,700 [INFO] Final candidates: []
2025-04-11 18:33:24,700 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,700 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:24,716 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:24,717 [DEBUG] Tree_policy iteration 1: Expanding move (18, 2)
2025-04-11 18:33:24,726 [INFO] Final candidates: []
2025-04-11 18:33:24,726 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,735 [INFO] Final candidates: []
2025-04-11 18:33:24,735 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,736 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:24,853 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:24,853 [DEBUG] Tree_policy iteration 1: Expanding move (3, 14)
2025-04-11 18:33:24,863 [INFO] Final candidates: []
2025-04-11 18:33:24,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,872 [INFO] Final candidates: []
2025-04-11 18:33:24,872 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:24,872 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:24,994 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:24,994 [DEBUG] Tree_policy iteration 1: Expanding move (15, 12)
2025-04-11 18:33:25,006 [INFO] Final candidates: []
2025-04-11 18:33:25,006 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,015 [INFO] Final candidates: []
2025-04-11 18:33:25,015 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,015 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:25,083 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:25,083 [DEBUG] Tree_policy iteration 1: Expanding move (14, 8)
2025-04-11 18:33:25,092 [INFO] Final candidates: []
2025-04-11 18:33:25,093 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,102 [INFO] Final candidates: []
2025-04-11 18:33:25,102 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,102 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:25,280 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:25,280 [DEBUG] Tree_policy iteration 1: Expanding move (3, 7)
2025-04-11 18:33:25,289 [INFO] Final candidates: []
2025-04-11 18:33:25,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,298 [INFO] Final candidates: []
2025-04-11 18:33:25,299 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,299 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:25,419 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:25,419 [DEBUG] Tree_policy iteration 1: Expanding move (13, 18)
2025-04-11 18:33:25,430 [INFO] Final candidates: []
2025-04-11 18:33:25,430 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,440 [INFO] Final candidates: []
2025-04-11 18:33:25,441 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,441 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:25,536 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:25,536 [DEBUG] Tree_policy iteration 1: Expanding move (4, 5)
2025-04-11 18:33:25,546 [INFO] Final candidates: []
2025-04-11 18:33:25,546 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,555 [INFO] Final candidates: []
2025-04-11 18:33:25,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,555 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:25,663 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:25,664 [DEBUG] Tree_policy iteration 1: Expanding move (5, 4)
2025-04-11 18:33:25,677 [INFO] Final candidates: []
2025-04-11 18:33:25,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,686 [INFO] Final candidates: []
2025-04-11 18:33:25,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,687 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:33:25,687 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:25,805 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:25,806 [DEBUG] Tree_policy iteration 1: Expanding move (9, 6)
2025-04-11 18:33:25,816 [INFO] Final candidates: []
2025-04-11 18:33:25,816 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,825 [INFO] Final candidates: []
2025-04-11 18:33:25,825 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,826 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:25,959 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:25,959 [DEBUG] Tree_policy iteration 1: Expanding move (10, 3)
2025-04-11 18:33:25,974 [INFO] Final candidates: []
2025-04-11 18:33:25,974 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,989 [INFO] Final candidates: []
2025-04-11 18:33:25,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:25,990 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,054 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:26,055 [DEBUG] Tree_policy iteration 1: Expanding move (7, 17)
2025-04-11 18:33:26,065 [INFO] Final candidates: []
2025-04-11 18:33:26,065 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,074 [INFO] Final candidates: []
2025-04-11 18:33:26,074 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,075 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,167 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:26,167 [DEBUG] Tree_policy iteration 1: Expanding move (5, 17)
2025-04-11 18:33:26,179 [INFO] Final candidates: []
2025-04-11 18:33:26,179 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,189 [INFO] Final candidates: []
2025-04-11 18:33:26,189 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,189 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,238 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:26,238 [DEBUG] Tree_policy iteration 1: Expanding move (5, 14)
2025-04-11 18:33:26,247 [INFO] Final candidates: []
2025-04-11 18:33:26,247 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,256 [INFO] Final candidates: []
2025-04-11 18:33:26,256 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,257 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,292 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:26,293 [DEBUG] Tree_policy iteration 1: Expanding move (16, 6)
2025-04-11 18:33:26,302 [INFO] Final candidates: []
2025-04-11 18:33:26,302 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,311 [INFO] Final candidates: []
2025-04-11 18:33:26,311 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,312 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,441 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:26,441 [DEBUG] Tree_policy iteration 1: Expanding move (14, 10)
2025-04-11 18:33:26,451 [INFO] Final candidates: []
2025-04-11 18:33:26,451 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,460 [INFO] Final candidates: []
2025-04-11 18:33:26,460 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,460 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,509 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:26,509 [DEBUG] Tree_policy iteration 1: Expanding move (9, 13)
2025-04-11 18:33:26,518 [INFO] Final candidates: []
2025-04-11 18:33:26,518 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,527 [INFO] Final candidates: []
2025-04-11 18:33:26,527 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,528 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,588 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:26,588 [DEBUG] Tree_policy iteration 1: Expanding move (12, 5)
2025-04-11 18:33:26,597 [INFO] Final candidates: []
2025-04-11 18:33:26,597 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,607 [INFO] Final candidates: []
2025-04-11 18:33:26,607 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,607 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,668 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:26,669 [DEBUG] Tree_policy iteration 1: Expanding move (10, 10)
2025-04-11 18:33:26,682 [INFO] Final candidates: []
2025-04-11 18:33:26,682 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,694 [INFO] Final candidates: []
2025-04-11 18:33:26,694 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,694 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:26,748 [DEBUG] Tree_policy iteration 1: Expanding move (8, 17)
2025-04-11 18:33:26,757 [INFO] Final candidates: []
2025-04-11 18:33:26,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,767 [INFO] Final candidates: []
2025-04-11 18:33:26,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,767 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,791 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:26,791 [DEBUG] Tree_policy iteration 1: Expanding move (2, 5)
2025-04-11 18:33:26,801 [INFO] Final candidates: []
2025-04-11 18:33:26,801 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,810 [INFO] Final candidates: []
2025-04-11 18:33:26,810 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,810 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,832 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:26,832 [DEBUG] Tree_policy iteration 1: Expanding move (9, 17)
2025-04-11 18:33:26,842 [INFO] Final candidates: []
2025-04-11 18:33:26,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,851 [INFO] Final candidates: []
2025-04-11 18:33:26,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,851 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:26,884 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:26,884 [DEBUG] Tree_policy iteration 1: Expanding move (16, 18)
2025-04-11 18:33:26,897 [INFO] Final candidates: []
2025-04-11 18:33:26,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,910 [INFO] Final candidates: []
2025-04-11 18:33:26,910 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:26,910 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:27,028 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:27,028 [DEBUG] Tree_policy iteration 1: Expanding move (2, 12)
2025-04-11 18:33:27,037 [INFO] Final candidates: []
2025-04-11 18:33:27,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,046 [INFO] Final candidates: []
2025-04-11 18:33:27,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,046 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:27,150 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:27,150 [DEBUG] Tree_policy iteration 1: Expanding move (18, 3)
2025-04-11 18:33:27,162 [INFO] Final candidates: []
2025-04-11 18:33:27,162 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,175 [INFO] Final candidates: []
2025-04-11 18:33:27,175 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,175 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:27,452 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:27,452 [DEBUG] Tree_policy iteration 1: Expanding move (5, 9)
2025-04-11 18:33:27,461 [INFO] Final candidates: []
2025-04-11 18:33:27,461 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,471 [INFO] Final candidates: []
2025-04-11 18:33:27,471 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,471 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:27,551 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:27,551 [DEBUG] Tree_policy iteration 1: Expanding move (14, 9)
2025-04-11 18:33:27,563 [INFO] Final candidates: []
2025-04-11 18:33:27,563 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,573 [INFO] Final candidates: []
2025-04-11 18:33:27,573 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,573 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:27,714 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:27,714 [DEBUG] Tree_policy iteration 1: Expanding move (11, 8)
2025-04-11 18:33:27,724 [INFO] Final candidates: []
2025-04-11 18:33:27,724 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,738 [INFO] Final candidates: []
2025-04-11 18:33:27,738 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,738 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:27,956 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:27,956 [DEBUG] Tree_policy iteration 1: Expanding move (12, 15)
2025-04-11 18:33:27,966 [INFO] Final candidates: []
2025-04-11 18:33:27,966 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,975 [INFO] Final candidates: []
2025-04-11 18:33:27,975 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:27,975 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,000 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:28,000 [DEBUG] Tree_policy iteration 1: Expanding move (15, 6)
2025-04-11 18:33:28,010 [INFO] Final candidates: []
2025-04-11 18:33:28,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,019 [INFO] Final candidates: []
2025-04-11 18:33:28,019 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,019 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,193 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:28,193 [DEBUG] Tree_policy iteration 1: Expanding move (16, 11)
2025-04-11 18:33:28,205 [INFO] Final candidates: []
2025-04-11 18:33:28,205 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,214 [INFO] Final candidates: []
2025-04-11 18:33:28,214 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,215 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,239 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:28,239 [DEBUG] Tree_policy iteration 1: Expanding move (18, 10)
2025-04-11 18:33:28,248 [INFO] Final candidates: []
2025-04-11 18:33:28,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,258 [INFO] Final candidates: []
2025-04-11 18:33:28,258 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,258 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,264 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:28,264 [DEBUG] Tree_policy iteration 1: Expanding move (2, 18)
2025-04-11 18:33:28,274 [INFO] Final candidates: []
2025-04-11 18:33:28,274 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,285 [INFO] Final candidates: []
2025-04-11 18:33:28,285 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,285 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,323 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:28,323 [DEBUG] Tree_policy iteration 1: Expanding move (18, 1)
2025-04-11 18:33:28,333 [INFO] Final candidates: []
2025-04-11 18:33:28,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,343 [INFO] Final candidates: []
2025-04-11 18:33:28,343 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,343 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,472 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:28,472 [DEBUG] Tree_policy iteration 1: Expanding move (0, 1)
2025-04-11 18:33:28,482 [INFO] Final candidates: []
2025-04-11 18:33:28,482 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,491 [INFO] Final candidates: []
2025-04-11 18:33:28,491 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,491 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,610 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:28,610 [DEBUG] Tree_policy iteration 1: Expanding move (11, 13)
2025-04-11 18:33:28,620 [INFO] Final candidates: []
2025-04-11 18:33:28,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,629 [INFO] Final candidates: []
2025-04-11 18:33:28,629 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,629 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,659 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:28,659 [DEBUG] Tree_policy iteration 1: Expanding move (12, 13)
2025-04-11 18:33:28,669 [INFO] Final candidates: []
2025-04-11 18:33:28,669 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,678 [INFO] Final candidates: []
2025-04-11 18:33:28,678 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,678 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,743 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:28,743 [DEBUG] Tree_policy iteration 1: Expanding move (11, 12)
2025-04-11 18:33:28,752 [INFO] Final candidates: []
2025-04-11 18:33:28,752 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,762 [INFO] Final candidates: []
2025-04-11 18:33:28,762 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,762 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:28,823 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:28,823 [DEBUG] Tree_policy iteration 1: Expanding move (6, 4)
2025-04-11 18:33:28,832 [INFO] Final candidates: []
2025-04-11 18:33:28,832 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,842 [INFO] Final candidates: []
2025-04-11 18:33:28,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:28,842 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:29,051 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:29,051 [DEBUG] Tree_policy iteration 1: Expanding move (7, 12)
2025-04-11 18:33:29,061 [INFO] Final candidates: []
2025-04-11 18:33:29,061 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,071 [INFO] Final candidates: []
2025-04-11 18:33:29,071 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,071 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:29,211 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:29,211 [DEBUG] Tree_policy iteration 1: Expanding move (2, 9)
2025-04-11 18:33:29,225 [INFO] Final candidates: []
2025-04-11 18:33:29,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,235 [INFO] Final candidates: []
2025-04-11 18:33:29,235 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,235 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:29,336 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:29,336 [DEBUG] Tree_policy iteration 1: Expanding move (18, 14)
2025-04-11 18:33:29,346 [INFO] Final candidates: []
2025-04-11 18:33:29,346 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,355 [INFO] Final candidates: []
2025-04-11 18:33:29,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,355 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:29,408 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:29,408 [DEBUG] Tree_policy iteration 1: Expanding move (7, 13)
2025-04-11 18:33:29,417 [INFO] Final candidates: []
2025-04-11 18:33:29,417 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,426 [INFO] Final candidates: []
2025-04-11 18:33:29,427 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,427 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:29,744 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:29,744 [DEBUG] Tree_policy iteration 1: Expanding move (18, 7)
2025-04-11 18:33:29,754 [INFO] Final candidates: []
2025-04-11 18:33:29,754 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,763 [INFO] Final candidates: []
2025-04-11 18:33:29,763 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,763 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:29,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:29,837 [DEBUG] Tree_policy iteration 1: Expanding move (18, 11)
2025-04-11 18:33:29,846 [INFO] Final candidates: []
2025-04-11 18:33:29,847 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,856 [INFO] Final candidates: []
2025-04-11 18:33:29,856 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:29,856 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:29,989 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:29,990 [DEBUG] Tree_policy iteration 1: Expanding move (17, 11)
2025-04-11 18:33:29,999 [INFO] Final candidates: []
2025-04-11 18:33:29,999 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,008 [INFO] Final candidates: []
2025-04-11 18:33:30,008 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,008 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:30,103 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:30,103 [DEBUG] Tree_policy iteration 1: Expanding move (4, 17)
2025-04-11 18:33:30,112 [INFO] Final candidates: []
2025-04-11 18:33:30,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,123 [INFO] Final candidates: []
2025-04-11 18:33:30,123 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,123 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:30,203 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:30,203 [DEBUG] Tree_policy iteration 1: Expanding move (2, 17)
2025-04-11 18:33:30,213 [INFO] Final candidates: []
2025-04-11 18:33:30,213 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,222 [INFO] Final candidates: []
2025-04-11 18:33:30,222 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,222 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:30,487 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:30,487 [DEBUG] Tree_policy iteration 1: Expanding move (0, 6)
2025-04-11 18:33:30,497 [INFO] Final candidates: []
2025-04-11 18:33:30,497 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,506 [INFO] Final candidates: []
2025-04-11 18:33:30,506 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,506 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:30,561 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:30,561 [DEBUG] Tree_policy iteration 1: Expanding move (7, 9)
2025-04-11 18:33:30,574 [INFO] Final candidates: []
2025-04-11 18:33:30,574 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,584 [INFO] Final candidates: []
2025-04-11 18:33:30,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,584 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:30,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:30,699 [DEBUG] Tree_policy iteration 1: Expanding move (9, 15)
2025-04-11 18:33:30,712 [INFO] Final candidates: []
2025-04-11 18:33:30,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,722 [INFO] Final candidates: []
2025-04-11 18:33:30,722 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,722 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:30,875 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:30,875 [DEBUG] Tree_policy iteration 1: Expanding move (13, 6)
2025-04-11 18:33:30,885 [INFO] Final candidates: []
2025-04-11 18:33:30,885 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,897 [INFO] Final candidates: []
2025-04-11 18:33:30,897 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,897 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:30,969 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:30,970 [DEBUG] Tree_policy iteration 1: Expanding move (16, 13)
2025-04-11 18:33:30,979 [INFO] Final candidates: []
2025-04-11 18:33:30,979 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,989 [INFO] Final candidates: []
2025-04-11 18:33:30,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:30,989 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:31,070 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:31,070 [DEBUG] Tree_policy iteration 1: Expanding move (2, 8)
2025-04-11 18:33:31,080 [INFO] Final candidates: []
2025-04-11 18:33:31,080 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,089 [INFO] Final candidates: []
2025-04-11 18:33:31,089 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,089 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:31,253 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:31,253 [DEBUG] Tree_policy iteration 1: Expanding move (14, 3)
2025-04-11 18:33:31,262 [INFO] Final candidates: []
2025-04-11 18:33:31,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,272 [INFO] Final candidates: []
2025-04-11 18:33:31,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,272 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:31,358 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:31,358 [DEBUG] Tree_policy iteration 1: Expanding move (9, 4)
2025-04-11 18:33:31,369 [INFO] Final candidates: []
2025-04-11 18:33:31,369 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,381 [INFO] Final candidates: []
2025-04-11 18:33:31,381 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,381 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:31,436 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:31,436 [DEBUG] Tree_policy iteration 1: Expanding move (1, 13)
2025-04-11 18:33:31,446 [INFO] Final candidates: []
2025-04-11 18:33:31,446 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,455 [INFO] Final candidates: []
2025-04-11 18:33:31,455 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,455 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:31,561 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:31,561 [DEBUG] Tree_policy iteration 1: Expanding move (17, 6)
2025-04-11 18:33:31,570 [INFO] Final candidates: []
2025-04-11 18:33:31,570 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,580 [INFO] Final candidates: []
2025-04-11 18:33:31,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:31,580 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:31,797 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:31,797 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:33:31,797 [INFO] MCTS selected move: R9
2025-04-11 18:33:31,797 [INFO] ===============NEW MOVE================
2025-04-11 18:33:55,086 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:33:55,095 [INFO] Final candidates: []
2025-04-11 18:33:55,095 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,105 [INFO] Final candidates: []
2025-04-11 18:33:55,105 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,105 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 18:33:55,106 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:33:55,106 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(17)), (np.int64(6), np.int64(9)))
2025-04-11 18:33:55,116 [INFO] Final candidates: []
2025-04-11 18:33:55,116 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,127 [INFO] Final candidates: []
2025-04-11 18:33:55,127 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,127 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:33:55,127 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:55,323 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:55,324 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(8), np.int64(10)))
2025-04-11 18:33:55,333 [INFO] Final candidates: []
2025-04-11 18:33:55,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,342 [INFO] Final candidates: []
2025-04-11 18:33:55,342 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,342 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:55,506 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:55,506 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(10), np.int64(10)))
2025-04-11 18:33:55,515 [INFO] Final candidates: []
2025-04-11 18:33:55,515 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,524 [INFO] Final candidates: []
2025-04-11 18:33:55,524 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,524 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:55,558 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:55,558 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 18:33:55,568 [INFO] Final candidates: []
2025-04-11 18:33:55,568 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,576 [INFO] Final candidates: []
2025-04-11 18:33:55,576 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,577 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:55,810 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:55,810 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(7), np.int64(15)))
2025-04-11 18:33:55,820 [INFO] Final candidates: []
2025-04-11 18:33:55,820 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,829 [INFO] Final candidates: []
2025-04-11 18:33:55,829 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:55,829 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:56,108 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:56,108 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(9), np.int64(10)))
2025-04-11 18:33:56,119 [INFO] Final candidates: []
2025-04-11 18:33:56,119 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,130 [INFO] Final candidates: []
2025-04-11 18:33:56,130 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,131 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:56,249 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:56,249 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(10), np.int64(16)))
2025-04-11 18:33:56,258 [INFO] Final candidates: []
2025-04-11 18:33:56,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,267 [INFO] Final candidates: []
2025-04-11 18:33:56,267 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,267 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:56,296 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:56,297 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(7), np.int64(15)))
2025-04-11 18:33:56,306 [INFO] Final candidates: []
2025-04-11 18:33:56,306 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,314 [INFO] Final candidates: []
2025-04-11 18:33:56,314 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,315 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:56,587 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:56,587 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(7), np.int64(16)))
2025-04-11 18:33:56,597 [INFO] Final candidates: []
2025-04-11 18:33:56,597 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,607 [INFO] Final candidates: []
2025-04-11 18:33:56,607 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,608 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:56,720 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:56,720 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(7), np.int64(10)))
2025-04-11 18:33:56,730 [INFO] Final candidates: []
2025-04-11 18:33:56,730 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,739 [INFO] Final candidates: []
2025-04-11 18:33:56,739 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,739 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:56,823 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:56,824 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(9), np.int64(17)))
2025-04-11 18:33:56,833 [INFO] Final candidates: []
2025-04-11 18:33:56,835 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,843 [INFO] Final candidates: []
2025-04-11 18:33:56,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:56,844 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:57,033 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:57,033 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(9), np.int64(7)))
2025-04-11 18:33:57,044 [INFO] Final candidates: []
2025-04-11 18:33:57,044 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,053 [INFO] Final candidates: []
2025-04-11 18:33:57,053 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,054 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:57,416 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:57,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(7), np.int64(15)))
2025-04-11 18:33:57,425 [INFO] Final candidates: []
2025-04-11 18:33:57,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,434 [INFO] Final candidates: []
2025-04-11 18:33:57,434 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,434 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:57,464 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:57,464 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(9), np.int64(15)))
2025-04-11 18:33:57,474 [INFO] Final candidates: []
2025-04-11 18:33:57,474 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,482 [INFO] Final candidates: []
2025-04-11 18:33:57,482 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,483 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:57,589 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:57,590 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(15)), (np.int64(6), np.int64(9)))
2025-04-11 18:33:57,599 [INFO] Final candidates: []
2025-04-11 18:33:57,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,608 [INFO] Final candidates: []
2025-04-11 18:33:57,608 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,608 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:57,736 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:57,736 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(15)), (np.int64(7), np.int64(8)))
2025-04-11 18:33:57,746 [INFO] Final candidates: []
2025-04-11 18:33:57,746 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,755 [INFO] Final candidates: []
2025-04-11 18:33:57,755 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,755 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:57,927 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:57,927 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 18:33:57,936 [INFO] Final candidates: []
2025-04-11 18:33:57,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,945 [INFO] Final candidates: []
2025-04-11 18:33:57,945 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:57,945 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:57,983 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:57,984 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(11), np.int64(9)))
2025-04-11 18:33:57,987 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 18:33:57,987 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:33:57,987 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 9), (10, 9)]
2025-04-11 18:33:57,987 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:33:57,987 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:33:57,987 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 18:33:57,987 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (12, 9)]
2025-04-11 18:33:57,987 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:33:57,993 [INFO] Final candidates: [(10, 9), (6, 9), (12, 9)]
2025-04-11 18:33:57,993 [INFO] Phase win: Collected 3unique candidate(s):[((10, 9), (12, 9)), ((10, 9), (6, 9)), ((6, 9), (12, 9))]
2025-04-11 18:33:57,993 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:33:58,002 [INFO] Final candidates: []
2025-04-11 18:33:58,002 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,002 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:58,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(7), np.int64(16)))
2025-04-11 18:33:58,123 [INFO] Final candidates: []
2025-04-11 18:33:58,124 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,139 [INFO] Final candidates: []
2025-04-11 18:33:58,139 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,140 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,237 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:58,237 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(9), np.int64(16)))
2025-04-11 18:33:58,246 [INFO] Final candidates: []
2025-04-11 18:33:58,246 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,265 [INFO] Final candidates: []
2025-04-11 18:33:58,265 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,266 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,316 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:58,316 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(7), np.int64(11)))
2025-04-11 18:33:58,325 [INFO] Final candidates: []
2025-04-11 18:33:58,325 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,334 [INFO] Final candidates: []
2025-04-11 18:33:58,334 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,334 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,358 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:58,358 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(15)), (np.int64(6), np.int64(9)))
2025-04-11 18:33:58,367 [INFO] Final candidates: []
2025-04-11 18:33:58,367 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,376 [INFO] Final candidates: []
2025-04-11 18:33:58,376 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,376 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,484 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:58,484 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(9), np.int64(15)))
2025-04-11 18:33:58,493 [INFO] Final candidates: []
2025-04-11 18:33:58,494 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,502 [INFO] Final candidates: []
2025-04-11 18:33:58,502 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,503 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,611 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:58,611 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 18:33:58,620 [INFO] Final candidates: []
2025-04-11 18:33:58,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,629 [INFO] Final candidates: []
2025-04-11 18:33:58,629 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,629 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,823 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:58,823 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(15)))
2025-04-11 18:33:58,833 [INFO] Final candidates: []
2025-04-11 18:33:58,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,841 [INFO] Final candidates: []
2025-04-11 18:33:58,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,842 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:58,888 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(15)), (np.int64(7), np.int64(8)))
2025-04-11 18:33:58,897 [INFO] Final candidates: []
2025-04-11 18:33:58,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,906 [INFO] Final candidates: []
2025-04-11 18:33:58,906 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,906 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:58,948 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:58,948 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(8), np.int64(17)))
2025-04-11 18:33:58,957 [INFO] Final candidates: []
2025-04-11 18:33:58,957 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,966 [INFO] Final candidates: []
2025-04-11 18:33:58,966 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:58,966 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:59,032 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:59,032 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(7), np.int64(16)))
2025-04-11 18:33:59,042 [INFO] Final candidates: []
2025-04-11 18:33:59,042 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,051 [INFO] Final candidates: []
2025-04-11 18:33:59,051 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,051 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:59,237 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:59,237 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(7), np.int64(8)))
2025-04-11 18:33:59,246 [INFO] Final candidates: []
2025-04-11 18:33:59,246 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,255 [INFO] Final candidates: []
2025-04-11 18:33:59,255 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,255 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:59,420 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:33:59,420 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 18:33:59,429 [INFO] Final candidates: []
2025-04-11 18:33:59,429 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,438 [INFO] Final candidates: []
2025-04-11 18:33:59,438 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,438 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:59,719 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:59,719 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(17)), (np.int64(9), np.int64(15)))
2025-04-11 18:33:59,728 [INFO] Final candidates: []
2025-04-11 18:33:59,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,740 [INFO] Final candidates: []
2025-04-11 18:33:59,740 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,740 [INFO] Default policy: Starting random playout.
2025-04-11 18:33:59,917 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:33:59,917 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(7), np.int64(11)))
2025-04-11 18:33:59,942 [INFO] Final candidates: []
2025-04-11 18:33:59,942 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,964 [INFO] Final candidates: []
2025-04-11 18:33:59,964 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:33:59,964 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:00,146 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:00,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:00,157 [INFO] Final candidates: []
2025-04-11 18:34:00,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,165 [INFO] Final candidates: []
2025-04-11 18:34:00,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,166 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:00,230 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:00,230 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:00,239 [INFO] Final candidates: []
2025-04-11 18:34:00,239 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,248 [INFO] Final candidates: []
2025-04-11 18:34:00,248 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,248 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:00,367 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:00,368 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(16)), (np.int64(8), np.int64(10)))
2025-04-11 18:34:00,379 [INFO] Final candidates: []
2025-04-11 18:34:00,379 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,390 [INFO] Final candidates: []
2025-04-11 18:34:00,390 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,390 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:00,411 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:00,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(9), np.int64(8)))
2025-04-11 18:34:00,422 [INFO] Final candidates: []
2025-04-11 18:34:00,423 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,445 [INFO] Final candidates: []
2025-04-11 18:34:00,445 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,445 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:00,630 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:00,630 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(8), np.int64(10)))
2025-04-11 18:34:00,639 [INFO] Final candidates: []
2025-04-11 18:34:00,639 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,648 [INFO] Final candidates: []
2025-04-11 18:34:00,648 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,648 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:00,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:00,671 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:00,680 [INFO] Final candidates: []
2025-04-11 18:34:00,680 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,689 [INFO] Final candidates: []
2025-04-11 18:34:00,689 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,689 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:00,958 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:00,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(11), np.int64(9)))
2025-04-11 18:34:00,967 [INFO] Final candidates: []
2025-04-11 18:34:00,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,976 [INFO] Final candidates: []
2025-04-11 18:34:00,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:00,976 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,060 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:01,060 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(6), np.int64(9)))
2025-04-11 18:34:01,063 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 18:34:01,063 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:34:01,064 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (10, 9)]
2025-04-11 18:34:01,064 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 18:34:01,070 [INFO] Final candidates: [(10, 9), (8, 9)]
2025-04-11 18:34:01,070 [INFO] Phase win: Collected 1unique candidate(s):[((10, 9), (8, 9))]
2025-04-11 18:34:01,070 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:34:01,090 [INFO] Final candidates: []
2025-04-11 18:34:01,090 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,090 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,294 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:01,295 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:01,304 [INFO] Final candidates: []
2025-04-11 18:34:01,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,313 [INFO] Final candidates: []
2025-04-11 18:34:01,313 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,313 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,364 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:01,364 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:01,376 [INFO] Final candidates: []
2025-04-11 18:34:01,376 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,386 [INFO] Final candidates: []
2025-04-11 18:34:01,386 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,386 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,427 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:01,427 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:01,437 [INFO] Final candidates: []
2025-04-11 18:34:01,437 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,449 [INFO] Final candidates: []
2025-04-11 18:34:01,449 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,449 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,481 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:01,482 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:01,493 [INFO] Final candidates: []
2025-04-11 18:34:01,493 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,502 [INFO] Final candidates: []
2025-04-11 18:34:01,502 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,502 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,629 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:01,629 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(16)), (np.int64(11), np.int64(9)))
2025-04-11 18:34:01,640 [INFO] Final candidates: []
2025-04-11 18:34:01,640 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,649 [INFO] Final candidates: []
2025-04-11 18:34:01,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,649 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,708 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:01,709 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(16)))
2025-04-11 18:34:01,718 [INFO] Final candidates: []
2025-04-11 18:34:01,718 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,727 [INFO] Final candidates: []
2025-04-11 18:34:01,727 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,727 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,902 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:01,903 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 18:34:01,912 [INFO] Final candidates: []
2025-04-11 18:34:01,912 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,921 [INFO] Final candidates: []
2025-04-11 18:34:01,921 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,921 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:01,955 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:01,955 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(17)), (np.int64(7), np.int64(11)))
2025-04-11 18:34:01,965 [INFO] Final candidates: []
2025-04-11 18:34:01,965 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,974 [INFO] Final candidates: []
2025-04-11 18:34:01,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:01,974 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:02,112 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:02,112 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:02,122 [INFO] Final candidates: []
2025-04-11 18:34:02,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,151 [INFO] Final candidates: []
2025-04-11 18:34:02,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,151 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:02,331 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:02,331 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:02,340 [INFO] Final candidates: []
2025-04-11 18:34:02,340 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,363 [INFO] Final candidates: []
2025-04-11 18:34:02,363 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,363 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:02,482 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:02,483 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(16)))
2025-04-11 18:34:02,492 [INFO] Final candidates: []
2025-04-11 18:34:02,492 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,501 [INFO] Final candidates: []
2025-04-11 18:34:02,501 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,501 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:34:02,501 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:02,579 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:02,580 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:02,589 [INFO] Final candidates: []
2025-04-11 18:34:02,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,598 [INFO] Final candidates: []
2025-04-11 18:34:02,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,599 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:02,893 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:02,893 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(11)))
2025-04-11 18:34:02,907 [INFO] Final candidates: []
2025-04-11 18:34:02,907 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,917 [INFO] Final candidates: []
2025-04-11 18:34:02,917 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:02,918 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:03,058 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:03,058 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(10), np.int64(8)))
2025-04-11 18:34:03,068 [INFO] Final candidates: []
2025-04-11 18:34:03,068 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,077 [INFO] Final candidates: []
2025-04-11 18:34:03,077 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,077 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:03,219 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:03,219 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(11), np.int64(9)))
2025-04-11 18:34:03,229 [INFO] Final candidates: []
2025-04-11 18:34:03,229 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,241 [INFO] Final candidates: []
2025-04-11 18:34:03,241 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,241 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:03,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:03,311 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(8), np.int64(17)))
2025-04-11 18:34:03,331 [INFO] Final candidates: []
2025-04-11 18:34:03,332 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,350 [INFO] Final candidates: []
2025-04-11 18:34:03,350 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,350 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:03,462 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:03,463 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:03,472 [INFO] Final candidates: []
2025-04-11 18:34:03,472 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,481 [INFO] Final candidates: []
2025-04-11 18:34:03,481 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,481 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:03,665 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:03,665 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 18:34:03,675 [INFO] Final candidates: []
2025-04-11 18:34:03,675 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,683 [INFO] Final candidates: []
2025-04-11 18:34:03,683 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,684 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:03,806 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:03,807 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(6), np.int64(9)))
2025-04-11 18:34:03,816 [INFO] Final candidates: []
2025-04-11 18:34:03,816 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,824 [INFO] Final candidates: []
2025-04-11 18:34:03,825 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:03,825 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:04,055 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:04,055 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:04,064 [INFO] Final candidates: []
2025-04-11 18:34:04,064 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,073 [INFO] Final candidates: []
2025-04-11 18:34:04,073 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,074 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:04,164 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:04,164 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(11)))
2025-04-11 18:34:04,174 [INFO] Final candidates: []
2025-04-11 18:34:04,174 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,183 [INFO] Final candidates: []
2025-04-11 18:34:04,183 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,183 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:04,355 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:04,355 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(8), np.int64(8)))
2025-04-11 18:34:04,367 [INFO] Final candidates: []
2025-04-11 18:34:04,367 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,384 [INFO] Final candidates: []
2025-04-11 18:34:04,384 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,385 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:04,475 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:04,476 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(8), np.int64(17)))
2025-04-11 18:34:04,487 [INFO] Final candidates: []
2025-04-11 18:34:04,487 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,496 [INFO] Final candidates: []
2025-04-11 18:34:04,497 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,497 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:04,683 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:04,684 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(6), np.int64(8)))
2025-04-11 18:34:04,693 [INFO] Final candidates: []
2025-04-11 18:34:04,693 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,702 [INFO] Final candidates: []
2025-04-11 18:34:04,702 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,702 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:04,777 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:04,777 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(8), np.int64(15)))
2025-04-11 18:34:04,787 [INFO] Final candidates: []
2025-04-11 18:34:04,787 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,797 [INFO] Final candidates: []
2025-04-11 18:34:04,797 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:04,798 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:05,018 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:05,018 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(9), np.int64(16)))
2025-04-11 18:34:05,028 [INFO] Final candidates: []
2025-04-11 18:34:05,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,036 [INFO] Final candidates: []
2025-04-11 18:34:05,037 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,037 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:05,079 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:05,079 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(16)))
2025-04-11 18:34:05,088 [INFO] Final candidates: []
2025-04-11 18:34:05,088 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,097 [INFO] Final candidates: []
2025-04-11 18:34:05,097 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,098 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:05,121 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:05,121 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(10)))
2025-04-11 18:34:05,133 [INFO] Final candidates: []
2025-04-11 18:34:05,133 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,143 [INFO] Final candidates: []
2025-04-11 18:34:05,143 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,144 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:05,356 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:05,356 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(8), np.int64(14)))
2025-04-11 18:34:05,365 [INFO] Final candidates: []
2025-04-11 18:34:05,365 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,381 [INFO] Final candidates: []
2025-04-11 18:34:05,381 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,382 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:05,499 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:05,499 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:05,509 [INFO] Final candidates: []
2025-04-11 18:34:05,509 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,519 [INFO] Final candidates: []
2025-04-11 18:34:05,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,519 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:05,775 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:05,776 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(10)))
2025-04-11 18:34:05,785 [INFO] Final candidates: []
2025-04-11 18:34:05,785 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,794 [INFO] Final candidates: []
2025-04-11 18:34:05,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,794 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:05,974 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:05,975 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(7)))
2025-04-11 18:34:05,984 [INFO] Final candidates: []
2025-04-11 18:34:05,984 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,993 [INFO] Final candidates: []
2025-04-11 18:34:05,993 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:05,993 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:06,080 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:06,080 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:06,089 [INFO] Final candidates: []
2025-04-11 18:34:06,089 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,098 [INFO] Final candidates: []
2025-04-11 18:34:06,098 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,098 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:06,236 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:06,236 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 18:34:06,246 [INFO] Final candidates: []
2025-04-11 18:34:06,246 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,254 [INFO] Final candidates: []
2025-04-11 18:34:06,254 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,255 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:06,425 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:06,425 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:06,434 [INFO] Final candidates: []
2025-04-11 18:34:06,434 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,443 [INFO] Final candidates: []
2025-04-11 18:34:06,443 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,443 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:06,517 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:06,517 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(16)), (np.int64(7), np.int64(11)))
2025-04-11 18:34:06,526 [INFO] Final candidates: []
2025-04-11 18:34:06,526 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,535 [INFO] Final candidates: []
2025-04-11 18:34:06,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,535 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:06,577 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:06,577 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:06,586 [INFO] Final candidates: []
2025-04-11 18:34:06,586 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,598 [INFO] Final candidates: []
2025-04-11 18:34:06,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,598 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:06,772 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:06,773 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:06,782 [INFO] Final candidates: []
2025-04-11 18:34:06,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,791 [INFO] Final candidates: []
2025-04-11 18:34:06,791 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,791 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:06,855 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:06,855 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(7), np.int64(16)))
2025-04-11 18:34:06,864 [INFO] Final candidates: []
2025-04-11 18:34:06,864 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,873 [INFO] Final candidates: []
2025-04-11 18:34:06,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:06,873 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:07,047 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:07,047 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:07,056 [INFO] Final candidates: []
2025-04-11 18:34:07,056 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,065 [INFO] Final candidates: []
2025-04-11 18:34:07,065 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,065 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:07,191 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:07,191 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:07,201 [INFO] Final candidates: []
2025-04-11 18:34:07,201 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,210 [INFO] Final candidates: []
2025-04-11 18:34:07,210 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,210 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:07,486 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:07,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:07,496 [INFO] Final candidates: []
2025-04-11 18:34:07,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,505 [INFO] Final candidates: []
2025-04-11 18:34:07,505 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,505 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:07,580 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:07,580 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:07,593 [INFO] Final candidates: []
2025-04-11 18:34:07,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,602 [INFO] Final candidates: []
2025-04-11 18:34:07,602 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,602 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:07,652 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:07,652 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:07,663 [INFO] Final candidates: []
2025-04-11 18:34:07,663 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,676 [INFO] Final candidates: []
2025-04-11 18:34:07,676 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,676 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:07,778 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:07,778 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(17)))
2025-04-11 18:34:07,787 [INFO] Final candidates: []
2025-04-11 18:34:07,787 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,798 [INFO] Final candidates: []
2025-04-11 18:34:07,798 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:07,799 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:07,998 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:07,998 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:08,007 [INFO] Final candidates: []
2025-04-11 18:34:08,007 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,016 [INFO] Final candidates: []
2025-04-11 18:34:08,016 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,016 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:08,186 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:08,186 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(8), np.int64(17)))
2025-04-11 18:34:08,199 [INFO] Final candidates: []
2025-04-11 18:34:08,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,208 [INFO] Final candidates: []
2025-04-11 18:34:08,208 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,208 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:08,346 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:08,347 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(6), np.int64(9)))
2025-04-11 18:34:08,356 [INFO] Final candidates: []
2025-04-11 18:34:08,356 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,365 [INFO] Final candidates: []
2025-04-11 18:34:08,365 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,365 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:08,579 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:08,579 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:08,589 [INFO] Final candidates: []
2025-04-11 18:34:08,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,598 [INFO] Final candidates: []
2025-04-11 18:34:08,598 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,598 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:08,635 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:08,635 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(8), np.int64(10)))
2025-04-11 18:34:08,644 [INFO] Final candidates: []
2025-04-11 18:34:08,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,653 [INFO] Final candidates: []
2025-04-11 18:34:08,653 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,654 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:08,706 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:08,706 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(8)))
2025-04-11 18:34:08,716 [INFO] Final candidates: []
2025-04-11 18:34:08,716 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,725 [INFO] Final candidates: []
2025-04-11 18:34:08,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,725 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:08,930 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:08,930 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(8), np.int64(14)))
2025-04-11 18:34:08,939 [INFO] Final candidates: []
2025-04-11 18:34:08,940 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,948 [INFO] Final candidates: []
2025-04-11 18:34:08,948 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:08,949 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:09,071 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:09,071 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(15)), (np.int64(10), np.int64(10)))
2025-04-11 18:34:09,081 [INFO] Final candidates: []
2025-04-11 18:34:09,081 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,090 [INFO] Final candidates: []
2025-04-11 18:34:09,090 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,090 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:09,253 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:09,254 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(10), np.int64(8)))
2025-04-11 18:34:09,263 [INFO] Final candidates: []
2025-04-11 18:34:09,263 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,272 [INFO] Final candidates: []
2025-04-11 18:34:09,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,272 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:09,595 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:09,595 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:09,606 [INFO] Final candidates: []
2025-04-11 18:34:09,606 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,615 [INFO] Final candidates: []
2025-04-11 18:34:09,615 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,615 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:09,752 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:09,752 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(7), np.int64(7)))
2025-04-11 18:34:09,762 [INFO] Final candidates: []
2025-04-11 18:34:09,762 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,771 [INFO] Final candidates: []
2025-04-11 18:34:09,771 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,771 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:09,844 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:09,845 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:09,848 [DEBUG] board coords: [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)]
2025-04-11 18:34:09,848 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:09,848 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 9), (6, 9)]
2025-04-11 18:34:09,848 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)] triggers candidate.
2025-04-11 18:34:09,848 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 18:34:09,848 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:34:09,848 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 9), (10, 9)]
2025-04-11 18:34:09,848 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 18:34:09,854 [INFO] Final candidates: [(4, 9), (6, 9), (10, 9)]
2025-04-11 18:34:09,855 [INFO] Phase win: Collected 3unique candidate(s):[((4, 9), (6, 9)), ((6, 9), (10, 9)), ((4, 9), (10, 9))]
2025-04-11 18:34:09,855 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:34:09,864 [INFO] Final candidates: []
2025-04-11 18:34:09,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:09,864 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:10,046 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:10,046 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:10,056 [INFO] Final candidates: []
2025-04-11 18:34:10,056 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:10,064 [INFO] Final candidates: []
2025-04-11 18:34:10,064 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:10,065 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:10,278 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:10,278 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:10,290 [INFO] Final candidates: []
2025-04-11 18:34:10,290 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:10,301 [INFO] Final candidates: []
2025-04-11 18:34:10,301 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:10,302 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:10,510 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:10,510 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(6), np.int64(9)))
2025-04-11 18:34:10,522 [INFO] Final candidates: []
2025-04-11 18:34:10,522 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:10,530 [INFO] Final candidates: []
2025-04-11 18:34:10,530 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:10,531 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:10,545 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:10,545 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:34:10,545 [INFO] MCTS selected move: S9,K7
2025-04-11 18:34:10,545 [INFO] ===============NEW MOVE================
2025-04-11 18:34:17,389 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:34:17,400 [INFO] Final candidates: []
2025-04-11 18:34:17,400 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,412 [INFO] Final candidates: []
2025-04-11 18:34:17,412 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,413 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 18:34:17,413 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:34:17,413 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:17,425 [INFO] Final candidates: []
2025-04-11 18:34:17,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,436 [INFO] Final candidates: []
2025-04-11 18:34:17,436 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,437 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:34:17,437 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:17,469 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:17,469 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(8)))
2025-04-11 18:34:17,478 [INFO] Final candidates: []
2025-04-11 18:34:17,478 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,487 [INFO] Final candidates: []
2025-04-11 18:34:17,487 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,487 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:17,662 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:17,662 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(8), np.int64(14)))
2025-04-11 18:34:17,671 [INFO] Final candidates: []
2025-04-11 18:34:17,671 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,683 [INFO] Final candidates: []
2025-04-11 18:34:17,683 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,683 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:17,782 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:17,783 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:17,791 [INFO] Final candidates: []
2025-04-11 18:34:17,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,800 [INFO] Final candidates: []
2025-04-11 18:34:17,800 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:17,800 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,011 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:18,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(8), np.int64(8)))
2025-04-11 18:34:18,020 [INFO] Final candidates: []
2025-04-11 18:34:18,020 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,028 [INFO] Final candidates: []
2025-04-11 18:34:18,028 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,029 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,145 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:18,146 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(16)), (np.int64(5), np.int64(8)))
2025-04-11 18:34:18,154 [INFO] Final candidates: []
2025-04-11 18:34:18,154 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,163 [INFO] Final candidates: []
2025-04-11 18:34:18,163 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,163 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,257 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:18,257 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:18,266 [INFO] Final candidates: []
2025-04-11 18:34:18,266 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,275 [INFO] Final candidates: []
2025-04-11 18:34:18,275 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,275 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,309 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:18,309 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:18,318 [INFO] Final candidates: []
2025-04-11 18:34:18,318 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,327 [INFO] Final candidates: []
2025-04-11 18:34:18,327 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,327 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,524 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:18,524 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:18,533 [INFO] Final candidates: []
2025-04-11 18:34:18,533 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,542 [INFO] Final candidates: []
2025-04-11 18:34:18,542 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,542 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,642 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:18,642 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(13)))
2025-04-11 18:34:18,651 [INFO] Final candidates: []
2025-04-11 18:34:18,651 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,663 [INFO] Final candidates: []
2025-04-11 18:34:18,663 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,663 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,729 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:18,729 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:18,741 [INFO] Final candidates: []
2025-04-11 18:34:18,741 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,751 [INFO] Final candidates: []
2025-04-11 18:34:18,751 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,751 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,842 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:18,842 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(18)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:18,851 [INFO] Final candidates: []
2025-04-11 18:34:18,851 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,860 [INFO] Final candidates: []
2025-04-11 18:34:18,860 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,861 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:18,864 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:18,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:18,874 [INFO] Final candidates: []
2025-04-11 18:34:18,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,883 [INFO] Final candidates: []
2025-04-11 18:34:18,883 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:18,884 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:19,107 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:19,107 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(10)))
2025-04-11 18:34:19,116 [INFO] Final candidates: []
2025-04-11 18:34:19,116 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,125 [INFO] Final candidates: []
2025-04-11 18:34:19,125 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,125 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:19,481 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:19,481 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(9), np.int64(18)))
2025-04-11 18:34:19,493 [INFO] Final candidates: []
2025-04-11 18:34:19,493 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,502 [INFO] Final candidates: []
2025-04-11 18:34:19,502 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,503 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:19,582 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:19,582 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(6), np.int64(7)))
2025-04-11 18:34:19,595 [INFO] Final candidates: []
2025-04-11 18:34:19,595 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,603 [INFO] Final candidates: []
2025-04-11 18:34:19,603 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,604 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:19,673 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:19,673 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(5), np.int64(8)))
2025-04-11 18:34:19,682 [INFO] Final candidates: []
2025-04-11 18:34:19,682 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,691 [INFO] Final candidates: []
2025-04-11 18:34:19,691 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,691 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:19,751 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:19,751 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:19,760 [INFO] Final candidates: []
2025-04-11 18:34:19,760 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,769 [INFO] Final candidates: []
2025-04-11 18:34:19,769 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,769 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:19,872 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:19,872 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(5), np.int64(10)))
2025-04-11 18:34:19,881 [INFO] Final candidates: []
2025-04-11 18:34:19,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,896 [INFO] Final candidates: []
2025-04-11 18:34:19,896 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:19,897 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,037 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:20,037 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:20,046 [INFO] Final candidates: []
2025-04-11 18:34:20,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,054 [INFO] Final candidates: []
2025-04-11 18:34:20,054 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,055 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,097 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:20,097 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:20,109 [INFO] Final candidates: []
2025-04-11 18:34:20,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,118 [INFO] Final candidates: []
2025-04-11 18:34:20,118 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,118 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,378 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:20,378 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(14)))
2025-04-11 18:34:20,387 [INFO] Final candidates: []
2025-04-11 18:34:20,387 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,396 [INFO] Final candidates: []
2025-04-11 18:34:20,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,396 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,522 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:20,522 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(8), np.int64(15)))
2025-04-11 18:34:20,531 [INFO] Final candidates: []
2025-04-11 18:34:20,531 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,540 [INFO] Final candidates: []
2025-04-11 18:34:20,540 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,540 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,589 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:20,589 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:20,598 [INFO] Final candidates: []
2025-04-11 18:34:20,598 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,607 [INFO] Final candidates: []
2025-04-11 18:34:20,607 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,607 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,622 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:20,622 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(7), np.int64(18)))
2025-04-11 18:34:20,631 [INFO] Final candidates: []
2025-04-11 18:34:20,631 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,640 [INFO] Final candidates: []
2025-04-11 18:34:20,640 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,640 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,784 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:20,784 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(5), np.int64(11)))
2025-04-11 18:34:20,794 [INFO] Final candidates: []
2025-04-11 18:34:20,794 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,803 [INFO] Final candidates: []
2025-04-11 18:34:20,803 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,803 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:20,962 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:20,963 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:20,971 [INFO] Final candidates: []
2025-04-11 18:34:20,971 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,980 [INFO] Final candidates: []
2025-04-11 18:34:20,980 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:20,981 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,123 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:21,123 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:21,132 [INFO] Final candidates: []
2025-04-11 18:34:21,132 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,141 [INFO] Final candidates: []
2025-04-11 18:34:21,141 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,141 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,275 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:21,275 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(6), np.int64(8)))
2025-04-11 18:34:21,284 [INFO] Final candidates: []
2025-04-11 18:34:21,284 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,293 [INFO] Final candidates: []
2025-04-11 18:34:21,293 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,293 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,320 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:21,320 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:21,329 [INFO] Final candidates: []
2025-04-11 18:34:21,329 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,337 [INFO] Final candidates: []
2025-04-11 18:34:21,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,338 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,455 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:21,456 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(10), np.int64(8)))
2025-04-11 18:34:21,464 [INFO] Final candidates: []
2025-04-11 18:34:21,464 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,473 [INFO] Final candidates: []
2025-04-11 18:34:21,473 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,473 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,667 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:21,668 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(6), np.int64(7)))
2025-04-11 18:34:21,676 [INFO] Final candidates: []
2025-04-11 18:34:21,677 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,685 [INFO] Final candidates: []
2025-04-11 18:34:21,685 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,686 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,725 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:21,726 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 18:34:21,734 [INFO] Final candidates: []
2025-04-11 18:34:21,734 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,743 [INFO] Final candidates: []
2025-04-11 18:34:21,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,744 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,904 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:21,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(17)), (np.int64(8), np.int64(11)))
2025-04-11 18:34:21,913 [INFO] Final candidates: []
2025-04-11 18:34:21,913 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,922 [INFO] Final candidates: []
2025-04-11 18:34:21,922 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,922 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:21,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:21,959 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(9), np.int64(16)))
2025-04-11 18:34:21,968 [INFO] Final candidates: []
2025-04-11 18:34:21,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,977 [INFO] Final candidates: []
2025-04-11 18:34:21,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:21,977 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,113 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:22,114 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(8), np.int64(8)))
2025-04-11 18:34:22,122 [INFO] Final candidates: []
2025-04-11 18:34:22,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,131 [INFO] Final candidates: []
2025-04-11 18:34:22,131 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,131 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,276 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:22,276 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 18:34:22,285 [INFO] Final candidates: []
2025-04-11 18:34:22,285 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,293 [INFO] Final candidates: []
2025-04-11 18:34:22,293 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,294 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,392 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:22,392 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(7)))
2025-04-11 18:34:22,401 [INFO] Final candidates: []
2025-04-11 18:34:22,401 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,410 [INFO] Final candidates: []
2025-04-11 18:34:22,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,410 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,526 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:22,527 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(17)), (np.int64(9), np.int64(18)))
2025-04-11 18:34:22,535 [INFO] Final candidates: []
2025-04-11 18:34:22,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,544 [INFO] Final candidates: []
2025-04-11 18:34:22,544 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,545 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,739 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:22,739 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:22,748 [INFO] Final candidates: []
2025-04-11 18:34:22,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,757 [INFO] Final candidates: []
2025-04-11 18:34:22,757 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,757 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,783 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:22,783 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:22,792 [INFO] Final candidates: []
2025-04-11 18:34:22,792 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,801 [INFO] Final candidates: []
2025-04-11 18:34:22,801 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,801 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,835 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:22,835 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(8), np.int64(12)))
2025-04-11 18:34:22,844 [INFO] Final candidates: []
2025-04-11 18:34:22,844 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,853 [INFO] Final candidates: []
2025-04-11 18:34:22,853 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,853 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:22,900 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:22,900 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(6), np.int64(10)))
2025-04-11 18:34:22,911 [INFO] Final candidates: []
2025-04-11 18:34:22,911 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,920 [INFO] Final candidates: []
2025-04-11 18:34:22,920 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:22,920 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,058 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:23,058 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:23,067 [INFO] Final candidates: []
2025-04-11 18:34:23,067 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,076 [INFO] Final candidates: []
2025-04-11 18:34:23,076 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,076 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,141 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:23,141 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(6), np.int64(8)))
2025-04-11 18:34:23,150 [INFO] Final candidates: []
2025-04-11 18:34:23,150 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,162 [INFO] Final candidates: []
2025-04-11 18:34:23,162 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,163 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,270 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:23,270 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:23,279 [INFO] Final candidates: []
2025-04-11 18:34:23,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,288 [INFO] Final candidates: []
2025-04-11 18:34:23,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,288 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,375 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:23,376 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:23,385 [INFO] Final candidates: []
2025-04-11 18:34:23,385 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,394 [INFO] Final candidates: []
2025-04-11 18:34:23,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,394 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:23,562 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(5), np.int64(11)))
2025-04-11 18:34:23,571 [INFO] Final candidates: []
2025-04-11 18:34:23,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,580 [INFO] Final candidates: []
2025-04-11 18:34:23,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,580 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,610 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:23,610 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(11)), (np.int64(5), np.int64(11)))
2025-04-11 18:34:23,620 [INFO] Final candidates: []
2025-04-11 18:34:23,620 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,631 [INFO] Final candidates: []
2025-04-11 18:34:23,631 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,631 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,686 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:23,686 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(10), np.int64(9)))
2025-04-11 18:34:23,695 [INFO] Final candidates: []
2025-04-11 18:34:23,695 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,703 [INFO] Final candidates: []
2025-04-11 18:34:23,703 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,704 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:23,873 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:23,873 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:23,882 [INFO] Final candidates: []
2025-04-11 18:34:23,882 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,891 [INFO] Final candidates: []
2025-04-11 18:34:23,891 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:23,891 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:34:23,891 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:24,023 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:24,023 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(10), np.int64(8)))
2025-04-11 18:34:24,032 [INFO] Final candidates: []
2025-04-11 18:34:24,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,043 [INFO] Final candidates: []
2025-04-11 18:34:24,043 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,043 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:24,116 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:24,116 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(8), np.int64(8)))
2025-04-11 18:34:24,125 [INFO] Final candidates: []
2025-04-11 18:34:24,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,134 [INFO] Final candidates: []
2025-04-11 18:34:24,134 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,134 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:24,149 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:24,149 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(7), np.int64(17)))
2025-04-11 18:34:24,158 [INFO] Final candidates: []
2025-04-11 18:34:24,158 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,167 [INFO] Final candidates: []
2025-04-11 18:34:24,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,168 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:24,447 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:24,448 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(17)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:24,459 [INFO] Final candidates: []
2025-04-11 18:34:24,459 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,468 [INFO] Final candidates: []
2025-04-11 18:34:24,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,468 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:24,518 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:24,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:24,527 [INFO] Final candidates: []
2025-04-11 18:34:24,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,536 [INFO] Final candidates: []
2025-04-11 18:34:24,536 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,537 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:24,675 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:24,675 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:24,684 [INFO] Final candidates: []
2025-04-11 18:34:24,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,695 [INFO] Final candidates: []
2025-04-11 18:34:24,696 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,696 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:24,953 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:24,953 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(7)))
2025-04-11 18:34:24,962 [INFO] Final candidates: []
2025-04-11 18:34:24,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,970 [INFO] Final candidates: []
2025-04-11 18:34:24,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:24,971 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:25,147 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:25,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:25,156 [INFO] Final candidates: []
2025-04-11 18:34:25,156 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,165 [INFO] Final candidates: []
2025-04-11 18:34:25,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,165 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:25,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:25,404 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:25,413 [INFO] Final candidates: []
2025-04-11 18:34:25,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,429 [INFO] Final candidates: []
2025-04-11 18:34:25,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,430 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:25,518 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:25,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:25,527 [INFO] Final candidates: []
2025-04-11 18:34:25,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,535 [INFO] Final candidates: []
2025-04-11 18:34:25,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,536 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:25,541 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:25,541 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:25,550 [INFO] Final candidates: []
2025-04-11 18:34:25,550 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,559 [INFO] Final candidates: []
2025-04-11 18:34:25,559 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,559 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:25,727 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:25,727 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(5), np.int64(8)))
2025-04-11 18:34:25,736 [INFO] Final candidates: []
2025-04-11 18:34:25,736 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,745 [INFO] Final candidates: []
2025-04-11 18:34:25,745 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,745 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:25,883 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:25,883 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(17)))
2025-04-11 18:34:25,893 [INFO] Final candidates: []
2025-04-11 18:34:25,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,903 [INFO] Final candidates: []
2025-04-11 18:34:25,903 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:25,904 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:26,063 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:26,063 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(8), np.int64(14)))
2025-04-11 18:34:26,072 [INFO] Final candidates: []
2025-04-11 18:34:26,072 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,081 [INFO] Final candidates: []
2025-04-11 18:34:26,081 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,081 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:26,142 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:26,142 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:26,151 [INFO] Final candidates: []
2025-04-11 18:34:26,151 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,160 [INFO] Final candidates: []
2025-04-11 18:34:26,160 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,161 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:26,445 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:26,445 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(7), np.int64(7)))
2025-04-11 18:34:26,454 [INFO] Final candidates: []
2025-04-11 18:34:26,454 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,463 [INFO] Final candidates: []
2025-04-11 18:34:26,463 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,463 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:26,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:26,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:26,503 [INFO] Final candidates: []
2025-04-11 18:34:26,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,512 [INFO] Final candidates: []
2025-04-11 18:34:26,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,512 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:26,623 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:26,623 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:26,632 [INFO] Final candidates: []
2025-04-11 18:34:26,632 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,641 [INFO] Final candidates: []
2025-04-11 18:34:26,641 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,642 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:26,766 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:26,766 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(10), np.int64(10)))
2025-04-11 18:34:26,779 [INFO] Final candidates: []
2025-04-11 18:34:26,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,787 [INFO] Final candidates: []
2025-04-11 18:34:26,787 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:26,788 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:27,118 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:27,118 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:27,127 [INFO] Final candidates: []
2025-04-11 18:34:27,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,136 [INFO] Final candidates: []
2025-04-11 18:34:27,136 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,136 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:27,221 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:27,221 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(9), np.int64(18)))
2025-04-11 18:34:27,230 [INFO] Final candidates: []
2025-04-11 18:34:27,230 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,239 [INFO] Final candidates: []
2025-04-11 18:34:27,239 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,239 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:27,482 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:27,482 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:27,491 [INFO] Final candidates: []
2025-04-11 18:34:27,491 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,500 [INFO] Final candidates: []
2025-04-11 18:34:27,500 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,500 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:27,612 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:27,612 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(10), np.int64(8)))
2025-04-11 18:34:27,621 [INFO] Final candidates: []
2025-04-11 18:34:27,621 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,630 [INFO] Final candidates: []
2025-04-11 18:34:27,630 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,630 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:27,648 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:27,648 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(9), np.int64(17)))
2025-04-11 18:34:27,657 [INFO] Final candidates: []
2025-04-11 18:34:27,657 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,666 [INFO] Final candidates: []
2025-04-11 18:34:27,666 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,666 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:27,689 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:27,689 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:27,699 [INFO] Final candidates: []
2025-04-11 18:34:27,699 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,708 [INFO] Final candidates: []
2025-04-11 18:34:27,708 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,708 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:27,959 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:27,960 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(6), np.int64(17)))
2025-04-11 18:34:27,968 [INFO] Final candidates: []
2025-04-11 18:34:27,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,977 [INFO] Final candidates: []
2025-04-11 18:34:27,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:27,978 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:28,098 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:28,098 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(17)))
2025-04-11 18:34:28,107 [INFO] Final candidates: []
2025-04-11 18:34:28,107 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,116 [INFO] Final candidates: []
2025-04-11 18:34:28,116 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,117 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:28,187 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:28,187 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(7), np.int64(18)))
2025-04-11 18:34:28,196 [INFO] Final candidates: []
2025-04-11 18:34:28,196 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,205 [INFO] Final candidates: []
2025-04-11 18:34:28,205 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,205 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:28,444 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:28,444 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(7), np.int64(18)))
2025-04-11 18:34:28,457 [INFO] Final candidates: []
2025-04-11 18:34:28,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,466 [INFO] Final candidates: []
2025-04-11 18:34:28,466 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,466 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:28,559 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:28,559 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(5), np.int64(11)))
2025-04-11 18:34:28,568 [INFO] Final candidates: []
2025-04-11 18:34:28,568 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,576 [INFO] Final candidates: []
2025-04-11 18:34:28,576 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,576 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:28,701 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:28,701 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(6), np.int64(8)))
2025-04-11 18:34:28,712 [INFO] Final candidates: []
2025-04-11 18:34:28,712 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,725 [INFO] Final candidates: []
2025-04-11 18:34:28,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,725 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:28,946 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:28,946 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(8), np.int64(8)))
2025-04-11 18:34:28,955 [INFO] Final candidates: []
2025-04-11 18:34:28,955 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,964 [INFO] Final candidates: []
2025-04-11 18:34:28,964 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:28,964 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:29,240 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:29,241 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(18)), (np.int64(9), np.int64(7)))
2025-04-11 18:34:29,249 [INFO] Final candidates: []
2025-04-11 18:34:29,250 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,258 [INFO] Final candidates: []
2025-04-11 18:34:29,258 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,259 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:29,514 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:29,514 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:29,523 [INFO] Final candidates: []
2025-04-11 18:34:29,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,531 [INFO] Final candidates: []
2025-04-11 18:34:29,532 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,532 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:29,558 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:29,559 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(9), np.int64(10)))
2025-04-11 18:34:29,568 [INFO] Final candidates: []
2025-04-11 18:34:29,568 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,576 [INFO] Final candidates: []
2025-04-11 18:34:29,576 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,577 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:29,801 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:29,801 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(7), np.int64(10)))
2025-04-11 18:34:29,810 [INFO] Final candidates: []
2025-04-11 18:34:29,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,818 [INFO] Final candidates: []
2025-04-11 18:34:29,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,819 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:29,833 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:29,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(5), np.int64(11)))
2025-04-11 18:34:29,842 [INFO] Final candidates: []
2025-04-11 18:34:29,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,850 [INFO] Final candidates: []
2025-04-11 18:34:29,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:29,851 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:30,006 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:30,006 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(7), np.int64(18)))
2025-04-11 18:34:30,015 [INFO] Final candidates: []
2025-04-11 18:34:30,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,024 [INFO] Final candidates: []
2025-04-11 18:34:30,024 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,024 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:30,114 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:30,115 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(8), np.int64(8)))
2025-04-11 18:34:30,138 [INFO] Final candidates: []
2025-04-11 18:34:30,138 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,147 [INFO] Final candidates: []
2025-04-11 18:34:30,147 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,147 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:30,187 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:30,187 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:30,196 [INFO] Final candidates: []
2025-04-11 18:34:30,196 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,205 [INFO] Final candidates: []
2025-04-11 18:34:30,205 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,205 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:30,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:30,248 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(8), np.int64(8)))
2025-04-11 18:34:30,257 [INFO] Final candidates: []
2025-04-11 18:34:30,257 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,266 [INFO] Final candidates: []
2025-04-11 18:34:30,266 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,267 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:30,482 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:30,483 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(12)), (np.int64(10), np.int64(9)))
2025-04-11 18:34:30,495 [INFO] Final candidates: []
2025-04-11 18:34:30,495 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,504 [INFO] Final candidates: []
2025-04-11 18:34:30,504 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,504 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:30,794 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:30,794 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(17)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:30,803 [INFO] Final candidates: []
2025-04-11 18:34:30,803 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,811 [INFO] Final candidates: []
2025-04-11 18:34:30,811 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,812 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:30,927 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:30,928 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(8), np.int64(9)))
2025-04-11 18:34:30,937 [INFO] Final candidates: []
2025-04-11 18:34:30,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,945 [INFO] Final candidates: []
2025-04-11 18:34:30,945 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:30,946 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:31,094 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:31,094 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(9), np.int64(16)))
2025-04-11 18:34:31,103 [INFO] Final candidates: []
2025-04-11 18:34:31,103 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,114 [INFO] Final candidates: []
2025-04-11 18:34:31,114 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,114 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:31,157 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:31,158 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(6), np.int64(11)))
2025-04-11 18:34:31,166 [INFO] Final candidates: []
2025-04-11 18:34:31,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,175 [INFO] Final candidates: []
2025-04-11 18:34:31,175 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,175 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:31,378 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:31,378 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(6), np.int64(11)))
2025-04-11 18:34:31,387 [INFO] Final candidates: []
2025-04-11 18:34:31,387 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,396 [INFO] Final candidates: []
2025-04-11 18:34:31,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,396 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:31,554 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:31,555 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(10), np.int64(17)))
2025-04-11 18:34:31,565 [INFO] Final candidates: []
2025-04-11 18:34:31,565 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,577 [INFO] Final candidates: []
2025-04-11 18:34:31,577 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,577 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:31,707 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:31,707 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(9), np.int64(16)))
2025-04-11 18:34:31,716 [INFO] Final candidates: []
2025-04-11 18:34:31,716 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,725 [INFO] Final candidates: []
2025-04-11 18:34:31,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:31,726 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:31,769 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:31,769 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:34:31,770 [INFO] MCTS selected move: H8,L7
2025-04-11 18:34:31,770 [INFO] ===============NEW MOVE================
2025-04-11 18:34:35,769 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:34:35,778 [INFO] Final candidates: []
2025-04-11 18:34:35,778 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:35,785 [DEBUG] board coords: [(3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:35,785 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,785 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 15), (5, 13)]
2025-04-11 18:34:35,786 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:35,786 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8)] triggers candidate.
2025-04-11 18:34:35,786 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:35,786 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)]
2025-04-11 18:34:35,786 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 8), (11, 7)]
2025-04-11 18:34:35,786 [DEBUG] check_window_intermediate_custom (only one inserted(10, 8)): For L=6, window [2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:35,787 [DEBUG] board coords: [(3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10), (9, 9)]
2025-04-11 18:34:35,787 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 15), (5, 13)]
2025-04-11 18:34:35,787 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 0 2 2 2 2] with coords [(3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10), (9, 9)] triggers candidate.
2025-04-11 18:34:35,787 [DEBUG] board coords: [(4, 14), (5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8)]
2025-04-11 18:34:35,787 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:34:35,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 13), (10, 8)]
2025-04-11 18:34:35,787 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 2 2 0] with coords [(4, 14), (5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8)] triggers candidate.
2025-04-11 18:34:35,788 [INFO] Final candidates: [(3, 15), (10, 8), (5, 13)]
2025-04-11 18:34:35,788 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 15), (5, 13)), ((3, 15), (10, 8)), ((10, 8), (5, 13))]
2025-04-11 18:34:35,788 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:35,788 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:34:35,788 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 15), (5, 13))
2025-04-11 18:34:35,795 [DEBUG] board coords: [(1, 17), (2, 16), (3, 15), (4, 14), (5, 13), (6, 12)]
2025-04-11 18:34:35,795 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,795 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 17), (2, 16)]
2025-04-11 18:34:35,795 [DEBUG] check_window_intermediate_custom (only one inserted(2, 16)): For L=6, window [0 0 2 2 2 2] with coords [(1, 17), (2, 16), (3, 15), (4, 14), (5, 13), (6, 12)] triggers candidate.
2025-04-11 18:34:35,795 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)]
2025-04-11 18:34:35,795 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,795 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 8), (11, 7)]
2025-04-11 18:34:35,795 [DEBUG] check_window_intermediate_custom (only one inserted(10, 8)): For L=6, window [2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:35,796 [DEBUG] board coords: [(1, 17), (2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:35,796 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,796 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 17), (2, 16)]
2025-04-11 18:34:35,796 [DEBUG] check_window_intermediate_custom (only one inserted(2, 16)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 17), (2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:35,796 [DEBUG] board coords: [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)]
2025-04-11 18:34:35,796 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,796 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 8), (11, 7)]
2025-04-11 18:34:35,796 [DEBUG] check_window_intermediate_custom (only one inserted(10, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:35,797 [INFO] Final candidates: [(2, 16), (10, 8)]
2025-04-11 18:34:35,797 [INFO] Phase win: Collected 1unique candidate(s):[((2, 16), (10, 8))]
2025-04-11 18:34:35,797 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:34:35,805 [INFO] Final candidates: []
2025-04-11 18:34:35,806 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:35,806 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:34:35,806 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:35,806 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:35,806 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (5, 13))
2025-04-11 18:34:35,813 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:35,813 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,813 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (3, 15)]
2025-04-11 18:34:35,813 [DEBUG] check_window_intermediate_custom (only one inserted(3, 15)): For L=6, window [0 0 2 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:35,813 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:35,813 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,813 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:35,814 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:35,814 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:35,814 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (3, 15)]
2025-04-11 18:34:35,815 [DEBUG] check_window_intermediate_custom (only one inserted(3, 15)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:35,815 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:35,815 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:35,815 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:35,816 [INFO] Final candidates: [(11, 7), (3, 15)]
2025-04-11 18:34:35,816 [INFO] Phase win: Collected 1unique candidate(s):[((11, 7), (3, 15))]
2025-04-11 18:34:35,816 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:34:35,824 [INFO] Final candidates: []
2025-04-11 18:34:35,824 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:35,825 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:35,825 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:35,825 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 15), (10, 8))
2025-04-11 18:34:35,832 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:35,832 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,832 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:35,832 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:35,832 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:35,832 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,832 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:35,833 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:35,833 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:35,833 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,833 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:35,833 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:35,834 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:35,834 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:35,834 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:35,834 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,834 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:35,834 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:35,834 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:35,834 [INFO] Phase win: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:35,834 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:34:35,843 [INFO] Final candidates: []
2025-04-11 18:34:35,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:35,843 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:35,886 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:35,886 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:35,886 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:34:35,886 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:35,886 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:35,887 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:35,887 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:34:35,887 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:35,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:35,887 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:35,887 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(6), np.int64(8)))
2025-04-11 18:34:35,896 [INFO] Final candidates: []
2025-04-11 18:34:35,896 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:35,903 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:35,903 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:35,903 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:35,903 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:35,903 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:35,903 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:35,904 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:35,904 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:35,904 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:35,904 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:35,904 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:35,904 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:35,904 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:35,904 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:35,904 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:35,904 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:35,905 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:35,905 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:35,905 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:35,905 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:35,987 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:35,988 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:35,988 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(10), np.int64(9)))
2025-04-11 18:34:35,996 [INFO] Final candidates: []
2025-04-11 18:34:35,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,003 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,003 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,003 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,003 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,003 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,004 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,004 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,004 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,004 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,004 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,004 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,004 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,005 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,005 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,005 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,005 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,005 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,005 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,005 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,005 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,005 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,005 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,007 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,007 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,007 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(2), np.int64(15)))
2025-04-11 18:34:36,015 [INFO] Final candidates: []
2025-04-11 18:34:36,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,022 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,022 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,022 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,023 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,023 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,023 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,023 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,023 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,024 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,024 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,024 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,024 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,024 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,024 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,024 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,024 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,024 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,024 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,025 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,025 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,025 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,025 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,053 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:36,053 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,053 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(11), np.int64(7)))
2025-04-11 18:34:36,062 [INFO] Final candidates: []
2025-04-11 18:34:36,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,069 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,069 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,070 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,070 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,071 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,071 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,071 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,071 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,072 [INFO] Final candidates: [(2, 16), (5, 13)]
2025-04-11 18:34:36,072 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 16), (5, 13))]
2025-04-11 18:34:36,072 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:36,072 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,151 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:36,152 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,152 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(13)))
2025-04-11 18:34:36,160 [INFO] Final candidates: []
2025-04-11 18:34:36,160 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,167 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,167 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,167 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,168 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,168 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,168 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,168 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,168 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,169 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,169 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,169 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,169 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,169 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,169 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,169 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,169 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,169 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,169 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,174 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,174 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,174 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(4), np.int64(13)))
2025-04-11 18:34:36,183 [INFO] Final candidates: []
2025-04-11 18:34:36,183 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,189 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,190 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,190 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,190 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,190 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,190 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,190 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,190 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,191 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,191 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,191 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,191 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,191 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,191 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,191 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,191 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,191 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,191 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,192 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,192 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,192 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,192 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,229 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,229 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,229 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(8), np.int64(11)))
2025-04-11 18:34:36,239 [INFO] Final candidates: []
2025-04-11 18:34:36,239 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,246 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,246 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,246 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,246 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,246 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,246 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,246 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,246 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,247 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,247 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,247 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,247 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,247 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,247 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,247 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,247 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,247 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,247 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,248 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,248 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,248 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,248 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,250 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,250 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,250 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:36,258 [INFO] Final candidates: []
2025-04-11 18:34:36,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,265 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,265 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,265 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,265 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,265 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,265 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,265 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,265 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,266 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,266 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,266 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,266 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,266 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,266 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,266 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,266 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,266 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,266 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,267 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,267 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,267 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,267 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,339 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,339 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,339 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(10), np.int64(17)))
2025-04-11 18:34:36,348 [INFO] Final candidates: []
2025-04-11 18:34:36,348 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,355 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,355 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,355 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,355 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,355 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,355 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,355 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,355 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,356 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,356 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,356 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,356 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,356 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,356 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,357 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,357 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,357 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,357 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,357 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,359 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,359 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,359 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,368 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,369 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,369 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:36,378 [INFO] Final candidates: []
2025-04-11 18:34:36,378 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,385 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,385 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,385 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,385 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,385 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,385 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,385 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,385 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,386 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,386 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,386 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,386 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,387 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,387 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,387 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,387 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,387 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,387 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,387 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,387 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,387 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,387 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,400 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,400 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,400 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(13)), (np.int64(7), np.int64(5)))
2025-04-11 18:34:36,408 [INFO] Final candidates: []
2025-04-11 18:34:36,409 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,415 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,415 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,415 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,415 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,416 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,416 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,416 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,416 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,416 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,416 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,416 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,416 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,417 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,417 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,417 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,417 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,417 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,417 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,417 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,417 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,417 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,417 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,462 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,462 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,462 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(9), np.int64(7)))
2025-04-11 18:34:36,471 [INFO] Final candidates: []
2025-04-11 18:34:36,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,478 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,478 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,478 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,478 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,478 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,478 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,478 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,478 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,479 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,479 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,479 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,479 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,479 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,479 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,479 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,480 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,480 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,480 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,480 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,480 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,480 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,480 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,532 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:36,533 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,533 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 18:34:36,545 [INFO] Final candidates: []
2025-04-11 18:34:36,545 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,551 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,551 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,551 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,552 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,552 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,552 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,552 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,552 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,553 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,553 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,553 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,553 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,553 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,553 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,553 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,553 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,553 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,553 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,554 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,554 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,554 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,554 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,574 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:36,574 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,574 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(7), np.int64(18)))
2025-04-11 18:34:36,582 [INFO] Final candidates: []
2025-04-11 18:34:36,582 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,589 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,589 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,589 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,589 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,590 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,590 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,590 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,590 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,590 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,590 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,590 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,591 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,591 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,591 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,591 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,591 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,591 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,591 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,591 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,591 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,591 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,591 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,614 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,614 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,614 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(6), np.int64(14)))
2025-04-11 18:34:36,623 [INFO] Final candidates: []
2025-04-11 18:34:36,623 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,629 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,629 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,629 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,630 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,630 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,630 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,630 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,630 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,631 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,631 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,631 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,631 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,631 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,631 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,631 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,631 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,631 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,631 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,632 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,632 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,632 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,632 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,635 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,635 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,635 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(6), np.int64(6)))
2025-04-11 18:34:36,643 [INFO] Final candidates: []
2025-04-11 18:34:36,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,650 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,650 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,650 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,650 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,651 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,651 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,651 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,651 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,651 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,651 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,651 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,652 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,652 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,652 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,652 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,652 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,652 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,652 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,652 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,652 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,652 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,946 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,946 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,946 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(7), np.int64(10)))
2025-04-11 18:34:36,954 [INFO] Final candidates: []
2025-04-11 18:34:36,954 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,961 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,961 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,961 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,961 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,962 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,962 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,962 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,962 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,962 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,962 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,962 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,962 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,963 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,963 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,963 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,963 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,963 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,963 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,963 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,963 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,963 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,963 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,966 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,966 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,966 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(5), np.int64(15)))
2025-04-11 18:34:36,974 [INFO] Final candidates: []
2025-04-11 18:34:36,974 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:36,981 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:36,981 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,981 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,981 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:36,982 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,982 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,982 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,982 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,983 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:36,983 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:36,983 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:36,983 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:36,983 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:36,983 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:36,983 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:36,983 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:36,983 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:36,983 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:36,984 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:36,984 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:36,984 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:36,984 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:36,985 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:36,985 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:36,986 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(15)), (np.int64(9), np.int64(18)))
2025-04-11 18:34:36,994 [INFO] Final candidates: []
2025-04-11 18:34:36,994 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,001 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,001 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,001 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,001 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,001 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,001 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,002 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,002 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,002 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,002 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,003 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,003 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,003 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,003 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,003 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,003 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,003 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,003 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,003 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,003 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,100 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(16)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:37,108 [INFO] Final candidates: []
2025-04-11 18:34:37,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,115 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,115 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,115 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,115 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,116 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,116 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,116 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,116 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,116 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,117 [INFO] Final candidates: [(11, 7), (5, 13)]
2025-04-11 18:34:37,117 [INFO] Phase defense: Collected 1unique candidate(s):[((11, 7), (5, 13))]
2025-04-11 18:34:37,117 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:37,117 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,410 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:37,410 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,410 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(13)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:37,419 [INFO] Final candidates: []
2025-04-11 18:34:37,419 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,425 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,426 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,426 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,426 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,426 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,426 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,426 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,426 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,427 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,427 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,427 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,427 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,427 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,427 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,427 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,427 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,427 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,427 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,428 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,428 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,428 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,428 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,503 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:37,503 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,503 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(8), np.int64(14)))
2025-04-11 18:34:37,512 [INFO] Final candidates: []
2025-04-11 18:34:37,512 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,518 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,518 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,518 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,518 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,519 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,519 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,519 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,519 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,520 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,520 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,520 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,520 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,520 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,520 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,520 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,520 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,520 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,520 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,521 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,521 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,521 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,521 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,553 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,553 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:37,561 [INFO] Final candidates: []
2025-04-11 18:34:37,561 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,568 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,568 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,568 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,568 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,568 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,568 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,568 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,568 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,569 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,569 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,569 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,569 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,569 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,569 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,569 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,569 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,570 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,570 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,570 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,570 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,570 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,570 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,573 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,573 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,573 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:37,582 [INFO] Final candidates: []
2025-04-11 18:34:37,582 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,589 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,589 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,590 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,590 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,590 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,590 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,590 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,590 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,591 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,591 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,591 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,591 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,591 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,591 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,591 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,591 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,591 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,591 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,592 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,592 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,592 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,592 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,594 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,594 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,595 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(7), np.int64(10)))
2025-04-11 18:34:37,603 [INFO] Final candidates: []
2025-04-11 18:34:37,603 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,610 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,610 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,610 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,610 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,610 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,610 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,610 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,611 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,611 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,611 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,611 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,611 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,612 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,612 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,612 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,612 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,612 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,612 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,612 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,612 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,612 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,612 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,613 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,613 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,613 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(5), np.int64(13)))
2025-04-11 18:34:37,621 [INFO] Final candidates: []
2025-04-11 18:34:37,621 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,628 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,628 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,628 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,628 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,629 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,629 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,629 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,630 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,630 [INFO] Final candidates: [(11, 7)]
2025-04-11 18:34:37,630 [INFO] Phase defense: Found only one candidate: (11, 7)
2025-04-11 18:34:37,630 [INFO] Phase defense: Collected 11unique candidate(s):[((11, 7), (np.int64(11), np.int64(8))), ((11, 7), (np.int64(13), np.int64(7))), ((11, 7), (np.int64(11), np.int64(5))), ((11, 7), (np.int64(11), np.int64(9))), ((11, 7), (np.int64(10), np.int64(6))), ((11, 7), (np.int64(10), np.int64(7))), ((11, 7), (np.int64(12), np.int64(6))), ((11, 7), (np.int64(11), np.int64(6))), ((11, 7), (np.int64(12), np.int64(8))), ((11, 7), (np.int64(9), np.int64(7))), ((11, 7), (np.int64(12), np.int64(7)))]
2025-04-11 18:34:37,630 [INFO] Phase 2 (defense): 11 candidate(s) found.
2025-04-11 18:34:37,630 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,721 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:37,721 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,721 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(7), np.int64(16)))
2025-04-11 18:34:37,730 [INFO] Final candidates: []
2025-04-11 18:34:37,730 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,737 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,737 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,737 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,737 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,738 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,738 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,738 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,738 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,738 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,738 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,739 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,739 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,739 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,739 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,739 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,739 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,739 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,739 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,739 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,739 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,739 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,740 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,746 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,746 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,746 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(9), np.int64(17)))
2025-04-11 18:34:37,754 [INFO] Final candidates: []
2025-04-11 18:34:37,754 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,762 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,762 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,762 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,762 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,763 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,763 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,763 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,763 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,763 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,763 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,763 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,764 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,764 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,764 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,764 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,764 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,764 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,764 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,764 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,764 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,764 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,765 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,765 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,765 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(7)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:37,774 [INFO] Final candidates: []
2025-04-11 18:34:37,774 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,781 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,781 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,781 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,781 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,782 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,782 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,782 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,782 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,783 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,783 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,783 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,783 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,783 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,783 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,783 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,783 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,783 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,783 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,784 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,784 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,784 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,784 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,889 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,889 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(5), np.int64(7)))
2025-04-11 18:34:37,897 [INFO] Final candidates: []
2025-04-11 18:34:37,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,904 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,904 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,904 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,904 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,904 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,905 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,905 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,905 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,905 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,905 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,905 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,905 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,906 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,906 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,906 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,906 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,906 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,906 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,906 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,906 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,906 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,906 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:37,927 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:37,927 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:37,927 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(8), np.int64(7)))
2025-04-11 18:34:37,936 [INFO] Final candidates: []
2025-04-11 18:34:37,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:37,942 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:37,942 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,942 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,943 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:37,943 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,943 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,943 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,943 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,944 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:37,944 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:37,944 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:37,944 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:37,944 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:37,944 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:37,944 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:37,944 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:37,944 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:37,944 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:37,945 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:37,945 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:37,945 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:37,945 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,104 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,104 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,104 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(1), np.int64(15)))
2025-04-11 18:34:38,113 [INFO] Final candidates: []
2025-04-11 18:34:38,113 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,119 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,119 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,119 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,119 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,120 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,120 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,120 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,120 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,121 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,121 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,121 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,121 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,121 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,121 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,121 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,121 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,121 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,121 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,122 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,122 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,122 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,122 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,258 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:38,258 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,258 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(7), np.int64(6)))
2025-04-11 18:34:38,267 [INFO] Final candidates: []
2025-04-11 18:34:38,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,275 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,275 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,275 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,275 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,275 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,275 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,275 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,275 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,276 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,276 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,276 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,276 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,277 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,277 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,277 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,277 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,277 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,277 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,277 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,277 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,277 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,277 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,294 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,294 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,294 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(8), np.int64(11)))
2025-04-11 18:34:38,302 [INFO] Final candidates: []
2025-04-11 18:34:38,302 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,309 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,309 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,309 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,309 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,310 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,310 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,310 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,310 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,310 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,310 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,311 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,311 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,311 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,311 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,311 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,311 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,311 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,311 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,311 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,311 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,314 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,314 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,314 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(7)))
2025-04-11 18:34:38,324 [INFO] Final candidates: []
2025-04-11 18:34:38,324 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,330 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,331 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,331 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,331 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,331 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,331 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,331 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,331 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,332 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,332 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,332 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,332 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,332 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,332 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,332 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,332 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,332 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,332 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,333 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,333 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,333 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,333 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,436 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,436 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,436 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(7), np.int64(6)))
2025-04-11 18:34:38,445 [INFO] Final candidates: []
2025-04-11 18:34:38,445 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,452 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,452 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,452 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,452 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,452 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,452 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,452 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,452 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,453 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,453 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,453 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,453 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,453 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,453 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,454 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,454 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,454 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,454 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,454 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,454 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,454 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,454 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,472 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:38,472 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,472 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(6), np.int64(8)))
2025-04-11 18:34:38,483 [INFO] Final candidates: []
2025-04-11 18:34:38,483 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,491 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,491 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,491 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,492 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,492 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,492 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,492 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,492 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,493 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,493 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,493 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,493 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,494 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,494 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,494 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,494 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,494 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,494 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,494 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,494 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,494 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,494 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,535 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,535 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,535 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(15)), (np.int64(10), np.int64(7)))
2025-04-11 18:34:38,544 [INFO] Final candidates: []
2025-04-11 18:34:38,544 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,550 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,550 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,550 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,550 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,551 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,551 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,551 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,551 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,552 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,552 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,552 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,552 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,552 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,552 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,552 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,552 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,552 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,552 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,553 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,553 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,553 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,553 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,681 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,682 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,682 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:38,690 [INFO] Final candidates: []
2025-04-11 18:34:38,690 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,697 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,697 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,697 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,697 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,698 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,698 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,698 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,698 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,698 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,698 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,698 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,698 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,699 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,699 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,699 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,699 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,699 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,699 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,699 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,699 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,699 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,699 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,704 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,704 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,704 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(12), np.int64(8)))
2025-04-11 18:34:38,714 [INFO] Final candidates: []
2025-04-11 18:34:38,714 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,722 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,723 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,723 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,723 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,723 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,723 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,723 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,723 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,724 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,724 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,724 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,724 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,724 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,724 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,724 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,724 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,725 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,725 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,725 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,725 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,769 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:38,769 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,769 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(17)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:38,778 [INFO] Final candidates: []
2025-04-11 18:34:38,778 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,785 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,785 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,785 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,785 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,786 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,786 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,786 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,786 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,787 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,787 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,787 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,787 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,787 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,787 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,787 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,787 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,787 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,787 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,788 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,788 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,788 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,792 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,792 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,792 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(7), np.int64(13)))
2025-04-11 18:34:38,801 [INFO] Final candidates: []
2025-04-11 18:34:38,801 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,807 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,807 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,807 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,807 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,808 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,808 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,808 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,808 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,809 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,809 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,809 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,809 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,809 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,809 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,809 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,809 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,809 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,809 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,810 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,810 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,810 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,810 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,825 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,825 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,825 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(9)), (np.int64(2), np.int64(15)))
2025-04-11 18:34:38,834 [INFO] Final candidates: []
2025-04-11 18:34:38,834 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,840 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,840 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,840 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,840 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,841 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,841 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,841 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,841 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,842 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,842 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,842 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,842 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,842 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,842 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,842 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,842 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,843 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,843 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,843 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,843 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:38,885 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:38,885 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:38,886 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(9), np.int64(16)))
2025-04-11 18:34:38,894 [INFO] Final candidates: []
2025-04-11 18:34:38,894 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:38,901 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:38,901 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,901 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,901 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:38,902 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,902 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,902 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,902 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,902 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:38,902 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:38,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:38,903 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:38,903 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:38,903 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:38,903 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:38,903 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:38,903 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:38,903 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:38,903 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:38,904 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:38,904 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:38,904 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,139 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:39,139 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,139 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(18)), (np.int64(8), np.int64(7)))
2025-04-11 18:34:39,148 [INFO] Final candidates: []
2025-04-11 18:34:39,148 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,155 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,155 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,155 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,155 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,155 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,155 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,155 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,155 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,156 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,156 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,156 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,156 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,156 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,156 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,157 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,157 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,157 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,157 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,157 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,157 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,157 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,298 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:39,298 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,298 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(6), np.int64(8)))
2025-04-11 18:34:39,307 [INFO] Final candidates: []
2025-04-11 18:34:39,307 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,313 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,313 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,313 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,313 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,314 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,314 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,314 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,314 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,315 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,315 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,315 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,315 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,315 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,315 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,315 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,315 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,316 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,316 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,316 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,316 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:34:39,316 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,345 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:39,345 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,346 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(8), np.int64(18)))
2025-04-11 18:34:39,354 [INFO] Final candidates: []
2025-04-11 18:34:39,354 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,361 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,361 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,361 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,361 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,361 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,361 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,361 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,361 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,362 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,362 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,362 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,362 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,363 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,363 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,363 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,363 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,363 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,363 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,363 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,363 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,363 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,363 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,381 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:39,381 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,381 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(9)), (np.int64(10), np.int64(7)))
2025-04-11 18:34:39,389 [INFO] Final candidates: []
2025-04-11 18:34:39,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,396 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,396 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,396 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,396 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,396 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,396 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,396 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,397 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,397 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,397 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,397 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,397 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,398 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,398 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,398 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,398 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,398 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,398 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,398 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,398 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,398 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,398 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,580 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:39,581 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,581 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(11), np.int64(7)))
2025-04-11 18:34:39,589 [INFO] Final candidates: []
2025-04-11 18:34:39,589 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,597 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,597 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,597 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,597 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,600 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,600 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,600 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,600 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,601 [INFO] Final candidates: [(2, 16), (5, 13)]
2025-04-11 18:34:39,601 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 16), (5, 13))]
2025-04-11 18:34:39,601 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:39,601 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,645 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:39,645 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,646 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(6)))
2025-04-11 18:34:39,654 [INFO] Final candidates: []
2025-04-11 18:34:39,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,661 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,661 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,661 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,661 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,661 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,661 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,661 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,661 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,662 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,662 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,662 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,662 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,662 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,662 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,662 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,662 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,662 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,662 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,663 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,663 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,663 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,663 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,774 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:39,774 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,774 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(12), np.int64(8)))
2025-04-11 18:34:39,783 [INFO] Final candidates: []
2025-04-11 18:34:39,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,790 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,790 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,790 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,790 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,790 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,791 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,791 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,791 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,791 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,791 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,791 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,791 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,792 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,792 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,792 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,792 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,792 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,792 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,792 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,792 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,792 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,792 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,870 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:39,870 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,870 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(7), np.int64(10)))
2025-04-11 18:34:39,879 [INFO] Final candidates: []
2025-04-11 18:34:39,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,886 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,886 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,886 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,886 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,886 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,886 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,886 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,887 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,887 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,887 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,887 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,887 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,887 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,887 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,887 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,888 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,888 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,888 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,888 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,911 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:39,911 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,911 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(7)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:39,919 [INFO] Final candidates: []
2025-04-11 18:34:39,920 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,926 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,926 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,926 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,926 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,927 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,927 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,927 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,927 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,928 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,928 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,928 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,928 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,928 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,928 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,928 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,928 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,928 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,929 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,929 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,929 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,929 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:39,929 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:39,929 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:39,929 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:39,938 [INFO] Final candidates: []
2025-04-11 18:34:39,938 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:39,945 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:39,945 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,945 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,945 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:39,945 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,945 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,945 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,945 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,946 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:39,946 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:39,946 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:39,946 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:39,946 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:39,946 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:39,946 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:39,946 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:39,946 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:39,946 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:39,947 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:39,947 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:39,947 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:39,947 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,107 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,107 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,107 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(9), np.int64(15)))
2025-04-11 18:34:40,116 [INFO] Final candidates: []
2025-04-11 18:34:40,116 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,122 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,122 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,122 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,123 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,123 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,123 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,123 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,124 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,124 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,124 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,124 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,124 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,124 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,124 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,124 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,124 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,124 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,125 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,125 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,125 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,125 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,125 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,126 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(15)))
2025-04-11 18:34:40,134 [INFO] Final candidates: []
2025-04-11 18:34:40,134 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,141 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,141 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,141 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,141 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,141 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,141 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,141 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,141 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,142 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,142 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,142 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,142 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,142 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,142 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,142 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,142 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,142 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,142 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,143 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,143 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,143 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,143 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,152 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,152 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,152 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:40,161 [INFO] Final candidates: []
2025-04-11 18:34:40,161 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,168 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,168 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,168 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,168 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,168 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,168 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,169 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,169 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,169 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,169 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,169 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,169 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,169 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,169 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,169 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,170 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,170 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,170 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,170 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,213 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:40,214 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,214 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:40,222 [INFO] Final candidates: []
2025-04-11 18:34:40,222 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,229 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,229 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,229 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,229 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,229 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,229 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,229 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,229 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,230 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,230 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,230 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,230 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,231 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,231 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,231 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,231 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,231 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,231 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,231 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,231 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,231 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,344 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:40,345 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,345 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(17)), (np.int64(7), np.int64(5)))
2025-04-11 18:34:40,353 [INFO] Final candidates: []
2025-04-11 18:34:40,353 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,360 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,360 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,360 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,360 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,361 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,361 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,361 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,361 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,361 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,361 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,361 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,362 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,362 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,362 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,362 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,362 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,362 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,362 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,362 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,362 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,362 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,363 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,381 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,381 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(11), np.int64(7)))
2025-04-11 18:34:40,394 [INFO] Final candidates: []
2025-04-11 18:34:40,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,406 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,406 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,406 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,406 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,407 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,407 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,407 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,407 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,408 [INFO] Final candidates: [(2, 16), (5, 13)]
2025-04-11 18:34:40,408 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 16), (5, 13))]
2025-04-11 18:34:40,408 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:40,408 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,474 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,474 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,474 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(17)))
2025-04-11 18:34:40,483 [INFO] Final candidates: []
2025-04-11 18:34:40,483 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,490 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,490 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,490 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,490 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,491 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,491 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,491 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,491 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,492 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,492 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,492 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,492 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,492 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,492 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,492 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,492 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,492 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,492 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,493 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,493 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,493 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,493 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,529 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:40,529 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,529 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(6), np.int64(11)))
2025-04-11 18:34:40,539 [INFO] Final candidates: []
2025-04-11 18:34:40,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,546 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,546 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,546 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,546 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,547 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,547 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,547 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,547 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,547 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,547 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,547 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,547 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,548 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,548 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,548 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,548 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,548 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,548 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,548 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,548 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,548 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,548 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,551 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,551 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,551 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(15)))
2025-04-11 18:34:40,560 [INFO] Final candidates: []
2025-04-11 18:34:40,560 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,566 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,566 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,566 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,566 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,567 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,567 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,567 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,567 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,567 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,567 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,568 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,568 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,568 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,568 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,568 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,568 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,568 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,568 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,568 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,568 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,568 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,568 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,649 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:40,649 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,649 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:40,669 [INFO] Final candidates: []
2025-04-11 18:34:40,669 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,686 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,686 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,686 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,686 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,687 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,687 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,687 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,689 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,689 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,689 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,689 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,690 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,690 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,690 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,690 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,690 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,690 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,692 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,692 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,692 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,692 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,799 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,799 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,800 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(5), np.int64(11)))
2025-04-11 18:34:40,808 [INFO] Final candidates: []
2025-04-11 18:34:40,808 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,815 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,815 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,815 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,815 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,816 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,816 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,816 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,816 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,817 [INFO] Final candidates: [(2, 16), (5, 13)]
2025-04-11 18:34:40,817 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 16), (5, 13))]
2025-04-11 18:34:40,817 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:40,817 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:40,892 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:40,893 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:40,893 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(2), np.int64(14)))
2025-04-11 18:34:40,902 [INFO] Final candidates: []
2025-04-11 18:34:40,902 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:40,910 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:40,910 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,910 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:40,910 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,910 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,910 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,910 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,911 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:40,911 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:40,911 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:40,911 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:40,912 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:40,912 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:40,913 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:40,913 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:40,913 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:40,913 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:40,913 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:40,913 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:40,913 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:40,913 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,037 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:41,038 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,038 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(16)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:41,048 [INFO] Final candidates: []
2025-04-11 18:34:41,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,058 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,058 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,058 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,059 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,059 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,059 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,059 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,060 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,060 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,060 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,060 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,060 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,060 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,060 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,060 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,060 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,060 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,061 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,061 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,061 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,061 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:41,099 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,099 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(3), np.int64(14)))
2025-04-11 18:34:41,108 [INFO] Final candidates: []
2025-04-11 18:34:41,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,115 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,115 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,115 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,115 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,116 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,116 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,116 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,116 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,116 [INFO] Final candidates: [(11, 7)]
2025-04-11 18:34:41,116 [INFO] Phase defense: Found only one candidate: (11, 7)
2025-04-11 18:34:41,116 [INFO] Phase defense: Collected 11unique candidate(s):[((11, 7), (np.int64(11), np.int64(8))), ((11, 7), (np.int64(13), np.int64(7))), ((11, 7), (np.int64(11), np.int64(5))), ((11, 7), (np.int64(11), np.int64(9))), ((11, 7), (np.int64(10), np.int64(6))), ((11, 7), (np.int64(10), np.int64(7))), ((11, 7), (np.int64(12), np.int64(6))), ((11, 7), (np.int64(11), np.int64(6))), ((11, 7), (np.int64(12), np.int64(8))), ((11, 7), (np.int64(9), np.int64(7))), ((11, 7), (np.int64(12), np.int64(7)))]
2025-04-11 18:34:41,116 [INFO] Phase 2 (defense): 11 candidate(s) found.
2025-04-11 18:34:41,116 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,311 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:41,311 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,311 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 18:34:41,319 [INFO] Final candidates: []
2025-04-11 18:34:41,319 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,326 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,326 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,327 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,327 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,327 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,327 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,328 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,328 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,328 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,328 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,328 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,328 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,328 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,328 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,328 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,329 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,329 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,329 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,329 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,338 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:41,339 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,339 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(6), np.int64(7)))
2025-04-11 18:34:41,347 [INFO] Final candidates: []
2025-04-11 18:34:41,347 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,354 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,354 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,354 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,354 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,354 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,354 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,354 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,354 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,355 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,355 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,355 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,355 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,355 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,355 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,355 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,355 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,355 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,355 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,356 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,356 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,356 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,356 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,460 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:41,460 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,460 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(16)), (np.int64(5), np.int64(14)))
2025-04-11 18:34:41,469 [INFO] Final candidates: []
2025-04-11 18:34:41,469 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,476 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,476 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,476 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,476 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,477 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,477 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,477 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,477 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,477 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,478 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,478 [INFO] Final candidates: [(11, 7), (5, 13)]
2025-04-11 18:34:41,478 [INFO] Phase defense: Collected 1unique candidate(s):[((11, 7), (5, 13))]
2025-04-11 18:34:41,478 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:41,478 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,507 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:41,507 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,507 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(7)))
2025-04-11 18:34:41,516 [INFO] Final candidates: []
2025-04-11 18:34:41,516 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,523 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,523 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,523 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,523 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,523 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,523 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,523 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,523 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,524 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,524 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,524 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,524 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,524 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,524 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,524 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,524 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,524 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,524 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,525 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,525 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,525 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,525 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,525 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:41,525 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,526 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(18)), (np.int64(5), np.int64(8)))
2025-04-11 18:34:41,534 [INFO] Final candidates: []
2025-04-11 18:34:41,534 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,541 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,541 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,541 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,541 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,541 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,541 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,541 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,541 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,542 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,542 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,542 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,542 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,542 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,542 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,542 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,542 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,542 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,542 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,543 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,543 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,543 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,543 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,688 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:41,688 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,688 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(2), np.int64(15)))
2025-04-11 18:34:41,697 [INFO] Final candidates: []
2025-04-11 18:34:41,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,703 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,703 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,704 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,704 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,704 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,704 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,705 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,705 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,705 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,705 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,705 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,705 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,705 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,705 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,706 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,706 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,706 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,706 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,779 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:41,779 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,779 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(3), np.int64(17)))
2025-04-11 18:34:41,787 [INFO] Final candidates: []
2025-04-11 18:34:41,788 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,795 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,795 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,795 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,795 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,795 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,795 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,795 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,796 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,796 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,796 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,796 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,796 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,797 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,797 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,797 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,797 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,797 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,797 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,797 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,797 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,797 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,797 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:41,803 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:41,804 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:41,804 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:41,812 [INFO] Final candidates: []
2025-04-11 18:34:41,812 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:41,819 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:41,819 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,819 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:41,820 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,820 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,820 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,820 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,820 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:41,820 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:41,820 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:41,820 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:41,821 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:41,821 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:41,821 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:41,821 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:41,821 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:41,821 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:41,821 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:41,821 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:41,821 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:41,821 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,023 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:42,023 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,023 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(7), np.int64(18)))
2025-04-11 18:34:42,031 [INFO] Final candidates: []
2025-04-11 18:34:42,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,038 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,038 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,038 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,038 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,039 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,039 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,039 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,039 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,040 [INFO] Final candidates: [(2, 16), (5, 13)]
2025-04-11 18:34:42,040 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 16), (5, 13))]
2025-04-11 18:34:42,040 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:42,040 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,141 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:42,141 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,141 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:42,150 [INFO] Final candidates: []
2025-04-11 18:34:42,150 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,156 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,156 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,157 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,157 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,157 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,157 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,158 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,158 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,158 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,158 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,158 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,158 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,158 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,158 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,159 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,159 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,159 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,159 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,183 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:42,183 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,183 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(12), np.int64(8)))
2025-04-11 18:34:42,192 [INFO] Final candidates: []
2025-04-11 18:34:42,192 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,199 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,199 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,199 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,199 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,199 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,199 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,199 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,199 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,200 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,200 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,200 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,200 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,200 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,200 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,200 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,200 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,200 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,200 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,201 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,201 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,201 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,201 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,213 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:42,213 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,213 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(16)), (np.int64(4), np.int64(10)))
2025-04-11 18:34:42,221 [INFO] Final candidates: []
2025-04-11 18:34:42,221 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,228 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,228 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,228 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,228 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,229 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,229 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,229 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,229 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,229 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,229 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,229 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,230 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,230 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,230 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,230 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,230 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,230 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,230 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,230 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,230 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,230 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,231 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,248 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:42,248 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,248 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(2), np.int64(16)))
2025-04-11 18:34:42,257 [INFO] Final candidates: []
2025-04-11 18:34:42,257 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,264 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,264 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,264 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,264 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,265 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,265 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,265 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,265 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,265 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,265 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,266 [INFO] Final candidates: [(11, 7), (5, 13)]
2025-04-11 18:34:42,266 [INFO] Phase defense: Collected 1unique candidate(s):[((11, 7), (5, 13))]
2025-04-11 18:34:42,266 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 18:34:42,266 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,276 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:42,276 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,276 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:42,284 [INFO] Final candidates: []
2025-04-11 18:34:42,284 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,291 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,291 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,291 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,291 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,292 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,292 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,292 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,292 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,292 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,293 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,293 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,293 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,293 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,293 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,293 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,293 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,293 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,293 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,293 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,293 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,294 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,294 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,432 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:42,432 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,433 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(8), np.int64(14)))
2025-04-11 18:34:42,441 [INFO] Final candidates: []
2025-04-11 18:34:42,441 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,448 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,448 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,448 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,448 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,448 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,448 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,448 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,448 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,449 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,449 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,449 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,449 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,449 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,449 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,449 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,449 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,449 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,449 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,450 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,450 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,450 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,450 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,526 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:42,526 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,526 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(6), np.int64(7)))
2025-04-11 18:34:42,527 [DEBUG] board coords: [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)]
2025-04-11 18:34:42,527 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]
2025-04-11 18:34:42,527 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (6, 6)]
2025-04-11 18:34:42,527 [DEBUG] check_window_intermediate_custom (only one inserted(6, 6)): For L=6, window [0 0 1 1 1 1] with coords [(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10)] triggers candidate.
2025-04-11 18:34:42,527 [DEBUG] check_window_margin_custom: For L=6, window [0 1 1 1 1 0] with coords [(6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11)] triggers candidate.
2025-04-11 18:34:42,527 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,535 [INFO] Final candidates: [(6, 6), (6, 11)]
2025-04-11 18:34:42,535 [INFO] Phase win: Collected 1unique candidate(s):[((6, 6), (6, 11))]
2025-04-11 18:34:42,535 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:34:42,542 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,542 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,542 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,542 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,542 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,542 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,542 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,542 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,543 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,543 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,543 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,543 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,543 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,543 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,543 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,543 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,543 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,544 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,544 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,544 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,544 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,544 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,625 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:42,625 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,625 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(2), np.int64(15)))
2025-04-11 18:34:42,637 [INFO] Final candidates: []
2025-04-11 18:34:42,637 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,644 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,644 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,644 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,644 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,644 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,644 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,644 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,644 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,645 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,645 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,645 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,645 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,645 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,645 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,645 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,645 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,645 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,645 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,646 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,646 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,646 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,646 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:42,651 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:42,652 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:42,652 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(7), np.int64(12)))
2025-04-11 18:34:42,660 [INFO] Final candidates: []
2025-04-11 18:34:42,660 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:42,667 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:42,667 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,667 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,667 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:42,667 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,667 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,667 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,667 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,669 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:42,669 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:42,669 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:42,669 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:42,669 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:42,669 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:42,669 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:42,670 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:42,670 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:42,670 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:42,670 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:42,670 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:42,670 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:42,670 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,080 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,081 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,081 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(8), np.int64(9)))
2025-04-11 18:34:43,102 [INFO] Final candidates: []
2025-04-11 18:34:43,102 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,119 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,119 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,119 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,119 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,120 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,120 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,120 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,121 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,122 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,122 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,122 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,123 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,123 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,123 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,123 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,123 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,124 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,125 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,125 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,125 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,125 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,143 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,143 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,143 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(5), np.int64(9)))
2025-04-11 18:34:43,152 [INFO] Final candidates: []
2025-04-11 18:34:43,152 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,159 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,159 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,159 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,159 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,159 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,159 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,159 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,159 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,160 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,160 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,160 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,160 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,160 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,160 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,160 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,160 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,160 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,160 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,161 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,161 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,161 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,161 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,282 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:43,283 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,283 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(17)))
2025-04-11 18:34:43,299 [INFO] Final candidates: []
2025-04-11 18:34:43,299 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,306 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,306 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,306 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,306 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,306 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,306 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,306 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,306 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,307 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,307 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,307 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,307 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,307 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,307 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,307 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,308 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,308 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,308 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,308 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,308 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,308 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,308 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,314 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,314 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,314 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(15)), (np.int64(5), np.int64(14)))
2025-04-11 18:34:43,323 [INFO] Final candidates: []
2025-04-11 18:34:43,323 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,329 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,330 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,330 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,330 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,330 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,330 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,330 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,330 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,331 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,331 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,331 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,331 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,331 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,331 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,331 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,331 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,331 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,331 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,332 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,332 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,332 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,332 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,511 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,511 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,511 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(5), np.int64(10)))
2025-04-11 18:34:43,533 [INFO] Final candidates: []
2025-04-11 18:34:43,533 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,546 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,546 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,546 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,546 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,546 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,546 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,546 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,546 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,547 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,547 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,547 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,547 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,547 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,547 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,547 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,547 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,547 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,548 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,548 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,548 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,548 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,548 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,563 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,563 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,563 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 18:34:43,572 [INFO] Final candidates: []
2025-04-11 18:34:43,572 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,578 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,578 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,578 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,578 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,579 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,579 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,579 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,579 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,580 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,580 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,580 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,580 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,580 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,580 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,580 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,580 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,580 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,580 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,581 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,581 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,581 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,581 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,594 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,594 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,594 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(7), np.int64(10)))
2025-04-11 18:34:43,602 [INFO] Final candidates: []
2025-04-11 18:34:43,602 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,610 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,610 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,610 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,610 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,611 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,611 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,611 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,611 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,611 [INFO] Final candidates: [(11, 7)]
2025-04-11 18:34:43,611 [INFO] Phase defense: Found only one candidate: (11, 7)
2025-04-11 18:34:43,612 [INFO] Phase defense: Collected 11unique candidate(s):[((11, 7), (np.int64(11), np.int64(8))), ((11, 7), (np.int64(13), np.int64(7))), ((11, 7), (np.int64(11), np.int64(5))), ((11, 7), (np.int64(11), np.int64(9))), ((11, 7), (np.int64(10), np.int64(6))), ((11, 7), (np.int64(10), np.int64(7))), ((11, 7), (np.int64(12), np.int64(6))), ((11, 7), (np.int64(11), np.int64(6))), ((11, 7), (np.int64(12), np.int64(8))), ((11, 7), (np.int64(9), np.int64(7))), ((11, 7), (np.int64(12), np.int64(7)))]
2025-04-11 18:34:43,612 [INFO] Phase 2 (defense): 11 candidate(s) found.
2025-04-11 18:34:43,612 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,849 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:43,849 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,849 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(7)), (np.int64(11), np.int64(9)))
2025-04-11 18:34:43,863 [INFO] Final candidates: []
2025-04-11 18:34:43,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,870 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,870 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,870 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,870 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,871 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,871 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,871 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,871 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,873 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,873 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,873 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,873 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,874 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,874 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,874 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,874 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,874 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,874 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,874 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,874 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,874 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,874 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,884 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,884 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:43,884 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(8)))
2025-04-11 18:34:43,893 [INFO] Final candidates: []
2025-04-11 18:34:43,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:43,899 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)]
2025-04-11 18:34:43,900 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,900 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,900 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11)] triggers candidate.
2025-04-11 18:34:43,900 [DEBUG] board coords: [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,900 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,900 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,900 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=6, window [2 2 2 2 0 0] with coords [(7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,901 [DEBUG] board coords: [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)]
2025-04-11 18:34:43,901 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:34:43,901 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 16), (5, 13)]
2025-04-11 18:34:43,901 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(2, 16), (3, 15), (4, 14), (5, 13), (6, 12), (7, 11), (8, 10)] triggers candidate.
2025-04-11 18:34:43,901 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(5, 13), (6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:43,901 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:34:43,901 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)]
2025-04-11 18:34:43,901 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:43,901 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 7), (12, 6)]
2025-04-11 18:34:43,901 [DEBUG] check_window_intermediate_custom (only one inserted(11, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7), (12, 6)] triggers candidate.
2025-04-11 18:34:43,902 [INFO] Final candidates: [(11, 7), (2, 16), (5, 13)]
2025-04-11 18:34:43,902 [INFO] Phase defense: Collected 3unique candidate(s):[((11, 7), (2, 16)), ((11, 7), (5, 13)), ((2, 16), (5, 13))]
2025-04-11 18:34:43,902 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:34:43,902 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:43,933 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:43,933 [INFO] MCTS: Search finished. Best move selected with 2 visits.
2025-04-11 18:34:43,933 [INFO] MCTS (defense candidates) selected move: Q4,O6
2025-04-11 18:34:56,956 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:34:56,966 [INFO] Final candidates: []
2025-04-11 18:34:56,966 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:56,975 [DEBUG] board coords: [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)]
2025-04-11 18:34:56,975 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:34:56,975 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 8), (11, 7)]
2025-04-11 18:34:56,975 [DEBUG] check_window_intermediate_custom (only one inserted(10, 8)): For L=6, window [2 2 2 2 0 0] with coords [(6, 12), (7, 11), (8, 10), (9, 9), (10, 8), (11, 7)] triggers candidate.
2025-04-11 18:34:56,977 [INFO] Final candidates: [(10, 8)]
2025-04-11 18:34:56,977 [INFO] Phase defense: Found only one candidate: (10, 8)
2025-04-11 18:34:56,977 [INFO] Phase defense: Collected 9unique candidate(s):[((10, 8), (np.int64(10), np.int64(10))), ((10, 8), (np.int64(11), np.int64(9))), ((10, 8), (np.int64(10), np.int64(7))), ((10, 8), (np.int64(12), np.int64(8))), ((10, 8), (np.int64(9), np.int64(7))), ((10, 8), (np.int64(11), np.int64(8))), ((10, 8), (np.int64(8), np.int64(8))), ((10, 8), (np.int64(10), np.int64(6))), ((10, 8), (np.int64(11), np.int64(7)))]
2025-04-11 18:34:56,977 [INFO] Phase 2 (defense): 9 candidate(s) found.
2025-04-11 18:34:56,977 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:34:56,977 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(10), np.int64(7)))
2025-04-11 18:34:56,986 [INFO] Final candidates: []
2025-04-11 18:34:56,986 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:56,994 [INFO] Final candidates: []
2025-04-11 18:34:56,994 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:56,994 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:34:56,994 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:57,061 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:57,062 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(11), np.int64(7)))
2025-04-11 18:34:57,070 [INFO] Final candidates: []
2025-04-11 18:34:57,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,079 [INFO] Final candidates: []
2025-04-11 18:34:57,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,079 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:57,207 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:57,207 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(8), np.int64(8)))
2025-04-11 18:34:57,215 [INFO] Final candidates: []
2025-04-11 18:34:57,215 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,224 [INFO] Final candidates: []
2025-04-11 18:34:57,224 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,224 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:57,317 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:57,317 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(11), np.int64(9)))
2025-04-11 18:34:57,326 [INFO] Final candidates: []
2025-04-11 18:34:57,326 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,334 [INFO] Final candidates: []
2025-04-11 18:34:57,334 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,334 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:57,432 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:57,432 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(11), np.int64(8)))
2025-04-11 18:34:57,442 [INFO] Final candidates: []
2025-04-11 18:34:57,442 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,450 [INFO] Final candidates: []
2025-04-11 18:34:57,450 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,451 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:57,643 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:57,644 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(10), np.int64(6)))
2025-04-11 18:34:57,652 [INFO] Final candidates: []
2025-04-11 18:34:57,652 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,660 [INFO] Final candidates: []
2025-04-11 18:34:57,660 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,660 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:57,852 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:57,852 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(10), np.int64(10)))
2025-04-11 18:34:57,862 [INFO] Final candidates: []
2025-04-11 18:34:57,862 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,871 [INFO] Final candidates: []
2025-04-11 18:34:57,871 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,872 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:57,879 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:57,879 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(9), np.int64(7)))
2025-04-11 18:34:57,887 [INFO] Final candidates: []
2025-04-11 18:34:57,887 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,895 [INFO] Final candidates: []
2025-04-11 18:34:57,895 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:57,896 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:58,085 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:58,085 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 8), (np.int64(12), np.int64(8)))
2025-04-11 18:34:58,093 [INFO] Final candidates: []
2025-04-11 18:34:58,093 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,102 [INFO] Final candidates: []
2025-04-11 18:34:58,102 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,103 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:58,341 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:58,342 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:58,342 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(6), np.int64(6)))
2025-04-11 18:34:58,350 [INFO] Final candidates: []
2025-04-11 18:34:58,350 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,358 [INFO] Final candidates: []
2025-04-11 18:34:58,358 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,359 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:58,693 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:58,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:58,694 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(14)), (np.int64(10), np.int64(16)))
2025-04-11 18:34:58,702 [INFO] Final candidates: []
2025-04-11 18:34:58,702 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,710 [INFO] Final candidates: []
2025-04-11 18:34:58,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,711 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:58,859 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:58,860 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:58,860 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(8), np.int64(15)))
2025-04-11 18:34:58,868 [INFO] Final candidates: []
2025-04-11 18:34:58,868 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,876 [INFO] Final candidates: []
2025-04-11 18:34:58,876 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,876 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:58,931 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:58,931 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:58,931 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(6), np.int64(16)))
2025-04-11 18:34:58,939 [INFO] Final candidates: []
2025-04-11 18:34:58,939 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,947 [INFO] Final candidates: []
2025-04-11 18:34:58,947 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:58,948 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:59,091 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:59,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:59,092 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(10)), (np.int64(12), np.int64(9)))
2025-04-11 18:34:59,095 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:34:59,095 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:34:59,095 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (11, 9)]
2025-04-11 18:34:59,095 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:34:59,100 [INFO] Final candidates: [(8, 9), (11, 9)]
2025-04-11 18:34:59,100 [INFO] Phase win: Collected 1unique candidate(s):[((8, 9), (11, 9))]
2025-04-11 18:34:59,100 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:34:59,108 [INFO] Final candidates: []
2025-04-11 18:34:59,108 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,109 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:59,214 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:59,214 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:59,215 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(16)), (np.int64(5), np.int64(11)))
2025-04-11 18:34:59,223 [INFO] Final candidates: []
2025-04-11 18:34:59,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,231 [INFO] Final candidates: []
2025-04-11 18:34:59,231 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,231 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:59,379 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:59,379 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:59,379 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(5)), (np.int64(4), np.int64(13)))
2025-04-11 18:34:59,387 [INFO] Final candidates: []
2025-04-11 18:34:59,387 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,396 [INFO] Final candidates: []
2025-04-11 18:34:59,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,396 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:59,533 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:34:59,534 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:59,534 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(9), np.int64(17)))
2025-04-11 18:34:59,542 [INFO] Final candidates: []
2025-04-11 18:34:59,543 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,551 [INFO] Final candidates: []
2025-04-11 18:34:59,551 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,551 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:59,679 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:59,679 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:59,680 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(16)), (np.int64(7), np.int64(8)))
2025-04-11 18:34:59,688 [INFO] Final candidates: []
2025-04-11 18:34:59,688 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,696 [INFO] Final candidates: []
2025-04-11 18:34:59,696 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,696 [INFO] Default policy: Starting random playout.
2025-04-11 18:34:59,841 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:34:59,841 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:34:59,841 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(5), np.int64(15)))
2025-04-11 18:34:59,849 [INFO] Final candidates: []
2025-04-11 18:34:59,849 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,857 [INFO] Final candidates: []
2025-04-11 18:34:59,857 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:34:59,858 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,062 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:00,062 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,063 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(7), np.int64(15)))
2025-04-11 18:35:00,075 [INFO] Final candidates: []
2025-04-11 18:35:00,075 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,084 [INFO] Final candidates: []
2025-04-11 18:35:00,084 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,085 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,209 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:00,209 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,210 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(18)), (np.int64(6), np.int64(13)))
2025-04-11 18:35:00,218 [INFO] Final candidates: []
2025-04-11 18:35:00,218 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,226 [INFO] Final candidates: []
2025-04-11 18:35:00,226 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,227 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,345 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:00,345 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,345 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(10), np.int64(16)))
2025-04-11 18:35:00,354 [INFO] Final candidates: []
2025-04-11 18:35:00,354 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,362 [INFO] Final candidates: []
2025-04-11 18:35:00,362 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,363 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,412 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:00,412 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,412 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(18)), (np.int64(6), np.int64(14)))
2025-04-11 18:35:00,421 [INFO] Final candidates: []
2025-04-11 18:35:00,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,429 [INFO] Final candidates: []
2025-04-11 18:35:00,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,429 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,447 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:00,447 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,447 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(8), np.int64(7)))
2025-04-11 18:35:00,455 [INFO] Final candidates: []
2025-04-11 18:35:00,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,464 [INFO] Final candidates: []
2025-04-11 18:35:00,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,464 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,563 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:00,563 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,563 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(2), np.int64(15)))
2025-04-11 18:35:00,571 [INFO] Final candidates: []
2025-04-11 18:35:00,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,579 [INFO] Final candidates: []
2025-04-11 18:35:00,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,580 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,582 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:00,582 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,583 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(17)), (np.int64(10), np.int64(10)))
2025-04-11 18:35:00,591 [INFO] Final candidates: []
2025-04-11 18:35:00,591 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,599 [INFO] Final candidates: []
2025-04-11 18:35:00,599 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,600 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,726 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:00,726 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,726 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(4), np.int64(10)))
2025-04-11 18:35:00,735 [INFO] Final candidates: []
2025-04-11 18:35:00,735 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,743 [INFO] Final candidates: []
2025-04-11 18:35:00,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,743 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,799 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:00,799 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,800 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(8), np.int64(11)))
2025-04-11 18:35:00,808 [INFO] Final candidates: []
2025-04-11 18:35:00,808 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,818 [INFO] Final candidates: []
2025-04-11 18:35:00,818 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,818 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:00,866 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:00,866 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:00,866 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(7)), (np.int64(4), np.int64(12)))
2025-04-11 18:35:00,874 [INFO] Final candidates: []
2025-04-11 18:35:00,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,882 [INFO] Final candidates: []
2025-04-11 18:35:00,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:00,883 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:01,040 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:01,040 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:01,040 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(16)), (np.int64(6), np.int64(13)))
2025-04-11 18:35:01,049 [INFO] Final candidates: []
2025-04-11 18:35:01,049 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,057 [INFO] Final candidates: []
2025-04-11 18:35:01,057 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,057 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:01,220 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:01,220 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:01,220 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(7), np.int64(15)))
2025-04-11 18:35:01,228 [INFO] Final candidates: []
2025-04-11 18:35:01,228 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,240 [INFO] Final candidates: []
2025-04-11 18:35:01,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,240 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:01,312 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:01,312 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:01,312 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(6), np.int64(11)))
2025-04-11 18:35:01,320 [INFO] Final candidates: []
2025-04-11 18:35:01,320 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,329 [INFO] Final candidates: []
2025-04-11 18:35:01,329 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,329 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:01,510 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:01,510 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:01,511 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 18:35:01,519 [INFO] Final candidates: []
2025-04-11 18:35:01,519 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,527 [INFO] Final candidates: []
2025-04-11 18:35:01,527 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,528 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:01,732 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:01,732 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:01,732 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(15)), (np.int64(9), np.int64(18)))
2025-04-11 18:35:01,741 [INFO] Final candidates: []
2025-04-11 18:35:01,741 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,749 [INFO] Final candidates: []
2025-04-11 18:35:01,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,750 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:01,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:01,802 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:01,802 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(9), np.int64(18)))
2025-04-11 18:35:01,811 [INFO] Final candidates: []
2025-04-11 18:35:01,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,819 [INFO] Final candidates: []
2025-04-11 18:35:01,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,819 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:01,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:01,909 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:01,909 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(9), np.int64(6)))
2025-04-11 18:35:01,917 [INFO] Final candidates: []
2025-04-11 18:35:01,917 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,925 [INFO] Final candidates: []
2025-04-11 18:35:01,925 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:01,926 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:02,194 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:02,195 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:02,195 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(8), np.int64(9)))
2025-04-11 18:35:02,198 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:35:02,198 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:35:02,198 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:35:02,198 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:35:02,203 [INFO] Final candidates: [(11, 9)]
2025-04-11 18:35:02,203 [INFO] Phase win: Found only one candidate: (11, 9)
2025-04-11 18:35:02,203 [INFO] Phase win: Collected 8unique candidate(s):[((11, 9), (np.int64(11), np.int64(11))), ((11, 9), (np.int64(11), np.int64(10))), ((11, 9), (np.int64(12), np.int64(10))), ((11, 9), (np.int64(11), np.int64(8))), ((11, 9), (np.int64(12), np.int64(9))), ((11, 9), (np.int64(13), np.int64(9))), ((11, 9), (np.int64(11), np.int64(7))), ((11, 9), (np.int64(10), np.int64(10)))]
2025-04-11 18:35:02,203 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 18:35:02,212 [INFO] Final candidates: []
2025-04-11 18:35:02,212 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,212 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:02,324 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:02,324 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:02,324 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(12), np.int64(8)))
2025-04-11 18:35:02,333 [INFO] Final candidates: []
2025-04-11 18:35:02,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,341 [INFO] Final candidates: []
2025-04-11 18:35:02,341 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,341 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:02,605 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:02,605 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:02,605 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(6), np.int64(13)))
2025-04-11 18:35:02,614 [INFO] Final candidates: []
2025-04-11 18:35:02,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,622 [INFO] Final candidates: []
2025-04-11 18:35:02,622 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,622 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:02,695 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:02,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:02,696 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(5), np.int64(15)))
2025-04-11 18:35:02,704 [INFO] Final candidates: []
2025-04-11 18:35:02,704 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,714 [INFO] Final candidates: []
2025-04-11 18:35:02,714 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,714 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:02,932 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:02,932 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:02,933 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(16)), (np.int64(10), np.int64(10)))
2025-04-11 18:35:02,941 [INFO] Final candidates: []
2025-04-11 18:35:02,941 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,949 [INFO] Final candidates: []
2025-04-11 18:35:02,949 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:02,949 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:03,138 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:03,138 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:03,138 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(16)), (np.int64(6), np.int64(6)))
2025-04-11 18:35:03,147 [INFO] Final candidates: []
2025-04-11 18:35:03,147 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,155 [INFO] Final candidates: []
2025-04-11 18:35:03,155 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,156 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:03,234 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:03,235 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:03,235 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(10), np.int64(10)))
2025-04-11 18:35:03,243 [INFO] Final candidates: []
2025-04-11 18:35:03,243 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,251 [INFO] Final candidates: []
2025-04-11 18:35:03,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,252 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:03,486 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:03,487 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:03,487 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(13)), (np.int64(7), np.int64(8)))
2025-04-11 18:35:03,495 [INFO] Final candidates: []
2025-04-11 18:35:03,495 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,503 [INFO] Final candidates: []
2025-04-11 18:35:03,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,504 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:03,710 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:03,710 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:03,710 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(2), np.int64(15)))
2025-04-11 18:35:03,719 [INFO] Final candidates: []
2025-04-11 18:35:03,719 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,727 [INFO] Final candidates: []
2025-04-11 18:35:03,727 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,727 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:03,982 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:03,982 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:03,983 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(7), np.int64(16)))
2025-04-11 18:35:03,991 [INFO] Final candidates: []
2025-04-11 18:35:03,991 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,999 [INFO] Final candidates: []
2025-04-11 18:35:03,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:03,999 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,160 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:04,161 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,161 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(4), np.int64(16)))
2025-04-11 18:35:04,169 [INFO] Final candidates: []
2025-04-11 18:35:04,169 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,177 [INFO] Final candidates: []
2025-04-11 18:35:04,177 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,177 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,414 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:04,414 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,414 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(5), np.int64(11)))
2025-04-11 18:35:04,423 [INFO] Final candidates: []
2025-04-11 18:35:04,423 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,431 [INFO] Final candidates: []
2025-04-11 18:35:04,431 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,432 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,499 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:04,501 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,501 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 18:35:04,510 [INFO] Final candidates: []
2025-04-11 18:35:04,510 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,518 [INFO] Final candidates: []
2025-04-11 18:35:04,518 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,518 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,577 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:04,577 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,577 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(5), np.int64(7)))
2025-04-11 18:35:04,585 [INFO] Final candidates: []
2025-04-11 18:35:04,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,593 [INFO] Final candidates: []
2025-04-11 18:35:04,593 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,594 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:04,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,694 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(7), np.int64(18)))
2025-04-11 18:35:04,702 [INFO] Final candidates: []
2025-04-11 18:35:04,702 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,710 [INFO] Final candidates: []
2025-04-11 18:35:04,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,711 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:35:04,711 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,753 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:04,754 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,754 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(18)))
2025-04-11 18:35:04,762 [INFO] Final candidates: []
2025-04-11 18:35:04,762 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,770 [INFO] Final candidates: []
2025-04-11 18:35:04,770 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,771 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,815 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:04,815 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,815 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(8), np.int64(18)))
2025-04-11 18:35:04,824 [INFO] Final candidates: []
2025-04-11 18:35:04,824 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,832 [INFO] Final candidates: []
2025-04-11 18:35:04,832 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,832 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:04,949 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:04,949 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:04,949 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(7), np.int64(8)))
2025-04-11 18:35:04,957 [INFO] Final candidates: []
2025-04-11 18:35:04,957 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,966 [INFO] Final candidates: []
2025-04-11 18:35:04,966 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:04,966 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:05,053 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:05,053 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:05,053 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(17)), (np.int64(7), np.int64(5)))
2025-04-11 18:35:05,062 [INFO] Final candidates: []
2025-04-11 18:35:05,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,070 [INFO] Final candidates: []
2025-04-11 18:35:05,070 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,070 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:05,148 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:05,148 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:05,148 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(2), np.int64(16)))
2025-04-11 18:35:05,156 [INFO] Final candidates: []
2025-04-11 18:35:05,156 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,164 [INFO] Final candidates: []
2025-04-11 18:35:05,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,165 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:05,377 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:05,377 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:05,377 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(5)), (np.int64(8), np.int64(7)))
2025-04-11 18:35:05,386 [INFO] Final candidates: []
2025-04-11 18:35:05,386 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,394 [INFO] Final candidates: []
2025-04-11 18:35:05,394 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,394 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:05,591 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:05,591 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:05,591 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(6), np.int64(13)))
2025-04-11 18:35:05,600 [INFO] Final candidates: []
2025-04-11 18:35:05,600 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,608 [INFO] Final candidates: []
2025-04-11 18:35:05,608 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,608 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:05,733 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:05,733 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:05,733 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(16)), (np.int64(3), np.int64(14)))
2025-04-11 18:35:05,742 [INFO] Final candidates: []
2025-04-11 18:35:05,742 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,750 [INFO] Final candidates: []
2025-04-11 18:35:05,750 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,750 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:05,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:05,863 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:05,864 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(16)), (np.int64(7), np.int64(8)))
2025-04-11 18:35:05,873 [INFO] Final candidates: []
2025-04-11 18:35:05,873 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,881 [INFO] Final candidates: []
2025-04-11 18:35:05,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,881 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:05,947 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:05,948 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:05,948 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(4), np.int64(16)))
2025-04-11 18:35:05,956 [INFO] Final candidates: []
2025-04-11 18:35:05,956 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,964 [INFO] Final candidates: []
2025-04-11 18:35:05,964 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:05,965 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:06,112 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:06,112 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:06,112 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(7)), (np.int64(8), np.int64(7)))
2025-04-11 18:35:06,121 [INFO] Final candidates: []
2025-04-11 18:35:06,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,129 [INFO] Final candidates: []
2025-04-11 18:35:06,129 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,129 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:06,199 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:06,199 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:06,199 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(7), np.int64(6)))
2025-04-11 18:35:06,207 [INFO] Final candidates: []
2025-04-11 18:35:06,207 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,216 [INFO] Final candidates: []
2025-04-11 18:35:06,216 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,217 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:06,413 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:06,413 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:06,413 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(4), np.int64(13)))
2025-04-11 18:35:06,421 [INFO] Final candidates: []
2025-04-11 18:35:06,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,429 [INFO] Final candidates: []
2025-04-11 18:35:06,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,430 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:06,641 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:06,642 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:06,642 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(7)))
2025-04-11 18:35:06,650 [INFO] Final candidates: []
2025-04-11 18:35:06,650 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,658 [INFO] Final candidates: []
2025-04-11 18:35:06,658 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,659 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:06,836 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:06,836 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:06,836 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(3), np.int64(17)))
2025-04-11 18:35:06,845 [INFO] Final candidates: []
2025-04-11 18:35:06,845 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,853 [INFO] Final candidates: []
2025-04-11 18:35:06,853 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,853 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:06,969 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:06,969 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:06,969 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(10), np.int64(17)))
2025-04-11 18:35:06,977 [INFO] Final candidates: []
2025-04-11 18:35:06,977 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,985 [INFO] Final candidates: []
2025-04-11 18:35:06,985 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:06,986 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,065 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:07,065 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,065 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(12), np.int64(9)))
2025-04-11 18:35:07,068 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:35:07,068 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:35:07,068 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (11, 9)]
2025-04-11 18:35:07,068 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:35:07,073 [INFO] Final candidates: [(8, 9), (11, 9)]
2025-04-11 18:35:07,074 [INFO] Phase win: Collected 1unique candidate(s):[((8, 9), (11, 9))]
2025-04-11 18:35:07,074 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:35:07,081 [INFO] Final candidates: []
2025-04-11 18:35:07,082 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,082 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,166 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:07,167 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,167 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(7), np.int64(8)))
2025-04-11 18:35:07,175 [INFO] Final candidates: []
2025-04-11 18:35:07,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,183 [INFO] Final candidates: []
2025-04-11 18:35:07,183 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,184 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,357 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:07,357 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,357 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(3), np.int64(14)))
2025-04-11 18:35:07,365 [INFO] Final candidates: []
2025-04-11 18:35:07,365 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,373 [INFO] Final candidates: []
2025-04-11 18:35:07,373 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,374 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,562 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:07,562 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,562 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(12), np.int64(6)))
2025-04-11 18:35:07,577 [INFO] Final candidates: []
2025-04-11 18:35:07,577 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,588 [INFO] Final candidates: []
2025-04-11 18:35:07,588 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,589 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,630 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:07,630 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,631 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(5)))
2025-04-11 18:35:07,639 [INFO] Final candidates: []
2025-04-11 18:35:07,639 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,647 [INFO] Final candidates: []
2025-04-11 18:35:07,647 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,647 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,740 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:07,740 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,741 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(11)), (np.int64(2), np.int64(15)))
2025-04-11 18:35:07,751 [INFO] Final candidates: []
2025-04-11 18:35:07,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,760 [INFO] Final candidates: []
2025-04-11 18:35:07,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,760 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,782 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:07,782 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,783 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(11)), (np.int64(11), np.int64(6)))
2025-04-11 18:35:07,792 [INFO] Final candidates: []
2025-04-11 18:35:07,792 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,800 [INFO] Final candidates: []
2025-04-11 18:35:07,800 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,801 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:07,959 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:07,959 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:07,959 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(8)))
2025-04-11 18:35:07,967 [INFO] Final candidates: []
2025-04-11 18:35:07,968 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,976 [INFO] Final candidates: []
2025-04-11 18:35:07,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:07,976 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,023 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:08,023 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,023 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(6)), (np.int64(10), np.int64(10)))
2025-04-11 18:35:08,032 [INFO] Final candidates: []
2025-04-11 18:35:08,032 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,040 [INFO] Final candidates: []
2025-04-11 18:35:08,040 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,040 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,149 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:08,149 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,149 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(16)), (np.int64(7), np.int64(15)))
2025-04-11 18:35:08,157 [INFO] Final candidates: []
2025-04-11 18:35:08,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,165 [INFO] Final candidates: []
2025-04-11 18:35:08,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,166 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,281 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:08,281 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,281 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(18)), (np.int64(6), np.int64(16)))
2025-04-11 18:35:08,290 [INFO] Final candidates: []
2025-04-11 18:35:08,290 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,298 [INFO] Final candidates: []
2025-04-11 18:35:08,298 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,298 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,404 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:08,405 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,405 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(5), np.int64(12)))
2025-04-11 18:35:08,413 [INFO] Final candidates: []
2025-04-11 18:35:08,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,421 [INFO] Final candidates: []
2025-04-11 18:35:08,421 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,421 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,476 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:08,476 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,476 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(15)), (np.int64(10), np.int64(16)))
2025-04-11 18:35:08,485 [INFO] Final candidates: []
2025-04-11 18:35:08,485 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,493 [INFO] Final candidates: []
2025-04-11 18:35:08,493 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,493 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,576 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:08,576 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,576 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(14)), (np.int64(10), np.int64(17)))
2025-04-11 18:35:08,584 [INFO] Final candidates: []
2025-04-11 18:35:08,584 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,593 [INFO] Final candidates: []
2025-04-11 18:35:08,593 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,593 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,758 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:08,758 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,758 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(6), np.int64(14)))
2025-04-11 18:35:08,767 [INFO] Final candidates: []
2025-04-11 18:35:08,767 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,776 [INFO] Final candidates: []
2025-04-11 18:35:08,776 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,776 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:08,912 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:08,912 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:08,912 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(9)), (np.int64(9), np.int64(18)))
2025-04-11 18:35:08,915 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:35:08,915 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:35:08,915 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (12, 9)]
2025-04-11 18:35:08,915 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:35:08,921 [INFO] Final candidates: [(8, 9), (12, 9)]
2025-04-11 18:35:08,921 [INFO] Phase win: Collected 1unique candidate(s):[((8, 9), (12, 9))]
2025-04-11 18:35:08,921 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:35:08,931 [INFO] Final candidates: []
2025-04-11 18:35:08,931 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:08,931 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:09,072 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:09,072 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:09,072 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(13), np.int64(9)))
2025-04-11 18:35:09,082 [INFO] Final candidates: []
2025-04-11 18:35:09,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,090 [INFO] Final candidates: []
2025-04-11 18:35:09,090 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,091 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:09,197 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:09,197 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:09,197 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(17)), (np.int64(4), np.int64(10)))
2025-04-11 18:35:09,205 [INFO] Final candidates: []
2025-04-11 18:35:09,205 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,214 [INFO] Final candidates: []
2025-04-11 18:35:09,214 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,214 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:09,391 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:09,391 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:09,391 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(17)), (np.int64(5), np.int64(12)))
2025-04-11 18:35:09,400 [INFO] Final candidates: []
2025-04-11 18:35:09,400 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,408 [INFO] Final candidates: []
2025-04-11 18:35:09,408 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,408 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:09,673 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:09,673 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:09,673 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(10), np.int64(11)))
2025-04-11 18:35:09,681 [INFO] Final candidates: []
2025-04-11 18:35:09,681 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,689 [INFO] Final candidates: []
2025-04-11 18:35:09,689 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,690 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:09,781 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:09,781 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:09,782 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(15)), (np.int64(6), np.int64(6)))
2025-04-11 18:35:09,790 [INFO] Final candidates: []
2025-04-11 18:35:09,790 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,798 [INFO] Final candidates: []
2025-04-11 18:35:09,798 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,798 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:09,835 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:09,835 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:09,835 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(6)), (np.int64(7), np.int64(12)))
2025-04-11 18:35:09,843 [INFO] Final candidates: []
2025-04-11 18:35:09,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,853 [INFO] Final candidates: []
2025-04-11 18:35:09,853 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,854 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:09,883 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:09,884 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:09,884 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(15)), (np.int64(9), np.int64(6)))
2025-04-11 18:35:09,892 [INFO] Final candidates: []
2025-04-11 18:35:09,892 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,900 [INFO] Final candidates: []
2025-04-11 18:35:09,900 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:09,900 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:10,056 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:10,056 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:10,056 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(5), np.int64(12)))
2025-04-11 18:35:10,065 [INFO] Final candidates: []
2025-04-11 18:35:10,065 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,073 [INFO] Final candidates: []
2025-04-11 18:35:10,073 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,073 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:10,338 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:10,338 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:10,339 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(16)), (np.int64(10), np.int64(16)))
2025-04-11 18:35:10,347 [INFO] Final candidates: []
2025-04-11 18:35:10,347 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,355 [INFO] Final candidates: []
2025-04-11 18:35:10,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,356 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:10,436 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:10,436 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:10,436 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(6)), (np.int64(9), np.int64(15)))
2025-04-11 18:35:10,445 [INFO] Final candidates: []
2025-04-11 18:35:10,445 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,453 [INFO] Final candidates: []
2025-04-11 18:35:10,453 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,454 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:10,619 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:10,619 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:10,619 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(15)), (np.int64(9), np.int64(16)))
2025-04-11 18:35:10,628 [INFO] Final candidates: []
2025-04-11 18:35:10,628 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,636 [INFO] Final candidates: []
2025-04-11 18:35:10,636 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,637 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:10,715 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:10,715 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:10,715 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(17)), (np.int64(6), np.int64(6)))
2025-04-11 18:35:10,728 [INFO] Final candidates: []
2025-04-11 18:35:10,728 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,749 [INFO] Final candidates: []
2025-04-11 18:35:10,749 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,750 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:10,881 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:10,881 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:10,881 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(7), np.int64(16)))
2025-04-11 18:35:10,890 [INFO] Final candidates: []
2025-04-11 18:35:10,890 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,899 [INFO] Final candidates: []
2025-04-11 18:35:10,899 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:10,899 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:11,022 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:11,022 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:11,022 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(12)), (np.int64(7), np.int64(15)))
2025-04-11 18:35:11,031 [INFO] Final candidates: []
2025-04-11 18:35:11,031 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:11,039 [INFO] Final candidates: []
2025-04-11 18:35:11,039 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:11,039 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:11,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:11,274 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:11,274 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(14)), (np.int64(7), np.int64(8)))
2025-04-11 18:35:11,282 [INFO] Final candidates: []
2025-04-11 18:35:11,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:11,290 [INFO] Final candidates: []
2025-04-11 18:35:11,290 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:11,291 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:11,508 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:11,508 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:11,508 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(6), np.int64(14)))
2025-04-11 18:35:11,511 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:35:11,511 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:35:11,511 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:35:11,511 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:35:11,517 [INFO] Final candidates: [(11, 9)]
2025-04-11 18:35:11,517 [INFO] Phase win: Found only one candidate: (11, 9)
2025-04-11 18:35:11,517 [INFO] Phase win: Collected 9unique candidate(s):[((11, 9), (np.int64(11), np.int64(11))), ((11, 9), (np.int64(12), np.int64(8))), ((11, 9), (np.int64(11), np.int64(10))), ((11, 9), (np.int64(12), np.int64(10))), ((11, 9), (np.int64(11), np.int64(8))), ((11, 9), (np.int64(12), np.int64(9))), ((11, 9), (np.int64(13), np.int64(9))), ((11, 9), (np.int64(11), np.int64(7))), ((11, 9), (np.int64(10), np.int64(10)))]
2025-04-11 18:35:11,517 [INFO] Phase 1 (immediate win): 9 candidate(s) found.
2025-04-11 18:35:11,525 [INFO] Final candidates: []
2025-04-11 18:35:11,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:11,526 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:11,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:11,553 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:35:11,553 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(17)), (np.int64(4), np.int64(16)))
2025-04-11 18:35:11,562 [INFO] Final candidates: []
2025-04-11 18:35:11,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:11,570 [INFO] Final candidates: []
2025-04-11 18:35:11,570 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:11,570 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:11,647 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:11,647 [INFO] MCTS: Search finished. Best move selected with 16 visits.
2025-04-11 18:35:11,647 [INFO] MCTS (defense candidates) selected move: J11,H12
2025-04-11 18:35:54,929 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:35:54,937 [INFO] Final candidates: []
2025-04-11 18:35:54,937 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:54,946 [INFO] Final candidates: []
2025-04-11 18:35:54,946 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:54,946 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 18:35:54,946 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:35:54,946 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(5), np.int64(8)))
2025-04-11 18:35:54,955 [INFO] Final candidates: []
2025-04-11 18:35:54,955 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:54,962 [INFO] Final candidates: []
2025-04-11 18:35:54,963 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:54,963 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:35:54,963 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:55,134 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:55,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(7), np.int64(15)))
2025-04-11 18:35:55,142 [INFO] Final candidates: []
2025-04-11 18:35:55,142 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,150 [INFO] Final candidates: []
2025-04-11 18:35:55,150 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,150 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:55,223 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:55,224 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(9), np.int64(6)))
2025-04-11 18:35:55,232 [INFO] Final candidates: []
2025-04-11 18:35:55,232 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,240 [INFO] Final candidates: []
2025-04-11 18:35:55,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,240 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:55,332 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:55,332 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(10)), (np.int64(4), np.int64(16)))
2025-04-11 18:35:55,340 [INFO] Final candidates: []
2025-04-11 18:35:55,341 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,351 [INFO] Final candidates: []
2025-04-11 18:35:55,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,352 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:55,486 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:55,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(11)), (np.int64(12), np.int64(9)))
2025-04-11 18:35:55,489 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:35:55,489 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:35:55,489 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (11, 9)]
2025-04-11 18:35:55,489 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:35:55,495 [INFO] Final candidates: [(8, 9), (11, 9)]
2025-04-11 18:35:55,495 [INFO] Phase win: Collected 1unique candidate(s):[((8, 9), (11, 9))]
2025-04-11 18:35:55,495 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:35:55,503 [INFO] Final candidates: []
2025-04-11 18:35:55,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,503 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:55,677 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:55,677 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(6), np.int64(16)))
2025-04-11 18:35:55,685 [INFO] Final candidates: []
2025-04-11 18:35:55,685 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,693 [INFO] Final candidates: []
2025-04-11 18:35:55,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,694 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:55,857 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:55,857 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 18:35:55,862 [DEBUG] board coords: [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:35:55,862 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:35:55,862 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 6), (11, 10)]
2025-04-11 18:35:55,862 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:35:55,862 [DEBUG] board coords: [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)]
2025-04-11 18:35:55,862 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 18:35:55,862 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (13, 12)]
2025-04-11 18:35:55,862 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:35:55,866 [INFO] Final candidates: [(7, 6), (11, 10), (13, 12)]
2025-04-11 18:35:55,866 [INFO] Phase win: Collected 3unique candidate(s):[((7, 6), (13, 12)), ((7, 6), (11, 10)), ((11, 10), (13, 12))]
2025-04-11 18:35:55,866 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:35:55,874 [INFO] Final candidates: []
2025-04-11 18:35:55,874 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:55,874 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:56,031 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:56,031 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(2), np.int64(15)))
2025-04-11 18:35:56,040 [INFO] Final candidates: []
2025-04-11 18:35:56,040 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,052 [INFO] Final candidates: []
2025-04-11 18:35:56,052 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,053 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:56,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:56,293 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(17)), (np.int64(10), np.int64(7)))
2025-04-11 18:35:56,301 [INFO] Final candidates: []
2025-04-11 18:35:56,301 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,309 [INFO] Final candidates: []
2025-04-11 18:35:56,309 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,310 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:56,551 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:56,551 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(8), np.int64(8)))
2025-04-11 18:35:56,560 [INFO] Final candidates: []
2025-04-11 18:35:56,560 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,567 [INFO] Final candidates: []
2025-04-11 18:35:56,567 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,568 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:56,722 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:56,722 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(16)), (np.int64(8), np.int64(7)))
2025-04-11 18:35:56,727 [DEBUG] board coords: [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:35:56,727 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:35:56,727 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 6), (11, 10)]
2025-04-11 18:35:56,727 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:35:56,728 [DEBUG] board coords: [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)]
2025-04-11 18:35:56,728 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 18:35:56,728 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (13, 12)]
2025-04-11 18:35:56,728 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:35:56,731 [INFO] Final candidates: [(7, 6), (11, 10), (13, 12)]
2025-04-11 18:35:56,731 [INFO] Phase win: Collected 3unique candidate(s):[((7, 6), (13, 12)), ((7, 6), (11, 10)), ((11, 10), (13, 12))]
2025-04-11 18:35:56,731 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:35:56,739 [INFO] Final candidates: []
2025-04-11 18:35:56,739 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,740 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:56,768 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:56,768 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(6), np.int64(8)))
2025-04-11 18:35:56,777 [INFO] Final candidates: []
2025-04-11 18:35:56,777 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,785 [INFO] Final candidates: []
2025-04-11 18:35:56,785 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,785 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:56,855 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:56,855 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(6)), (np.int64(11), np.int64(8)))
2025-04-11 18:35:56,863 [INFO] Final candidates: []
2025-04-11 18:35:56,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,871 [INFO] Final candidates: []
2025-04-11 18:35:56,871 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,872 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:56,930 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:56,930 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(9), np.int64(16)))
2025-04-11 18:35:56,938 [INFO] Final candidates: []
2025-04-11 18:35:56,938 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,946 [INFO] Final candidates: []
2025-04-11 18:35:56,946 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:56,947 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:57,001 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:57,001 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(13)))
2025-04-11 18:35:57,009 [INFO] Final candidates: []
2025-04-11 18:35:57,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,017 [INFO] Final candidates: []
2025-04-11 18:35:57,017 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,017 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:57,178 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:57,178 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(17)), (np.int64(6), np.int64(17)))
2025-04-11 18:35:57,187 [INFO] Final candidates: []
2025-04-11 18:35:57,187 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,195 [INFO] Final candidates: []
2025-04-11 18:35:57,195 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,195 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:57,310 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:57,310 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(11)), (np.int64(4), np.int64(10)))
2025-04-11 18:35:57,318 [INFO] Final candidates: []
2025-04-11 18:35:57,318 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,326 [INFO] Final candidates: []
2025-04-11 18:35:57,326 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,326 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:57,461 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:57,461 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(4), np.int64(10)))
2025-04-11 18:35:57,469 [INFO] Final candidates: []
2025-04-11 18:35:57,469 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,477 [INFO] Final candidates: []
2025-04-11 18:35:57,477 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,478 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:57,633 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:57,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(13), np.int64(7)))
2025-04-11 18:35:57,643 [INFO] Final candidates: []
2025-04-11 18:35:57,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,651 [INFO] Final candidates: []
2025-04-11 18:35:57,651 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,652 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:57,774 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:57,774 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(7), np.int64(8)))
2025-04-11 18:35:57,782 [INFO] Final candidates: []
2025-04-11 18:35:57,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,790 [INFO] Final candidates: []
2025-04-11 18:35:57,790 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:57,791 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:58,078 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(10), np.int64(10)))
2025-04-11 18:35:58,086 [INFO] Final candidates: []
2025-04-11 18:35:58,086 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,095 [INFO] Final candidates: []
2025-04-11 18:35:58,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,096 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,172 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:58,172 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(7), np.int64(13)))
2025-04-11 18:35:58,180 [INFO] Final candidates: []
2025-04-11 18:35:58,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,188 [INFO] Final candidates: []
2025-04-11 18:35:58,188 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,189 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:58,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(6), np.int64(13)))
2025-04-11 18:35:58,267 [INFO] Final candidates: []
2025-04-11 18:35:58,267 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,275 [INFO] Final candidates: []
2025-04-11 18:35:58,275 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,276 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,475 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:58,475 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(5), np.int64(14)))
2025-04-11 18:35:58,484 [INFO] Final candidates: []
2025-04-11 18:35:58,484 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,492 [INFO] Final candidates: []
2025-04-11 18:35:58,492 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,492 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,702 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:58,702 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(4), np.int64(12)))
2025-04-11 18:35:58,713 [INFO] Final candidates: []
2025-04-11 18:35:58,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,720 [INFO] Final candidates: []
2025-04-11 18:35:58,720 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,721 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,801 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:58,801 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(6)))
2025-04-11 18:35:58,809 [INFO] Final candidates: []
2025-04-11 18:35:58,809 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,817 [INFO] Final candidates: []
2025-04-11 18:35:58,817 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,818 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,853 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:58,853 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(12), np.int64(9)))
2025-04-11 18:35:58,860 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:35:58,860 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:35:58,860 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (11, 9)]
2025-04-11 18:35:58,861 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:35:58,869 [INFO] Final candidates: [(8, 9), (11, 9)]
2025-04-11 18:35:58,869 [INFO] Phase win: Collected 1unique candidate(s):[((8, 9), (11, 9))]
2025-04-11 18:35:58,869 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:35:58,879 [INFO] Final candidates: []
2025-04-11 18:35:58,879 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,879 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:58,939 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:58,939 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(10), np.int64(11)))
2025-04-11 18:35:58,943 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:35:58,943 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:35:58,943 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 11), (11, 11)]
2025-04-11 18:35:58,943 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:35:58,949 [INFO] Final candidates: [(9, 11), (11, 11)]
2025-04-11 18:35:58,949 [INFO] Phase win: Collected 1unique candidate(s):[((9, 11), (11, 11))]
2025-04-11 18:35:58,949 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:35:58,958 [INFO] Final candidates: []
2025-04-11 18:35:58,958 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:58,959 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:59,049 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:59,049 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(7)), (np.int64(11), np.int64(8)))
2025-04-11 18:35:59,056 [DEBUG] board coords: [(7, 12), (8, 11), (9, 10), (10, 9), (11, 8), (12, 7)]
2025-04-11 18:35:59,056 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:35:59,056 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 12), (9, 10)]
2025-04-11 18:35:59,056 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(7, 12), (8, 11), (9, 10), (10, 9), (11, 8), (12, 7)] triggers candidate.
2025-04-11 18:35:59,056 [DEBUG] board coords: [(8, 11), (9, 10), (10, 9), (11, 8), (12, 7), (13, 6)]
2025-04-11 18:35:59,056 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:35:59,056 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 10), (13, 6)]
2025-04-11 18:35:59,056 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(8, 11), (9, 10), (10, 9), (11, 8), (12, 7), (13, 6)] triggers candidate.
2025-04-11 18:35:59,057 [INFO] Final candidates: [(9, 10), (7, 12), (13, 6)]
2025-04-11 18:35:59,057 [INFO] Phase win: Collected 3unique candidate(s):[((9, 10), (7, 12)), ((7, 12), (13, 6)), ((9, 10), (13, 6))]
2025-04-11 18:35:59,057 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:35:59,065 [INFO] Final candidates: []
2025-04-11 18:35:59,065 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,066 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:59,411 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:59,411 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(4), np.int64(12)))
2025-04-11 18:35:59,421 [INFO] Final candidates: []
2025-04-11 18:35:59,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,428 [INFO] Final candidates: []
2025-04-11 18:35:59,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,429 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:59,567 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:59,567 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(11), np.int64(10)))
2025-04-11 18:35:59,570 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:35:59,570 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:35:59,570 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:35:59,570 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:35:59,572 [DEBUG] board coords: [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:35:59,572 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:35:59,572 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 6), (8, 7)]
2025-04-11 18:35:59,573 [DEBUG] check_window_intermediate_custom (only one inserted(8, 7)): For L=6, window [0 0 2 2 2 2] with coords [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:35:59,573 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:35:59,573 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:35:59,573 [DEBUG] board coords: [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)]
2025-04-11 18:35:59,573 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:35:59,573 [DEBUG] check_window_intermediate_custom: empty_cells=[(13, 12), (14, 13)]
2025-04-11 18:35:59,573 [DEBUG] check_window_intermediate_custom (only one inserted(13, 12)): For L=6, window [2 2 2 2 0 0] with coords [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)] triggers candidate.
2025-04-11 18:35:59,576 [INFO] Final candidates: [(8, 7), (11, 9), (13, 12)]
2025-04-11 18:35:59,576 [INFO] Phase win: Collected 3unique candidate(s):[((11, 9), (13, 12)), ((8, 7), (11, 9)), ((8, 7), (13, 12))]
2025-04-11 18:35:59,576 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:35:59,584 [INFO] Final candidates: []
2025-04-11 18:35:59,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,584 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:59,680 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:59,680 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(9), np.int64(7)))
2025-04-11 18:35:59,689 [INFO] Final candidates: []
2025-04-11 18:35:59,689 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,697 [INFO] Final candidates: []
2025-04-11 18:35:59,697 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,697 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:59,751 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:35:59,751 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(7), np.int64(18)))
2025-04-11 18:35:59,759 [INFO] Final candidates: []
2025-04-11 18:35:59,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,767 [INFO] Final candidates: []
2025-04-11 18:35:59,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,768 [INFO] Default policy: Starting random playout.
2025-04-11 18:35:59,958 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:35:59,959 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(13)), (np.int64(8), np.int64(12)))
2025-04-11 18:35:59,970 [INFO] Final candidates: []
2025-04-11 18:35:59,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,978 [INFO] Final candidates: []
2025-04-11 18:35:59,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:35:59,979 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:00,086 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:00,086 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(18)), (np.int64(9), np.int64(15)))
2025-04-11 18:36:00,096 [INFO] Final candidates: []
2025-04-11 18:36:00,096 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,104 [INFO] Final candidates: []
2025-04-11 18:36:00,104 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,105 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:00,262 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:00,263 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(14)))
2025-04-11 18:36:00,271 [INFO] Final candidates: []
2025-04-11 18:36:00,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,279 [INFO] Final candidates: []
2025-04-11 18:36:00,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,279 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:00,289 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:00,289 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(12)), (np.int64(5), np.int64(8)))
2025-04-11 18:36:00,298 [INFO] Final candidates: []
2025-04-11 18:36:00,298 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,306 [INFO] Final candidates: []
2025-04-11 18:36:00,306 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,306 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:00,464 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:00,464 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(17)), (np.int64(3), np.int64(14)))
2025-04-11 18:36:00,472 [INFO] Final candidates: []
2025-04-11 18:36:00,472 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,480 [INFO] Final candidates: []
2025-04-11 18:36:00,480 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,481 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:00,640 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:00,640 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(18)), (np.int64(8), np.int64(12)))
2025-04-11 18:36:00,648 [INFO] Final candidates: []
2025-04-11 18:36:00,648 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,656 [INFO] Final candidates: []
2025-04-11 18:36:00,656 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,657 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:00,872 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:00,872 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(11)), (np.int64(2), np.int64(16)))
2025-04-11 18:36:00,881 [INFO] Final candidates: []
2025-04-11 18:36:00,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,889 [INFO] Final candidates: []
2025-04-11 18:36:00,889 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:00,889 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,074 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:01,075 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(10), np.int64(7)))
2025-04-11 18:36:01,083 [INFO] Final candidates: []
2025-04-11 18:36:01,083 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,091 [INFO] Final candidates: []
2025-04-11 18:36:01,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,222 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:01,222 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(12), np.int64(6)))
2025-04-11 18:36:01,232 [INFO] Final candidates: []
2025-04-11 18:36:01,232 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,240 [INFO] Final candidates: []
2025-04-11 18:36:01,240 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,240 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,342 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:01,342 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(4), np.int64(16)))
2025-04-11 18:36:01,345 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:36:01,345 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:36:01,345 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:36:01,345 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:36:01,351 [INFO] Final candidates: [(11, 9)]
2025-04-11 18:36:01,351 [INFO] Phase win: Found only one candidate: (11, 9)
2025-04-11 18:36:01,351 [INFO] Phase win: Collected 8unique candidate(s):[((11, 9), (np.int64(11), np.int64(11))), ((11, 9), (np.int64(12), np.int64(8))), ((11, 9), (np.int64(11), np.int64(10))), ((11, 9), (np.int64(12), np.int64(10))), ((11, 9), (np.int64(11), np.int64(8))), ((11, 9), (np.int64(12), np.int64(9))), ((11, 9), (np.int64(13), np.int64(9))), ((11, 9), (np.int64(10), np.int64(10)))]
2025-04-11 18:36:01,351 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 18:36:01,359 [INFO] Final candidates: []
2025-04-11 18:36:01,359 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,359 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,454 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:01,455 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(2), np.int64(16)))
2025-04-11 18:36:01,466 [INFO] Final candidates: []
2025-04-11 18:36:01,467 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,474 [INFO] Final candidates: []
2025-04-11 18:36:01,474 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,475 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,633 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:01,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(4), np.int64(15)))
2025-04-11 18:36:01,641 [INFO] Final candidates: []
2025-04-11 18:36:01,642 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,649 [INFO] Final candidates: []
2025-04-11 18:36:01,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,650 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,686 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:01,686 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(9), np.int64(11)))
2025-04-11 18:36:01,689 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:01,689 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 18:36:01,689 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (11, 11)]
2025-04-11 18:36:01,689 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:01,694 [INFO] Final candidates: [(10, 11), (11, 11)]
2025-04-11 18:36:01,695 [INFO] Phase win: Collected 1unique candidate(s):[((10, 11), (11, 11))]
2025-04-11 18:36:01,695 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:01,702 [INFO] Final candidates: []
2025-04-11 18:36:01,702 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,703 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,747 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:01,747 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(16)), (np.int64(7), np.int64(15)))
2025-04-11 18:36:01,755 [INFO] Final candidates: []
2025-04-11 18:36:01,755 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,763 [INFO] Final candidates: []
2025-04-11 18:36:01,763 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,763 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,813 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:01,813 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(11)), (np.int64(10), np.int64(11)))
2025-04-11 18:36:01,819 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:01,819 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:36:01,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 11), (11, 11)]
2025-04-11 18:36:01,819 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:01,819 [DEBUG] board coords: [(8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)]
2025-04-11 18:36:01,819 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:01,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 11), (11, 11)]
2025-04-11 18:36:01,819 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 0 2 2] with coords [(8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)] triggers candidate.
2025-04-11 18:36:01,822 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)]
2025-04-11 18:36:01,822 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:01,822 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 11), (11, 11)]
2025-04-11 18:36:01,822 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 0 2 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)] triggers candidate.
2025-04-11 18:36:01,826 [INFO] Final candidates: [(9, 11), (11, 11)]
2025-04-11 18:36:01,827 [INFO] Phase win: Collected 1unique candidate(s):[((9, 11), (11, 11))]
2025-04-11 18:36:01,827 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:01,836 [INFO] Final candidates: []
2025-04-11 18:36:01,836 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,836 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:01,972 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:01,973 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(14)), (np.int64(5), np.int64(11)))
2025-04-11 18:36:01,981 [INFO] Final candidates: []
2025-04-11 18:36:01,981 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,989 [INFO] Final candidates: []
2025-04-11 18:36:01,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:01,989 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:02,064 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:02,064 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(6), np.int64(6)))
2025-04-11 18:36:02,072 [INFO] Final candidates: []
2025-04-11 18:36:02,072 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:02,081 [INFO] Final candidates: []
2025-04-11 18:36:02,081 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:02,081 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:02,200 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:02,201 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(8), np.int64(15)))
2025-04-11 18:36:02,209 [INFO] Final candidates: []
2025-04-11 18:36:02,209 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:02,217 [INFO] Final candidates: []
2025-04-11 18:36:02,217 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:02,217 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 18:36:02,217 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:02,537 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:02,537 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(6), np.int64(16)))
2025-04-11 18:36:02,540 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:36:02,540 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:36:02,540 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:36:02,540 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:36:02,546 [INFO] Final candidates: [(11, 9)]
2025-04-11 18:36:02,546 [INFO] Phase win: Found only one candidate: (11, 9)
2025-04-11 18:36:02,546 [INFO] Phase win: Collected 8unique candidate(s):[((11, 9), (np.int64(11), np.int64(11))), ((11, 9), (np.int64(12), np.int64(8))), ((11, 9), (np.int64(11), np.int64(10))), ((11, 9), (np.int64(12), np.int64(10))), ((11, 9), (np.int64(11), np.int64(8))), ((11, 9), (np.int64(12), np.int64(9))), ((11, 9), (np.int64(13), np.int64(9))), ((11, 9), (np.int64(10), np.int64(10)))]
2025-04-11 18:36:02,546 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 18:36:02,554 [INFO] Final candidates: []
2025-04-11 18:36:02,554 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:02,555 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:02,823 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:02,824 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(17)))
2025-04-11 18:36:02,832 [INFO] Final candidates: []
2025-04-11 18:36:02,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:02,843 [INFO] Final candidates: []
2025-04-11 18:36:02,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:02,844 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,110 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:03,111 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(14)))
2025-04-11 18:36:03,119 [INFO] Final candidates: []
2025-04-11 18:36:03,119 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,127 [INFO] Final candidates: []
2025-04-11 18:36:03,127 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,127 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,231 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:03,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(6), np.int64(8)))
2025-04-11 18:36:03,240 [INFO] Final candidates: []
2025-04-11 18:36:03,240 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,248 [INFO] Final candidates: []
2025-04-11 18:36:03,248 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,248 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,405 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:03,405 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(6), np.int64(8)))
2025-04-11 18:36:03,413 [INFO] Final candidates: []
2025-04-11 18:36:03,414 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,421 [INFO] Final candidates: []
2025-04-11 18:36:03,421 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,422 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,574 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:03,574 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(12)))
2025-04-11 18:36:03,583 [INFO] Final candidates: []
2025-04-11 18:36:03,583 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,590 [INFO] Final candidates: []
2025-04-11 18:36:03,591 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,591 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,623 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:03,625 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(2), np.int64(14)))
2025-04-11 18:36:03,629 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:03,629 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:03,629 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 11), (10, 11)]
2025-04-11 18:36:03,629 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:03,635 [INFO] Final candidates: [(9, 11), (10, 11)]
2025-04-11 18:36:03,635 [INFO] Phase win: Collected 1unique candidate(s):[((9, 11), (10, 11))]
2025-04-11 18:36:03,635 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:03,643 [INFO] Final candidates: []
2025-04-11 18:36:03,643 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,643 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,676 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:03,676 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(11), np.int64(12)))
2025-04-11 18:36:03,685 [INFO] Final candidates: []
2025-04-11 18:36:03,685 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,692 [INFO] Final candidates: []
2025-04-11 18:36:03,692 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,693 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,718 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:03,719 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(13), np.int64(12)))
2025-04-11 18:36:03,724 [DEBUG] board coords: [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)]
2025-04-11 18:36:03,724 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:03,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (11, 10)]
2025-04-11 18:36:03,724 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:36:03,724 [DEBUG] board coords: [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)]
2025-04-11 18:36:03,724 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:36:03,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (14, 13)]
2025-04-11 18:36:03,724 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)] triggers candidate.
2025-04-11 18:36:03,727 [INFO] Final candidates: [(8, 7), (14, 13), (11, 10)]
2025-04-11 18:36:03,727 [INFO] Phase win: Collected 3unique candidate(s):[((8, 7), (14, 13)), ((8, 7), (11, 10)), ((14, 13), (11, 10))]
2025-04-11 18:36:03,727 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:36:03,735 [INFO] Final candidates: []
2025-04-11 18:36:03,735 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,736 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:03,817 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:03,817 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(18)), (np.int64(2), np.int64(14)))
2025-04-11 18:36:03,825 [INFO] Final candidates: []
2025-04-11 18:36:03,825 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,833 [INFO] Final candidates: []
2025-04-11 18:36:03,833 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:03,834 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:04,169 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:04,170 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(17)), (np.int64(7), np.int64(8)))
2025-04-11 18:36:04,181 [INFO] Final candidates: []
2025-04-11 18:36:04,181 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,189 [INFO] Final candidates: []
2025-04-11 18:36:04,189 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,190 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:04,232 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:04,232 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(18)), (np.int64(4), np.int64(16)))
2025-04-11 18:36:04,240 [INFO] Final candidates: []
2025-04-11 18:36:04,240 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,248 [INFO] Final candidates: []
2025-04-11 18:36:04,248 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,249 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:04,486 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:04,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(9), np.int64(11)))
2025-04-11 18:36:04,487 [DEBUG] board coords: [(9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11)]
2025-04-11 18:36:04,487 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:04,487 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 6), (9, 7)]
2025-04-11 18:36:04,487 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [0 0 2 2 2 2] with coords [(9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11)] triggers candidate.
2025-04-11 18:36:04,487 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12)] triggers candidate.
2025-04-11 18:36:04,487 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:36:04,487 [DEBUG] board coords: [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13)]
2025-04-11 18:36:04,487 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:36:04,487 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 12), (9, 13)]
2025-04-11 18:36:04,487 [DEBUG] check_window_intermediate_custom (only one inserted(9, 12)): For L=6, window [2 2 2 2 0 0] with coords [(9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13)] triggers candidate.
2025-04-11 18:36:04,489 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:04,490 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 18:36:04,490 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (11, 11)]
2025-04-11 18:36:04,490 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:04,495 [INFO] Final candidates: [(9, 12), (9, 7), (10, 11), (11, 11)]
2025-04-11 18:36:04,495 [INFO] Phase win: Collected 6unique candidate(s):[((9, 7), (10, 11)), ((9, 12), (11, 11)), ((9, 12), (9, 7)), ((9, 12), (10, 11)), ((10, 11), (11, 11)), ((9, 7), (11, 11))]
2025-04-11 18:36:04,495 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 18:36:04,503 [INFO] Final candidates: []
2025-04-11 18:36:04,503 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,504 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:04,652 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:04,653 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(6), np.int64(6)))
2025-04-11 18:36:04,656 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:36:04,656 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:36:04,656 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:36:04,656 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:36:04,661 [INFO] Final candidates: [(11, 9)]
2025-04-11 18:36:04,661 [INFO] Phase win: Found only one candidate: (11, 9)
2025-04-11 18:36:04,661 [INFO] Phase win: Collected 8unique candidate(s):[((11, 9), (np.int64(11), np.int64(11))), ((11, 9), (np.int64(12), np.int64(8))), ((11, 9), (np.int64(11), np.int64(10))), ((11, 9), (np.int64(12), np.int64(10))), ((11, 9), (np.int64(11), np.int64(8))), ((11, 9), (np.int64(12), np.int64(9))), ((11, 9), (np.int64(13), np.int64(9))), ((11, 9), (np.int64(10), np.int64(10)))]
2025-04-11 18:36:04,661 [INFO] Phase 1 (immediate win): 8 candidate(s) found.
2025-04-11 18:36:04,669 [INFO] Final candidates: []
2025-04-11 18:36:04,669 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,670 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:04,765 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:04,765 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(3), np.int64(16)))
2025-04-11 18:36:04,774 [INFO] Final candidates: []
2025-04-11 18:36:04,774 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,782 [INFO] Final candidates: []
2025-04-11 18:36:04,782 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:04,782 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:04,983 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:04,983 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(16)), (np.int64(9), np.int64(18)))
2025-04-11 18:36:04,992 [INFO] Final candidates: []
2025-04-11 18:36:04,992 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,000 [INFO] Final candidates: []
2025-04-11 18:36:05,000 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,000 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:05,231 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:05,231 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(11)))
2025-04-11 18:36:05,235 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:05,235 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 18:36:05,235 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (11, 11)]
2025-04-11 18:36:05,235 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:05,240 [INFO] Final candidates: [(10, 11), (11, 11)]
2025-04-11 18:36:05,240 [INFO] Phase win: Collected 1unique candidate(s):[((10, 11), (11, 11))]
2025-04-11 18:36:05,240 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:05,248 [INFO] Final candidates: []
2025-04-11 18:36:05,248 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,249 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:05,294 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:05,295 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(12)), (np.int64(8), np.int64(6)))
2025-04-11 18:36:05,300 [DEBUG] board coords: [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)]
2025-04-11 18:36:05,300 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:05,300 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (11, 10)]
2025-04-11 18:36:05,300 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:36:05,300 [DEBUG] board coords: [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)]
2025-04-11 18:36:05,300 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:36:05,300 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (14, 13)]
2025-04-11 18:36:05,300 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)] triggers candidate.
2025-04-11 18:36:05,303 [INFO] Final candidates: [(8, 7), (14, 13), (11, 10)]
2025-04-11 18:36:05,303 [INFO] Phase win: Collected 3unique candidate(s):[((8, 7), (14, 13)), ((8, 7), (11, 10)), ((14, 13), (11, 10))]
2025-04-11 18:36:05,303 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:36:05,311 [INFO] Final candidates: []
2025-04-11 18:36:05,311 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,312 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:05,415 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:05,416 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(6)), (np.int64(9), np.int64(15)))
2025-04-11 18:36:05,424 [INFO] Final candidates: []
2025-04-11 18:36:05,424 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,432 [INFO] Final candidates: []
2025-04-11 18:36:05,432 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,432 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:05,530 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:05,530 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(17)), (np.int64(5), np.int64(15)))
2025-04-11 18:36:05,538 [INFO] Final candidates: []
2025-04-11 18:36:05,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,546 [INFO] Final candidates: []
2025-04-11 18:36:05,546 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,546 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:05,642 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:05,642 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(17)), (np.int64(14), np.int64(11)))
2025-04-11 18:36:05,654 [INFO] Final candidates: []
2025-04-11 18:36:05,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,673 [INFO] Final candidates: []
2025-04-11 18:36:05,673 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,675 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:05,758 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:05,758 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(17)), (np.int64(3), np.int64(16)))
2025-04-11 18:36:05,766 [INFO] Final candidates: []
2025-04-11 18:36:05,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,774 [INFO] Final candidates: []
2025-04-11 18:36:05,774 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:05,775 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:06,053 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:06,053 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(15)), (np.int64(14), np.int64(11)))
2025-04-11 18:36:06,061 [INFO] Final candidates: []
2025-04-11 18:36:06,061 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,069 [INFO] Final candidates: []
2025-04-11 18:36:06,069 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,070 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:06,097 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:06,098 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(17)), (np.int64(4), np.int64(16)))
2025-04-11 18:36:06,107 [INFO] Final candidates: []
2025-04-11 18:36:06,107 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,116 [INFO] Final candidates: []
2025-04-11 18:36:06,116 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,117 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:06,243 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:06,243 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(5), np.int64(15)))
2025-04-11 18:36:06,252 [INFO] Final candidates: []
2025-04-11 18:36:06,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,260 [INFO] Final candidates: []
2025-04-11 18:36:06,260 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,261 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:06,348 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:06,349 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(4), np.int64(16)))
2025-04-11 18:36:06,357 [INFO] Final candidates: []
2025-04-11 18:36:06,357 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,365 [INFO] Final candidates: []
2025-04-11 18:36:06,365 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,366 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:06,604 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:06,605 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(11), np.int64(8)))
2025-04-11 18:36:06,617 [INFO] Final candidates: []
2025-04-11 18:36:06,617 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,628 [INFO] Final candidates: []
2025-04-11 18:36:06,628 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,630 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:06,796 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:06,796 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(10), np.int64(7)))
2025-04-11 18:36:06,807 [INFO] Final candidates: []
2025-04-11 18:36:06,807 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,817 [INFO] Final candidates: []
2025-04-11 18:36:06,817 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:06,818 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:07,021 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:07,021 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(9)), (np.int64(7), np.int64(15)))
2025-04-11 18:36:07,024 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:36:07,024 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:36:07,024 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (11, 9)]
2025-04-11 18:36:07,024 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:36:07,029 [INFO] Final candidates: [(8, 9), (11, 9)]
2025-04-11 18:36:07,029 [INFO] Phase win: Collected 1unique candidate(s):[((8, 9), (11, 9))]
2025-04-11 18:36:07,029 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:07,037 [INFO] Final candidates: []
2025-04-11 18:36:07,037 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,038 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:07,057 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:07,058 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(5)), (np.int64(10), np.int64(11)))
2025-04-11 18:36:07,060 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:07,061 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:36:07,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 11), (11, 11)]
2025-04-11 18:36:07,061 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:07,066 [INFO] Final candidates: [(9, 11), (11, 11)]
2025-04-11 18:36:07,066 [INFO] Phase win: Collected 1unique candidate(s):[((9, 11), (11, 11))]
2025-04-11 18:36:07,066 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:07,074 [INFO] Final candidates: []
2025-04-11 18:36:07,074 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,074 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:07,227 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:07,227 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(13), np.int64(12)))
2025-04-11 18:36:07,230 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:36:07,230 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:36:07,230 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (12, 9)]
2025-04-11 18:36:07,230 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:36:07,233 [DEBUG] board coords: [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)]
2025-04-11 18:36:07,233 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:07,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (11, 10)]
2025-04-11 18:36:07,233 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:36:07,233 [DEBUG] board coords: [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)]
2025-04-11 18:36:07,233 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:36:07,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (14, 13)]
2025-04-11 18:36:07,233 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)] triggers candidate.
2025-04-11 18:36:07,236 [INFO] Final candidates: [(11, 10), (8, 7), (12, 9), (14, 13), (8, 9)]
2025-04-11 18:36:07,236 [INFO] Phase win: Collected 10unique candidate(s):[((8, 7), (14, 13)), ((12, 9), (14, 13)), ((8, 7), (12, 9)), ((12, 9), (8, 9)), ((8, 7), (8, 9)), ((11, 10), (14, 13)), ((11, 10), (8, 7)), ((11, 10), (12, 9)), ((11, 10), (8, 9)), ((14, 13), (8, 9))]
2025-04-11 18:36:07,236 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 18:36:07,246 [INFO] Final candidates: []
2025-04-11 18:36:07,246 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,246 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:07,419 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:07,419 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(8), np.int64(13)))
2025-04-11 18:36:07,427 [INFO] Final candidates: []
2025-04-11 18:36:07,428 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,435 [INFO] Final candidates: []
2025-04-11 18:36:07,435 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,436 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:07,604 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:07,604 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 18:36:07,612 [INFO] Final candidates: []
2025-04-11 18:36:07,613 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,628 [INFO] Final candidates: []
2025-04-11 18:36:07,628 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,629 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:07,738 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:07,738 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(5), np.int64(9)))
2025-04-11 18:36:07,746 [INFO] Final candidates: []
2025-04-11 18:36:07,746 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,754 [INFO] Final candidates: []
2025-04-11 18:36:07,754 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:07,755 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:08,015 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:08,015 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(11)), (np.int64(9), np.int64(11)))
2025-04-11 18:36:08,018 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:08,018 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 18:36:08,019 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (11, 11)]
2025-04-11 18:36:08,019 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:08,019 [DEBUG] board coords: [(8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)]
2025-04-11 18:36:08,019 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:08,019 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (11, 11)]
2025-04-11 18:36:08,019 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)] triggers candidate.
2025-04-11 18:36:08,020 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)]
2025-04-11 18:36:08,020 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:08,020 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 11), (11, 11)]
2025-04-11 18:36:08,020 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 0 0 2 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11), (13, 11)] triggers candidate.
2025-04-11 18:36:08,024 [INFO] Final candidates: [(10, 11), (11, 11)]
2025-04-11 18:36:08,024 [INFO] Phase win: Collected 1unique candidate(s):[((10, 11), (11, 11))]
2025-04-11 18:36:08,024 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:08,032 [INFO] Final candidates: []
2025-04-11 18:36:08,032 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:08,034 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:08,100 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:08,100 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(13), np.int64(11)))
2025-04-11 18:36:08,108 [INFO] Final candidates: []
2025-04-11 18:36:08,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:08,116 [INFO] Final candidates: []
2025-04-11 18:36:08,116 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:08,117 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:08,497 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:08,497 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(11)))
2025-04-11 18:36:08,500 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 18:36:08,500 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 18:36:08,500 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 18:36:08,500 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 18:36:08,500 [DEBUG] board coords: [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)]
2025-04-11 18:36:08,501 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:36:08,501 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 11), (11, 11)]
2025-04-11 18:36:08,501 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(7, 11), (8, 11), (9, 11), (10, 11), (11, 11), (12, 11)] triggers candidate.
2025-04-11 18:36:08,506 [INFO] Final candidates: [(9, 11), (11, 9), (11, 11)]
2025-04-11 18:36:08,506 [INFO] Phase win: Collected 3unique candidate(s):[((11, 9), (11, 11)), ((9, 11), (11, 9)), ((9, 11), (11, 11))]
2025-04-11 18:36:08,506 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:36:08,514 [INFO] Final candidates: []
2025-04-11 18:36:08,514 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:08,514 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:08,793 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:08,793 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(6), np.int64(16)))
2025-04-11 18:36:08,801 [INFO] Final candidates: []
2025-04-11 18:36:08,801 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:08,811 [INFO] Final candidates: []
2025-04-11 18:36:08,811 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:08,812 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:09,019 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:09,019 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(5), np.int64(15)))
2025-04-11 18:36:09,028 [INFO] Final candidates: []
2025-04-11 18:36:09,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,036 [INFO] Final candidates: []
2025-04-11 18:36:09,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,036 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:09,183 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:09,183 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(10), np.int64(10)))
2025-04-11 18:36:09,197 [INFO] Final candidates: []
2025-04-11 18:36:09,197 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,205 [INFO] Final candidates: []
2025-04-11 18:36:09,205 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,205 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:09,255 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:09,256 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(15)), (np.int64(2), np.int64(14)))
2025-04-11 18:36:09,264 [INFO] Final candidates: []
2025-04-11 18:36:09,264 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,272 [INFO] Final candidates: []
2025-04-11 18:36:09,272 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,273 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:09,382 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:09,382 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(10)), (np.int64(7), np.int64(6)))
2025-04-11 18:36:09,387 [DEBUG] board coords: [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:36:09,387 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:36:09,387 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (11, 10)]
2025-04-11 18:36:09,387 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:36:09,391 [INFO] Final candidates: [(8, 7), (11, 10)]
2025-04-11 18:36:09,391 [INFO] Phase win: Collected 1unique candidate(s):[((8, 7), (11, 10))]
2025-04-11 18:36:09,391 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 18:36:09,399 [INFO] Final candidates: []
2025-04-11 18:36:09,399 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,399 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:09,542 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:09,543 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(6)), (np.int64(5), np.int64(8)))
2025-04-11 18:36:09,551 [INFO] Final candidates: []
2025-04-11 18:36:09,551 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,558 [INFO] Final candidates: []
2025-04-11 18:36:09,558 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,559 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:09,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:09,837 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(16)), (np.int64(6), np.int64(17)))
2025-04-11 18:36:09,845 [INFO] Final candidates: []
2025-04-11 18:36:09,845 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,853 [INFO] Final candidates: []
2025-04-11 18:36:09,853 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:09,854 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:10,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:10,089 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(14), np.int64(11)))
2025-04-11 18:36:10,097 [INFO] Final candidates: []
2025-04-11 18:36:10,097 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,105 [INFO] Final candidates: []
2025-04-11 18:36:10,105 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,106 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:10,321 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:10,321 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(13)), (np.int64(8), np.int64(7)))
2025-04-11 18:36:10,327 [DEBUG] board coords: [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:36:10,327 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:36:10,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 6), (11, 10)]
2025-04-11 18:36:10,327 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:36:10,327 [DEBUG] board coords: [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)]
2025-04-11 18:36:10,327 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 18:36:10,327 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 10), (13, 12)]
2025-04-11 18:36:10,327 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:36:10,330 [INFO] Final candidates: [(7, 6), (11, 10), (13, 12)]
2025-04-11 18:36:10,330 [INFO] Phase win: Collected 3unique candidate(s):[((7, 6), (13, 12)), ((7, 6), (11, 10)), ((11, 10), (13, 12))]
2025-04-11 18:36:10,330 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 18:36:10,338 [INFO] Final candidates: []
2025-04-11 18:36:10,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,339 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:10,393 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:10,394 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(14)), (np.int64(7), np.int64(8)))
2025-04-11 18:36:10,402 [INFO] Final candidates: []
2025-04-11 18:36:10,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,410 [INFO] Final candidates: []
2025-04-11 18:36:10,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,410 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:10,515 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:10,515 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(12), np.int64(10)))
2025-04-11 18:36:10,523 [INFO] Final candidates: []
2025-04-11 18:36:10,523 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,531 [INFO] Final candidates: []
2025-04-11 18:36:10,531 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,532 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:10,747 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:10,747 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(17)), (np.int64(4), np.int64(12)))
2025-04-11 18:36:10,755 [INFO] Final candidates: []
2025-04-11 18:36:10,755 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,763 [INFO] Final candidates: []
2025-04-11 18:36:10,763 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:10,764 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:10,853 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:10,853 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 18:36:10,853 [INFO] MCTS selected move: F12,J6
2025-04-11 18:36:10,853 [INFO] ===============NEW MOVE================
2025-04-11 18:36:20,026 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 18:36:20,034 [INFO] Final candidates: []
2025-04-11 18:36:20,034 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,038 [DEBUG] board coords: [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:36:20,038 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,038 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 6), (8, 7)]
2025-04-11 18:36:20,038 [DEBUG] check_window_intermediate_custom (only one inserted(8, 7)): For L=6, window [0 0 2 2 2 2] with coords [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:36:20,038 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12)] triggers candidate.
2025-04-11 18:36:20,039 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 18:36:20,039 [DEBUG] board coords: [(10, 9), (11, 10), (12, 11), (13, 12), (14, 13), (15, 14)]
2025-04-11 18:36:20,039 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 18:36:20,039 [DEBUG] check_window_intermediate_custom: empty_cells=[(13, 12), (15, 14)]
2025-04-11 18:36:20,039 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(10, 9), (11, 10), (12, 11), (13, 12), (14, 13), (15, 14)] triggers candidate.
2025-04-11 18:36:20,040 [DEBUG] board coords: [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)]
2025-04-11 18:36:20,040 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 18:36:20,040 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 7), (13, 12)]
2025-04-11 18:36:20,040 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(8, 7), (9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13)] triggers candidate.
2025-04-11 18:36:20,040 [DEBUG] board coords: [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13), (15, 14)]
2025-04-11 18:36:20,040 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 18:36:20,040 [DEBUG] check_window_intermediate_custom: empty_cells=[(13, 12), (15, 14)]
2025-04-11 18:36:20,040 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(9, 8), (10, 9), (11, 10), (12, 11), (13, 12), (14, 13), (15, 14)] triggers candidate.
2025-04-11 18:36:20,042 [INFO] Final candidates: [(8, 7), (15, 14), (13, 12)]
2025-04-11 18:36:20,042 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 7), (13, 12)), ((15, 14), (13, 12)), ((8, 7), (15, 14))]
2025-04-11 18:36:20,042 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 18:36:20,042 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 18:36:20,042 [DEBUG] Tree_policy iteration 1: Expanding move ((15, 14), (13, 12))
2025-04-11 18:36:20,050 [INFO] Final candidates: []
2025-04-11 18:36:20,050 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,055 [DEBUG] board coords: [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:36:20,055 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,055 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 6), (8, 7)]
2025-04-11 18:36:20,055 [DEBUG] check_window_intermediate_custom (only one inserted(8, 7)): For L=6, window [0 0 2 2 2 2] with coords [(7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:36:20,058 [INFO] Final candidates: [(8, 7)]
2025-04-11 18:36:20,058 [INFO] Phase defense: Found only one candidate: (8, 7)
2025-04-11 18:36:20,058 [INFO] Phase defense: Collected 10unique candidate(s):[((8, 7), (np.int64(8), np.int64(8))), ((8, 7), (np.int64(6), np.int64(7))), ((8, 7), (np.int64(9), np.int64(6))), ((8, 7), (np.int64(8), np.int64(5))), ((8, 7), (np.int64(8), np.int64(9))), ((8, 7), (np.int64(10), np.int64(7))), ((8, 7), (np.int64(8), np.int64(6))), ((8, 7), (np.int64(9), np.int64(7))), ((8, 7), (np.int64(7), np.int64(6))), ((8, 7), (np.int64(7), np.int64(8)))]
2025-04-11 18:36:20,058 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 18:36:20,058 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 18:36:20,058 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,111 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,111 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (15, 14))
2025-04-11 18:36:20,119 [INFO] Final candidates: []
2025-04-11 18:36:20,119 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,127 [INFO] Final candidates: [(13, 12)]
2025-04-11 18:36:20,127 [INFO] Phase defense: Found only one candidate: (13, 12)
2025-04-11 18:36:20,127 [INFO] Phase defense: Collected 10unique candidate(s):[((13, 12), (np.int64(13), np.int64(10))), ((13, 12), (np.int64(13), np.int64(14))), ((13, 12), (np.int64(11), np.int64(12))), ((13, 12), (np.int64(12), np.int64(12))), ((13, 12), (np.int64(15), np.int64(12))), ((13, 12), (np.int64(13), np.int64(11))), ((13, 12), (np.int64(13), np.int64(13))), ((13, 12), (np.int64(12), np.int64(13))), ((13, 12), (np.int64(14), np.int64(12))), ((13, 12), (np.int64(14), np.int64(11)))]
2025-04-11 18:36:20,127 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 18:36:20,127 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,336 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,336 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 7), (13, 12))
2025-04-11 18:36:20,344 [INFO] Final candidates: []
2025-04-11 18:36:20,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,352 [INFO] Final candidates: []
2025-04-11 18:36:20,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,352 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,573 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,573 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,573 [DEBUG] Tree_policy iteration 2: Expanding move ((8, 7), (np.int64(8), np.int64(8)))
2025-04-11 18:36:20,574 [DEBUG] board coords: [(8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (8, 11)]
2025-04-11 18:36:20,574 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,574 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 6), (8, 9)]
2025-04-11 18:36:20,574 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (8, 11)] triggers candidate.
2025-04-11 18:36:20,574 [DEBUG] board coords: [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)]
2025-04-11 18:36:20,574 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 18:36:20,574 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (8, 12)]
2025-04-11 18:36:20,574 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12)] triggers candidate.
2025-04-11 18:36:20,578 [DEBUG] board coords: [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)]
2025-04-11 18:36:20,578 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,578 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (7, 6)]
2025-04-11 18:36:20,578 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 2 2 2 2] with coords [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)] triggers candidate.
2025-04-11 18:36:20,579 [DEBUG] board coords: [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:36:20,579 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,579 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (7, 6)]
2025-04-11 18:36:20,579 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=7, window [0 0 2 2 2 2 2] with coords [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:36:20,582 [INFO] Final candidates: [(8, 9), (7, 6), (8, 6), (8, 12)]
2025-04-11 18:36:20,582 [INFO] Phase win: Collected 6unique candidate(s):[((8, 9), (8, 6)), ((8, 6), (8, 12)), ((7, 6), (8, 12)), ((8, 9), (7, 6)), ((8, 9), (8, 12)), ((7, 6), (8, 6))]
2025-04-11 18:36:20,582 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 18:36:20,591 [INFO] Final candidates: []
2025-04-11 18:36:20,591 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,592 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,665 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,665 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,665 [DEBUG] Tree_policy iteration 2: Expanding move ((8, 7), (np.int64(9), np.int64(6)))
2025-04-11 18:36:20,674 [DEBUG] board coords: [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)]
2025-04-11 18:36:20,674 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,674 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (7, 6)]
2025-04-11 18:36:20,675 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 2 2 2 2] with coords [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)] triggers candidate.
2025-04-11 18:36:20,676 [DEBUG] board coords: [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:36:20,676 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,676 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (7, 6)]
2025-04-11 18:36:20,676 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=7, window [0 0 2 2 2 2 2] with coords [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:36:20,678 [INFO] Final candidates: [(7, 6)]
2025-04-11 18:36:20,678 [INFO] Phase win: Found only one candidate: (7, 6)
2025-04-11 18:36:20,678 [INFO] Phase win: Collected 9unique candidate(s):[((7, 6), (np.int64(6), np.int64(5))), ((7, 6), (np.int64(7), np.int64(8))), ((7, 6), (np.int64(8), np.int64(5))), ((7, 6), (np.int64(6), np.int64(6))), ((7, 6), (np.int64(7), np.int64(5))), ((7, 6), (np.int64(7), np.int64(4))), ((7, 6), (np.int64(5), np.int64(6))), ((7, 6), (np.int64(6), np.int64(7))), ((7, 6), (np.int64(8), np.int64(6)))]
2025-04-11 18:36:20,678 [INFO] Phase 1 (immediate win): 9 candidate(s) found.
2025-04-11 18:36:20,686 [INFO] Final candidates: []
2025-04-11 18:36:20,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,686 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,835 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,835 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,835 [DEBUG] Tree_policy iteration 2: Expanding move ((8, 7), (np.int64(10), np.int64(7)))
2025-04-11 18:36:20,840 [DEBUG] board coords: [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)]
2025-04-11 18:36:20,840 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,840 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (7, 6)]
2025-04-11 18:36:20,840 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=6, window [0 0 2 2 2 2] with coords [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10)] triggers candidate.
2025-04-11 18:36:20,841 [DEBUG] board coords: [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)]
2025-04-11 18:36:20,841 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 18:36:20,841 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 5), (7, 6)]
2025-04-11 18:36:20,841 [DEBUG] check_window_intermediate_custom (only one inserted(7, 6)): For L=7, window [0 0 2 2 2 2 2] with coords [(6, 5), (7, 6), (8, 7), (9, 8), (10, 9), (11, 10), (12, 11)] triggers candidate.
2025-04-11 18:36:20,843 [INFO] Final candidates: [(7, 6)]
2025-04-11 18:36:20,843 [INFO] Phase win: Found only one candidate: (7, 6)
2025-04-11 18:36:20,843 [INFO] Phase win: Collected 10unique candidate(s):[((7, 6), (np.int64(6), np.int64(5))), ((7, 6), (np.int64(9), np.int64(6))), ((7, 6), (np.int64(7), np.int64(8))), ((7, 6), (np.int64(8), np.int64(5))), ((7, 6), (np.int64(6), np.int64(6))), ((7, 6), (np.int64(7), np.int64(5))), ((7, 6), (np.int64(7), np.int64(4))), ((7, 6), (np.int64(5), np.int64(6))), ((7, 6), (np.int64(6), np.int64(7))), ((7, 6), (np.int64(8), np.int64(6)))]
2025-04-11 18:36:20,843 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 18:36:20,851 [INFO] Final candidates: []
2025-04-11 18:36:20,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,852 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,888 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 18:36:20,889 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,889 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(12), np.int64(12)))
2025-04-11 18:36:20,898 [INFO] Final candidates: []
2025-04-11 18:36:20,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,907 [INFO] Final candidates: []
2025-04-11 18:36:20,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,908 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,908 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,908 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,908 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(13), np.int64(10)))
2025-04-11 18:36:20,916 [INFO] Final candidates: []
2025-04-11 18:36:20,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,924 [INFO] Final candidates: []
2025-04-11 18:36:20,924 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,924 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,925 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,925 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,925 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(14), np.int64(11)))
2025-04-11 18:36:20,933 [INFO] Final candidates: []
2025-04-11 18:36:20,933 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,940 [INFO] Final candidates: []
2025-04-11 18:36:20,940 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,941 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,941 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,942 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,942 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(11), np.int64(12)))
2025-04-11 18:36:20,949 [INFO] Final candidates: []
2025-04-11 18:36:20,949 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,961 [INFO] Final candidates: []
2025-04-11 18:36:20,961 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,962 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,962 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,962 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,962 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(13), np.int64(14)))
2025-04-11 18:36:20,970 [INFO] Final candidates: []
2025-04-11 18:36:20,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,979 [INFO] Final candidates: []
2025-04-11 18:36:20,979 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,980 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,981 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,981 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,981 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(15), np.int64(12)))
2025-04-11 18:36:20,989 [INFO] Final candidates: []
2025-04-11 18:36:20,989 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,997 [INFO] Final candidates: []
2025-04-11 18:36:20,997 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:20,997 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:20,998 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:20,998 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:20,998 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(14), np.int64(12)))
2025-04-11 18:36:21,006 [INFO] Final candidates: []
2025-04-11 18:36:21,006 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,015 [INFO] Final candidates: []
2025-04-11 18:36:21,015 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,016 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,016 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,016 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,017 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(13), np.int64(11)))
2025-04-11 18:36:21,026 [INFO] Final candidates: []
2025-04-11 18:36:21,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,033 [INFO] Final candidates: []
2025-04-11 18:36:21,033 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,034 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,034 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,035 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,035 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(12), np.int64(13)))
2025-04-11 18:36:21,042 [INFO] Final candidates: []
2025-04-11 18:36:21,042 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,050 [INFO] Final candidates: []
2025-04-11 18:36:21,050 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,051 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,051 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,051 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,051 [DEBUG] Tree_policy iteration 2: Expanding move ((13, 12), (np.int64(13), np.int64(13)))
2025-04-11 18:36:21,061 [INFO] Final candidates: []
2025-04-11 18:36:21,061 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,070 [INFO] Final candidates: []
2025-04-11 18:36:21,070 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 18:36:21,074 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,074 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,074 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,074 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,074 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,074 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,074 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,074 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,074 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,074 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,074 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,074 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,075 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,075 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,075 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,075 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,075 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,075 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,075 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,075 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,075 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,076 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,076 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,076 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,076 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,076 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,076 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,076 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,076 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,076 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,076 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,076 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,076 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,076 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,076 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,076 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,077 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,077 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,077 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,077 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,077 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,077 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,077 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,077 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,077 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,077 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,077 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,077 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,077 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,078 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,078 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,078 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,078 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,078 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,078 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,078 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,078 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,078 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,078 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,079 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,079 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,079 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,079 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,079 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,079 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,080 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,080 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,080 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,080 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,080 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,080 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,080 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,080 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,080 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,080 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,080 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,080 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,080 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,080 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,080 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,081 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,081 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,081 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,081 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,081 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,081 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,081 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,081 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,081 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,081 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,081 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,081 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,081 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,082 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,082 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,082 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,082 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,082 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,082 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,083 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,083 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,083 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,083 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,083 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,083 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,083 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,083 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,083 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,083 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,083 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,083 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,083 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,083 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,084 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,084 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,084 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,084 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,084 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,084 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,084 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,084 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,084 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,084 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,084 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,084 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,084 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,084 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,084 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,085 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,085 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,085 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,085 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,085 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,085 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,085 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,085 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,085 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,085 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,085 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,085 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,085 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,086 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,086 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,086 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,086 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,086 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,086 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,086 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,086 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,086 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,086 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,087 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,087 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,087 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,087 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,087 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,087 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,087 [DEBUG] MCTS iteration 50: reached a node with 4 visits.
2025-04-11 18:36:21,087 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,087 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,087 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,087 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,087 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,087 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,087 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,087 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,087 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,088 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,088 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,088 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,088 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,088 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,088 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,088 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,088 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,088 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,088 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,088 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,088 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,088 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,088 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,088 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,089 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,089 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,089 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,089 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,089 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,089 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,089 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,089 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,089 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,089 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,089 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,089 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,090 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,090 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,090 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,090 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,090 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,090 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,090 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,090 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,090 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,090 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,090 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,090 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,090 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,090 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,090 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,090 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,091 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,091 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,091 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,091 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,091 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,091 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,091 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,091 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,091 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,091 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,091 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,092 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,092 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,092 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,092 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,092 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,092 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,092 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,092 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,093 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,093 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,093 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,093 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,093 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,093 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,093 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,093 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,093 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,093 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,093 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,093 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,093 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,093 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,093 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,094 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,094 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,094 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,094 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,094 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,094 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,094 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,094 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,094 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,094 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,094 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,094 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,094 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,095 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,095 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,095 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,095 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,095 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,095 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,095 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,095 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,095 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,095 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,095 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,095 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,095 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,096 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,096 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,096 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,096 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,096 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,096 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,096 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,096 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,096 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,096 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,097 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,097 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,097 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,097 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,097 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,097 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,097 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,097 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,097 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,097 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,097 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,097 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,097 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,097 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,097 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,098 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,098 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,098 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,098 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,098 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,098 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,098 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,098 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,098 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,098 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,099 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,099 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,099 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,099 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,099 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,099 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,099 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,099 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,099 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,099 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,099 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,100 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,100 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,100 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,100 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,100 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,100 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,100 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,100 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,101 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,101 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,101 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,101 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,101 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,101 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,101 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,101 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,101 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,101 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,101 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,101 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,101 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,101 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,101 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,101 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,102 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,102 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,102 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,102 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,102 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,102 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,102 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,102 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,102 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,102 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,102 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,102 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,102 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,102 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,103 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,103 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,103 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,103 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,103 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,103 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,103 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,103 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,103 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,103 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,103 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,103 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,103 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 18:36:21,104 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 18:36:21,104 [INFO] Default policy: Starting random playout.
2025-04-11 18:36:21,104 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 18:36:21,104 [INFO] MCTS: Search finished. Best move selected with 95 visits.
2025-04-11 18:37:43,110 [INFO] Game terminated.
