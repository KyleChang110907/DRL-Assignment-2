2025-04-11 17:28:51,037 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:28:51,047 [INFO] Final candidates: []
2025-04-11 17:28:51,047 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,056 [INFO] Final candidates: []
2025-04-11 17:28:51,056 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,056 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:28:51,057 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:28:51,057 [DEBUG] Tree_policy iteration 1: Expanding move (11, 1)
2025-04-11 17:28:51,066 [INFO] Final candidates: []
2025-04-11 17:28:51,066 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,078 [INFO] Final candidates: []
2025-04-11 17:28:51,078 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,078 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:28:51,079 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,254 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:51,254 [DEBUG] Tree_policy iteration 1: Expanding move (2, 16)
2025-04-11 17:28:51,264 [INFO] Final candidates: []
2025-04-11 17:28:51,264 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,273 [INFO] Final candidates: []
2025-04-11 17:28:51,274 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,274 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,352 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:51,353 [DEBUG] Tree_policy iteration 1: Expanding move (13, 1)
2025-04-11 17:28:51,362 [INFO] Final candidates: []
2025-04-11 17:28:51,362 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,372 [INFO] Final candidates: []
2025-04-11 17:28:51,372 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,372 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,416 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:51,416 [DEBUG] Tree_policy iteration 1: Expanding move (2, 7)
2025-04-11 17:28:51,425 [INFO] Final candidates: []
2025-04-11 17:28:51,425 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,435 [INFO] Final candidates: []
2025-04-11 17:28:51,435 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,435 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,467 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:51,467 [DEBUG] Tree_policy iteration 1: Expanding move (1, 13)
2025-04-11 17:28:51,476 [INFO] Final candidates: []
2025-04-11 17:28:51,476 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,486 [INFO] Final candidates: []
2025-04-11 17:28:51,486 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,486 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,566 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:51,566 [DEBUG] Tree_policy iteration 1: Expanding move (5, 15)
2025-04-11 17:28:51,577 [INFO] Final candidates: []
2025-04-11 17:28:51,578 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,587 [INFO] Final candidates: []
2025-04-11 17:28:51,587 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,588 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,748 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:51,748 [DEBUG] Tree_policy iteration 1: Expanding move (8, 17)
2025-04-11 17:28:51,758 [INFO] Final candidates: []
2025-04-11 17:28:51,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,767 [INFO] Final candidates: []
2025-04-11 17:28:51,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,794 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:51,794 [DEBUG] Tree_policy iteration 1: Expanding move (3, 10)
2025-04-11 17:28:51,804 [INFO] Final candidates: []
2025-04-11 17:28:51,804 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,813 [INFO] Final candidates: []
2025-04-11 17:28:51,813 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:51,888 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:51,888 [DEBUG] Tree_policy iteration 1: Expanding move (8, 7)
2025-04-11 17:28:51,898 [INFO] Final candidates: []
2025-04-11 17:28:51,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,907 [INFO] Final candidates: []
2025-04-11 17:28:51,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:51,907 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,000 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:52,000 [DEBUG] Tree_policy iteration 1: Expanding move (9, 1)
2025-04-11 17:28:52,009 [INFO] Final candidates: []
2025-04-11 17:28:52,009 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,019 [INFO] Final candidates: []
2025-04-11 17:28:52,019 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,019 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,199 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:52,199 [DEBUG] Tree_policy iteration 1: Expanding move (3, 4)
2025-04-11 17:28:52,209 [INFO] Final candidates: []
2025-04-11 17:28:52,209 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,218 [INFO] Final candidates: []
2025-04-11 17:28:52,218 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,219 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,389 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:52,389 [DEBUG] Tree_policy iteration 1: Expanding move (8, 2)
2025-04-11 17:28:52,399 [INFO] Final candidates: []
2025-04-11 17:28:52,399 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,408 [INFO] Final candidates: []
2025-04-11 17:28:52,408 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,653 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:52,653 [DEBUG] Tree_policy iteration 1: Expanding move (15, 17)
2025-04-11 17:28:52,663 [INFO] Final candidates: []
2025-04-11 17:28:52,663 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,672 [INFO] Final candidates: []
2025-04-11 17:28:52,672 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,672 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,693 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:52,693 [DEBUG] Tree_policy iteration 1: Expanding move (10, 9)
2025-04-11 17:28:52,703 [INFO] Final candidates: []
2025-04-11 17:28:52,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,712 [INFO] Final candidates: []
2025-04-11 17:28:52,712 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,712 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,817 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:52,818 [DEBUG] Tree_policy iteration 1: Expanding move (2, 15)
2025-04-11 17:28:52,827 [INFO] Final candidates: []
2025-04-11 17:28:52,827 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,837 [INFO] Final candidates: []
2025-04-11 17:28:52,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,856 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:52,856 [DEBUG] Tree_policy iteration 1: Expanding move (16, 13)
2025-04-11 17:28:52,866 [INFO] Final candidates: []
2025-04-11 17:28:52,866 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,875 [INFO] Final candidates: []
2025-04-11 17:28:52,875 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,875 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,900 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:52,901 [DEBUG] Tree_policy iteration 1: Expanding move (11, 4)
2025-04-11 17:28:52,910 [INFO] Final candidates: []
2025-04-11 17:28:52,910 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,920 [INFO] Final candidates: []
2025-04-11 17:28:52,920 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,920 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,946 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:52,947 [DEBUG] Tree_policy iteration 1: Expanding move (2, 12)
2025-04-11 17:28:52,956 [INFO] Final candidates: []
2025-04-11 17:28:52,956 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,965 [INFO] Final candidates: []
2025-04-11 17:28:52,965 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,966 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:52,972 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:52,972 [DEBUG] Tree_policy iteration 1: Expanding move (14, 16)
2025-04-11 17:28:52,982 [INFO] Final candidates: []
2025-04-11 17:28:52,982 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,991 [INFO] Final candidates: []
2025-04-11 17:28:52,991 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:52,991 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,027 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:53,027 [DEBUG] Tree_policy iteration 1: Expanding move (13, 3)
2025-04-11 17:28:53,036 [INFO] Final candidates: []
2025-04-11 17:28:53,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,046 [INFO] Final candidates: []
2025-04-11 17:28:53,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,047 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,079 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,079 [DEBUG] Tree_policy iteration 1: Expanding move (14, 18)
2025-04-11 17:28:53,088 [INFO] Final candidates: []
2025-04-11 17:28:53,088 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,098 [INFO] Final candidates: []
2025-04-11 17:28:53,098 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,098 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,148 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,149 [DEBUG] Tree_policy iteration 1: Expanding move (17, 9)
2025-04-11 17:28:53,158 [INFO] Final candidates: []
2025-04-11 17:28:53,158 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,167 [INFO] Final candidates: []
2025-04-11 17:28:53,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,168 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,196 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,196 [DEBUG] Tree_policy iteration 1: Expanding move (1, 8)
2025-04-11 17:28:53,205 [INFO] Final candidates: []
2025-04-11 17:28:53,205 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,215 [INFO] Final candidates: []
2025-04-11 17:28:53,215 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,215 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,399 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,399 [DEBUG] Tree_policy iteration 1: Expanding move (0, 12)
2025-04-11 17:28:53,409 [INFO] Final candidates: []
2025-04-11 17:28:53,409 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,419 [INFO] Final candidates: []
2025-04-11 17:28:53,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,419 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,468 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,468 [DEBUG] Tree_policy iteration 1: Expanding move (14, 13)
2025-04-11 17:28:53,478 [INFO] Final candidates: []
2025-04-11 17:28:53,478 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,487 [INFO] Final candidates: []
2025-04-11 17:28:53,487 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,487 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,528 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:53,528 [DEBUG] Tree_policy iteration 1: Expanding move (4, 14)
2025-04-11 17:28:53,538 [INFO] Final candidates: []
2025-04-11 17:28:53,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,547 [INFO] Final candidates: []
2025-04-11 17:28:53,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,561 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:53,561 [DEBUG] Tree_policy iteration 1: Expanding move (9, 18)
2025-04-11 17:28:53,570 [INFO] Final candidates: []
2025-04-11 17:28:53,570 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,580 [INFO] Final candidates: []
2025-04-11 17:28:53,580 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,580 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,684 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,684 [DEBUG] Tree_policy iteration 1: Expanding move (12, 16)
2025-04-11 17:28:53,693 [INFO] Final candidates: []
2025-04-11 17:28:53,693 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,703 [INFO] Final candidates: []
2025-04-11 17:28:53,703 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,703 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,894 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,895 [DEBUG] Tree_policy iteration 1: Expanding move (11, 5)
2025-04-11 17:28:53,905 [INFO] Final candidates: []
2025-04-11 17:28:53,905 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,915 [INFO] Final candidates: []
2025-04-11 17:28:53,915 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,915 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:53,969 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:53,969 [DEBUG] Tree_policy iteration 1: Expanding move (4, 2)
2025-04-11 17:28:53,978 [INFO] Final candidates: []
2025-04-11 17:28:53,978 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,988 [INFO] Final candidates: []
2025-04-11 17:28:53,988 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:53,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,098 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:54,098 [DEBUG] Tree_policy iteration 1: Expanding move (15, 13)
2025-04-11 17:28:54,108 [INFO] Final candidates: []
2025-04-11 17:28:54,108 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,117 [INFO] Final candidates: []
2025-04-11 17:28:54,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,117 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,173 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:54,173 [DEBUG] Tree_policy iteration 1: Expanding move (7, 0)
2025-04-11 17:28:54,183 [INFO] Final candidates: []
2025-04-11 17:28:54,183 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,192 [INFO] Final candidates: []
2025-04-11 17:28:54,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,192 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,256 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:54,256 [DEBUG] Tree_policy iteration 1: Expanding move (13, 7)
2025-04-11 17:28:54,266 [INFO] Final candidates: []
2025-04-11 17:28:54,266 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,276 [INFO] Final candidates: []
2025-04-11 17:28:54,276 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,276 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,388 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:54,389 [DEBUG] Tree_policy iteration 1: Expanding move (17, 17)
2025-04-11 17:28:54,398 [INFO] Final candidates: []
2025-04-11 17:28:54,398 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,408 [INFO] Final candidates: []
2025-04-11 17:28:54,408 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,408 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:54,494 [DEBUG] Tree_policy iteration 1: Expanding move (4, 7)
2025-04-11 17:28:54,503 [INFO] Final candidates: []
2025-04-11 17:28:54,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,513 [INFO] Final candidates: []
2025-04-11 17:28:54,513 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,586 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:54,586 [DEBUG] Tree_policy iteration 1: Expanding move (6, 0)
2025-04-11 17:28:54,595 [INFO] Final candidates: []
2025-04-11 17:28:54,595 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,604 [INFO] Final candidates: []
2025-04-11 17:28:54,604 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,605 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,759 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:54,759 [DEBUG] Tree_policy iteration 1: Expanding move (10, 4)
2025-04-11 17:28:54,769 [INFO] Final candidates: []
2025-04-11 17:28:54,769 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,778 [INFO] Final candidates: []
2025-04-11 17:28:54,778 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,778 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,844 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:54,844 [DEBUG] Tree_policy iteration 1: Expanding move (3, 11)
2025-04-11 17:28:54,853 [INFO] Final candidates: []
2025-04-11 17:28:54,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,863 [INFO] Final candidates: []
2025-04-11 17:28:54,863 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,863 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,892 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:54,892 [DEBUG] Tree_policy iteration 1: Expanding move (5, 17)
2025-04-11 17:28:54,901 [INFO] Final candidates: []
2025-04-11 17:28:54,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,910 [INFO] Final candidates: []
2025-04-11 17:28:54,910 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,911 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:54,971 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:54,971 [DEBUG] Tree_policy iteration 1: Expanding move (1, 10)
2025-04-11 17:28:54,983 [INFO] Final candidates: []
2025-04-11 17:28:54,983 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,992 [INFO] Final candidates: []
2025-04-11 17:28:54,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:54,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:55,056 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:55,056 [DEBUG] Tree_policy iteration 1: Expanding move (1, 6)
2025-04-11 17:28:55,066 [INFO] Final candidates: []
2025-04-11 17:28:55,066 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,075 [INFO] Final candidates: []
2025-04-11 17:28:55,075 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,076 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:55,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:55,274 [DEBUG] Tree_policy iteration 1: Expanding move (11, 16)
2025-04-11 17:28:55,284 [INFO] Final candidates: []
2025-04-11 17:28:55,284 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,293 [INFO] Final candidates: []
2025-04-11 17:28:55,293 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,293 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:55,332 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:55,332 [DEBUG] Tree_policy iteration 1: Expanding move (12, 9)
2025-04-11 17:28:55,341 [INFO] Final candidates: []
2025-04-11 17:28:55,341 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,351 [INFO] Final candidates: []
2025-04-11 17:28:55,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,351 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:55,605 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:55,605 [DEBUG] Tree_policy iteration 1: Expanding move (12, 2)
2025-04-11 17:28:55,615 [INFO] Final candidates: []
2025-04-11 17:28:55,615 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,624 [INFO] Final candidates: []
2025-04-11 17:28:55,624 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,624 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:55,820 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:55,820 [DEBUG] Tree_policy iteration 1: Expanding move (18, 2)
2025-04-11 17:28:55,830 [INFO] Final candidates: []
2025-04-11 17:28:55,830 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,839 [INFO] Final candidates: []
2025-04-11 17:28:55,839 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,839 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:55,907 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:55,907 [DEBUG] Tree_policy iteration 1: Expanding move (7, 10)
2025-04-11 17:28:55,916 [INFO] Final candidates: []
2025-04-11 17:28:55,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,926 [INFO] Final candidates: []
2025-04-11 17:28:55,926 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:55,926 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,039 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:56,039 [DEBUG] Tree_policy iteration 1: Expanding move (17, 8)
2025-04-11 17:28:56,048 [INFO] Final candidates: []
2025-04-11 17:28:56,048 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,058 [INFO] Final candidates: []
2025-04-11 17:28:56,058 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,058 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,062 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:56,063 [DEBUG] Tree_policy iteration 1: Expanding move (3, 2)
2025-04-11 17:28:56,072 [INFO] Final candidates: []
2025-04-11 17:28:56,072 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,081 [INFO] Final candidates: []
2025-04-11 17:28:56,081 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,081 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,125 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:56,125 [DEBUG] Tree_policy iteration 1: Expanding move (13, 16)
2025-04-11 17:28:56,134 [INFO] Final candidates: []
2025-04-11 17:28:56,135 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,144 [INFO] Final candidates: []
2025-04-11 17:28:56,144 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,144 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,454 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:56,455 [DEBUG] Tree_policy iteration 1: Expanding move (17, 18)
2025-04-11 17:28:56,464 [INFO] Final candidates: []
2025-04-11 17:28:56,464 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,474 [INFO] Final candidates: []
2025-04-11 17:28:56,474 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,474 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,500 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:56,500 [DEBUG] Tree_policy iteration 1: Expanding move (18, 16)
2025-04-11 17:28:56,510 [INFO] Final candidates: []
2025-04-11 17:28:56,510 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,519 [INFO] Final candidates: []
2025-04-11 17:28:56,519 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,519 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:28:56,519 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,538 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:56,538 [DEBUG] Tree_policy iteration 1: Expanding move (15, 14)
2025-04-11 17:28:56,547 [INFO] Final candidates: []
2025-04-11 17:28:56,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,556 [INFO] Final candidates: []
2025-04-11 17:28:56,556 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,557 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,706 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:56,706 [DEBUG] Tree_policy iteration 1: Expanding move (16, 7)
2025-04-11 17:28:56,716 [INFO] Final candidates: []
2025-04-11 17:28:56,716 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,725 [INFO] Final candidates: []
2025-04-11 17:28:56,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,726 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:56,845 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:56,845 [DEBUG] Tree_policy iteration 1: Expanding move (16, 6)
2025-04-11 17:28:56,855 [INFO] Final candidates: []
2025-04-11 17:28:56,855 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,864 [INFO] Final candidates: []
2025-04-11 17:28:56,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:56,864 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,006 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:57,007 [DEBUG] Tree_policy iteration 1: Expanding move (0, 3)
2025-04-11 17:28:57,016 [INFO] Final candidates: []
2025-04-11 17:28:57,016 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,025 [INFO] Final candidates: []
2025-04-11 17:28:57,025 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,045 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:57,045 [DEBUG] Tree_policy iteration 1: Expanding move (9, 5)
2025-04-11 17:28:57,054 [INFO] Final candidates: []
2025-04-11 17:28:57,055 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,064 [INFO] Final candidates: []
2025-04-11 17:28:57,064 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,064 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,106 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:57,106 [DEBUG] Tree_policy iteration 1: Expanding move (8, 15)
2025-04-11 17:28:57,116 [INFO] Final candidates: []
2025-04-11 17:28:57,116 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,126 [INFO] Final candidates: []
2025-04-11 17:28:57,126 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,126 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,225 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:57,226 [DEBUG] Tree_policy iteration 1: Expanding move (6, 1)
2025-04-11 17:28:57,235 [INFO] Final candidates: []
2025-04-11 17:28:57,235 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,244 [INFO] Final candidates: []
2025-04-11 17:28:57,244 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,290 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:57,290 [DEBUG] Tree_policy iteration 1: Expanding move (18, 8)
2025-04-11 17:28:57,299 [INFO] Final candidates: []
2025-04-11 17:28:57,299 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,308 [INFO] Final candidates: []
2025-04-11 17:28:57,308 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,308 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,382 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:57,382 [DEBUG] Tree_policy iteration 1: Expanding move (11, 2)
2025-04-11 17:28:57,391 [INFO] Final candidates: []
2025-04-11 17:28:57,391 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,401 [INFO] Final candidates: []
2025-04-11 17:28:57,401 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,401 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,599 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:57,599 [DEBUG] Tree_policy iteration 1: Expanding move (12, 12)
2025-04-11 17:28:57,609 [INFO] Final candidates: []
2025-04-11 17:28:57,609 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,618 [INFO] Final candidates: []
2025-04-11 17:28:57,618 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,618 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,671 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:57,671 [DEBUG] Tree_policy iteration 1: Expanding move (10, 10)
2025-04-11 17:28:57,681 [INFO] Final candidates: []
2025-04-11 17:28:57,681 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,690 [INFO] Final candidates: []
2025-04-11 17:28:57,690 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,690 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,697 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:57,697 [DEBUG] Tree_policy iteration 1: Expanding move (1, 14)
2025-04-11 17:28:57,706 [INFO] Final candidates: []
2025-04-11 17:28:57,706 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,715 [INFO] Final candidates: []
2025-04-11 17:28:57,715 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,716 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,781 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:57,781 [DEBUG] Tree_policy iteration 1: Expanding move (9, 16)
2025-04-11 17:28:57,791 [INFO] Final candidates: []
2025-04-11 17:28:57,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,800 [INFO] Final candidates: []
2025-04-11 17:28:57,800 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,800 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,917 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:57,917 [DEBUG] Tree_policy iteration 1: Expanding move (1, 0)
2025-04-11 17:28:57,927 [INFO] Final candidates: []
2025-04-11 17:28:57,927 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,936 [INFO] Final candidates: []
2025-04-11 17:28:57,936 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:57,936 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:57,990 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:57,990 [DEBUG] Tree_policy iteration 1: Expanding move (0, 16)
2025-04-11 17:28:58,000 [INFO] Final candidates: []
2025-04-11 17:28:58,000 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,009 [INFO] Final candidates: []
2025-04-11 17:28:58,009 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,009 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,209 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:58,209 [DEBUG] Tree_policy iteration 1: Expanding move (4, 17)
2025-04-11 17:28:58,219 [INFO] Final candidates: []
2025-04-11 17:28:58,219 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,228 [INFO] Final candidates: []
2025-04-11 17:28:58,228 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,228 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:58,311 [DEBUG] Tree_policy iteration 1: Expanding move (12, 4)
2025-04-11 17:28:58,320 [INFO] Final candidates: []
2025-04-11 17:28:58,320 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,329 [INFO] Final candidates: []
2025-04-11 17:28:58,329 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,387 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:58,387 [DEBUG] Tree_policy iteration 1: Expanding move (13, 10)
2025-04-11 17:28:58,396 [INFO] Final candidates: []
2025-04-11 17:28:58,396 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,406 [INFO] Final candidates: []
2025-04-11 17:28:58,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,560 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:58,560 [DEBUG] Tree_policy iteration 1: Expanding move (12, 0)
2025-04-11 17:28:58,569 [INFO] Final candidates: []
2025-04-11 17:28:58,569 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,579 [INFO] Final candidates: []
2025-04-11 17:28:58,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,579 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,603 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:58,603 [DEBUG] Tree_policy iteration 1: Expanding move (17, 13)
2025-04-11 17:28:58,613 [INFO] Final candidates: []
2025-04-11 17:28:58,613 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,622 [INFO] Final candidates: []
2025-04-11 17:28:58,622 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,622 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,635 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:58,635 [DEBUG] Tree_policy iteration 1: Expanding move (11, 10)
2025-04-11 17:28:58,644 [INFO] Final candidates: []
2025-04-11 17:28:58,645 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,654 [INFO] Final candidates: []
2025-04-11 17:28:58,654 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,803 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:58,803 [DEBUG] Tree_policy iteration 1: Expanding move (14, 15)
2025-04-11 17:28:58,812 [INFO] Final candidates: []
2025-04-11 17:28:58,812 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,821 [INFO] Final candidates: []
2025-04-11 17:28:58,821 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,822 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,866 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:58,867 [DEBUG] Tree_policy iteration 1: Expanding move (3, 6)
2025-04-11 17:28:58,878 [INFO] Final candidates: []
2025-04-11 17:28:58,878 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,888 [INFO] Final candidates: []
2025-04-11 17:28:58,888 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,888 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:58,939 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:58,939 [DEBUG] Tree_policy iteration 1: Expanding move (0, 1)
2025-04-11 17:28:58,949 [INFO] Final candidates: []
2025-04-11 17:28:58,949 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,958 [INFO] Final candidates: []
2025-04-11 17:28:58,958 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:58,958 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,111 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:59,111 [DEBUG] Tree_policy iteration 1: Expanding move (5, 12)
2025-04-11 17:28:59,121 [INFO] Final candidates: []
2025-04-11 17:28:59,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,131 [INFO] Final candidates: []
2025-04-11 17:28:59,131 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,241 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:59,241 [DEBUG] Tree_policy iteration 1: Expanding move (4, 8)
2025-04-11 17:28:59,250 [INFO] Final candidates: []
2025-04-11 17:28:59,250 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,261 [INFO] Final candidates: []
2025-04-11 17:28:59,261 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,261 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,273 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:59,273 [DEBUG] Tree_policy iteration 1: Expanding move (5, 16)
2025-04-11 17:28:59,282 [INFO] Final candidates: []
2025-04-11 17:28:59,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,291 [INFO] Final candidates: []
2025-04-11 17:28:59,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,292 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,317 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:59,318 [DEBUG] Tree_policy iteration 1: Expanding move (13, 18)
2025-04-11 17:28:59,327 [INFO] Final candidates: []
2025-04-11 17:28:59,327 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,336 [INFO] Final candidates: []
2025-04-11 17:28:59,336 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,336 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,471 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:59,471 [DEBUG] Tree_policy iteration 1: Expanding move (7, 5)
2025-04-11 17:28:59,480 [INFO] Final candidates: []
2025-04-11 17:28:59,480 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,489 [INFO] Final candidates: []
2025-04-11 17:28:59,489 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,490 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,596 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:59,596 [DEBUG] Tree_policy iteration 1: Expanding move (16, 14)
2025-04-11 17:28:59,606 [INFO] Final candidates: []
2025-04-11 17:28:59,606 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,616 [INFO] Final candidates: []
2025-04-11 17:28:59,616 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,616 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,687 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:28:59,688 [DEBUG] Tree_policy iteration 1: Expanding move (10, 18)
2025-04-11 17:28:59,697 [INFO] Final candidates: []
2025-04-11 17:28:59,697 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,706 [INFO] Final candidates: []
2025-04-11 17:28:59,706 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,706 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,710 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:59,710 [DEBUG] Tree_policy iteration 1: Expanding move (1, 2)
2025-04-11 17:28:59,720 [INFO] Final candidates: []
2025-04-11 17:28:59,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,729 [INFO] Final candidates: []
2025-04-11 17:28:59,729 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,788 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:59,788 [DEBUG] Tree_policy iteration 1: Expanding move (4, 6)
2025-04-11 17:28:59,799 [INFO] Final candidates: []
2025-04-11 17:28:59,799 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,810 [INFO] Final candidates: []
2025-04-11 17:28:59,810 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,810 [INFO] Default policy: Starting random playout.
2025-04-11 17:28:59,830 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:28:59,830 [DEBUG] Tree_policy iteration 1: Expanding move (1, 5)
2025-04-11 17:28:59,839 [INFO] Final candidates: []
2025-04-11 17:28:59,839 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,849 [INFO] Final candidates: []
2025-04-11 17:28:59,849 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:28:59,849 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,046 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,046 [DEBUG] Tree_policy iteration 1: Expanding move (12, 8)
2025-04-11 17:29:00,056 [INFO] Final candidates: []
2025-04-11 17:29:00,056 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,065 [INFO] Final candidates: []
2025-04-11 17:29:00,065 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,065 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,163 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:00,163 [DEBUG] Tree_policy iteration 1: Expanding move (9, 12)
2025-04-11 17:29:00,173 [INFO] Final candidates: []
2025-04-11 17:29:00,173 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,182 [INFO] Final candidates: []
2025-04-11 17:29:00,182 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,182 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,225 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:00,225 [DEBUG] Tree_policy iteration 1: Expanding move (6, 14)
2025-04-11 17:29:00,235 [INFO] Final candidates: []
2025-04-11 17:29:00,235 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,244 [INFO] Final candidates: []
2025-04-11 17:29:00,244 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,244 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,264 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,264 [DEBUG] Tree_policy iteration 1: Expanding move (11, 6)
2025-04-11 17:29:00,274 [INFO] Final candidates: []
2025-04-11 17:29:00,274 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,283 [INFO] Final candidates: []
2025-04-11 17:29:00,283 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,283 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,329 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,330 [DEBUG] Tree_policy iteration 1: Expanding move (5, 11)
2025-04-11 17:29:00,339 [INFO] Final candidates: []
2025-04-11 17:29:00,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,349 [INFO] Final candidates: []
2025-04-11 17:29:00,349 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,355 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:00,356 [DEBUG] Tree_policy iteration 1: Expanding move (5, 1)
2025-04-11 17:29:00,365 [INFO] Final candidates: []
2025-04-11 17:29:00,365 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,374 [INFO] Final candidates: []
2025-04-11 17:29:00,374 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,375 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,398 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,398 [DEBUG] Tree_policy iteration 1: Expanding move (12, 15)
2025-04-11 17:29:00,407 [INFO] Final candidates: []
2025-04-11 17:29:00,407 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,416 [INFO] Final candidates: []
2025-04-11 17:29:00,416 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,417 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,426 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,426 [DEBUG] Tree_policy iteration 1: Expanding move (18, 17)
2025-04-11 17:29:00,435 [INFO] Final candidates: []
2025-04-11 17:29:00,435 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,444 [INFO] Final candidates: []
2025-04-11 17:29:00,445 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,445 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,534 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,534 [DEBUG] Tree_policy iteration 1: Expanding move (3, 0)
2025-04-11 17:29:00,544 [INFO] Final candidates: []
2025-04-11 17:29:00,544 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,553 [INFO] Final candidates: []
2025-04-11 17:29:00,553 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,554 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,584 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,584 [DEBUG] Tree_policy iteration 1: Expanding move (10, 15)
2025-04-11 17:29:00,594 [INFO] Final candidates: []
2025-04-11 17:29:00,594 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,603 [INFO] Final candidates: []
2025-04-11 17:29:00,603 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,724 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:00,724 [DEBUG] Tree_policy iteration 1: Expanding move (5, 5)
2025-04-11 17:29:00,733 [INFO] Final candidates: []
2025-04-11 17:29:00,734 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,743 [INFO] Final candidates: []
2025-04-11 17:29:00,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,743 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,818 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,818 [DEBUG] Tree_policy iteration 1: Expanding move (6, 18)
2025-04-11 17:29:00,827 [INFO] Final candidates: []
2025-04-11 17:29:00,827 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,836 [INFO] Final candidates: []
2025-04-11 17:29:00,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:00,904 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:00,904 [DEBUG] Tree_policy iteration 1: Expanding move (18, 1)
2025-04-11 17:29:00,914 [INFO] Final candidates: []
2025-04-11 17:29:00,914 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,923 [INFO] Final candidates: []
2025-04-11 17:29:00,923 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:00,924 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:01,027 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:01,028 [DEBUG] Tree_policy iteration 1: Expanding move (2, 1)
2025-04-11 17:29:01,038 [INFO] Final candidates: []
2025-04-11 17:29:01,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:01,048 [INFO] Final candidates: []
2025-04-11 17:29:01,048 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:01,049 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:01,089 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:01,089 [DEBUG] Tree_policy iteration 1: Expanding move (6, 4)
2025-04-11 17:29:01,098 [INFO] Final candidates: []
2025-04-11 17:29:01,098 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:01,107 [INFO] Final candidates: []
2025-04-11 17:29:01,107 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:01,108 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:01,277 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:01,277 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:29:01,277 [INFO] MCTS selected move: B12
2025-04-11 17:29:01,277 [INFO] ===============NEW MOVE================
2025-04-11 17:29:06,997 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:29:07,008 [INFO] Final candidates: []
2025-04-11 17:29:07,008 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,017 [INFO] Final candidates: []
2025-04-11 17:29:07,017 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,017 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:29:07,018 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:29:07,018 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(12), np.int64(0)))
2025-04-11 17:29:07,027 [INFO] Final candidates: []
2025-04-11 17:29:07,027 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,036 [INFO] Final candidates: []
2025-04-11 17:29:07,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,036 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:29:07,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,078 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:07,078 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(12), np.int64(0)))
2025-04-11 17:29:07,088 [INFO] Final candidates: []
2025-04-11 17:29:07,088 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,096 [INFO] Final candidates: []
2025-04-11 17:29:07,097 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,097 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,284 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:07,284 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(2)), (np.int64(13), np.int64(1)))
2025-04-11 17:29:07,294 [INFO] Final candidates: []
2025-04-11 17:29:07,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,303 [INFO] Final candidates: []
2025-04-11 17:29:07,303 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,333 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:07,333 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:07,342 [INFO] Final candidates: []
2025-04-11 17:29:07,342 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,351 [INFO] Final candidates: []
2025-04-11 17:29:07,351 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,351 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,455 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:07,455 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(11), np.int64(3)))
2025-04-11 17:29:07,464 [INFO] Final candidates: []
2025-04-11 17:29:07,464 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,473 [INFO] Final candidates: []
2025-04-11 17:29:07,473 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,636 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:07,637 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(8), np.int64(8)))
2025-04-11 17:29:07,646 [INFO] Final candidates: []
2025-04-11 17:29:07,646 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,655 [INFO] Final candidates: []
2025-04-11 17:29:07,655 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,710 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:07,711 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:07,720 [INFO] Final candidates: []
2025-04-11 17:29:07,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,729 [INFO] Final candidates: []
2025-04-11 17:29:07,729 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,762 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:07,763 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(2)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:07,772 [INFO] Final candidates: []
2025-04-11 17:29:07,772 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,781 [INFO] Final candidates: []
2025-04-11 17:29:07,781 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,781 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:07,884 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:07,885 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(6), np.int64(11)))
2025-04-11 17:29:07,894 [INFO] Final candidates: []
2025-04-11 17:29:07,894 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,903 [INFO] Final candidates: []
2025-04-11 17:29:07,903 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:07,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:08,011 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:08,011 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:29:08,021 [INFO] Final candidates: []
2025-04-11 17:29:08,021 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,030 [INFO] Final candidates: []
2025-04-11 17:29:08,030 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,030 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:08,119 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:08,119 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(0)), (np.int64(11), np.int64(3)))
2025-04-11 17:29:08,128 [INFO] Final candidates: []
2025-04-11 17:29:08,128 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,137 [INFO] Final candidates: []
2025-04-11 17:29:08,137 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,137 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:08,190 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:08,190 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:08,199 [INFO] Final candidates: []
2025-04-11 17:29:08,199 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,208 [INFO] Final candidates: []
2025-04-11 17:29:08,208 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:08,497 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:08,497 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(0)))
2025-04-11 17:29:08,506 [INFO] Final candidates: []
2025-04-11 17:29:08,506 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,515 [INFO] Final candidates: []
2025-04-11 17:29:08,515 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,515 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:08,707 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:08,707 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(8), np.int64(8)))
2025-04-11 17:29:08,716 [INFO] Final candidates: []
2025-04-11 17:29:08,716 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,725 [INFO] Final candidates: []
2025-04-11 17:29:08,725 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,725 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:08,880 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:08,881 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:08,890 [INFO] Final candidates: []
2025-04-11 17:29:08,890 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,899 [INFO] Final candidates: []
2025-04-11 17:29:08,899 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:08,899 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:09,067 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:09,067 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(12), np.int64(0)))
2025-04-11 17:29:09,076 [INFO] Final candidates: []
2025-04-11 17:29:09,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,085 [INFO] Final candidates: []
2025-04-11 17:29:09,085 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,085 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:09,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:09,219 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:09,229 [INFO] Final candidates: []
2025-04-11 17:29:09,229 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,238 [INFO] Final candidates: []
2025-04-11 17:29:09,238 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,239 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:09,359 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:09,359 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(10), np.int64(9)))
2025-04-11 17:29:09,368 [INFO] Final candidates: []
2025-04-11 17:29:09,368 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,377 [INFO] Final candidates: []
2025-04-11 17:29:09,377 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,377 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:09,392 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:09,392 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(13), np.int64(1)))
2025-04-11 17:29:09,402 [INFO] Final candidates: []
2025-04-11 17:29:09,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,411 [INFO] Final candidates: []
2025-04-11 17:29:09,411 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,411 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:09,633 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:09,633 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(12), np.int64(2)))
2025-04-11 17:29:09,643 [INFO] Final candidates: []
2025-04-11 17:29:09,643 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,652 [INFO] Final candidates: []
2025-04-11 17:29:09,652 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,652 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:09,761 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:09,761 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(10), np.int64(2)))
2025-04-11 17:29:09,770 [INFO] Final candidates: []
2025-04-11 17:29:09,770 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,779 [INFO] Final candidates: []
2025-04-11 17:29:09,780 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:09,899 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:09,899 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:09,909 [INFO] Final candidates: []
2025-04-11 17:29:09,909 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,917 [INFO] Final candidates: []
2025-04-11 17:29:09,917 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:09,918 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,078 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:10,078 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:10,087 [INFO] Final candidates: []
2025-04-11 17:29:10,087 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,096 [INFO] Final candidates: []
2025-04-11 17:29:10,096 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,096 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,166 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:10,166 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(10)))
2025-04-11 17:29:10,175 [INFO] Final candidates: []
2025-04-11 17:29:10,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,184 [INFO] Final candidates: []
2025-04-11 17:29:10,184 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,184 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,328 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:10,328 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(12), np.int64(2)))
2025-04-11 17:29:10,337 [INFO] Final candidates: []
2025-04-11 17:29:10,337 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,346 [INFO] Final candidates: []
2025-04-11 17:29:10,346 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,346 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,385 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:10,385 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:10,394 [INFO] Final candidates: []
2025-04-11 17:29:10,394 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,403 [INFO] Final candidates: []
2025-04-11 17:29:10,403 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,506 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:10,507 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:10,516 [INFO] Final candidates: []
2025-04-11 17:29:10,516 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,525 [INFO] Final candidates: []
2025-04-11 17:29:10,525 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,525 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,569 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:10,569 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(8), np.int64(8)))
2025-04-11 17:29:10,578 [INFO] Final candidates: []
2025-04-11 17:29:10,578 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,587 [INFO] Final candidates: []
2025-04-11 17:29:10,587 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,587 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,732 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:10,732 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(2)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:10,742 [INFO] Final candidates: []
2025-04-11 17:29:10,742 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,750 [INFO] Final candidates: []
2025-04-11 17:29:10,750 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,751 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,844 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:10,844 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:29:10,853 [INFO] Final candidates: []
2025-04-11 17:29:10,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,862 [INFO] Final candidates: []
2025-04-11 17:29:10,862 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,862 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:10,933 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:10,934 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:10,943 [INFO] Final candidates: []
2025-04-11 17:29:10,943 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,952 [INFO] Final candidates: []
2025-04-11 17:29:10,952 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:10,952 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,144 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:11,144 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:29:11,153 [INFO] Final candidates: []
2025-04-11 17:29:11,153 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,162 [INFO] Final candidates: []
2025-04-11 17:29:11,162 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,210 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:11,211 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(9)))
2025-04-11 17:29:11,220 [INFO] Final candidates: []
2025-04-11 17:29:11,220 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,230 [INFO] Final candidates: []
2025-04-11 17:29:11,230 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,231 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,269 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:11,270 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(4), np.int64(9)))
2025-04-11 17:29:11,279 [INFO] Final candidates: []
2025-04-11 17:29:11,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,288 [INFO] Final candidates: []
2025-04-11 17:29:11,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,288 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,488 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:11,489 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:11,498 [INFO] Final candidates: []
2025-04-11 17:29:11,498 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,507 [INFO] Final candidates: []
2025-04-11 17:29:11,507 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,507 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,716 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:11,717 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:11,726 [INFO] Final candidates: []
2025-04-11 17:29:11,726 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,735 [INFO] Final candidates: []
2025-04-11 17:29:11,735 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,735 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,892 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:11,892 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(7), np.int64(9)))
2025-04-11 17:29:11,902 [INFO] Final candidates: []
2025-04-11 17:29:11,902 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,910 [INFO] Final candidates: []
2025-04-11 17:29:11,911 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,911 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,956 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:11,956 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:11,966 [INFO] Final candidates: []
2025-04-11 17:29:11,966 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,974 [INFO] Final candidates: []
2025-04-11 17:29:11,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:11,975 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:11,998 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:11,999 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:12,011 [INFO] Final candidates: []
2025-04-11 17:29:12,011 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,019 [INFO] Final candidates: []
2025-04-11 17:29:12,019 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,020 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,120 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:12,120 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:29:12,130 [INFO] Final candidates: []
2025-04-11 17:29:12,130 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,138 [INFO] Final candidates: []
2025-04-11 17:29:12,138 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,139 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,354 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:12,354 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(11), np.int64(3)))
2025-04-11 17:29:12,364 [INFO] Final candidates: []
2025-04-11 17:29:12,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,373 [INFO] Final candidates: []
2025-04-11 17:29:12,373 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,373 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,394 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:12,394 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(7)))
2025-04-11 17:29:12,404 [INFO] Final candidates: []
2025-04-11 17:29:12,404 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,413 [INFO] Final candidates: []
2025-04-11 17:29:12,413 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,413 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,583 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:12,583 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(8), np.int64(8)))
2025-04-11 17:29:12,592 [INFO] Final candidates: []
2025-04-11 17:29:12,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,601 [INFO] Final candidates: []
2025-04-11 17:29:12,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,639 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:12,639 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:12,649 [INFO] Final candidates: []
2025-04-11 17:29:12,649 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,658 [INFO] Final candidates: []
2025-04-11 17:29:12,658 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,658 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:12,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:29:12,707 [INFO] Final candidates: []
2025-04-11 17:29:12,707 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,716 [INFO] Final candidates: []
2025-04-11 17:29:12,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,716 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,863 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:12,863 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(9), np.int64(10)))
2025-04-11 17:29:12,872 [INFO] Final candidates: []
2025-04-11 17:29:12,872 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,881 [INFO] Final candidates: []
2025-04-11 17:29:12,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,881 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:12,920 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:12,920 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(11), np.int64(0)))
2025-04-11 17:29:12,930 [INFO] Final candidates: []
2025-04-11 17:29:12,930 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,939 [INFO] Final candidates: []
2025-04-11 17:29:12,939 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:12,939 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:13,049 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:13,049 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:13,059 [INFO] Final candidates: []
2025-04-11 17:29:13,059 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,068 [INFO] Final candidates: []
2025-04-11 17:29:13,069 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,069 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:13,130 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:13,130 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(10), np.int64(2)))
2025-04-11 17:29:13,139 [INFO] Final candidates: []
2025-04-11 17:29:13,140 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,148 [INFO] Final candidates: []
2025-04-11 17:29:13,148 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,149 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:13,221 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:13,221 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:13,230 [INFO] Final candidates: []
2025-04-11 17:29:13,230 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,239 [INFO] Final candidates: []
2025-04-11 17:29:13,239 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,239 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:13,459 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:13,459 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:29:13,468 [INFO] Final candidates: []
2025-04-11 17:29:13,468 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,477 [INFO] Final candidates: []
2025-04-11 17:29:13,477 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,477 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:29:13,477 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:13,532 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:13,533 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:13,542 [INFO] Final candidates: []
2025-04-11 17:29:13,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,551 [INFO] Final candidates: []
2025-04-11 17:29:13,551 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,551 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:13,718 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:13,718 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(7), np.int64(10)))
2025-04-11 17:29:13,727 [INFO] Final candidates: []
2025-04-11 17:29:13,727 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,736 [INFO] Final candidates: []
2025-04-11 17:29:13,736 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,736 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:13,913 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:13,914 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(7), np.int64(10)))
2025-04-11 17:29:13,923 [INFO] Final candidates: []
2025-04-11 17:29:13,923 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,932 [INFO] Final candidates: []
2025-04-11 17:29:13,932 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:13,932 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:14,164 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:14,164 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(12), np.int64(2)))
2025-04-11 17:29:14,173 [INFO] Final candidates: []
2025-04-11 17:29:14,173 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,182 [INFO] Final candidates: []
2025-04-11 17:29:14,182 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,182 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:14,298 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:14,298 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(11), np.int64(3)))
2025-04-11 17:29:14,307 [INFO] Final candidates: []
2025-04-11 17:29:14,307 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,316 [INFO] Final candidates: []
2025-04-11 17:29:14,316 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,316 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:14,412 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:14,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(11), np.int64(3)))
2025-04-11 17:29:14,422 [INFO] Final candidates: []
2025-04-11 17:29:14,422 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,430 [INFO] Final candidates: []
2025-04-11 17:29:14,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,431 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:14,615 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:14,615 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(12), np.int64(2)))
2025-04-11 17:29:14,624 [INFO] Final candidates: []
2025-04-11 17:29:14,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,633 [INFO] Final candidates: []
2025-04-11 17:29:14,633 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,633 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:14,808 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:14,808 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:14,818 [INFO] Final candidates: []
2025-04-11 17:29:14,818 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,826 [INFO] Final candidates: []
2025-04-11 17:29:14,826 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,827 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:14,952 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:14,953 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:14,962 [INFO] Final candidates: []
2025-04-11 17:29:14,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,971 [INFO] Final candidates: []
2025-04-11 17:29:14,971 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:14,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:15,137 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:15,137 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(11), np.int64(0)))
2025-04-11 17:29:15,146 [INFO] Final candidates: []
2025-04-11 17:29:15,146 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,155 [INFO] Final candidates: []
2025-04-11 17:29:15,155 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,156 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:15,295 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:15,295 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:15,305 [INFO] Final candidates: []
2025-04-11 17:29:15,305 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,314 [INFO] Final candidates: []
2025-04-11 17:29:15,314 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,314 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:15,410 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:15,410 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:15,419 [INFO] Final candidates: []
2025-04-11 17:29:15,419 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,428 [INFO] Final candidates: []
2025-04-11 17:29:15,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,428 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:15,474 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:15,474 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(6), np.int64(11)))
2025-04-11 17:29:15,483 [INFO] Final candidates: []
2025-04-11 17:29:15,483 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,492 [INFO] Final candidates: []
2025-04-11 17:29:15,492 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,493 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:15,786 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:15,787 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(7)))
2025-04-11 17:29:15,796 [INFO] Final candidates: []
2025-04-11 17:29:15,796 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,804 [INFO] Final candidates: []
2025-04-11 17:29:15,804 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,805 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:15,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:15,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(1)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:15,967 [INFO] Final candidates: []
2025-04-11 17:29:15,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,976 [INFO] Final candidates: []
2025-04-11 17:29:15,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:15,976 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,002 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:16,002 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:16,011 [INFO] Final candidates: []
2025-04-11 17:29:16,011 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,020 [INFO] Final candidates: []
2025-04-11 17:29:16,020 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,020 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,066 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:16,067 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(12), np.int64(0)))
2025-04-11 17:29:16,076 [INFO] Final candidates: []
2025-04-11 17:29:16,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,085 [INFO] Final candidates: []
2025-04-11 17:29:16,085 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,085 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,176 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:16,176 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(10), np.int64(0)))
2025-04-11 17:29:16,185 [INFO] Final candidates: []
2025-04-11 17:29:16,185 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,194 [INFO] Final candidates: []
2025-04-11 17:29:16,194 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,194 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,338 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:16,338 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:16,347 [INFO] Final candidates: []
2025-04-11 17:29:16,347 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,356 [INFO] Final candidates: []
2025-04-11 17:29:16,356 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,356 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,480 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:16,480 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:29:16,489 [INFO] Final candidates: []
2025-04-11 17:29:16,489 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,498 [INFO] Final candidates: []
2025-04-11 17:29:16,498 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,498 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,590 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:16,590 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(5), np.int64(8)))
2025-04-11 17:29:16,599 [INFO] Final candidates: []
2025-04-11 17:29:16,599 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,608 [INFO] Final candidates: []
2025-04-11 17:29:16,608 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,608 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,728 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:16,728 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(13), np.int64(1)))
2025-04-11 17:29:16,737 [INFO] Final candidates: []
2025-04-11 17:29:16,737 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,746 [INFO] Final candidates: []
2025-04-11 17:29:16,746 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,747 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,838 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:16,839 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(5), np.int64(9)))
2025-04-11 17:29:16,842 [DEBUG] board coords: [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)]
2025-04-11 17:29:16,842 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:29:16,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 9), (7, 9)]
2025-04-11 17:29:16,842 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)] triggers candidate.
2025-04-11 17:29:16,842 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 17:29:16,842 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:29:16,842 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 9), (10, 9)]
2025-04-11 17:29:16,842 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 17:29:16,848 [INFO] Final candidates: [(4, 9), (10, 9), (7, 9)]
2025-04-11 17:29:16,848 [INFO] Phase win: Collected 3unique candidate(s):[((10, 9), (7, 9)), ((4, 9), (7, 9)), ((4, 9), (10, 9))]
2025-04-11 17:29:16,848 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:29:16,857 [INFO] Final candidates: []
2025-04-11 17:29:16,857 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,858 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:16,938 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:16,938 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:16,947 [INFO] Final candidates: []
2025-04-11 17:29:16,947 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,956 [INFO] Final candidates: []
2025-04-11 17:29:16,956 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:16,956 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:17,138 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:17,138 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 17:29:17,147 [INFO] Final candidates: []
2025-04-11 17:29:17,148 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,156 [INFO] Final candidates: []
2025-04-11 17:29:17,156 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,156 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:17,279 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:17,280 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:17,289 [INFO] Final candidates: []
2025-04-11 17:29:17,289 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,298 [INFO] Final candidates: []
2025-04-11 17:29:17,298 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,298 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:17,334 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:17,334 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:17,337 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 17:29:17,337 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:29:17,337 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 9), (10, 9)]
2025-04-11 17:29:17,338 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 17:29:17,344 [INFO] Final candidates: [(7, 9), (10, 9)]
2025-04-11 17:29:17,344 [INFO] Phase win: Collected 1unique candidate(s):[((7, 9), (10, 9))]
2025-04-11 17:29:17,344 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:29:17,352 [INFO] Final candidates: []
2025-04-11 17:29:17,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,353 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:17,374 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:17,375 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(9), np.int64(10)))
2025-04-11 17:29:17,384 [INFO] Final candidates: []
2025-04-11 17:29:17,384 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,393 [INFO] Final candidates: []
2025-04-11 17:29:17,393 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,393 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:17,659 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:17,659 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:17,668 [INFO] Final candidates: []
2025-04-11 17:29:17,668 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,677 [INFO] Final candidates: []
2025-04-11 17:29:17,677 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,677 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:17,819 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:17,820 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(10), np.int64(9)))
2025-04-11 17:29:17,829 [INFO] Final candidates: []
2025-04-11 17:29:17,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,838 [INFO] Final candidates: []
2025-04-11 17:29:17,838 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,838 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:17,969 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:17,969 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(1)))
2025-04-11 17:29:17,979 [INFO] Final candidates: []
2025-04-11 17:29:17,979 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,987 [INFO] Final candidates: []
2025-04-11 17:29:17,987 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:17,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:18,147 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:18,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(11)))
2025-04-11 17:29:18,156 [INFO] Final candidates: []
2025-04-11 17:29:18,156 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,165 [INFO] Final candidates: []
2025-04-11 17:29:18,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:18,336 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:18,336 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(5), np.int64(8)))
2025-04-11 17:29:18,346 [INFO] Final candidates: []
2025-04-11 17:29:18,346 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,354 [INFO] Final candidates: []
2025-04-11 17:29:18,354 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,355 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:18,450 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:18,451 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:18,460 [INFO] Final candidates: []
2025-04-11 17:29:18,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,469 [INFO] Final candidates: []
2025-04-11 17:29:18,469 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,469 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:18,627 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:18,627 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(9)))
2025-04-11 17:29:18,630 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 17:29:18,630 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:18,630 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 9), (7, 9)]
2025-04-11 17:29:18,630 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 17:29:18,630 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 17:29:18,630 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:29:18,630 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 9), (11, 9)]
2025-04-11 17:29:18,630 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 17:29:18,636 [INFO] Final candidates: [(7, 9), (5, 9), (11, 9)]
2025-04-11 17:29:18,636 [INFO] Phase win: Collected 3unique candidate(s):[((7, 9), (5, 9)), ((5, 9), (11, 9)), ((7, 9), (11, 9))]
2025-04-11 17:29:18,636 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:29:18,645 [INFO] Final candidates: []
2025-04-11 17:29:18,645 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,645 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:18,741 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:18,741 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:18,751 [INFO] Final candidates: []
2025-04-11 17:29:18,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,760 [INFO] Final candidates: []
2025-04-11 17:29:18,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,760 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:18,818 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:18,818 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(7), np.int64(8)))
2025-04-11 17:29:18,828 [INFO] Final candidates: []
2025-04-11 17:29:18,828 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,837 [INFO] Final candidates: []
2025-04-11 17:29:18,837 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:18,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:19,071 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:19,072 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(0)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:19,081 [INFO] Final candidates: []
2025-04-11 17:29:19,081 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,090 [INFO] Final candidates: []
2025-04-11 17:29:19,090 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,090 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:19,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:19,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(3)))
2025-04-11 17:29:19,269 [INFO] Final candidates: []
2025-04-11 17:29:19,269 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,277 [INFO] Final candidates: []
2025-04-11 17:29:19,277 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,278 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:19,452 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:19,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:19,462 [INFO] Final candidates: []
2025-04-11 17:29:19,462 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,471 [INFO] Final candidates: []
2025-04-11 17:29:19,471 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:19,724 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:19,724 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(0)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:19,734 [INFO] Final candidates: []
2025-04-11 17:29:19,734 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,743 [INFO] Final candidates: []
2025-04-11 17:29:19,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,743 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:19,864 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:19,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(2)))
2025-04-11 17:29:19,873 [INFO] Final candidates: []
2025-04-11 17:29:19,873 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,882 [INFO] Final candidates: []
2025-04-11 17:29:19,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,882 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:19,965 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:19,965 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(11), np.int64(0)))
2025-04-11 17:29:19,975 [INFO] Final candidates: []
2025-04-11 17:29:19,975 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,984 [INFO] Final candidates: []
2025-04-11 17:29:19,984 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:19,984 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:20,129 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:20,129 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:20,139 [INFO] Final candidates: []
2025-04-11 17:29:20,139 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,148 [INFO] Final candidates: []
2025-04-11 17:29:20,148 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,148 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:20,287 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:20,287 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(1)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:20,297 [INFO] Final candidates: []
2025-04-11 17:29:20,297 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,305 [INFO] Final candidates: []
2025-04-11 17:29:20,306 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,306 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:20,496 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:20,496 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(9), np.int64(1)))
2025-04-11 17:29:20,506 [INFO] Final candidates: []
2025-04-11 17:29:20,506 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,514 [INFO] Final candidates: []
2025-04-11 17:29:20,515 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,515 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:20,705 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:20,705 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(7), np.int64(9)))
2025-04-11 17:29:20,714 [INFO] Final candidates: []
2025-04-11 17:29:20,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,723 [INFO] Final candidates: []
2025-04-11 17:29:20,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,724 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:20,864 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:20,864 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:20,874 [INFO] Final candidates: []
2025-04-11 17:29:20,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,882 [INFO] Final candidates: []
2025-04-11 17:29:20,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:20,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:21,056 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:21,056 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(12), np.int64(2)))
2025-04-11 17:29:21,066 [INFO] Final candidates: []
2025-04-11 17:29:21,066 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:21,075 [INFO] Final candidates: []
2025-04-11 17:29:21,075 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:21,076 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:21,334 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:21,334 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:29:21,334 [INFO] MCTS selected move: B13,A13
2025-04-11 17:29:21,334 [INFO] ===============NEW MOVE================
2025-04-11 17:29:34,355 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:29:34,364 [INFO] Final candidates: []
2025-04-11 17:29:34,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,374 [INFO] Final candidates: []
2025-04-11 17:29:34,374 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,374 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:29:34,374 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:29:34,374 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(13), np.int64(1)))
2025-04-11 17:29:34,383 [INFO] Final candidates: []
2025-04-11 17:29:34,383 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,392 [INFO] Final candidates: []
2025-04-11 17:29:34,392 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,392 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:29:34,392 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:34,555 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:34,555 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:29:34,566 [INFO] Final candidates: []
2025-04-11 17:29:34,566 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,575 [INFO] Final candidates: []
2025-04-11 17:29:34,575 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,575 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:34,667 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:34,667 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(10)))
2025-04-11 17:29:34,678 [INFO] Final candidates: []
2025-04-11 17:29:34,678 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,687 [INFO] Final candidates: []
2025-04-11 17:29:34,687 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,687 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:34,843 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:34,843 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(9), np.int64(8)))
2025-04-11 17:29:34,852 [INFO] Final candidates: []
2025-04-11 17:29:34,852 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,861 [INFO] Final candidates: []
2025-04-11 17:29:34,861 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:34,861 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:35,070 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:35,070 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(12), np.int64(3)))
2025-04-11 17:29:35,081 [INFO] Final candidates: []
2025-04-11 17:29:35,081 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,090 [INFO] Final candidates: []
2025-04-11 17:29:35,090 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,090 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:35,336 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:35,336 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(3), np.int64(8)))
2025-04-11 17:29:35,345 [INFO] Final candidates: []
2025-04-11 17:29:35,345 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,353 [INFO] Final candidates: []
2025-04-11 17:29:35,354 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,354 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:35,567 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:35,568 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:29:35,576 [INFO] Final candidates: []
2025-04-11 17:29:35,576 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,585 [INFO] Final candidates: []
2025-04-11 17:29:35,585 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,585 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:35,726 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:35,727 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:29:35,735 [INFO] Final candidates: []
2025-04-11 17:29:35,735 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,744 [INFO] Final candidates: []
2025-04-11 17:29:35,744 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,745 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:35,960 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:35,960 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(8), np.int64(8)))
2025-04-11 17:29:35,969 [INFO] Final candidates: []
2025-04-11 17:29:35,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,977 [INFO] Final candidates: []
2025-04-11 17:29:35,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:35,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,118 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:36,118 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:36,128 [INFO] Final candidates: []
2025-04-11 17:29:36,128 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,137 [INFO] Final candidates: []
2025-04-11 17:29:36,137 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,137 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,233 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:36,233 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:36,242 [INFO] Final candidates: []
2025-04-11 17:29:36,242 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,251 [INFO] Final candidates: []
2025-04-11 17:29:36,251 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,251 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,388 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:36,388 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:36,397 [INFO] Final candidates: []
2025-04-11 17:29:36,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,406 [INFO] Final candidates: []
2025-04-11 17:29:36,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,407 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,453 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:36,453 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(5), np.int64(8)))
2025-04-11 17:29:36,462 [INFO] Final candidates: []
2025-04-11 17:29:36,462 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,471 [INFO] Final candidates: []
2025-04-11 17:29:36,471 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,471 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,498 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:36,498 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(13), np.int64(1)))
2025-04-11 17:29:36,507 [INFO] Final candidates: []
2025-04-11 17:29:36,507 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,516 [INFO] Final candidates: []
2025-04-11 17:29:36,516 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,516 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,647 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:36,647 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(7), np.int64(10)))
2025-04-11 17:29:36,656 [INFO] Final candidates: []
2025-04-11 17:29:36,656 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,665 [INFO] Final candidates: []
2025-04-11 17:29:36,665 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,773 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:36,773 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(8), np.int64(8)))
2025-04-11 17:29:36,782 [INFO] Final candidates: []
2025-04-11 17:29:36,782 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,791 [INFO] Final candidates: []
2025-04-11 17:29:36,791 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,791 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:36,950 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:36,950 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(7), np.int64(9)))
2025-04-11 17:29:36,960 [INFO] Final candidates: []
2025-04-11 17:29:36,960 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,969 [INFO] Final candidates: []
2025-04-11 17:29:36,969 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:36,969 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:37,100 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:37,101 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(0)), (np.int64(13), np.int64(0)))
2025-04-11 17:29:37,109 [INFO] Final candidates: []
2025-04-11 17:29:37,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,118 [INFO] Final candidates: []
2025-04-11 17:29:37,118 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:37,368 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:37,368 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(4), np.int64(7)))
2025-04-11 17:29:37,377 [INFO] Final candidates: []
2025-04-11 17:29:37,377 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,386 [INFO] Final candidates: []
2025-04-11 17:29:37,386 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,386 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:37,613 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:37,614 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(14), np.int64(0)))
2025-04-11 17:29:37,623 [INFO] Final candidates: []
2025-04-11 17:29:37,623 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,632 [INFO] Final candidates: []
2025-04-11 17:29:37,632 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,632 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:37,795 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:37,796 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(1), np.int64(9)))
2025-04-11 17:29:37,804 [INFO] Final candidates: []
2025-04-11 17:29:37,804 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,813 [INFO] Final candidates: []
2025-04-11 17:29:37,813 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:37,970 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:37,970 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(1)), (np.int64(4), np.int64(7)))
2025-04-11 17:29:37,979 [INFO] Final candidates: []
2025-04-11 17:29:37,979 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,988 [INFO] Final candidates: []
2025-04-11 17:29:37,988 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:37,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:38,080 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:38,080 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(4), np.int64(10)))
2025-04-11 17:29:38,089 [INFO] Final candidates: []
2025-04-11 17:29:38,089 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,098 [INFO] Final candidates: []
2025-04-11 17:29:38,098 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,098 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:38,334 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:38,334 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(12), np.int64(3)))
2025-04-11 17:29:38,343 [INFO] Final candidates: []
2025-04-11 17:29:38,343 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,352 [INFO] Final candidates: []
2025-04-11 17:29:38,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:38,412 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:38,412 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:38,421 [INFO] Final candidates: []
2025-04-11 17:29:38,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,430 [INFO] Final candidates: []
2025-04-11 17:29:38,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:38,465 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:38,465 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(7)))
2025-04-11 17:29:38,474 [INFO] Final candidates: []
2025-04-11 17:29:38,474 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,483 [INFO] Final candidates: []
2025-04-11 17:29:38,483 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,483 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:38,709 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:38,709 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:38,718 [INFO] Final candidates: []
2025-04-11 17:29:38,718 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,727 [INFO] Final candidates: []
2025-04-11 17:29:38,727 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,728 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:38,747 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:38,748 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:38,756 [INFO] Final candidates: []
2025-04-11 17:29:38,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,765 [INFO] Final candidates: []
2025-04-11 17:29:38,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,765 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:38,911 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:38,911 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(2), np.int64(9)))
2025-04-11 17:29:38,922 [INFO] Final candidates: []
2025-04-11 17:29:38,922 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,930 [INFO] Final candidates: []
2025-04-11 17:29:38,930 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:38,931 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,069 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:39,069 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(11), np.int64(2)))
2025-04-11 17:29:39,077 [INFO] Final candidates: []
2025-04-11 17:29:39,078 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,087 [INFO] Final candidates: []
2025-04-11 17:29:39,087 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,087 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,142 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:39,142 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(6), np.int64(8)))
2025-04-11 17:29:39,151 [INFO] Final candidates: []
2025-04-11 17:29:39,151 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,160 [INFO] Final candidates: []
2025-04-11 17:29:39,160 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,160 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,249 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:39,249 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(10), np.int64(9)))
2025-04-11 17:29:39,258 [INFO] Final candidates: []
2025-04-11 17:29:39,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,267 [INFO] Final candidates: []
2025-04-11 17:29:39,267 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,267 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,383 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:39,384 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(0)), (np.int64(4), np.int64(11)))
2025-04-11 17:29:39,393 [INFO] Final candidates: []
2025-04-11 17:29:39,393 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,402 [INFO] Final candidates: []
2025-04-11 17:29:39,403 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,403 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,450 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:39,450 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(4), np.int64(10)))
2025-04-11 17:29:39,460 [INFO] Final candidates: []
2025-04-11 17:29:39,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,470 [INFO] Final candidates: []
2025-04-11 17:29:39,470 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,470 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,499 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:39,499 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(14), np.int64(0)))
2025-04-11 17:29:39,508 [INFO] Final candidates: []
2025-04-11 17:29:39,508 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,517 [INFO] Final candidates: []
2025-04-11 17:29:39,517 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,517 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,564 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:39,565 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(0)), (np.int64(13), np.int64(1)))
2025-04-11 17:29:39,573 [INFO] Final candidates: []
2025-04-11 17:29:39,573 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,583 [INFO] Final candidates: []
2025-04-11 17:29:39,583 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,583 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,768 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:39,768 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(11), np.int64(0)))
2025-04-11 17:29:39,779 [INFO] Final candidates: []
2025-04-11 17:29:39,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,788 [INFO] Final candidates: []
2025-04-11 17:29:39,788 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,836 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:39,836 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:29:39,845 [INFO] Final candidates: []
2025-04-11 17:29:39,845 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,854 [INFO] Final candidates: []
2025-04-11 17:29:39,854 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,855 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:39,892 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:39,892 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(7)), (np.int64(3), np.int64(11)))
2025-04-11 17:29:39,901 [INFO] Final candidates: []
2025-04-11 17:29:39,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,911 [INFO] Final candidates: []
2025-04-11 17:29:39,911 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:39,911 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:40,075 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:40,075 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:40,085 [INFO] Final candidates: []
2025-04-11 17:29:40,085 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,095 [INFO] Final candidates: []
2025-04-11 17:29:40,096 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,096 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:40,268 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:40,269 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(13), np.int64(0)))
2025-04-11 17:29:40,278 [INFO] Final candidates: []
2025-04-11 17:29:40,279 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,288 [INFO] Final candidates: []
2025-04-11 17:29:40,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,288 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:40,335 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:40,335 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:40,344 [INFO] Final candidates: []
2025-04-11 17:29:40,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,353 [INFO] Final candidates: []
2025-04-11 17:29:40,353 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,353 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:40,426 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:40,427 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(0)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:40,436 [INFO] Final candidates: []
2025-04-11 17:29:40,436 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,446 [INFO] Final candidates: []
2025-04-11 17:29:40,446 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,446 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:40,619 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:40,619 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(13), np.int64(1)))
2025-04-11 17:29:40,628 [INFO] Final candidates: []
2025-04-11 17:29:40,628 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,637 [INFO] Final candidates: []
2025-04-11 17:29:40,637 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,638 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:40,834 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:40,835 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(10), np.int64(9)))
2025-04-11 17:29:40,843 [INFO] Final candidates: []
2025-04-11 17:29:40,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,852 [INFO] Final candidates: []
2025-04-11 17:29:40,852 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:40,924 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:40,924 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(4), np.int64(8)))
2025-04-11 17:29:40,933 [INFO] Final candidates: []
2025-04-11 17:29:40,934 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,944 [INFO] Final candidates: []
2025-04-11 17:29:40,944 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:40,945 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,017 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:41,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(5), np.int64(9)))
2025-04-11 17:29:41,026 [INFO] Final candidates: []
2025-04-11 17:29:41,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,035 [INFO] Final candidates: []
2025-04-11 17:29:41,035 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,035 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,215 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:41,216 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(8), np.int64(8)))
2025-04-11 17:29:41,225 [INFO] Final candidates: []
2025-04-11 17:29:41,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,235 [INFO] Final candidates: []
2025-04-11 17:29:41,235 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,235 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,273 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:41,273 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(3), np.int64(8)))
2025-04-11 17:29:41,282 [INFO] Final candidates: []
2025-04-11 17:29:41,282 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,291 [INFO] Final candidates: []
2025-04-11 17:29:41,291 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,291 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,362 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:41,362 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:41,371 [INFO] Final candidates: []
2025-04-11 17:29:41,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,379 [INFO] Final candidates: []
2025-04-11 17:29:41,379 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,380 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,547 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:41,547 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(0)), (np.int64(12), np.int64(2)))
2025-04-11 17:29:41,556 [INFO] Final candidates: []
2025-04-11 17:29:41,556 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,565 [INFO] Final candidates: []
2025-04-11 17:29:41,565 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,565 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:29:41,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,607 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:41,608 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(7), np.int64(9)))
2025-04-11 17:29:41,616 [INFO] Final candidates: []
2025-04-11 17:29:41,616 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,625 [INFO] Final candidates: []
2025-04-11 17:29:41,625 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,626 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,655 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:41,656 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(3)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:41,664 [INFO] Final candidates: []
2025-04-11 17:29:41,664 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,673 [INFO] Final candidates: []
2025-04-11 17:29:41,673 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:41,673 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:41,982 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:41,982 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(14), np.int64(1)), (np.int64(2), np.int64(8)))
2025-04-11 17:29:41,991 [INFO] Final candidates: []
2025-04-11 17:29:41,991 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,000 [INFO] Final candidates: []
2025-04-11 17:29:42,000 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,000 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:42,073 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(10)), (np.int64(2), np.int64(9)))
2025-04-11 17:29:42,082 [INFO] Final candidates: []
2025-04-11 17:29:42,082 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,091 [INFO] Final candidates: []
2025-04-11 17:29:42,091 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,091 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,155 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:42,155 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(11), np.int64(9)))
2025-04-11 17:29:42,164 [INFO] Final candidates: []
2025-04-11 17:29:42,164 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,173 [INFO] Final candidates: []
2025-04-11 17:29:42,173 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,173 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,322 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:42,322 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(2), np.int64(9)))
2025-04-11 17:29:42,331 [INFO] Final candidates: []
2025-04-11 17:29:42,331 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,340 [INFO] Final candidates: []
2025-04-11 17:29:42,340 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,340 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:42,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(2), np.int64(8)))
2025-04-11 17:29:42,537 [INFO] Final candidates: []
2025-04-11 17:29:42,538 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,546 [INFO] Final candidates: []
2025-04-11 17:29:42,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,547 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,675 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:42,675 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(12), np.int64(2)))
2025-04-11 17:29:42,684 [INFO] Final candidates: []
2025-04-11 17:29:42,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,695 [INFO] Final candidates: []
2025-04-11 17:29:42,695 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,749 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:42,749 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(4), np.int64(7)))
2025-04-11 17:29:42,758 [INFO] Final candidates: []
2025-04-11 17:29:42,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,767 [INFO] Final candidates: []
2025-04-11 17:29:42,767 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,767 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,892 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:42,892 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(11), np.int64(0)))
2025-04-11 17:29:42,901 [INFO] Final candidates: []
2025-04-11 17:29:42,901 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,910 [INFO] Final candidates: []
2025-04-11 17:29:42,910 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,911 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:42,966 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:42,967 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(2)), (np.int64(3), np.int64(11)))
2025-04-11 17:29:42,975 [INFO] Final candidates: []
2025-04-11 17:29:42,975 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,984 [INFO] Final candidates: []
2025-04-11 17:29:42,984 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:42,985 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,103 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:43,103 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(9)))
2025-04-11 17:29:43,112 [INFO] Final candidates: []
2025-04-11 17:29:43,112 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,121 [INFO] Final candidates: []
2025-04-11 17:29:43,121 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,121 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,235 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:43,235 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(10), np.int64(8)))
2025-04-11 17:29:43,245 [INFO] Final candidates: []
2025-04-11 17:29:43,246 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,255 [INFO] Final candidates: []
2025-04-11 17:29:43,255 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,256 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,404 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:43,405 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(5), np.int64(9)))
2025-04-11 17:29:43,413 [INFO] Final candidates: []
2025-04-11 17:29:43,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,422 [INFO] Final candidates: []
2025-04-11 17:29:43,422 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,422 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,539 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:43,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(7)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:43,549 [INFO] Final candidates: []
2025-04-11 17:29:43,549 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,559 [INFO] Final candidates: []
2025-04-11 17:29:43,560 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,560 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,723 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:43,723 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(2), np.int64(10)))
2025-04-11 17:29:43,732 [INFO] Final candidates: []
2025-04-11 17:29:43,732 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,741 [INFO] Final candidates: []
2025-04-11 17:29:43,741 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,741 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,858 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:43,858 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(4), np.int64(7)))
2025-04-11 17:29:43,867 [INFO] Final candidates: []
2025-04-11 17:29:43,867 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,876 [INFO] Final candidates: []
2025-04-11 17:29:43,876 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,876 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,966 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:43,966 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(2), np.int64(9)))
2025-04-11 17:29:43,975 [INFO] Final candidates: []
2025-04-11 17:29:43,975 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,984 [INFO] Final candidates: []
2025-04-11 17:29:43,984 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:43,985 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:43,994 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:43,994 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:44,003 [INFO] Final candidates: []
2025-04-11 17:29:44,003 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,012 [INFO] Final candidates: []
2025-04-11 17:29:44,012 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,012 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,061 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:44,062 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(0)), (np.int64(7), np.int64(8)))
2025-04-11 17:29:44,070 [INFO] Final candidates: []
2025-04-11 17:29:44,070 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,079 [INFO] Final candidates: []
2025-04-11 17:29:44,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,080 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,277 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:44,277 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(6), np.int64(8)))
2025-04-11 17:29:44,286 [INFO] Final candidates: []
2025-04-11 17:29:44,286 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,295 [INFO] Final candidates: []
2025-04-11 17:29:44,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,368 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:44,368 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(8), np.int64(10)))
2025-04-11 17:29:44,377 [INFO] Final candidates: []
2025-04-11 17:29:44,377 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,386 [INFO] Final candidates: []
2025-04-11 17:29:44,386 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,386 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,401 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:44,402 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(2)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:44,410 [INFO] Final candidates: []
2025-04-11 17:29:44,411 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,419 [INFO] Final candidates: []
2025-04-11 17:29:44,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,420 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,546 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:44,546 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(6), np.int64(7)))
2025-04-11 17:29:44,555 [INFO] Final candidates: []
2025-04-11 17:29:44,555 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,564 [INFO] Final candidates: []
2025-04-11 17:29:44,564 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,565 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:44,671 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(11), np.int64(0)))
2025-04-11 17:29:44,680 [INFO] Final candidates: []
2025-04-11 17:29:44,680 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,689 [INFO] Final candidates: []
2025-04-11 17:29:44,689 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,689 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,749 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:44,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(10), np.int64(10)))
2025-04-11 17:29:44,759 [INFO] Final candidates: []
2025-04-11 17:29:44,759 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,768 [INFO] Final candidates: []
2025-04-11 17:29:44,768 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:44,973 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:44,974 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(0)), (np.int64(2), np.int64(10)))
2025-04-11 17:29:44,983 [INFO] Final candidates: []
2025-04-11 17:29:44,983 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,992 [INFO] Final candidates: []
2025-04-11 17:29:44,992 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:44,992 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,017 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:45,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(7), np.int64(10)))
2025-04-11 17:29:45,026 [INFO] Final candidates: []
2025-04-11 17:29:45,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,035 [INFO] Final candidates: []
2025-04-11 17:29:45,035 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,035 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,153 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:45,153 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(3), np.int64(11)))
2025-04-11 17:29:45,162 [INFO] Final candidates: []
2025-04-11 17:29:45,162 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,171 [INFO] Final candidates: []
2025-04-11 17:29:45,171 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,171 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,284 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:45,284 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(9)))
2025-04-11 17:29:45,293 [INFO] Final candidates: []
2025-04-11 17:29:45,293 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,302 [INFO] Final candidates: []
2025-04-11 17:29:45,302 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,319 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:45,319 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(13), np.int64(0)))
2025-04-11 17:29:45,328 [INFO] Final candidates: []
2025-04-11 17:29:45,328 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,337 [INFO] Final candidates: []
2025-04-11 17:29:45,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,402 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:45,402 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:45,411 [INFO] Final candidates: []
2025-04-11 17:29:45,411 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,420 [INFO] Final candidates: []
2025-04-11 17:29:45,420 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,420 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,539 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:45,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(4), np.int64(11)))
2025-04-11 17:29:45,548 [INFO] Final candidates: []
2025-04-11 17:29:45,548 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,557 [INFO] Final candidates: []
2025-04-11 17:29:45,557 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,557 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,643 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:45,643 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(10), np.int64(2)))
2025-04-11 17:29:45,653 [INFO] Final candidates: []
2025-04-11 17:29:45,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,662 [INFO] Final candidates: []
2025-04-11 17:29:45,662 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,742 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:45,742 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(11), np.int64(3)))
2025-04-11 17:29:45,751 [INFO] Final candidates: []
2025-04-11 17:29:45,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,760 [INFO] Final candidates: []
2025-04-11 17:29:45,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,760 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,789 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:45,789 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(3), np.int64(8)))
2025-04-11 17:29:45,798 [INFO] Final candidates: []
2025-04-11 17:29:45,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,806 [INFO] Final candidates: []
2025-04-11 17:29:45,806 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,807 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:45,939 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:45,939 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(7)), (np.int64(13), np.int64(0)))
2025-04-11 17:29:45,948 [INFO] Final candidates: []
2025-04-11 17:29:45,948 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,957 [INFO] Final candidates: []
2025-04-11 17:29:45,957 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:45,958 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:46,101 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:46,101 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(3)), (np.int64(4), np.int64(7)))
2025-04-11 17:29:46,110 [INFO] Final candidates: []
2025-04-11 17:29:46,110 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,119 [INFO] Final candidates: []
2025-04-11 17:29:46,119 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,119 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:46,256 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:46,257 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(8), np.int64(9)))
2025-04-11 17:29:46,266 [INFO] Final candidates: []
2025-04-11 17:29:46,266 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,275 [INFO] Final candidates: []
2025-04-11 17:29:46,275 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,275 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:46,401 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:46,401 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 17:29:46,410 [INFO] Final candidates: []
2025-04-11 17:29:46,410 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,419 [INFO] Final candidates: []
2025-04-11 17:29:46,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,419 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:46,462 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:46,462 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(13), np.int64(0)))
2025-04-11 17:29:46,471 [INFO] Final candidates: []
2025-04-11 17:29:46,471 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,480 [INFO] Final candidates: []
2025-04-11 17:29:46,480 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,481 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:46,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:46,699 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(9), np.int64(1)))
2025-04-11 17:29:46,708 [INFO] Final candidates: []
2025-04-11 17:29:46,708 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,717 [INFO] Final candidates: []
2025-04-11 17:29:46,717 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:46,720 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:46,720 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(7)), (np.int64(3), np.int64(10)))
2025-04-11 17:29:46,729 [INFO] Final candidates: []
2025-04-11 17:29:46,729 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,738 [INFO] Final candidates: []
2025-04-11 17:29:46,738 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,738 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:46,889 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:46,889 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(2)), (np.int64(4), np.int64(11)))
2025-04-11 17:29:46,898 [INFO] Final candidates: []
2025-04-11 17:29:46,898 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,907 [INFO] Final candidates: []
2025-04-11 17:29:46,907 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:46,908 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:47,091 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:29:47,091 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(2), np.int64(10)))
2025-04-11 17:29:47,100 [INFO] Final candidates: []
2025-04-11 17:29:47,100 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,109 [INFO] Final candidates: []
2025-04-11 17:29:47,109 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,109 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:47,118 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:47,118 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(5), np.int64(9)))
2025-04-11 17:29:47,127 [INFO] Final candidates: []
2025-04-11 17:29:47,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,135 [INFO] Final candidates: []
2025-04-11 17:29:47,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,136 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:47,146 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:47,147 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:29:47,155 [INFO] Final candidates: []
2025-04-11 17:29:47,155 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,164 [INFO] Final candidates: []
2025-04-11 17:29:47,164 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,164 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:47,203 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:47,203 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(14), np.int64(0)))
2025-04-11 17:29:47,212 [INFO] Final candidates: []
2025-04-11 17:29:47,212 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,221 [INFO] Final candidates: []
2025-04-11 17:29:47,221 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,221 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:47,357 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:47,358 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(13), np.int64(2)), (np.int64(10), np.int64(1)))
2025-04-11 17:29:47,367 [INFO] Final candidates: []
2025-04-11 17:29:47,367 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,376 [INFO] Final candidates: []
2025-04-11 17:29:47,376 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:47,376 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:47,529 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:47,529 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:29:47,529 [INFO] MCTS selected move: H4,B14
2025-04-11 17:29:47,529 [INFO] ===============NEW MOVE================
2025-04-11 17:29:52,609 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:29:52,619 [INFO] Final candidates: []
2025-04-11 17:29:52,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:29:52,623 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:29:52,623 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,623 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:29:52,623 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:29:52,623 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 17:29:52,623 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:29:52,623 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (10, 9)]
2025-04-11 17:29:52,623 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 17:29:52,624 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:29:52,624 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,624 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:29:52,624 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:29:52,625 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:29:52,625 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:29:52,625 [DEBUG] board coords: [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 17:29:52,625 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:29:52,625 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (10, 9)]
2025-04-11 17:29:52,625 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 17:29:52,632 [INFO] Final candidates: [(10, 9), (2, 9), (8, 9)]
2025-04-11 17:29:52,632 [INFO] Phase defense: Collected 3unique candidate(s):[((10, 9), (2, 9)), ((10, 9), (8, 9)), ((2, 9), (8, 9))]
2025-04-11 17:29:52,632 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:29:52,632 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:29:52,632 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 9), (8, 9))
2025-04-11 17:29:52,635 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:29:52,635 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,635 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:29:52,636 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:29:52,636 [DEBUG] board coords: [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 17:29:52,636 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:29:52,636 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 17:29:52,636 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=6, window [2 2 2 2 0 0] with coords [(7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 17:29:52,637 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:29:52,637 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,637 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:29:52,637 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:29:52,637 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)]
2025-04-11 17:29:52,637 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:29:52,637 [DEBUG] check_window_intermediate_custom: empty_cells=[(11, 9), (12, 9)]
2025-04-11 17:29:52,637 [DEBUG] check_window_intermediate_custom (only one inserted(11, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 9)] triggers candidate.
2025-04-11 17:29:52,644 [INFO] Final candidates: [(2, 9), (11, 9)]
2025-04-11 17:29:52,644 [INFO] Phase win: Collected 1unique candidate(s):[((2, 9), (11, 9))]
2025-04-11 17:29:52,644 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:29:52,653 [INFO] Final candidates: []
2025-04-11 17:29:52,653 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:52,654 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:29:52,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,654 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,654 [DEBUG] Tree_policy iteration 1: Expanding move ((2, 9), (8, 9))
2025-04-11 17:29:52,659 [DEBUG] board coords: [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9)]
2025-04-11 17:29:52,659 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,659 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 9), (1, 9)]
2025-04-11 17:29:52,659 [DEBUG] check_window_intermediate_custom (only one inserted(1, 9)): For L=6, window [0 0 2 2 2 2] with coords [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9)] triggers candidate.
2025-04-11 17:29:52,659 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 17:29:52,659 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:29:52,659 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (11, 9)]
2025-04-11 17:29:52,659 [DEBUG] check_window_intermediate_custom (only one inserted(10, 9)): For L=6, window [2 2 2 2 0 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 17:29:52,660 [DEBUG] board coords: [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:29:52,660 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,660 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 9), (1, 9)]
2025-04-11 17:29:52,660 [DEBUG] check_window_intermediate_custom (only one inserted(1, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:29:52,660 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 17:29:52,660 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:29:52,660 [DEBUG] check_window_intermediate_custom: empty_cells=[(10, 9), (11, 9)]
2025-04-11 17:29:52,660 [DEBUG] check_window_intermediate_custom (only one inserted(10, 9)): For L=7, window [2 2 2 2 2 0 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 17:29:52,666 [INFO] Final candidates: [(10, 9), (1, 9)]
2025-04-11 17:29:52,666 [INFO] Phase win: Collected 1unique candidate(s):[((10, 9), (1, 9))]
2025-04-11 17:29:52,666 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:29:52,674 [INFO] Final candidates: []
2025-04-11 17:29:52,674 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:52,675 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,675 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,675 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 9), (2, 9))
2025-04-11 17:29:52,678 [DEBUG] board coords: [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9)]
2025-04-11 17:29:52,678 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,678 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 9), (1, 9)]
2025-04-11 17:29:52,678 [DEBUG] check_window_intermediate_custom (only one inserted(1, 9)): For L=6, window [0 0 2 2 2 2] with coords [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9)] triggers candidate.
2025-04-11 17:29:52,678 [DEBUG] board coords: [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 17:29:52,678 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:29:52,678 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (11, 9)]
2025-04-11 17:29:52,678 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 17:29:52,679 [DEBUG] board coords: [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:29:52,679 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:29:52,679 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 9), (1, 9)]
2025-04-11 17:29:52,680 [DEBUG] check_window_intermediate_custom (only one inserted(1, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(0, 9), (1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:29:52,680 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)]
2025-04-11 17:29:52,680 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:29:52,680 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (11, 9)]
2025-04-11 17:29:52,680 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 0 2 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 9)] triggers candidate.
2025-04-11 17:29:52,684 [INFO] Final candidates: [(8, 9), (11, 9), (1, 9)]
2025-04-11 17:29:52,684 [INFO] Phase win: Collected 3unique candidate(s):[((11, 9), (1, 9)), ((8, 9), (1, 9)), ((8, 9), (11, 9))]
2025-04-11 17:29:52,684 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:29:52,693 [INFO] Final candidates: []
2025-04-11 17:29:52,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:29:52,693 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,693 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,693 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,693 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,693 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,693 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,693 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,693 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,694 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,694 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,694 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,694 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,694 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,694 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,694 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,695 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,695 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,695 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,695 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,695 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,695 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,695 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,695 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,695 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,695 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,695 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,695 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,695 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,695 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,695 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,696 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,696 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,696 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,696 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,696 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,696 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,696 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,696 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,697 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,697 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,697 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,697 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,698 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,698 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,698 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,698 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,698 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,698 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,698 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,698 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,698 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,699 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,699 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,699 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,700 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,700 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:29:52,700 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:29:52,700 [INFO] Default policy: Starting random playout.
2025-04-11 17:29:52,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:29:52,700 [INFO] MCTS: Search finished. Best move selected with 17 visits.
2025-04-11 17:29:52,700 [INFO] MCTS (defense candidates) selected move: K11,K9
2025-04-11 17:30:01,824 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:30:01,833 [INFO] Final candidates: []
2025-04-11 17:30:01,833 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:01,843 [INFO] Final candidates: []
2025-04-11 17:30:01,843 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:01,843 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:30:01,843 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:30:01,843 [DEBUG] Tree_policy iteration 1: Expanding move (9, 13)
2025-04-11 17:30:01,854 [INFO] Final candidates: []
2025-04-11 17:30:01,854 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:01,867 [INFO] Final candidates: []
2025-04-11 17:30:01,867 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:01,867 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:30:01,867 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:02,122 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:02,123 [DEBUG] Tree_policy iteration 1: Expanding move (8, 6)
2025-04-11 17:30:02,132 [INFO] Final candidates: []
2025-04-11 17:30:02,132 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,141 [INFO] Final candidates: []
2025-04-11 17:30:02,141 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,142 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:02,294 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:02,294 [DEBUG] Tree_policy iteration 1: Expanding move (7, 9)
2025-04-11 17:30:02,303 [INFO] Final candidates: []
2025-04-11 17:30:02,303 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,313 [INFO] Final candidates: []
2025-04-11 17:30:02,313 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:02,378 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:02,378 [DEBUG] Tree_policy iteration 1: Expanding move (6, 7)
2025-04-11 17:30:02,388 [INFO] Final candidates: []
2025-04-11 17:30:02,388 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,397 [INFO] Final candidates: []
2025-04-11 17:30:02,397 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,397 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:02,630 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:02,630 [DEBUG] Tree_policy iteration 1: Expanding move (17, 1)
2025-04-11 17:30:02,640 [INFO] Final candidates: []
2025-04-11 17:30:02,640 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,649 [INFO] Final candidates: []
2025-04-11 17:30:02,649 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,649 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:02,674 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:02,675 [DEBUG] Tree_policy iteration 1: Expanding move (3, 17)
2025-04-11 17:30:02,684 [INFO] Final candidates: []
2025-04-11 17:30:02,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,695 [INFO] Final candidates: []
2025-04-11 17:30:02,695 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:02,871 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:02,872 [DEBUG] Tree_policy iteration 1: Expanding move (16, 11)
2025-04-11 17:30:02,881 [INFO] Final candidates: []
2025-04-11 17:30:02,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,890 [INFO] Final candidates: []
2025-04-11 17:30:02,891 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,891 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:02,921 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:02,921 [DEBUG] Tree_policy iteration 1: Expanding move (12, 9)
2025-04-11 17:30:02,931 [INFO] Final candidates: []
2025-04-11 17:30:02,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,942 [INFO] Final candidates: []
2025-04-11 17:30:02,942 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:02,942 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,148 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:03,148 [DEBUG] Tree_policy iteration 1: Expanding move (5, 15)
2025-04-11 17:30:03,157 [INFO] Final candidates: []
2025-04-11 17:30:03,158 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,167 [INFO] Final candidates: []
2025-04-11 17:30:03,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,167 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,187 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:03,187 [DEBUG] Tree_policy iteration 1: Expanding move (3, 3)
2025-04-11 17:30:03,197 [INFO] Final candidates: []
2025-04-11 17:30:03,197 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,206 [INFO] Final candidates: []
2025-04-11 17:30:03,206 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,206 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:03,259 [DEBUG] Tree_policy iteration 1: Expanding move (17, 17)
2025-04-11 17:30:03,269 [INFO] Final candidates: []
2025-04-11 17:30:03,269 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,280 [INFO] Final candidates: []
2025-04-11 17:30:03,280 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,280 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,374 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:03,374 [DEBUG] Tree_policy iteration 1: Expanding move (14, 18)
2025-04-11 17:30:03,384 [INFO] Final candidates: []
2025-04-11 17:30:03,384 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,393 [INFO] Final candidates: []
2025-04-11 17:30:03,393 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,393 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,432 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:03,432 [DEBUG] Tree_policy iteration 1: Expanding move (2, 11)
2025-04-11 17:30:03,442 [INFO] Final candidates: []
2025-04-11 17:30:03,442 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,451 [INFO] Final candidates: []
2025-04-11 17:30:03,451 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,451 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,643 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:03,643 [DEBUG] Tree_policy iteration 1: Expanding move (1, 7)
2025-04-11 17:30:03,652 [INFO] Final candidates: []
2025-04-11 17:30:03,652 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,662 [INFO] Final candidates: []
2025-04-11 17:30:03,662 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,739 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:03,740 [DEBUG] Tree_policy iteration 1: Expanding move (15, 14)
2025-04-11 17:30:03,750 [INFO] Final candidates: []
2025-04-11 17:30:03,751 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,761 [INFO] Final candidates: []
2025-04-11 17:30:03,761 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,783 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:03,783 [DEBUG] Tree_policy iteration 1: Expanding move (9, 17)
2025-04-11 17:30:03,793 [INFO] Final candidates: []
2025-04-11 17:30:03,793 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,802 [INFO] Final candidates: []
2025-04-11 17:30:03,802 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,802 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,868 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:03,869 [DEBUG] Tree_policy iteration 1: Expanding move (14, 12)
2025-04-11 17:30:03,878 [INFO] Final candidates: []
2025-04-11 17:30:03,878 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,888 [INFO] Final candidates: []
2025-04-11 17:30:03,888 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,888 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:03,967 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:03,967 [DEBUG] Tree_policy iteration 1: Expanding move (14, 1)
2025-04-11 17:30:03,978 [INFO] Final candidates: []
2025-04-11 17:30:03,978 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,987 [INFO] Final candidates: []
2025-04-11 17:30:03,987 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:03,987 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,050 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:04,050 [DEBUG] Tree_policy iteration 1: Expanding move (5, 7)
2025-04-11 17:30:04,060 [INFO] Final candidates: []
2025-04-11 17:30:04,060 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,069 [INFO] Final candidates: []
2025-04-11 17:30:04,070 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,070 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,168 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:04,168 [DEBUG] Tree_policy iteration 1: Expanding move (4, 8)
2025-04-11 17:30:04,178 [INFO] Final candidates: []
2025-04-11 17:30:04,178 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,187 [INFO] Final candidates: []
2025-04-11 17:30:04,187 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,297 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:04,297 [DEBUG] Tree_policy iteration 1: Expanding move (10, 11)
2025-04-11 17:30:04,308 [INFO] Final candidates: []
2025-04-11 17:30:04,308 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,317 [INFO] Final candidates: []
2025-04-11 17:30:04,317 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,317 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,448 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:04,448 [DEBUG] Tree_policy iteration 1: Expanding move (17, 15)
2025-04-11 17:30:04,457 [INFO] Final candidates: []
2025-04-11 17:30:04,458 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,467 [INFO] Final candidates: []
2025-04-11 17:30:04,467 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,467 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,483 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:04,483 [DEBUG] Tree_policy iteration 1: Expanding move (3, 10)
2025-04-11 17:30:04,492 [INFO] Final candidates: []
2025-04-11 17:30:04,492 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,502 [INFO] Final candidates: []
2025-04-11 17:30:04,502 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,527 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:04,527 [DEBUG] Tree_policy iteration 1: Expanding move (8, 5)
2025-04-11 17:30:04,536 [INFO] Final candidates: []
2025-04-11 17:30:04,537 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,546 [INFO] Final candidates: []
2025-04-11 17:30:04,546 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,546 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,726 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:04,726 [DEBUG] Tree_policy iteration 1: Expanding move (11, 7)
2025-04-11 17:30:04,735 [INFO] Final candidates: []
2025-04-11 17:30:04,735 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,744 [INFO] Final candidates: []
2025-04-11 17:30:04,744 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:04,745 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:04,896 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:05,065 [DEBUG] Tree_policy iteration 1: Expanding move (17, 8)
2025-04-11 17:30:05,075 [INFO] Final candidates: []
2025-04-11 17:30:05,075 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,086 [INFO] Final candidates: []
2025-04-11 17:30:05,086 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,086 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,159 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:05,159 [DEBUG] Tree_policy iteration 1: Expanding move (2, 6)
2025-04-11 17:30:05,169 [INFO] Final candidates: []
2025-04-11 17:30:05,169 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,179 [INFO] Final candidates: []
2025-04-11 17:30:05,179 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,179 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,230 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:05,230 [DEBUG] Tree_policy iteration 1: Expanding move (8, 7)
2025-04-11 17:30:05,239 [INFO] Final candidates: []
2025-04-11 17:30:05,239 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,252 [INFO] Final candidates: []
2025-04-11 17:30:05,252 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,252 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,333 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:05,333 [DEBUG] Tree_policy iteration 1: Expanding move (4, 6)
2025-04-11 17:30:05,343 [INFO] Final candidates: []
2025-04-11 17:30:05,343 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,352 [INFO] Final candidates: []
2025-04-11 17:30:05,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,391 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:05,392 [DEBUG] Tree_policy iteration 1: Expanding move (14, 15)
2025-04-11 17:30:05,401 [INFO] Final candidates: []
2025-04-11 17:30:05,401 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,410 [INFO] Final candidates: []
2025-04-11 17:30:05,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,410 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,445 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:05,446 [DEBUG] Tree_policy iteration 1: Expanding move (11, 13)
2025-04-11 17:30:05,455 [INFO] Final candidates: []
2025-04-11 17:30:05,455 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,464 [INFO] Final candidates: []
2025-04-11 17:30:05,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,464 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,478 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:05,478 [DEBUG] Tree_policy iteration 1: Expanding move (16, 3)
2025-04-11 17:30:05,488 [INFO] Final candidates: []
2025-04-11 17:30:05,488 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,497 [INFO] Final candidates: []
2025-04-11 17:30:05,497 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,497 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,519 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:05,519 [DEBUG] Tree_policy iteration 1: Expanding move (11, 14)
2025-04-11 17:30:05,528 [INFO] Final candidates: []
2025-04-11 17:30:05,528 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,538 [INFO] Final candidates: []
2025-04-11 17:30:05,538 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,563 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:05,563 [DEBUG] Tree_policy iteration 1: Expanding move (1, 11)
2025-04-11 17:30:05,572 [INFO] Final candidates: []
2025-04-11 17:30:05,572 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,582 [INFO] Final candidates: []
2025-04-11 17:30:05,582 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,582 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,656 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:05,656 [DEBUG] Tree_policy iteration 1: Expanding move (4, 17)
2025-04-11 17:30:05,666 [INFO] Final candidates: []
2025-04-11 17:30:05,666 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,675 [INFO] Final candidates: []
2025-04-11 17:30:05,675 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,675 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:05,736 [DEBUG] Tree_policy iteration 1: Expanding move (1, 17)
2025-04-11 17:30:05,747 [INFO] Final candidates: []
2025-04-11 17:30:05,747 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,756 [INFO] Final candidates: []
2025-04-11 17:30:05,757 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,757 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:05,955 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:05,955 [DEBUG] Tree_policy iteration 1: Expanding move (0, 18)
2025-04-11 17:30:05,969 [INFO] Final candidates: []
2025-04-11 17:30:05,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,979 [INFO] Final candidates: []
2025-04-11 17:30:05,979 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:05,979 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,124 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:06,124 [DEBUG] Tree_policy iteration 1: Expanding move (7, 13)
2025-04-11 17:30:06,133 [INFO] Final candidates: []
2025-04-11 17:30:06,133 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,143 [INFO] Final candidates: []
2025-04-11 17:30:06,143 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,143 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,290 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:06,290 [DEBUG] Tree_policy iteration 1: Expanding move (3, 2)
2025-04-11 17:30:06,300 [INFO] Final candidates: []
2025-04-11 17:30:06,300 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,310 [INFO] Final candidates: []
2025-04-11 17:30:06,310 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,310 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,390 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:06,390 [DEBUG] Tree_policy iteration 1: Expanding move (16, 15)
2025-04-11 17:30:06,399 [INFO] Final candidates: []
2025-04-11 17:30:06,399 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,409 [INFO] Final candidates: []
2025-04-11 17:30:06,409 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,417 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:06,417 [DEBUG] Tree_policy iteration 1: Expanding move (1, 5)
2025-04-11 17:30:06,427 [INFO] Final candidates: []
2025-04-11 17:30:06,427 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,436 [INFO] Final candidates: []
2025-04-11 17:30:06,436 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,436 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,475 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:06,475 [DEBUG] Tree_policy iteration 1: Expanding move (13, 11)
2025-04-11 17:30:06,485 [INFO] Final candidates: []
2025-04-11 17:30:06,485 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,495 [INFO] Final candidates: []
2025-04-11 17:30:06,496 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,496 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,553 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:06,554 [DEBUG] Tree_policy iteration 1: Expanding move (15, 17)
2025-04-11 17:30:06,564 [INFO] Final candidates: []
2025-04-11 17:30:06,564 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,574 [INFO] Final candidates: []
2025-04-11 17:30:06,574 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,575 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,582 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:06,582 [DEBUG] Tree_policy iteration 1: Expanding move (6, 3)
2025-04-11 17:30:06,593 [INFO] Final candidates: []
2025-04-11 17:30:06,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,602 [INFO] Final candidates: []
2025-04-11 17:30:06,602 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,603 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,660 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:06,660 [DEBUG] Tree_policy iteration 1: Expanding move (1, 18)
2025-04-11 17:30:06,669 [INFO] Final candidates: []
2025-04-11 17:30:06,669 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,679 [INFO] Final candidates: []
2025-04-11 17:30:06,679 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,679 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,735 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:06,735 [DEBUG] Tree_policy iteration 1: Expanding move (11, 4)
2025-04-11 17:30:06,745 [INFO] Final candidates: []
2025-04-11 17:30:06,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,754 [INFO] Final candidates: []
2025-04-11 17:30:06,754 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,755 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:06,787 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:06,787 [DEBUG] Tree_policy iteration 1: Expanding move (10, 9)
2025-04-11 17:30:06,798 [INFO] Final candidates: []
2025-04-11 17:30:06,798 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,808 [INFO] Final candidates: []
2025-04-11 17:30:06,808 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:06,808 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,031 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:07,031 [DEBUG] Tree_policy iteration 1: Expanding move (14, 9)
2025-04-11 17:30:07,041 [INFO] Final candidates: []
2025-04-11 17:30:07,041 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,050 [INFO] Final candidates: []
2025-04-11 17:30:07,050 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,050 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,216 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:07,216 [DEBUG] Tree_policy iteration 1: Expanding move (3, 13)
2025-04-11 17:30:07,226 [INFO] Final candidates: []
2025-04-11 17:30:07,226 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,235 [INFO] Final candidates: []
2025-04-11 17:30:07,235 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,235 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,345 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:07,346 [DEBUG] Tree_policy iteration 1: Expanding move (12, 13)
2025-04-11 17:30:07,355 [INFO] Final candidates: []
2025-04-11 17:30:07,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,364 [INFO] Final candidates: []
2025-04-11 17:30:07,364 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,364 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,422 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:07,422 [DEBUG] Tree_policy iteration 1: Expanding move (14, 14)
2025-04-11 17:30:07,431 [INFO] Final candidates: []
2025-04-11 17:30:07,431 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,440 [INFO] Final candidates: []
2025-04-11 17:30:07,440 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,441 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:30:07,441 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,502 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:07,502 [DEBUG] Tree_policy iteration 1: Expanding move (5, 17)
2025-04-11 17:30:07,511 [INFO] Final candidates: []
2025-04-11 17:30:07,511 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,521 [INFO] Final candidates: []
2025-04-11 17:30:07,521 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,521 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,556 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:07,557 [DEBUG] Tree_policy iteration 1: Expanding move (13, 6)
2025-04-11 17:30:07,568 [INFO] Final candidates: []
2025-04-11 17:30:07,569 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,579 [INFO] Final candidates: []
2025-04-11 17:30:07,579 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,580 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,766 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:07,766 [DEBUG] Tree_policy iteration 1: Expanding move (7, 18)
2025-04-11 17:30:07,775 [INFO] Final candidates: []
2025-04-11 17:30:07,775 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,784 [INFO] Final candidates: []
2025-04-11 17:30:07,784 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,784 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,805 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:07,806 [DEBUG] Tree_policy iteration 1: Expanding move (18, 7)
2025-04-11 17:30:07,815 [INFO] Final candidates: []
2025-04-11 17:30:07,815 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,824 [INFO] Final candidates: []
2025-04-11 17:30:07,824 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,824 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,934 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:07,934 [DEBUG] Tree_policy iteration 1: Expanding move (0, 6)
2025-04-11 17:30:07,943 [INFO] Final candidates: []
2025-04-11 17:30:07,943 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,953 [INFO] Final candidates: []
2025-04-11 17:30:07,953 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,953 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:07,961 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:07,961 [DEBUG] Tree_policy iteration 1: Expanding move (7, 0)
2025-04-11 17:30:07,970 [INFO] Final candidates: []
2025-04-11 17:30:07,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,980 [INFO] Final candidates: []
2025-04-11 17:30:07,980 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:07,980 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,069 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:08,069 [DEBUG] Tree_policy iteration 1: Expanding move (9, 8)
2025-04-11 17:30:08,079 [INFO] Final candidates: []
2025-04-11 17:30:08,079 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,088 [INFO] Final candidates: []
2025-04-11 17:30:08,088 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,089 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,264 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:08,264 [DEBUG] Tree_policy iteration 1: Expanding move (14, 3)
2025-04-11 17:30:08,275 [INFO] Final candidates: []
2025-04-11 17:30:08,275 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,285 [INFO] Final candidates: []
2025-04-11 17:30:08,285 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,285 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,293 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:08,293 [DEBUG] Tree_policy iteration 1: Expanding move (12, 1)
2025-04-11 17:30:08,303 [INFO] Final candidates: []
2025-04-11 17:30:08,303 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,312 [INFO] Final candidates: []
2025-04-11 17:30:08,312 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,329 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:08,329 [DEBUG] Tree_policy iteration 1: Expanding move (11, 15)
2025-04-11 17:30:08,339 [INFO] Final candidates: []
2025-04-11 17:30:08,339 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,348 [INFO] Final candidates: []
2025-04-11 17:30:08,348 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,348 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,485 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:08,485 [DEBUG] Tree_policy iteration 1: Expanding move (5, 4)
2025-04-11 17:30:08,495 [INFO] Final candidates: []
2025-04-11 17:30:08,495 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,504 [INFO] Final candidates: []
2025-04-11 17:30:08,504 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,504 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,545 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:08,545 [DEBUG] Tree_policy iteration 1: Expanding move (16, 18)
2025-04-11 17:30:08,554 [INFO] Final candidates: []
2025-04-11 17:30:08,554 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,566 [INFO] Final candidates: []
2025-04-11 17:30:08,566 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,566 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:08,699 [DEBUG] Tree_policy iteration 1: Expanding move (16, 13)
2025-04-11 17:30:08,710 [INFO] Final candidates: []
2025-04-11 17:30:08,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,720 [INFO] Final candidates: []
2025-04-11 17:30:08,720 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,720 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,761 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:08,761 [DEBUG] Tree_policy iteration 1: Expanding move (7, 3)
2025-04-11 17:30:08,770 [INFO] Final candidates: []
2025-04-11 17:30:08,770 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,779 [INFO] Final candidates: []
2025-04-11 17:30:08,779 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,868 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:08,869 [DEBUG] Tree_policy iteration 1: Expanding move (1, 0)
2025-04-11 17:30:08,878 [INFO] Final candidates: []
2025-04-11 17:30:08,878 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,890 [INFO] Final candidates: []
2025-04-11 17:30:08,890 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,890 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:08,951 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:08,952 [DEBUG] Tree_policy iteration 1: Expanding move (4, 12)
2025-04-11 17:30:08,961 [INFO] Final candidates: []
2025-04-11 17:30:08,961 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,970 [INFO] Final candidates: []
2025-04-11 17:30:08,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:08,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:09,113 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:09,113 [DEBUG] Tree_policy iteration 1: Expanding move (16, 10)
2025-04-11 17:30:09,123 [INFO] Final candidates: []
2025-04-11 17:30:09,123 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,132 [INFO] Final candidates: []
2025-04-11 17:30:09,132 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,132 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:09,222 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:09,222 [DEBUG] Tree_policy iteration 1: Expanding move (2, 7)
2025-04-11 17:30:09,232 [INFO] Final candidates: []
2025-04-11 17:30:09,232 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,241 [INFO] Final candidates: []
2025-04-11 17:30:09,241 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,242 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:09,281 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:09,282 [DEBUG] Tree_policy iteration 1: Expanding move (13, 10)
2025-04-11 17:30:09,291 [INFO] Final candidates: []
2025-04-11 17:30:09,291 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,300 [INFO] Final candidates: []
2025-04-11 17:30:09,300 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,300 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:09,470 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:09,470 [DEBUG] Tree_policy iteration 1: Expanding move (0, 10)
2025-04-11 17:30:09,479 [INFO] Final candidates: []
2025-04-11 17:30:09,479 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,489 [INFO] Final candidates: []
2025-04-11 17:30:09,489 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,489 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:09,634 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:09,635 [DEBUG] Tree_policy iteration 1: Expanding move (6, 18)
2025-04-11 17:30:09,644 [INFO] Final candidates: []
2025-04-11 17:30:09,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,653 [INFO] Final candidates: []
2025-04-11 17:30:09,653 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,654 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:09,711 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:09,711 [DEBUG] Tree_policy iteration 1: Expanding move (15, 9)
2025-04-11 17:30:09,720 [INFO] Final candidates: []
2025-04-11 17:30:09,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,730 [INFO] Final candidates: []
2025-04-11 17:30:09,730 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,730 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:09,813 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:09,813 [DEBUG] Tree_policy iteration 1: Expanding move (18, 1)
2025-04-11 17:30:09,822 [INFO] Final candidates: []
2025-04-11 17:30:09,822 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,832 [INFO] Final candidates: []
2025-04-11 17:30:09,832 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:09,832 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,017 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:10,017 [DEBUG] Tree_policy iteration 1: Expanding move (10, 6)
2025-04-11 17:30:10,026 [INFO] Final candidates: []
2025-04-11 17:30:10,026 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,036 [INFO] Final candidates: []
2025-04-11 17:30:10,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,070 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:10,070 [DEBUG] Tree_policy iteration 1: Expanding move (11, 16)
2025-04-11 17:30:10,080 [INFO] Final candidates: []
2025-04-11 17:30:10,080 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,089 [INFO] Final candidates: []
2025-04-11 17:30:10,089 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,089 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,192 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:10,192 [DEBUG] Tree_policy iteration 1: Expanding move (13, 14)
2025-04-11 17:30:10,201 [INFO] Final candidates: []
2025-04-11 17:30:10,201 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,210 [INFO] Final candidates: []
2025-04-11 17:30:10,210 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,210 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,284 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:10,284 [DEBUG] Tree_policy iteration 1: Expanding move (7, 17)
2025-04-11 17:30:10,294 [INFO] Final candidates: []
2025-04-11 17:30:10,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,303 [INFO] Final candidates: []
2025-04-11 17:30:10,303 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,303 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,488 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:10,489 [DEBUG] Tree_policy iteration 1: Expanding move (10, 18)
2025-04-11 17:30:10,498 [INFO] Final candidates: []
2025-04-11 17:30:10,498 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,507 [INFO] Final candidates: []
2025-04-11 17:30:10,507 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,508 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,611 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:10,611 [DEBUG] Tree_policy iteration 1: Expanding move (8, 18)
2025-04-11 17:30:10,621 [INFO] Final candidates: []
2025-04-11 17:30:10,621 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,630 [INFO] Final candidates: []
2025-04-11 17:30:10,630 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,630 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,703 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:10,703 [DEBUG] Tree_policy iteration 1: Expanding move (0, 9)
2025-04-11 17:30:10,713 [INFO] Final candidates: []
2025-04-11 17:30:10,713 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,722 [INFO] Final candidates: []
2025-04-11 17:30:10,722 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,722 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,773 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:10,773 [DEBUG] Tree_policy iteration 1: Expanding move (10, 2)
2025-04-11 17:30:10,783 [INFO] Final candidates: []
2025-04-11 17:30:10,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,792 [INFO] Final candidates: []
2025-04-11 17:30:10,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,792 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:10,855 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:10,855 [DEBUG] Tree_policy iteration 1: Expanding move (6, 11)
2025-04-11 17:30:10,864 [INFO] Final candidates: []
2025-04-11 17:30:10,864 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,873 [INFO] Final candidates: []
2025-04-11 17:30:10,873 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:10,874 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,000 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:11,000 [DEBUG] Tree_policy iteration 1: Expanding move (10, 5)
2025-04-11 17:30:11,011 [INFO] Final candidates: []
2025-04-11 17:30:11,011 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,021 [INFO] Final candidates: []
2025-04-11 17:30:11,021 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,021 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,155 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:11,155 [DEBUG] Tree_policy iteration 1: Expanding move (5, 10)
2025-04-11 17:30:11,164 [INFO] Final candidates: []
2025-04-11 17:30:11,164 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,174 [INFO] Final candidates: []
2025-04-11 17:30:11,174 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,174 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,247 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:11,247 [DEBUG] Tree_policy iteration 1: Expanding move (1, 13)
2025-04-11 17:30:11,256 [INFO] Final candidates: []
2025-04-11 17:30:11,256 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,265 [INFO] Final candidates: []
2025-04-11 17:30:11,265 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,266 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,268 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:11,268 [DEBUG] Tree_policy iteration 1: Expanding move (12, 11)
2025-04-11 17:30:11,277 [INFO] Final candidates: []
2025-04-11 17:30:11,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,287 [INFO] Final candidates: []
2025-04-11 17:30:11,287 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,287 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,644 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:11,645 [DEBUG] Tree_policy iteration 1: Expanding move (6, 13)
2025-04-11 17:30:11,655 [INFO] Final candidates: []
2025-04-11 17:30:11,655 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,664 [INFO] Final candidates: []
2025-04-11 17:30:11,664 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,664 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,747 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:11,747 [DEBUG] Tree_policy iteration 1: Expanding move (0, 3)
2025-04-11 17:30:11,757 [INFO] Final candidates: []
2025-04-11 17:30:11,757 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,766 [INFO] Final candidates: []
2025-04-11 17:30:11,766 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,837 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:11,837 [DEBUG] Tree_policy iteration 1: Expanding move (16, 16)
2025-04-11 17:30:11,847 [INFO] Final candidates: []
2025-04-11 17:30:11,847 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,856 [INFO] Final candidates: []
2025-04-11 17:30:11,856 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,857 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,889 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:11,889 [DEBUG] Tree_policy iteration 1: Expanding move (0, 11)
2025-04-11 17:30:11,899 [INFO] Final candidates: []
2025-04-11 17:30:11,899 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,908 [INFO] Final candidates: []
2025-04-11 17:30:11,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,908 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:11,932 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:11,933 [DEBUG] Tree_policy iteration 1: Expanding move (8, 13)
2025-04-11 17:30:11,944 [INFO] Final candidates: []
2025-04-11 17:30:11,944 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,954 [INFO] Final candidates: []
2025-04-11 17:30:11,954 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:11,954 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,030 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:12,030 [DEBUG] Tree_policy iteration 1: Expanding move (0, 7)
2025-04-11 17:30:12,039 [INFO] Final candidates: []
2025-04-11 17:30:12,039 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,049 [INFO] Final candidates: []
2025-04-11 17:30:12,049 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,049 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,204 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:12,205 [DEBUG] Tree_policy iteration 1: Expanding move (6, 6)
2025-04-11 17:30:12,214 [INFO] Final candidates: []
2025-04-11 17:30:12,214 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,223 [INFO] Final candidates: []
2025-04-11 17:30:12,223 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,223 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,278 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:12,278 [DEBUG] Tree_policy iteration 1: Expanding move (10, 7)
2025-04-11 17:30:12,287 [INFO] Final candidates: []
2025-04-11 17:30:12,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,296 [INFO] Final candidates: []
2025-04-11 17:30:12,296 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,297 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,390 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:12,390 [DEBUG] Tree_policy iteration 1: Expanding move (9, 7)
2025-04-11 17:30:12,400 [INFO] Final candidates: []
2025-04-11 17:30:12,400 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,409 [INFO] Final candidates: []
2025-04-11 17:30:12,409 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,409 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,501 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:12,501 [DEBUG] Tree_policy iteration 1: Expanding move (16, 1)
2025-04-11 17:30:12,512 [INFO] Final candidates: []
2025-04-11 17:30:12,512 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,522 [INFO] Final candidates: []
2025-04-11 17:30:12,522 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,522 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,617 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:12,618 [DEBUG] Tree_policy iteration 1: Expanding move (15, 12)
2025-04-11 17:30:12,627 [INFO] Final candidates: []
2025-04-11 17:30:12,627 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,636 [INFO] Final candidates: []
2025-04-11 17:30:12,636 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,636 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,664 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:12,664 [DEBUG] Tree_policy iteration 1: Expanding move (13, 0)
2025-04-11 17:30:12,674 [INFO] Final candidates: []
2025-04-11 17:30:12,674 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,684 [INFO] Final candidates: []
2025-04-11 17:30:12,684 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,684 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,717 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:12,717 [DEBUG] Tree_policy iteration 1: Expanding move (0, 16)
2025-04-11 17:30:12,727 [INFO] Final candidates: []
2025-04-11 17:30:12,727 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,736 [INFO] Final candidates: []
2025-04-11 17:30:12,736 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:12,736 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:12,839 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:12,839 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:30:12,839 [INFO] MCTS selected move: O10
2025-04-11 17:30:12,839 [INFO] ===============NEW MOVE================
2025-04-11 17:30:26,825 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:30:26,834 [INFO] Final candidates: []
2025-04-11 17:30:26,834 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:26,844 [INFO] Final candidates: []
2025-04-11 17:30:26,844 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:26,844 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:30:26,844 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:30:26,844 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:30:26,853 [INFO] Final candidates: []
2025-04-11 17:30:26,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:26,862 [INFO] Final candidates: []
2025-04-11 17:30:26,862 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:26,862 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:30:26,862 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:26,869 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:26,869 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:26,879 [INFO] Final candidates: []
2025-04-11 17:30:26,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:26,887 [INFO] Final candidates: []
2025-04-11 17:30:26,887 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:26,888 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:27,027 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:27,028 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:27,037 [INFO] Final candidates: []
2025-04-11 17:30:27,037 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,046 [INFO] Final candidates: []
2025-04-11 17:30:27,046 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,047 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:27,115 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:27,115 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(5), np.int64(8)))
2025-04-11 17:30:27,125 [INFO] Final candidates: []
2025-04-11 17:30:27,125 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,133 [INFO] Final candidates: []
2025-04-11 17:30:27,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:27,259 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:27,259 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:27,269 [INFO] Final candidates: []
2025-04-11 17:30:27,269 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,277 [INFO] Final candidates: []
2025-04-11 17:30:27,277 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,278 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:27,362 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:27,362 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:27,372 [INFO] Final candidates: []
2025-04-11 17:30:27,372 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,380 [INFO] Final candidates: []
2025-04-11 17:30:27,381 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:27,499 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:27,500 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(11), np.int64(9)))
2025-04-11 17:30:27,509 [INFO] Final candidates: []
2025-04-11 17:30:27,509 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,518 [INFO] Final candidates: []
2025-04-11 17:30:27,518 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,518 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:27,772 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:27,772 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(6), np.int64(8)))
2025-04-11 17:30:27,781 [INFO] Final candidates: []
2025-04-11 17:30:27,781 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,790 [INFO] Final candidates: []
2025-04-11 17:30:27,790 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:27,790 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:28,005 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:28,005 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 17:30:28,014 [INFO] Final candidates: []
2025-04-11 17:30:28,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,023 [INFO] Final candidates: []
2025-04-11 17:30:28,023 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,023 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:28,252 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:28,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(8), np.int64(12)))
2025-04-11 17:30:28,262 [INFO] Final candidates: []
2025-04-11 17:30:28,262 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,271 [INFO] Final candidates: []
2025-04-11 17:30:28,271 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,271 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:28,311 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:28,311 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(11), np.int64(9)))
2025-04-11 17:30:28,320 [INFO] Final candidates: []
2025-04-11 17:30:28,320 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,329 [INFO] Final candidates: []
2025-04-11 17:30:28,329 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:28,549 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:28,549 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:28,559 [INFO] Final candidates: []
2025-04-11 17:30:28,559 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,568 [INFO] Final candidates: []
2025-04-11 17:30:28,568 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,568 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:28,698 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:28,698 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(7)))
2025-04-11 17:30:28,708 [INFO] Final candidates: []
2025-04-11 17:30:28,708 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,716 [INFO] Final candidates: []
2025-04-11 17:30:28,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:28,977 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:28,977 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:28,986 [INFO] Final candidates: []
2025-04-11 17:30:28,987 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,995 [INFO] Final candidates: []
2025-04-11 17:30:28,995 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:28,995 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:29,111 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:29,111 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(9), np.int64(10)))
2025-04-11 17:30:29,121 [INFO] Final candidates: []
2025-04-11 17:30:29,121 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,129 [INFO] Final candidates: []
2025-04-11 17:30:29,129 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,130 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:29,149 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:29,149 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(13)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:29,158 [INFO] Final candidates: []
2025-04-11 17:30:29,158 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,167 [INFO] Final candidates: []
2025-04-11 17:30:29,167 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,168 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:29,245 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:29,245 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(9), np.int64(12)))
2025-04-11 17:30:29,255 [INFO] Final candidates: []
2025-04-11 17:30:29,255 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,263 [INFO] Final candidates: []
2025-04-11 17:30:29,263 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,264 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:29,558 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:29,558 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(10), np.int64(14)))
2025-04-11 17:30:29,567 [INFO] Final candidates: []
2025-04-11 17:30:29,567 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,576 [INFO] Final candidates: []
2025-04-11 17:30:29,576 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,576 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:29,635 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:29,635 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(10), np.int64(12)))
2025-04-11 17:30:29,644 [INFO] Final candidates: []
2025-04-11 17:30:29,644 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,653 [INFO] Final candidates: []
2025-04-11 17:30:29,653 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,653 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:29,838 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:29,839 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(14)))
2025-04-11 17:30:29,848 [INFO] Final candidates: []
2025-04-11 17:30:29,848 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,857 [INFO] Final candidates: []
2025-04-11 17:30:29,857 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,857 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:29,939 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:29,939 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(8), np.int64(13)))
2025-04-11 17:30:29,948 [INFO] Final candidates: []
2025-04-11 17:30:29,948 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,957 [INFO] Final candidates: []
2025-04-11 17:30:29,957 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:29,957 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:30,157 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:30,157 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(6), np.int64(7)))
2025-04-11 17:30:30,167 [INFO] Final candidates: []
2025-04-11 17:30:30,167 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,175 [INFO] Final candidates: []
2025-04-11 17:30:30,175 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,175 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:30,317 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:30,317 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(10), np.int64(14)))
2025-04-11 17:30:30,328 [INFO] Final candidates: []
2025-04-11 17:30:30,328 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,336 [INFO] Final candidates: []
2025-04-11 17:30:30,336 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,337 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:30,411 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:30,411 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(6), np.int64(11)))
2025-04-11 17:30:30,421 [INFO] Final candidates: []
2025-04-11 17:30:30,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,430 [INFO] Final candidates: []
2025-04-11 17:30:30,430 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:30,578 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:30,578 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(8), np.int64(13)))
2025-04-11 17:30:30,588 [INFO] Final candidates: []
2025-04-11 17:30:30,588 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,597 [INFO] Final candidates: []
2025-04-11 17:30:30,597 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,597 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:30,711 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:30,711 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:30,720 [INFO] Final candidates: []
2025-04-11 17:30:30,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,729 [INFO] Final candidates: []
2025-04-11 17:30:30,729 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:30,880 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:30,880 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(12)))
2025-04-11 17:30:30,890 [INFO] Final candidates: []
2025-04-11 17:30:30,890 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,898 [INFO] Final candidates: []
2025-04-11 17:30:30,899 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:30,899 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:31,026 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:31,026 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(5), np.int64(8)))
2025-04-11 17:30:31,036 [INFO] Final candidates: []
2025-04-11 17:30:31,036 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,044 [INFO] Final candidates: []
2025-04-11 17:30:31,045 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,045 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:31,188 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:31,188 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(13)))
2025-04-11 17:30:31,198 [INFO] Final candidates: []
2025-04-11 17:30:31,198 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,207 [INFO] Final candidates: []
2025-04-11 17:30:31,207 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,208 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:31,403 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:31,404 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(8)))
2025-04-11 17:30:31,413 [INFO] Final candidates: []
2025-04-11 17:30:31,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,422 [INFO] Final candidates: []
2025-04-11 17:30:31,422 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,422 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:31,537 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:31,537 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:30:31,547 [INFO] Final candidates: []
2025-04-11 17:30:31,547 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,555 [INFO] Final candidates: []
2025-04-11 17:30:31,556 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:31,743 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:31,743 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(7), np.int64(13)))
2025-04-11 17:30:31,752 [INFO] Final candidates: []
2025-04-11 17:30:31,752 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,761 [INFO] Final candidates: []
2025-04-11 17:30:31,761 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,761 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:31,914 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:31,914 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:31,923 [INFO] Final candidates: []
2025-04-11 17:30:31,923 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,932 [INFO] Final candidates: []
2025-04-11 17:30:31,932 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:31,932 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:32,025 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:32,026 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(11), np.int64(9)))
2025-04-11 17:30:32,035 [INFO] Final candidates: []
2025-04-11 17:30:32,035 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,044 [INFO] Final candidates: []
2025-04-11 17:30:32,044 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,044 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:32,102 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:32,102 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(11), np.int64(9)))
2025-04-11 17:30:32,111 [INFO] Final candidates: []
2025-04-11 17:30:32,111 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,120 [INFO] Final candidates: []
2025-04-11 17:30:32,120 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,120 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:32,336 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:32,337 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(5), np.int64(9)))
2025-04-11 17:30:32,340 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 17:30:32,340 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:30:32,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(7, 9), (8, 9)]
2025-04-11 17:30:32,340 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 17:30:32,346 [INFO] Final candidates: [(7, 9), (8, 9)]
2025-04-11 17:30:32,346 [INFO] Phase win: Collected 1unique candidate(s):[((7, 9), (8, 9))]
2025-04-11 17:30:32,346 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:30:32,355 [INFO] Final candidates: []
2025-04-11 17:30:32,355 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,355 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:32,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:32,494 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:30:32,503 [INFO] Final candidates: []
2025-04-11 17:30:32,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,514 [INFO] Final candidates: []
2025-04-11 17:30:32,514 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,514 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:32,599 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:32,599 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(10), np.int64(14)))
2025-04-11 17:30:32,608 [INFO] Final candidates: []
2025-04-11 17:30:32,608 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,617 [INFO] Final candidates: []
2025-04-11 17:30:32,617 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,617 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:32,787 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:32,788 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(11), np.int64(9)))
2025-04-11 17:30:32,797 [INFO] Final candidates: []
2025-04-11 17:30:32,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,806 [INFO] Final candidates: []
2025-04-11 17:30:32,806 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,806 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:32,961 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:32,962 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(8), np.int64(13)))
2025-04-11 17:30:32,971 [INFO] Final candidates: []
2025-04-11 17:30:32,971 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,980 [INFO] Final candidates: []
2025-04-11 17:30:32,980 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:32,980 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:33,070 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:33,071 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(8), np.int64(14)))
2025-04-11 17:30:33,080 [INFO] Final candidates: []
2025-04-11 17:30:33,080 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,089 [INFO] Final candidates: []
2025-04-11 17:30:33,089 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,089 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:33,265 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:33,266 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:33,275 [INFO] Final candidates: []
2025-04-11 17:30:33,275 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,283 [INFO] Final candidates: []
2025-04-11 17:30:33,283 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,284 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:33,435 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:33,435 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(9), np.int64(12)))
2025-04-11 17:30:33,445 [INFO] Final candidates: []
2025-04-11 17:30:33,445 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,454 [INFO] Final candidates: []
2025-04-11 17:30:33,454 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,455 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:33,694 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:33,694 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(14)))
2025-04-11 17:30:33,703 [INFO] Final candidates: []
2025-04-11 17:30:33,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,713 [INFO] Final candidates: []
2025-04-11 17:30:33,713 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,713 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:33,906 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:33,907 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(9)))
2025-04-11 17:30:33,916 [INFO] Final candidates: []
2025-04-11 17:30:33,916 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,925 [INFO] Final candidates: []
2025-04-11 17:30:33,925 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:33,925 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:34,035 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:34,035 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(7), np.int64(9)))
2025-04-11 17:30:34,046 [INFO] Final candidates: []
2025-04-11 17:30:34,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,055 [INFO] Final candidates: []
2025-04-11 17:30:34,055 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:34,170 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:34,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(7), np.int64(10)))
2025-04-11 17:30:34,180 [INFO] Final candidates: []
2025-04-11 17:30:34,180 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,188 [INFO] Final candidates: []
2025-04-11 17:30:34,188 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,189 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:34,284 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:34,284 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(12)))
2025-04-11 17:30:34,293 [INFO] Final candidates: []
2025-04-11 17:30:34,293 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,302 [INFO] Final candidates: []
2025-04-11 17:30:34,302 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:34,413 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:34,413 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(10), np.int64(12)))
2025-04-11 17:30:34,422 [INFO] Final candidates: []
2025-04-11 17:30:34,422 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,431 [INFO] Final candidates: []
2025-04-11 17:30:34,431 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,431 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:34,519 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:34,519 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(9), np.int64(14)))
2025-04-11 17:30:34,529 [INFO] Final candidates: []
2025-04-11 17:30:34,529 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,538 [INFO] Final candidates: []
2025-04-11 17:30:34,538 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,538 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:34,594 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:34,594 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:34,603 [INFO] Final candidates: []
2025-04-11 17:30:34,603 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,612 [INFO] Final candidates: []
2025-04-11 17:30:34,612 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,612 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:30:34,612 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:34,920 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:34,920 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(8), np.int64(14)))
2025-04-11 17:30:34,929 [INFO] Final candidates: []
2025-04-11 17:30:34,929 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,938 [INFO] Final candidates: []
2025-04-11 17:30:34,938 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:34,938 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:35,166 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:35,166 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(6), np.int64(7)))
2025-04-11 17:30:35,175 [INFO] Final candidates: []
2025-04-11 17:30:35,175 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:35,184 [INFO] Final candidates: []
2025-04-11 17:30:35,184 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:35,184 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:35,388 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:35,388 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(9)))
2025-04-11 17:30:35,397 [INFO] Final candidates: []
2025-04-11 17:30:35,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:35,406 [INFO] Final candidates: []
2025-04-11 17:30:35,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:35,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:35,674 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:35,674 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(10), np.int64(14)))
2025-04-11 17:30:35,683 [INFO] Final candidates: []
2025-04-11 17:30:35,683 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:35,692 [INFO] Final candidates: []
2025-04-11 17:30:35,692 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:35,692 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:35,995 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:35,995 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(8), np.int64(13)))
2025-04-11 17:30:36,004 [INFO] Final candidates: []
2025-04-11 17:30:36,004 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,013 [INFO] Final candidates: []
2025-04-11 17:30:36,013 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,013 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:36,139 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:36,140 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(13)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:36,149 [INFO] Final candidates: []
2025-04-11 17:30:36,149 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,158 [INFO] Final candidates: []
2025-04-11 17:30:36,158 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:36,194 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:36,194 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:36,203 [INFO] Final candidates: []
2025-04-11 17:30:36,203 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,212 [INFO] Final candidates: []
2025-04-11 17:30:36,212 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,212 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:36,415 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:36,415 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(10), np.int64(14)))
2025-04-11 17:30:36,424 [INFO] Final candidates: []
2025-04-11 17:30:36,424 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,433 [INFO] Final candidates: []
2025-04-11 17:30:36,433 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,433 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:36,529 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:36,529 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(5), np.int64(9)))
2025-04-11 17:30:36,539 [INFO] Final candidates: []
2025-04-11 17:30:36,539 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,547 [INFO] Final candidates: []
2025-04-11 17:30:36,547 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:36,591 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:36,591 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 17:30:36,601 [INFO] Final candidates: []
2025-04-11 17:30:36,601 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,609 [INFO] Final candidates: []
2025-04-11 17:30:36,609 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,610 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:36,774 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:36,774 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:36,783 [INFO] Final candidates: []
2025-04-11 17:30:36,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,793 [INFO] Final candidates: []
2025-04-11 17:30:36,793 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:36,793 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:37,124 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:37,124 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(10), np.int64(8)))
2025-04-11 17:30:37,134 [INFO] Final candidates: []
2025-04-11 17:30:37,134 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,143 [INFO] Final candidates: []
2025-04-11 17:30:37,144 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,144 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:37,245 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:37,245 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 17:30:37,254 [INFO] Final candidates: []
2025-04-11 17:30:37,255 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,263 [INFO] Final candidates: []
2025-04-11 17:30:37,263 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,264 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:37,309 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:37,309 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:37,318 [INFO] Final candidates: []
2025-04-11 17:30:37,319 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,327 [INFO] Final candidates: []
2025-04-11 17:30:37,327 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,327 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:37,629 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:37,629 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(8), np.int64(8)))
2025-04-11 17:30:37,638 [INFO] Final candidates: []
2025-04-11 17:30:37,638 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,648 [INFO] Final candidates: []
2025-04-11 17:30:37,648 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,648 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:37,739 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:37,739 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(10), np.int64(13)))
2025-04-11 17:30:37,749 [INFO] Final candidates: []
2025-04-11 17:30:37,749 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,758 [INFO] Final candidates: []
2025-04-11 17:30:37,758 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,758 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:37,852 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:37,852 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:37,863 [INFO] Final candidates: []
2025-04-11 17:30:37,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,871 [INFO] Final candidates: []
2025-04-11 17:30:37,871 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,872 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:37,980 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:37,980 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(8), np.int64(13)))
2025-04-11 17:30:37,990 [INFO] Final candidates: []
2025-04-11 17:30:37,990 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,998 [INFO] Final candidates: []
2025-04-11 17:30:37,999 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:37,999 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:38,077 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:38,078 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(10), np.int64(8)))
2025-04-11 17:30:38,087 [INFO] Final candidates: []
2025-04-11 17:30:38,087 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,095 [INFO] Final candidates: []
2025-04-11 17:30:38,095 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,096 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:38,134 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:38,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:38,144 [INFO] Final candidates: []
2025-04-11 17:30:38,144 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,152 [INFO] Final candidates: []
2025-04-11 17:30:38,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,153 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:38,272 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:38,272 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(9), np.int64(12)))
2025-04-11 17:30:38,281 [INFO] Final candidates: []
2025-04-11 17:30:38,281 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,290 [INFO] Final candidates: []
2025-04-11 17:30:38,290 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,290 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:38,343 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:38,343 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(10), np.int64(13)))
2025-04-11 17:30:38,352 [INFO] Final candidates: []
2025-04-11 17:30:38,352 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,361 [INFO] Final candidates: []
2025-04-11 17:30:38,361 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,361 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:38,532 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:38,532 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(6), np.int64(7)))
2025-04-11 17:30:38,542 [INFO] Final candidates: []
2025-04-11 17:30:38,542 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,550 [INFO] Final candidates: []
2025-04-11 17:30:38,550 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,551 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:38,738 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:38,738 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:38,748 [INFO] Final candidates: []
2025-04-11 17:30:38,748 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,756 [INFO] Final candidates: []
2025-04-11 17:30:38,756 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,757 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:38,824 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:38,825 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(9), np.int64(12)))
2025-04-11 17:30:38,834 [INFO] Final candidates: []
2025-04-11 17:30:38,834 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,842 [INFO] Final candidates: []
2025-04-11 17:30:38,842 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:38,843 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,006 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:39,006 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(6), np.int64(8)))
2025-04-11 17:30:39,015 [INFO] Final candidates: []
2025-04-11 17:30:39,015 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,024 [INFO] Final candidates: []
2025-04-11 17:30:39,024 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,025 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,134 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:39,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(8)))
2025-04-11 17:30:39,143 [INFO] Final candidates: []
2025-04-11 17:30:39,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,152 [INFO] Final candidates: []
2025-04-11 17:30:39,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,227 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:39,227 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(6), np.int64(10)))
2025-04-11 17:30:39,236 [INFO] Final candidates: []
2025-04-11 17:30:39,236 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,245 [INFO] Final candidates: []
2025-04-11 17:30:39,245 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,245 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:39,347 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:39,356 [INFO] Final candidates: []
2025-04-11 17:30:39,356 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,365 [INFO] Final candidates: []
2025-04-11 17:30:39,365 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,365 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,535 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:39,536 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:30:39,545 [INFO] Final candidates: []
2025-04-11 17:30:39,545 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,554 [INFO] Final candidates: []
2025-04-11 17:30:39,554 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,554 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,588 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:39,588 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(7), np.int64(8)))
2025-04-11 17:30:39,598 [INFO] Final candidates: []
2025-04-11 17:30:39,598 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,606 [INFO] Final candidates: []
2025-04-11 17:30:39,606 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,607 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,700 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:39,701 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:39,710 [INFO] Final candidates: []
2025-04-11 17:30:39,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,719 [INFO] Final candidates: []
2025-04-11 17:30:39,719 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,719 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,783 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:39,783 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(12)))
2025-04-11 17:30:39,793 [INFO] Final candidates: []
2025-04-11 17:30:39,793 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,802 [INFO] Final candidates: []
2025-04-11 17:30:39,802 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,802 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,833 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:39,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:39,842 [INFO] Final candidates: []
2025-04-11 17:30:39,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,851 [INFO] Final candidates: []
2025-04-11 17:30:39,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:39,904 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:39,904 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(8)))
2025-04-11 17:30:39,913 [INFO] Final candidates: []
2025-04-11 17:30:39,913 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,922 [INFO] Final candidates: []
2025-04-11 17:30:39,922 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:39,922 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:40,054 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:40,054 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(5), np.int64(8)))
2025-04-11 17:30:40,063 [INFO] Final candidates: []
2025-04-11 17:30:40,063 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,072 [INFO] Final candidates: []
2025-04-11 17:30:40,072 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,072 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:40,176 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:40,176 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 17:30:40,185 [INFO] Final candidates: []
2025-04-11 17:30:40,185 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,194 [INFO] Final candidates: []
2025-04-11 17:30:40,194 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,194 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:40,322 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:40,322 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:40,331 [INFO] Final candidates: []
2025-04-11 17:30:40,331 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,340 [INFO] Final candidates: []
2025-04-11 17:30:40,340 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,340 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:40,539 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:40,539 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(7), np.int64(8)))
2025-04-11 17:30:40,548 [INFO] Final candidates: []
2025-04-11 17:30:40,548 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,557 [INFO] Final candidates: []
2025-04-11 17:30:40,557 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,557 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:40,577 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:40,577 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(13)), (np.int64(11), np.int64(9)))
2025-04-11 17:30:40,586 [INFO] Final candidates: []
2025-04-11 17:30:40,586 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,595 [INFO] Final candidates: []
2025-04-11 17:30:40,595 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,595 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:40,696 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:40,696 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(6), np.int64(11)))
2025-04-11 17:30:40,705 [INFO] Final candidates: []
2025-04-11 17:30:40,705 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,714 [INFO] Final candidates: []
2025-04-11 17:30:40,714 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,714 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:40,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:40,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(5), np.int64(8)))
2025-04-11 17:30:40,969 [INFO] Final candidates: []
2025-04-11 17:30:40,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,978 [INFO] Final candidates: []
2025-04-11 17:30:40,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:40,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,085 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:41,085 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(15)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:41,094 [INFO] Final candidates: []
2025-04-11 17:30:41,094 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,103 [INFO] Final candidates: []
2025-04-11 17:30:41,103 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,103 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,134 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:41,134 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:41,143 [INFO] Final candidates: []
2025-04-11 17:30:41,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,152 [INFO] Final candidates: []
2025-04-11 17:30:41,152 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,152 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,277 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:41,277 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(6), np.int64(8)))
2025-04-11 17:30:41,286 [INFO] Final candidates: []
2025-04-11 17:30:41,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,295 [INFO] Final candidates: []
2025-04-11 17:30:41,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,513 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:41,513 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:41,522 [INFO] Final candidates: []
2025-04-11 17:30:41,522 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,531 [INFO] Final candidates: []
2025-04-11 17:30:41,531 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,531 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,640 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:41,640 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(5), np.int64(9)))
2025-04-11 17:30:41,650 [INFO] Final candidates: []
2025-04-11 17:30:41,650 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,659 [INFO] Final candidates: []
2025-04-11 17:30:41,659 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,659 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,730 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:41,730 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(10)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:41,740 [INFO] Final candidates: []
2025-04-11 17:30:41,740 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,748 [INFO] Final candidates: []
2025-04-11 17:30:41,748 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,749 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,781 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:41,782 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(9)), (np.int64(10), np.int64(13)))
2025-04-11 17:30:41,791 [INFO] Final candidates: []
2025-04-11 17:30:41,791 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,800 [INFO] Final candidates: []
2025-04-11 17:30:41,800 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:41,800 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:41,947 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:41,947 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:30:41,947 [INFO] MCTS selected move: K12,J8
2025-04-11 17:30:41,948 [INFO] ===============NEW MOVE================
2025-04-11 17:30:52,069 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:30:52,078 [INFO] Final candidates: []
2025-04-11 17:30:52,078 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,087 [INFO] Final candidates: []
2025-04-11 17:30:52,087 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,087 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:30:52,087 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:30:52,087 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:52,098 [INFO] Final candidates: []
2025-04-11 17:30:52,098 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,108 [INFO] Final candidates: []
2025-04-11 17:30:52,109 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,109 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:30:52,110 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:52,213 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:52,214 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(10)), (np.int64(10), np.int64(14)))
2025-04-11 17:30:52,223 [INFO] Final candidates: []
2025-04-11 17:30:52,223 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,231 [INFO] Final candidates: []
2025-04-11 17:30:52,231 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,232 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:52,495 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:52,495 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(11), np.int64(13)))
2025-04-11 17:30:52,504 [INFO] Final candidates: []
2025-04-11 17:30:52,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,513 [INFO] Final candidates: []
2025-04-11 17:30:52,513 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,513 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:52,717 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:52,718 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(5), np.int64(8)))
2025-04-11 17:30:52,726 [INFO] Final candidates: []
2025-04-11 17:30:52,726 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,735 [INFO] Final candidates: []
2025-04-11 17:30:52,735 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,735 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:52,884 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:52,884 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(5), np.int64(8)))
2025-04-11 17:30:52,893 [INFO] Final candidates: []
2025-04-11 17:30:52,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,902 [INFO] Final candidates: []
2025-04-11 17:30:52,902 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:52,902 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:53,161 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:53,161 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(6)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:53,170 [INFO] Final candidates: []
2025-04-11 17:30:53,171 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,179 [INFO] Final candidates: []
2025-04-11 17:30:53,179 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,180 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:53,298 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:53,298 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(10), np.int64(13)))
2025-04-11 17:30:53,307 [INFO] Final candidates: []
2025-04-11 17:30:53,307 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,317 [INFO] Final candidates: []
2025-04-11 17:30:53,317 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,318 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:53,481 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:53,481 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(10), np.int64(13)))
2025-04-11 17:30:53,490 [INFO] Final candidates: []
2025-04-11 17:30:53,490 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,499 [INFO] Final candidates: []
2025-04-11 17:30:53,499 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,500 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:53,674 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:53,675 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(5), np.int64(9)))
2025-04-11 17:30:53,684 [INFO] Final candidates: []
2025-04-11 17:30:53,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,692 [INFO] Final candidates: []
2025-04-11 17:30:53,692 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,693 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:53,744 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:53,744 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(8), np.int64(8)))
2025-04-11 17:30:53,753 [INFO] Final candidates: []
2025-04-11 17:30:53,753 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,762 [INFO] Final candidates: []
2025-04-11 17:30:53,762 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,762 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:53,816 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:53,816 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(8), np.int64(7)))
2025-04-11 17:30:53,827 [INFO] Final candidates: []
2025-04-11 17:30:53,828 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,836 [INFO] Final candidates: []
2025-04-11 17:30:53,836 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:53,887 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:53,887 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(13), np.int64(9)))
2025-04-11 17:30:53,896 [INFO] Final candidates: []
2025-04-11 17:30:53,896 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,904 [INFO] Final candidates: []
2025-04-11 17:30:53,904 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:53,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:54,014 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:54,014 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(6)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:54,023 [INFO] Final candidates: []
2025-04-11 17:30:54,023 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,031 [INFO] Final candidates: []
2025-04-11 17:30:54,031 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,032 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:54,048 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:54,048 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(4), np.int64(8)))
2025-04-11 17:30:54,058 [INFO] Final candidates: []
2025-04-11 17:30:54,058 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,066 [INFO] Final candidates: []
2025-04-11 17:30:54,066 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,067 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:54,180 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:54,180 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(9)), (np.int64(9), np.int64(15)))
2025-04-11 17:30:54,189 [INFO] Final candidates: []
2025-04-11 17:30:54,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,197 [INFO] Final candidates: []
2025-04-11 17:30:54,197 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,198 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:54,260 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:54,260 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(7), np.int64(6)))
2025-04-11 17:30:54,269 [INFO] Final candidates: []
2025-04-11 17:30:54,269 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,278 [INFO] Final candidates: []
2025-04-11 17:30:54,278 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,278 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:54,388 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:54,388 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(4), np.int64(7)))
2025-04-11 17:30:54,397 [INFO] Final candidates: []
2025-04-11 17:30:54,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,406 [INFO] Final candidates: []
2025-04-11 17:30:54,406 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:54,487 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:54,487 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(2), np.int64(9)))
2025-04-11 17:30:54,497 [INFO] Final candidates: []
2025-04-11 17:30:54,497 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,505 [INFO] Final candidates: []
2025-04-11 17:30:54,505 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,506 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:54,800 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:54,800 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(7), np.int64(11)))
2025-04-11 17:30:54,810 [INFO] Final candidates: []
2025-04-11 17:30:54,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,819 [INFO] Final candidates: []
2025-04-11 17:30:54,819 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:54,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,008 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:55,009 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(9)), (np.int64(13), np.int64(9)))
2025-04-11 17:30:55,017 [INFO] Final candidates: []
2025-04-11 17:30:55,017 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,026 [INFO] Final candidates: []
2025-04-11 17:30:55,026 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,026 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,107 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:55,107 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(6), np.int64(10)))
2025-04-11 17:30:55,116 [INFO] Final candidates: []
2025-04-11 17:30:55,116 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,124 [INFO] Final candidates: []
2025-04-11 17:30:55,124 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,125 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,287 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:55,287 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(9)), (np.int64(7), np.int64(9)))
2025-04-11 17:30:55,296 [INFO] Final candidates: []
2025-04-11 17:30:55,296 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,305 [INFO] Final candidates: []
2025-04-11 17:30:55,305 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,392 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:55,393 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(11), np.int64(11)))
2025-04-11 17:30:55,401 [INFO] Final candidates: []
2025-04-11 17:30:55,401 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,410 [INFO] Final candidates: []
2025-04-11 17:30:55,410 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,410 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,525 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:55,525 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(9), np.int64(12)))
2025-04-11 17:30:55,534 [INFO] Final candidates: []
2025-04-11 17:30:55,534 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,543 [INFO] Final candidates: []
2025-04-11 17:30:55,543 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,543 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,755 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:55,755 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(7), np.int64(12)))
2025-04-11 17:30:55,764 [INFO] Final candidates: []
2025-04-11 17:30:55,764 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,773 [INFO] Final candidates: []
2025-04-11 17:30:55,773 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,773 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,794 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:55,795 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(11)), (np.int64(9), np.int64(10)))
2025-04-11 17:30:55,803 [INFO] Final candidates: []
2025-04-11 17:30:55,803 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,813 [INFO] Final candidates: []
2025-04-11 17:30:55,813 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,813 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:55,960 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:55,961 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:55,970 [INFO] Final candidates: []
2025-04-11 17:30:55,970 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,978 [INFO] Final candidates: []
2025-04-11 17:30:55,978 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:55,978 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:56,175 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:56,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(7), np.int64(12)))
2025-04-11 17:30:56,184 [INFO] Final candidates: []
2025-04-11 17:30:56,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,192 [INFO] Final candidates: []
2025-04-11 17:30:56,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,193 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:56,271 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:56,272 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(11)), (np.int64(13), np.int64(9)))
2025-04-11 17:30:56,280 [INFO] Final candidates: []
2025-04-11 17:30:56,280 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,289 [INFO] Final candidates: []
2025-04-11 17:30:56,289 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,289 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:56,576 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:56,577 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(7), np.int64(12)))
2025-04-11 17:30:56,585 [INFO] Final candidates: []
2025-04-11 17:30:56,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,594 [INFO] Final candidates: []
2025-04-11 17:30:56,594 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,594 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:56,625 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:56,626 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(9)), (np.int64(12), np.int64(8)))
2025-04-11 17:30:56,634 [INFO] Final candidates: []
2025-04-11 17:30:56,634 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,643 [INFO] Final candidates: []
2025-04-11 17:30:56,643 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,643 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:56,706 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:56,706 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(6), np.int64(11)))
2025-04-11 17:30:56,715 [INFO] Final candidates: []
2025-04-11 17:30:56,715 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,723 [INFO] Final candidates: []
2025-04-11 17:30:56,723 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,723 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:56,891 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:56,891 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 17:30:56,900 [INFO] Final candidates: []
2025-04-11 17:30:56,900 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,908 [INFO] Final candidates: []
2025-04-11 17:30:56,908 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:56,909 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:57,115 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:57,115 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(12)))
2025-04-11 17:30:57,124 [INFO] Final candidates: []
2025-04-11 17:30:57,124 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,133 [INFO] Final candidates: []
2025-04-11 17:30:57,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:57,268 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:57,269 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(9)), (np.int64(10), np.int64(11)))
2025-04-11 17:30:57,277 [INFO] Final candidates: []
2025-04-11 17:30:57,278 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,286 [INFO] Final candidates: []
2025-04-11 17:30:57,286 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,286 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:57,503 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:57,504 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:57,514 [INFO] Final candidates: []
2025-04-11 17:30:57,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,522 [INFO] Final candidates: []
2025-04-11 17:30:57,522 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,523 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:57,605 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:57,605 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(6), np.int64(11)))
2025-04-11 17:30:57,614 [INFO] Final candidates: []
2025-04-11 17:30:57,614 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,623 [INFO] Final candidates: []
2025-04-11 17:30:57,623 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,623 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:57,753 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:57,753 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 17:30:57,762 [INFO] Final candidates: []
2025-04-11 17:30:57,762 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,770 [INFO] Final candidates: []
2025-04-11 17:30:57,770 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,771 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:57,972 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:57,972 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(8)), (np.int64(8), np.int64(14)))
2025-04-11 17:30:57,981 [INFO] Final candidates: []
2025-04-11 17:30:57,981 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,989 [INFO] Final candidates: []
2025-04-11 17:30:57,989 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:57,990 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:58,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:58,132 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(6), np.int64(7)))
2025-04-11 17:30:58,141 [INFO] Final candidates: []
2025-04-11 17:30:58,141 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,150 [INFO] Final candidates: []
2025-04-11 17:30:58,150 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,150 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:58,339 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:58,339 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(10), np.int64(10)))
2025-04-11 17:30:58,348 [INFO] Final candidates: []
2025-04-11 17:30:58,348 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,357 [INFO] Final candidates: []
2025-04-11 17:30:58,357 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,358 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:58,460 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:58,460 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 17:30:58,469 [INFO] Final candidates: []
2025-04-11 17:30:58,469 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,477 [INFO] Final candidates: []
2025-04-11 17:30:58,478 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,478 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:58,546 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:58,546 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(8), np.int64(10)))
2025-04-11 17:30:58,555 [INFO] Final candidates: []
2025-04-11 17:30:58,556 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,564 [INFO] Final candidates: []
2025-04-11 17:30:58,564 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,564 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:58,660 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:58,660 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(7), np.int64(11)))
2025-04-11 17:30:58,669 [INFO] Final candidates: []
2025-04-11 17:30:58,669 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,678 [INFO] Final candidates: []
2025-04-11 17:30:58,678 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,678 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:58,771 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:58,772 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(6), np.int64(10)))
2025-04-11 17:30:58,783 [INFO] Final candidates: []
2025-04-11 17:30:58,783 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,794 [INFO] Final candidates: []
2025-04-11 17:30:58,794 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,795 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:58,862 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:58,862 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(9)))
2025-04-11 17:30:58,871 [INFO] Final candidates: []
2025-04-11 17:30:58,871 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,880 [INFO] Final candidates: []
2025-04-11 17:30:58,880 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:58,880 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,060 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:59,060 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(12)), (np.int64(4), np.int64(7)))
2025-04-11 17:30:59,069 [INFO] Final candidates: []
2025-04-11 17:30:59,069 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,079 [INFO] Final candidates: []
2025-04-11 17:30:59,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,079 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,175 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:59,175 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(7), np.int64(9)))
2025-04-11 17:30:59,184 [INFO] Final candidates: []
2025-04-11 17:30:59,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,192 [INFO] Final candidates: []
2025-04-11 17:30:59,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,193 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,298 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:59,298 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(11)))
2025-04-11 17:30:59,307 [INFO] Final candidates: []
2025-04-11 17:30:59,307 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,316 [INFO] Final candidates: []
2025-04-11 17:30:59,316 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,316 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,356 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:59,357 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(8), np.int64(13)))
2025-04-11 17:30:59,365 [INFO] Final candidates: []
2025-04-11 17:30:59,365 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,374 [INFO] Final candidates: []
2025-04-11 17:30:59,374 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,374 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,557 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:59,557 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(4), np.int64(7)))
2025-04-11 17:30:59,566 [INFO] Final candidates: []
2025-04-11 17:30:59,566 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,575 [INFO] Final candidates: []
2025-04-11 17:30:59,575 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,575 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:30:59,575 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,736 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:59,736 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(7), np.int64(12)))
2025-04-11 17:30:59,745 [INFO] Final candidates: []
2025-04-11 17:30:59,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,754 [INFO] Final candidates: []
2025-04-11 17:30:59,754 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,755 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,870 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:30:59,870 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(13)), (np.int64(6), np.int64(10)))
2025-04-11 17:30:59,879 [INFO] Final candidates: []
2025-04-11 17:30:59,879 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,887 [INFO] Final candidates: []
2025-04-11 17:30:59,887 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:30:59,888 [INFO] Default policy: Starting random playout.
2025-04-11 17:30:59,992 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:30:59,992 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(10), np.int64(11)))
2025-04-11 17:31:00,001 [INFO] Final candidates: []
2025-04-11 17:31:00,001 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,010 [INFO] Final candidates: []
2025-04-11 17:31:00,010 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,010 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,131 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:00,131 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(12), np.int64(8)))
2025-04-11 17:31:00,140 [INFO] Final candidates: []
2025-04-11 17:31:00,140 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,149 [INFO] Final candidates: []
2025-04-11 17:31:00,149 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,149 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,252 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:00,252 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(7), np.int64(9)))
2025-04-11 17:31:00,261 [INFO] Final candidates: []
2025-04-11 17:31:00,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,270 [INFO] Final candidates: []
2025-04-11 17:31:00,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,270 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,406 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:00,406 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(11), np.int64(7)))
2025-04-11 17:31:00,415 [INFO] Final candidates: []
2025-04-11 17:31:00,415 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,423 [INFO] Final candidates: []
2025-04-11 17:31:00,423 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,424 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,545 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:00,545 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(8)), (np.int64(13), np.int64(9)))
2025-04-11 17:31:00,554 [INFO] Final candidates: []
2025-04-11 17:31:00,554 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,563 [INFO] Final candidates: []
2025-04-11 17:31:00,563 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,563 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,812 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:00,812 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(2), np.int64(9)))
2025-04-11 17:31:00,821 [INFO] Final candidates: []
2025-04-11 17:31:00,821 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,830 [INFO] Final candidates: []
2025-04-11 17:31:00,830 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,830 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,845 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:00,845 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:31:00,854 [INFO] Final candidates: []
2025-04-11 17:31:00,854 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,862 [INFO] Final candidates: []
2025-04-11 17:31:00,862 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,863 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,909 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:00,909 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(8), np.int64(14)))
2025-04-11 17:31:00,918 [INFO] Final candidates: []
2025-04-11 17:31:00,918 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,927 [INFO] Final candidates: []
2025-04-11 17:31:00,927 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,927 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:00,942 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:00,942 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(8), np.int64(12)))
2025-04-11 17:31:00,951 [INFO] Final candidates: []
2025-04-11 17:31:00,951 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,960 [INFO] Final candidates: []
2025-04-11 17:31:00,960 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:00,960 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,038 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:01,038 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(11), np.int64(13)))
2025-04-11 17:31:01,047 [INFO] Final candidates: []
2025-04-11 17:31:01,047 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,055 [INFO] Final candidates: []
2025-04-11 17:31:01,055 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,055 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,139 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:01,139 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(14)), (np.int64(2), np.int64(9)))
2025-04-11 17:31:01,148 [INFO] Final candidates: []
2025-04-11 17:31:01,148 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,157 [INFO] Final candidates: []
2025-04-11 17:31:01,157 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,157 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,260 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:01,260 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(4), np.int64(7)))
2025-04-11 17:31:01,269 [INFO] Final candidates: []
2025-04-11 17:31:01,269 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,277 [INFO] Final candidates: []
2025-04-11 17:31:01,277 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,278 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,313 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:01,313 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(4), np.int64(7)))
2025-04-11 17:31:01,322 [INFO] Final candidates: []
2025-04-11 17:31:01,322 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,331 [INFO] Final candidates: []
2025-04-11 17:31:01,331 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,331 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,360 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:01,361 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(9), np.int64(10)))
2025-04-11 17:31:01,369 [INFO] Final candidates: []
2025-04-11 17:31:01,369 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,378 [INFO] Final candidates: []
2025-04-11 17:31:01,378 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,378 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,447 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:01,447 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(13)), (np.int64(10), np.int64(13)))
2025-04-11 17:31:01,457 [INFO] Final candidates: []
2025-04-11 17:31:01,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,465 [INFO] Final candidates: []
2025-04-11 17:31:01,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,653 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:01,653 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(9), np.int64(10)))
2025-04-11 17:31:01,662 [INFO] Final candidates: []
2025-04-11 17:31:01,662 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,671 [INFO] Final candidates: []
2025-04-11 17:31:01,671 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,671 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:01,827 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:01,828 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(6), np.int64(10)))
2025-04-11 17:31:01,836 [INFO] Final candidates: []
2025-04-11 17:31:01,837 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,845 [INFO] Final candidates: []
2025-04-11 17:31:01,845 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:01,845 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:02,012 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:02,012 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(7), np.int64(10)))
2025-04-11 17:31:02,022 [INFO] Final candidates: []
2025-04-11 17:31:02,022 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,032 [INFO] Final candidates: []
2025-04-11 17:31:02,032 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,032 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:02,192 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:02,192 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(8), np.int64(10)))
2025-04-11 17:31:02,201 [INFO] Final candidates: []
2025-04-11 17:31:02,201 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,210 [INFO] Final candidates: []
2025-04-11 17:31:02,210 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,210 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:02,240 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:02,240 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(10)))
2025-04-11 17:31:02,249 [INFO] Final candidates: []
2025-04-11 17:31:02,249 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,257 [INFO] Final candidates: []
2025-04-11 17:31:02,257 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,258 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:02,417 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:02,417 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(11)), (np.int64(9), np.int64(15)))
2025-04-11 17:31:02,426 [INFO] Final candidates: []
2025-04-11 17:31:02,426 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,435 [INFO] Final candidates: []
2025-04-11 17:31:02,435 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,435 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:02,631 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:02,631 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(9)), (np.int64(11), np.int64(11)))
2025-04-11 17:31:02,640 [INFO] Final candidates: []
2025-04-11 17:31:02,640 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,648 [INFO] Final candidates: []
2025-04-11 17:31:02,648 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,649 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:02,854 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:02,854 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(7), np.int64(6)))
2025-04-11 17:31:02,863 [INFO] Final candidates: []
2025-04-11 17:31:02,863 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,871 [INFO] Final candidates: []
2025-04-11 17:31:02,871 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:02,872 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,004 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:03,004 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(14)), (np.int64(9), np.int64(15)))
2025-04-11 17:31:03,013 [INFO] Final candidates: []
2025-04-11 17:31:03,013 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,022 [INFO] Final candidates: []
2025-04-11 17:31:03,022 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,022 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,171 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:03,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(11), np.int64(13)))
2025-04-11 17:31:03,184 [INFO] Final candidates: []
2025-04-11 17:31:03,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,193 [INFO] Final candidates: []
2025-04-11 17:31:03,193 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,193 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,362 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:03,362 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(9), np.int64(15)))
2025-04-11 17:31:03,371 [INFO] Final candidates: []
2025-04-11 17:31:03,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,379 [INFO] Final candidates: []
2025-04-11 17:31:03,379 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,380 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,432 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:03,432 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(13)), (np.int64(7), np.int64(11)))
2025-04-11 17:31:03,441 [INFO] Final candidates: []
2025-04-11 17:31:03,441 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,450 [INFO] Final candidates: []
2025-04-11 17:31:03,450 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,450 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,527 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:03,527 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(9), np.int64(12)))
2025-04-11 17:31:03,536 [INFO] Final candidates: []
2025-04-11 17:31:03,536 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,545 [INFO] Final candidates: []
2025-04-11 17:31:03,545 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,546 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,682 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:03,683 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(11), np.int64(7)))
2025-04-11 17:31:03,691 [INFO] Final candidates: []
2025-04-11 17:31:03,691 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,700 [INFO] Final candidates: []
2025-04-11 17:31:03,700 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,700 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,799 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:03,799 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(11)), (np.int64(6), np.int64(10)))
2025-04-11 17:31:03,808 [INFO] Final candidates: []
2025-04-11 17:31:03,808 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,817 [INFO] Final candidates: []
2025-04-11 17:31:03,817 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,817 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:03,863 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:03,863 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(9), np.int64(7)))
2025-04-11 17:31:03,873 [INFO] Final candidates: []
2025-04-11 17:31:03,873 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,881 [INFO] Final candidates: []
2025-04-11 17:31:03,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:03,882 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:04,020 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:04,020 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(12)))
2025-04-11 17:31:04,029 [INFO] Final candidates: []
2025-04-11 17:31:04,029 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,038 [INFO] Final candidates: []
2025-04-11 17:31:04,038 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,038 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:04,306 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:04,306 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(10), np.int64(10)))
2025-04-11 17:31:04,315 [INFO] Final candidates: []
2025-04-11 17:31:04,315 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,323 [INFO] Final candidates: []
2025-04-11 17:31:04,323 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,324 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:04,506 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:04,506 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(7), np.int64(11)))
2025-04-11 17:31:04,515 [INFO] Final candidates: []
2025-04-11 17:31:04,515 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,523 [INFO] Final candidates: []
2025-04-11 17:31:04,523 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,524 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:04,769 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:04,769 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(6)), (np.int64(8), np.int64(7)))
2025-04-11 17:31:04,779 [INFO] Final candidates: []
2025-04-11 17:31:04,779 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,788 [INFO] Final candidates: []
2025-04-11 17:31:04,788 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,788 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:04,912 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:04,913 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(7)), (np.int64(11), np.int64(10)))
2025-04-11 17:31:04,921 [INFO] Final candidates: []
2025-04-11 17:31:04,921 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,930 [INFO] Final candidates: []
2025-04-11 17:31:04,930 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:04,930 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,001 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:05,001 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(10)), (np.int64(3), np.int64(9)))
2025-04-11 17:31:05,010 [INFO] Final candidates: []
2025-04-11 17:31:05,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,019 [INFO] Final candidates: []
2025-04-11 17:31:05,019 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,019 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,225 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:05,225 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(7)), (np.int64(10), np.int64(13)))
2025-04-11 17:31:05,234 [INFO] Final candidates: []
2025-04-11 17:31:05,234 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,243 [INFO] Final candidates: []
2025-04-11 17:31:05,243 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,243 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,369 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:05,369 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(10)), (np.int64(6), np.int64(10)))
2025-04-11 17:31:05,378 [INFO] Final candidates: []
2025-04-11 17:31:05,378 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,386 [INFO] Final candidates: []
2025-04-11 17:31:05,386 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,387 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,455 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:05,456 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(7), np.int64(11)))
2025-04-11 17:31:05,464 [INFO] Final candidates: []
2025-04-11 17:31:05,464 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,473 [INFO] Final candidates: []
2025-04-11 17:31:05,473 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,473 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,518 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:05,518 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(10), np.int64(9)))
2025-04-11 17:31:05,527 [INFO] Final candidates: []
2025-04-11 17:31:05,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,535 [INFO] Final candidates: []
2025-04-11 17:31:05,535 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,535 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,610 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:05,610 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(7), np.int64(10)))
2025-04-11 17:31:05,619 [INFO] Final candidates: []
2025-04-11 17:31:05,619 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,627 [INFO] Final candidates: []
2025-04-11 17:31:05,627 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,627 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,675 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:05,675 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(9), np.int64(14)))
2025-04-11 17:31:05,684 [INFO] Final candidates: []
2025-04-11 17:31:05,684 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,693 [INFO] Final candidates: []
2025-04-11 17:31:05,693 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,694 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,765 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:05,766 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(10), np.int64(9)))
2025-04-11 17:31:05,774 [INFO] Final candidates: []
2025-04-11 17:31:05,774 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,783 [INFO] Final candidates: []
2025-04-11 17:31:05,783 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,783 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:05,833 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:05,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(13)), (np.int64(2), np.int64(9)))
2025-04-11 17:31:05,842 [INFO] Final candidates: []
2025-04-11 17:31:05,843 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,851 [INFO] Final candidates: []
2025-04-11 17:31:05,851 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:05,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:06,018 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:06,018 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(8)), (np.int64(7), np.int64(10)))
2025-04-11 17:31:06,027 [INFO] Final candidates: []
2025-04-11 17:31:06,027 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:06,035 [INFO] Final candidates: []
2025-04-11 17:31:06,035 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:06,036 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:06,063 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:06,063 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(7)), (np.int64(5), np.int64(8)))
2025-04-11 17:31:06,073 [INFO] Final candidates: []
2025-04-11 17:31:06,073 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:06,081 [INFO] Final candidates: []
2025-04-11 17:31:06,081 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:06,082 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:06,274 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:06,275 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:31:06,275 [INFO] MCTS selected move: P9,L9
2025-04-11 17:31:06,275 [INFO] ===============NEW MOVE================
2025-04-11 17:31:10,129 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:31:10,138 [INFO] Final candidates: []
2025-04-11 17:31:10,138 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,141 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,141 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,141 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (3, 9)]
2025-04-11 17:31:10,141 [DEBUG] check_window_intermediate_custom (only one inserted(3, 9)): For L=6, window [0 0 2 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,141 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,141 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,141 [DEBUG] board coords: [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 17:31:10,141 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:31:10,141 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (10, 9)]
2025-04-11 17:31:10,141 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 17:31:10,143 [DEBUG] board coords: [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)]
2025-04-11 17:31:10,143 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:31:10,143 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 9), (8, 9)]
2025-04-11 17:31:10,143 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)] triggers candidate.
2025-04-11 17:31:10,143 [DEBUG] board coords: [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)]
2025-04-11 17:31:10,143 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:31:10,143 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 9), (10, 9)]
2025-04-11 17:31:10,143 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9)] triggers candidate.
2025-04-11 17:31:10,147 [INFO] Final candidates: [(10, 9), (8, 9), (3, 9)]
2025-04-11 17:31:10,148 [INFO] Phase defense: Collected 3unique candidate(s):[((8, 9), (3, 9)), ((10, 9), (8, 9)), ((10, 9), (3, 9))]
2025-04-11 17:31:10,148 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:10,148 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:31:10,148 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 9), (3, 9))
2025-04-11 17:31:10,151 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,151 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,151 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,151 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,152 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,152 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,152 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,152 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,152 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,152 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,156 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,157 [INFO] Phase win: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,157 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:10,165 [INFO] Final candidates: []
2025-04-11 17:31:10,165 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,165 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:31:10,165 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,167 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,167 [DEBUG] Tree_policy iteration 1: Expanding move ((10, 9), (8, 9))
2025-04-11 17:31:10,170 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,170 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,170 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (3, 9)]
2025-04-11 17:31:10,170 [DEBUG] check_window_intermediate_custom (only one inserted(3, 9)): For L=6, window [0 0 2 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,172 [DEBUG] board coords: [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)]
2025-04-11 17:31:10,172 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,172 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 9), (3, 9)]
2025-04-11 17:31:10,172 [DEBUG] check_window_intermediate_custom (only one inserted(3, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,176 [INFO] Final candidates: [(3, 9)]
2025-04-11 17:31:10,176 [INFO] Phase win: Found only one candidate: (3, 9)
2025-04-11 17:31:10,176 [INFO] Phase win: Collected 10unique candidate(s):[((3, 9), (np.int64(2), np.int64(9))), ((3, 9), (np.int64(3), np.int64(11))), ((3, 9), (np.int64(4), np.int64(10))), ((3, 9), (np.int64(3), np.int64(10))), ((3, 9), (np.int64(1), np.int64(9))), ((3, 9), (np.int64(2), np.int64(8))), ((3, 9), (np.int64(3), np.int64(8))), ((3, 9), (np.int64(4), np.int64(8))), ((3, 9), (np.int64(2), np.int64(10))), ((3, 9), (np.int64(3), np.int64(7)))]
2025-04-11 17:31:10,176 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:31:10,184 [INFO] Final candidates: []
2025-04-11 17:31:10,184 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,185 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,185 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,185 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 9), (3, 9))
2025-04-11 17:31:10,188 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,188 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,188 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,188 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,189 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,189 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,189 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,189 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,194 [INFO] Final candidates: [(10, 9), (2, 9)]
2025-04-11 17:31:10,194 [INFO] Phase win: Collected 1unique candidate(s):[((10, 9), (2, 9))]
2025-04-11 17:31:10,194 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:10,202 [INFO] Final candidates: []
2025-04-11 17:31:10,202 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,203 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,203 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,203 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(7)), (np.int64(8), np.int64(7)))
2025-04-11 17:31:10,211 [INFO] Final candidates: []
2025-04-11 17:31:10,211 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,214 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,214 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,214 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,214 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,215 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,215 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,215 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,215 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,215 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,215 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,219 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,220 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,220 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,220 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,351 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:10,351 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,352 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(11), np.int64(13)))
2025-04-11 17:31:10,360 [INFO] Final candidates: []
2025-04-11 17:31:10,360 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,363 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,363 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,363 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,363 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,364 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,364 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,364 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,364 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,364 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,364 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,369 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,369 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,369 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,369 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,487 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,487 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,487 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(7), np.int64(15)))
2025-04-11 17:31:10,496 [INFO] Final candidates: []
2025-04-11 17:31:10,496 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,499 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,499 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,499 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,499 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,501 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,501 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,501 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,501 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,501 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,501 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,505 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,505 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,505 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,505 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,506 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,506 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,506 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(10), np.int64(13)))
2025-04-11 17:31:10,514 [INFO] Final candidates: []
2025-04-11 17:31:10,514 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,517 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,517 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,517 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,517 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,518 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,518 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,518 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,518 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,518 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,518 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,523 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,523 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,523 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,523 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,569 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:10,569 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,569 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(10), np.int64(13)))
2025-04-11 17:31:10,578 [INFO] Final candidates: []
2025-04-11 17:31:10,578 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,581 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,581 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,581 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,581 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,582 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,582 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,582 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,582 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,582 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,582 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,586 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,587 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,587 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,587 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,677 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:10,678 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,678 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(6)), (np.int64(7), np.int64(12)))
2025-04-11 17:31:10,686 [INFO] Final candidates: []
2025-04-11 17:31:10,686 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,689 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,689 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,689 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,689 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,690 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,690 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,690 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,690 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,690 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,690 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,695 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,695 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,695 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,695 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,861 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,862 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,862 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(8)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:10,870 [INFO] Final candidates: []
2025-04-11 17:31:10,870 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,873 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,873 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,873 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,873 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,874 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,874 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,874 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,874 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,874 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,874 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,879 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,879 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,879 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,879 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,887 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,887 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,887 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(12)), (np.int64(13), np.int64(9)))
2025-04-11 17:31:10,896 [INFO] Final candidates: []
2025-04-11 17:31:10,896 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,899 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,899 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,899 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,899 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,900 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,900 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,900 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,900 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,900 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,900 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,904 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,904 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,904 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,904 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,952 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,952 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,952 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(10)), (np.int64(13), np.int64(9)))
2025-04-11 17:31:10,961 [INFO] Final candidates: []
2025-04-11 17:31:10,961 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,964 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,964 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,964 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,964 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,965 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,965 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,965 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,965 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,965 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,965 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,969 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,969 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,969 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:10,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:10,970 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:10,970 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(12), np.int64(8)))
2025-04-11 17:31:10,978 [INFO] Final candidates: []
2025-04-11 17:31:10,978 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:10,981 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:10,981 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,981 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,981 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:10,982 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:10,982 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:10,983 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:10,983 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:10,983 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:10,983 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:10,987 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:10,987 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:10,987 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:10,987 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,113 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,113 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,113 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(10)))
2025-04-11 17:31:11,122 [INFO] Final candidates: []
2025-04-11 17:31:11,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,125 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,125 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,125 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,125 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,126 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,126 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,126 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,126 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,126 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,126 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,131 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,131 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,131 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,145 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,146 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,146 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(4), np.int64(11)))
2025-04-11 17:31:11,154 [INFO] Final candidates: []
2025-04-11 17:31:11,154 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,157 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,157 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,157 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,157 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,158 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,158 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,158 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,158 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,158 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,158 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,162 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,162 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,162 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,162 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,268 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,269 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,269 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 17:31:11,277 [INFO] Final candidates: []
2025-04-11 17:31:11,277 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,280 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,280 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,280 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,280 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,281 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,281 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,281 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,281 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,282 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,282 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,286 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,286 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,286 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,286 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,404 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,404 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,404 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(11)), (np.int64(5), np.int64(11)))
2025-04-11 17:31:11,413 [INFO] Final candidates: []
2025-04-11 17:31:11,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,416 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,416 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,416 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,416 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,417 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,417 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,417 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,417 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,417 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,417 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,422 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,422 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,422 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,422 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,532 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,532 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,533 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(12), np.int64(9)))
2025-04-11 17:31:11,541 [INFO] Final candidates: []
2025-04-11 17:31:11,541 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,543 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,543 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,543 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,544 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,545 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,545 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,545 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,545 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,545 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,545 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,550 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,550 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,550 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,550 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,580 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,580 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,580 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(14)), (np.int64(9), np.int64(10)))
2025-04-11 17:31:11,588 [INFO] Final candidates: []
2025-04-11 17:31:11,588 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,591 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,591 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,591 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,591 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,592 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,592 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,592 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,592 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,592 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,592 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,597 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,597 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,597 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,597 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,607 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,607 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,607 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:31:11,616 [INFO] Final candidates: []
2025-04-11 17:31:11,616 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,619 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,619 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,619 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,619 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,620 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,620 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,620 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,620 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,620 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,620 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,624 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,625 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,625 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,625 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,700 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:11,700 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,700 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(6), np.int64(8)))
2025-04-11 17:31:11,709 [INFO] Final candidates: []
2025-04-11 17:31:11,709 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,711 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,711 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,712 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,712 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,713 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,713 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,713 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,713 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,713 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,713 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,717 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,717 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,717 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,747 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,747 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,747 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(13)), (np.int64(13), np.int64(9)))
2025-04-11 17:31:11,756 [INFO] Final candidates: []
2025-04-11 17:31:11,756 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,758 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,758 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,758 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,758 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,760 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,760 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,760 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,760 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,760 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,760 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,764 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,764 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,764 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,764 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,765 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,765 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,765 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(6), np.int64(10)))
2025-04-11 17:31:11,773 [INFO] Final candidates: []
2025-04-11 17:31:11,773 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,776 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,776 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,776 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,776 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,777 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,777 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,777 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,777 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,777 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,777 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,782 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,782 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,782 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,782 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,852 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,853 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,853 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(13)), (np.int64(11), np.int64(10)))
2025-04-11 17:31:11,861 [INFO] Final candidates: []
2025-04-11 17:31:11,861 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,864 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,864 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,864 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,864 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,865 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,865 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,865 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,865 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,865 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,865 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,870 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,870 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,870 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,870 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,895 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,895 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,895 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(5), np.int64(8)))
2025-04-11 17:31:11,904 [INFO] Final candidates: []
2025-04-11 17:31:11,904 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:11,906 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:11,906 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,906 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,906 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:11,908 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:11,908 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:11,908 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:11,908 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:11,908 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:11,908 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:11,912 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:11,912 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:11,912 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:11,912 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:11,989 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:11,989 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:11,989 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(6)), (np.int64(8), np.int64(7)))
2025-04-11 17:31:11,998 [INFO] Final candidates: []
2025-04-11 17:31:11,998 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,000 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,000 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,001 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,001 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,002 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,002 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,002 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,002 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,002 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,002 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,006 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,006 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,006 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,006 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,122 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:12,122 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,123 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(9)), (np.int64(4), np.int64(8)))
2025-04-11 17:31:12,131 [INFO] Final candidates: []
2025-04-11 17:31:12,131 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,134 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,134 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,134 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,134 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,135 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,135 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,135 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,135 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,141 [INFO] Final candidates: [(2, 9)]
2025-04-11 17:31:12,141 [INFO] Phase defense: Found only one candidate: (2, 9)
2025-04-11 17:31:12,141 [INFO] Phase defense: Collected 10unique candidate(s):[((2, 9), (np.int64(2), np.int64(8))), ((2, 9), (np.int64(2), np.int64(7))), ((2, 9), (np.int64(1), np.int64(10))), ((2, 9), (np.int64(2), np.int64(11))), ((2, 9), (np.int64(1), np.int64(8))), ((2, 9), (np.int64(0), np.int64(9))), ((2, 9), (np.int64(3), np.int64(8))), ((2, 9), (np.int64(3), np.int64(10))), ((2, 9), (np.int64(1), np.int64(9))), ((2, 9), (np.int64(2), np.int64(10)))]
2025-04-11 17:31:12,141 [INFO] Phase 2 (defense): 10 candidate(s) found.
2025-04-11 17:31:12,141 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,336 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:12,336 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,336 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(10)))
2025-04-11 17:31:12,345 [INFO] Final candidates: []
2025-04-11 17:31:12,345 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,348 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,348 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,348 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,348 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,349 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,349 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,349 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,349 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,349 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,349 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,353 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,353 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,353 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,353 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,356 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,356 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,356 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(10)), (np.int64(5), np.int64(11)))
2025-04-11 17:31:12,364 [INFO] Final candidates: []
2025-04-11 17:31:12,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,367 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,367 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,367 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,367 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,368 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,368 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,369 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,369 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,369 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,369 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,373 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,373 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,373 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,373 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,428 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,428 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,428 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(10)), (np.int64(6), np.int64(14)))
2025-04-11 17:31:12,437 [INFO] Final candidates: []
2025-04-11 17:31:12,437 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,440 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,440 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,440 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,440 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,441 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,441 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,441 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,441 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,441 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,441 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,446 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,446 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,446 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,446 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,496 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,496 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,496 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(4), np.int64(11)))
2025-04-11 17:31:12,505 [INFO] Final candidates: []
2025-04-11 17:31:12,505 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,508 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,508 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,508 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,508 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,509 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,509 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,509 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,509 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,509 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,509 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,513 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,513 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,513 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,514 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,562 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,562 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,562 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(13)), (np.int64(4), np.int64(11)))
2025-04-11 17:31:12,571 [INFO] Final candidates: []
2025-04-11 17:31:12,571 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,574 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,574 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,574 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,574 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,575 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,575 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,575 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,575 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,575 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,575 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,579 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,579 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,579 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,579 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,692 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,692 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,692 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(11), np.int64(10)))
2025-04-11 17:31:12,700 [INFO] Final candidates: []
2025-04-11 17:31:12,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,703 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,703 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,703 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,705 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,705 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,705 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,705 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,705 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,705 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,709 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,709 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,709 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,711 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,712 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,712 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(14)), (np.int64(11), np.int64(11)))
2025-04-11 17:31:12,720 [INFO] Final candidates: []
2025-04-11 17:31:12,720 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,723 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,723 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,723 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,723 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,724 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,724 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,724 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,724 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,724 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,729 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,729 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,729 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,800 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:12,801 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,801 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(14)), (np.int64(4), np.int64(7)))
2025-04-11 17:31:12,809 [INFO] Final candidates: []
2025-04-11 17:31:12,809 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,812 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,812 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,812 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,812 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,814 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,814 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,814 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,814 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,814 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,814 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,818 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,818 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,818 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,818 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,876 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,876 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,876 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(11)), (np.int64(12), np.int64(8)))
2025-04-11 17:31:12,885 [INFO] Final candidates: []
2025-04-11 17:31:12,885 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,888 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,888 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,888 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,888 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,889 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,889 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,889 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,889 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,889 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,889 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,893 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,893 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,893 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:12,931 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:12,931 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:12,931 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(13), np.int64(9)))
2025-04-11 17:31:12,939 [INFO] Final candidates: []
2025-04-11 17:31:12,939 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:12,942 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:12,942 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,942 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,942 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:12,943 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:12,943 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:12,943 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:12,943 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:12,943 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:12,943 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:12,948 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:12,948 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:12,948 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:12,948 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,111 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,111 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,111 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(8), np.int64(16)))
2025-04-11 17:31:13,120 [INFO] Final candidates: []
2025-04-11 17:31:13,120 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,123 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,123 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,123 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,124 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,124 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,124 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,124 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,124 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,124 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,129 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,129 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,129 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,129 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,355 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,355 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,355 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(7), np.int64(12)))
2025-04-11 17:31:13,364 [INFO] Final candidates: []
2025-04-11 17:31:13,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,367 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,367 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,367 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,367 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,368 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,368 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,368 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,368 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,368 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,368 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,372 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,372 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,372 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,372 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,388 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,389 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,389 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(6), np.int64(10)))
2025-04-11 17:31:13,397 [INFO] Final candidates: []
2025-04-11 17:31:13,397 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,400 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,400 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,400 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,400 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,401 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,401 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,401 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,401 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,401 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,401 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,406 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,406 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,406 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,406 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,601 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,602 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,602 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:13,610 [INFO] Final candidates: []
2025-04-11 17:31:13,610 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,613 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,613 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,613 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,613 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,614 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,614 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,614 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,614 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,614 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,614 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,619 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,619 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,619 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,619 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,691 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,692 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,692 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:13,700 [INFO] Final candidates: []
2025-04-11 17:31:13,700 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,703 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,703 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,703 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,703 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,704 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,704 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,704 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,704 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,704 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,704 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,709 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,709 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,709 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,709 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,712 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,712 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,713 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(10), np.int64(11)))
2025-04-11 17:31:13,721 [INFO] Final candidates: []
2025-04-11 17:31:13,721 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,724 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,724 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,724 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,725 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,725 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,725 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,725 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,725 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,725 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,729 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,729 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,729 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,729 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,757 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,757 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,758 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(7)), (np.int64(7), np.int64(14)))
2025-04-11 17:31:13,766 [INFO] Final candidates: []
2025-04-11 17:31:13,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,769 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,769 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,769 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,769 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,770 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,770 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,770 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,770 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,770 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,770 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,775 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,775 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,775 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,775 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,964 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:13,964 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,964 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(8)), (np.int64(8), np.int64(13)))
2025-04-11 17:31:13,973 [INFO] Final candidates: []
2025-04-11 17:31:13,973 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:13,976 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:13,976 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,976 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,976 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:13,977 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:13,977 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:13,977 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:13,977 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:13,977 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:13,977 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:13,981 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:13,982 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:13,982 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:13,982 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:13,999 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:13,999 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:13,999 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(4), np.int64(11)))
2025-04-11 17:31:14,007 [INFO] Final candidates: []
2025-04-11 17:31:14,007 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:14,010 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:14,010 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,010 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,010 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:14,012 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:14,012 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,012 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,012 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:14,012 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:14,012 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:14,016 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:14,016 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:14,016 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:14,016 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:14,284 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:14,284 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:14,284 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(7), np.int64(13)))
2025-04-11 17:31:14,292 [INFO] Final candidates: []
2025-04-11 17:31:14,292 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:14,295 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:14,295 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,295 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,295 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:14,296 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:14,296 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,296 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,296 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:14,296 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:14,296 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:14,301 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:14,301 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:14,301 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:14,301 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:14,302 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:14,302 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:14,302 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(10), np.int64(10)))
2025-04-11 17:31:14,311 [INFO] Final candidates: []
2025-04-11 17:31:14,311 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:14,314 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:14,314 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,314 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,314 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:14,315 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:14,315 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,315 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,315 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:14,315 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:14,315 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:14,320 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:14,320 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:14,320 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:14,320 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:14,325 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:14,325 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:14,325 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(7), np.int64(7)))
2025-04-11 17:31:14,333 [INFO] Final candidates: []
2025-04-11 17:31:14,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:14,336 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:14,336 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,336 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,336 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:14,337 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:14,337 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,337 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,337 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:14,338 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:14,338 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:14,342 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:14,342 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:14,342 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:14,342 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:14,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:14,347 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:14,347 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(7), np.int64(13)))
2025-04-11 17:31:14,355 [INFO] Final candidates: []
2025-04-11 17:31:14,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:14,358 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)]
2025-04-11 17:31:14,358 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,358 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,358 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=6, window [0 0 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9)] triggers candidate.
2025-04-11 17:31:14,360 [DEBUG] board coords: [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)]
2025-04-11 17:31:14,360 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:14,360 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 9), (2, 9)]
2025-04-11 17:31:14,360 [DEBUG] check_window_intermediate_custom (only one inserted(2, 9)): For L=7, window [0 0 2 2 2 2 2] with coords [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9)] triggers candidate.
2025-04-11 17:31:14,360 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)] triggers candidate.
2025-04-11 17:31:14,360 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:14,365 [INFO] Final candidates: [(2, 9), (8, 9)]
2025-04-11 17:31:14,365 [INFO] Phase defense: Collected 1unique candidate(s):[((2, 9), (8, 9))]
2025-04-11 17:31:14,365 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:14,365 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:14,393 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:14,393 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:31:14,393 [INFO] MCTS (defense candidates) selected move: K11,K4
2025-04-11 17:31:29,383 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:31:29,392 [INFO] Final candidates: []
2025-04-11 17:31:29,392 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,401 [INFO] Final candidates: [(8, 9)]
2025-04-11 17:31:29,401 [INFO] Phase defense: Found only one candidate: (8, 9)
2025-04-11 17:31:29,401 [INFO] Phase defense: Collected 5unique candidate(s):[((8, 9), (np.int64(8), np.int64(8))), ((8, 9), (np.int64(7), np.int64(10))), ((8, 9), (np.int64(8), np.int64(7))), ((8, 9), (np.int64(9), np.int64(10))), ((8, 9), (np.int64(9), np.int64(8)))]
2025-04-11 17:31:29,401 [INFO] Phase 2 (defense): 5 candidate(s) found.
2025-04-11 17:31:29,401 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:31:29,401 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 9), (np.int64(8), np.int64(8)))
2025-04-11 17:31:29,409 [INFO] Final candidates: []
2025-04-11 17:31:29,409 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,418 [INFO] Final candidates: []
2025-04-11 17:31:29,418 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,418 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:31:29,418 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:29,615 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:29,615 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 9), (np.int64(9), np.int64(8)))
2025-04-11 17:31:29,623 [INFO] Final candidates: []
2025-04-11 17:31:29,623 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,632 [INFO] Final candidates: []
2025-04-11 17:31:29,632 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,632 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:29,715 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:29,715 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 9), (np.int64(8), np.int64(7)))
2025-04-11 17:31:29,724 [INFO] Final candidates: []
2025-04-11 17:31:29,724 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,732 [INFO] Final candidates: []
2025-04-11 17:31:29,732 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,732 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:29,902 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:29,902 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 9), (np.int64(7), np.int64(10)))
2025-04-11 17:31:29,911 [INFO] Final candidates: []
2025-04-11 17:31:29,911 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,919 [INFO] Final candidates: []
2025-04-11 17:31:29,919 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:29,919 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:29,987 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:29,987 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 9), (np.int64(9), np.int64(10)))
2025-04-11 17:31:29,995 [INFO] Final candidates: []
2025-04-11 17:31:29,995 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,003 [INFO] Final candidates: []
2025-04-11 17:31:30,003 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,004 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:30,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:30,219 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:30,220 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(9)), (np.int64(8), np.int64(16)))
2025-04-11 17:31:30,228 [INFO] Final candidates: []
2025-04-11 17:31:30,228 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,236 [INFO] Final candidates: []
2025-04-11 17:31:30,236 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,237 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:30,461 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:30,461 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:30,461 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(7)), (np.int64(4), np.int64(7)))
2025-04-11 17:31:30,470 [INFO] Final candidates: []
2025-04-11 17:31:30,470 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,478 [INFO] Final candidates: []
2025-04-11 17:31:30,478 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,479 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:30,585 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:30,585 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:30,585 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(9), np.int64(15)))
2025-04-11 17:31:30,593 [INFO] Final candidates: []
2025-04-11 17:31:30,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,601 [INFO] Final candidates: []
2025-04-11 17:31:30,601 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,602 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:30,680 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:30,680 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:30,680 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(7), np.int64(6)))
2025-04-11 17:31:30,687 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:31:30,687 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:30,687 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 14), (5, 11)]
2025-04-11 17:31:30,687 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:31:30,689 [INFO] Final candidates: [(2, 14), (5, 11)]
2025-04-11 17:31:30,689 [INFO] Phase win: Collected 1unique candidate(s):[((2, 14), (5, 11))]
2025-04-11 17:31:30,689 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:30,698 [INFO] Final candidates: []
2025-04-11 17:31:30,698 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,699 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:30,723 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:30,723 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:30,723 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(5), np.int64(11)))
2025-04-11 17:31:30,731 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:31:30,731 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:30,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 14), (3, 13)]
2025-04-11 17:31:30,731 [DEBUG] check_window_intermediate_custom (only one inserted(3, 13)): For L=6, window [0 0 2 2 2 2] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:31:30,731 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)] triggers candidate.
2025-04-11 17:31:30,731 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:30,731 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:30,731 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:30,731 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (9, 7)]
2025-04-11 17:31:30,731 [DEBUG] check_window_intermediate_custom (only one inserted(8, 8)): For L=6, window [2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:30,733 [INFO] Final candidates: [(8, 8), (3, 13)]
2025-04-11 17:31:30,733 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (3, 13))]
2025-04-11 17:31:30,733 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:30,741 [INFO] Final candidates: []
2025-04-11 17:31:30,741 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,741 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:30,864 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:30,864 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:30,864 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(8), np.int64(8)))
2025-04-11 17:31:30,871 [DEBUG] board coords: [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)]
2025-04-11 17:31:30,871 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:30,871 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 13), (5, 11)]
2025-04-11 17:31:30,871 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)] triggers candidate.
2025-04-11 17:31:30,871 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:30,871 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:31:30,871 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (9, 7)]
2025-04-11 17:31:30,871 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:30,873 [INFO] Final candidates: [(3, 13), (9, 7), (5, 11)]
2025-04-11 17:31:30,873 [INFO] Phase win: Collected 3unique candidate(s):[((9, 7), (5, 11)), ((3, 13), (5, 11)), ((3, 13), (9, 7))]
2025-04-11 17:31:30,873 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:31:30,881 [INFO] Final candidates: []
2025-04-11 17:31:30,881 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,882 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:30,914 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:30,914 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:30,914 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(8), np.int64(13)))
2025-04-11 17:31:30,922 [INFO] Final candidates: []
2025-04-11 17:31:30,922 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,931 [INFO] Final candidates: []
2025-04-11 17:31:30,931 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:30,931 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,048 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:31,048 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,049 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(4), np.int64(7)))
2025-04-11 17:31:31,049 [DEBUG] board coords: [(4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12)]
2025-04-11 17:31:31,049 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:31:31,049 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 10), (4, 11)]
2025-04-11 17:31:31,049 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12)] triggers candidate.
2025-04-11 17:31:31,057 [INFO] Final candidates: [(4, 10), (4, 11)]
2025-04-11 17:31:31,057 [INFO] Phase win: Collected 1unique candidate(s):[((4, 10), (4, 11))]
2025-04-11 17:31:31,057 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:31,065 [INFO] Final candidates: []
2025-04-11 17:31:31,065 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,066 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,075 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:31,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,075 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(2), np.int64(9)))
2025-04-11 17:31:31,083 [INFO] Final candidates: []
2025-04-11 17:31:31,083 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,092 [INFO] Final candidates: []
2025-04-11 17:31:31,092 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,093 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,138 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:31,138 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,138 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(13)), (np.int64(8), np.int64(16)))
2025-04-11 17:31:31,146 [INFO] Final candidates: []
2025-04-11 17:31:31,146 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,154 [INFO] Final candidates: []
2025-04-11 17:31:31,154 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,155 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,402 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:31,402 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,402 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(12), np.int64(8)))
2025-04-11 17:31:31,411 [INFO] Final candidates: []
2025-04-11 17:31:31,411 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,419 [INFO] Final candidates: []
2025-04-11 17:31:31,419 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,419 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,471 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:31,471 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,471 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:31,479 [INFO] Final candidates: []
2025-04-11 17:31:31,479 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,487 [INFO] Final candidates: []
2025-04-11 17:31:31,487 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,488 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,658 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:31,658 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,658 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(12)), (np.int64(10), np.int64(8)))
2025-04-11 17:31:31,666 [INFO] Final candidates: []
2025-04-11 17:31:31,666 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,674 [INFO] Final candidates: []
2025-04-11 17:31:31,674 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,675 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,909 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:31,909 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,910 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(10), np.int64(8)))
2025-04-11 17:31:31,919 [INFO] Final candidates: []
2025-04-11 17:31:31,919 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,928 [INFO] Final candidates: []
2025-04-11 17:31:31,928 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,929 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:31,954 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:31,954 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:31,954 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(10)), (np.int64(11), np.int64(7)))
2025-04-11 17:31:31,963 [INFO] Final candidates: []
2025-04-11 17:31:31,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,971 [INFO] Final candidates: []
2025-04-11 17:31:31,971 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:31,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,116 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:32,116 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,116 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(13)), (np.int64(9), np.int64(7)))
2025-04-11 17:31:32,123 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:31:32,123 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:32,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 14), (5, 11)]
2025-04-11 17:31:32,123 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:31:32,123 [DEBUG] board coords: [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)]
2025-04-11 17:31:32,123 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:31:32,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (8, 8)]
2025-04-11 17:31:32,123 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)] triggers candidate.
2025-04-11 17:31:32,123 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:32,123 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:31:32,123 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (8, 8)]
2025-04-11 17:31:32,123 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:32,124 [DEBUG] board coords: [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:32,124 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:31:32,124 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (8, 8)]
2025-04-11 17:31:32,124 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 0 2] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:32,125 [INFO] Final candidates: [(2, 14), (8, 8), (5, 11)]
2025-04-11 17:31:32,125 [INFO] Phase win: Collected 3unique candidate(s):[((2, 14), (8, 8)), ((8, 8), (5, 11)), ((2, 14), (5, 11))]
2025-04-11 17:31:32,125 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:31:32,133 [INFO] Final candidates: []
2025-04-11 17:31:32,133 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,133 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:32,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,313 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 17:31:32,320 [DEBUG] board coords: [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)]
2025-04-11 17:31:32,320 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:32,320 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 13), (5, 11)]
2025-04-11 17:31:32,320 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)] triggers candidate.
2025-04-11 17:31:32,320 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:32,320 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:31:32,320 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 11), (9, 7)]
2025-04-11 17:31:32,320 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 2 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:32,322 [INFO] Final candidates: [(3, 13), (9, 7), (5, 11)]
2025-04-11 17:31:32,322 [INFO] Phase win: Collected 3unique candidate(s):[((9, 7), (5, 11)), ((3, 13), (5, 11)), ((3, 13), (9, 7))]
2025-04-11 17:31:32,322 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:31:32,330 [INFO] Final candidates: []
2025-04-11 17:31:32,330 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,364 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:32,364 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,364 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(9), np.int64(12)))
2025-04-11 17:31:32,372 [INFO] Final candidates: []
2025-04-11 17:31:32,372 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,381 [INFO] Final candidates: []
2025-04-11 17:31:32,381 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,443 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:32,443 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,443 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(4), np.int64(11)))
2025-04-11 17:31:32,453 [INFO] Final candidates: []
2025-04-11 17:31:32,453 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,463 [INFO] Final candidates: []
2025-04-11 17:31:32,463 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,463 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,615 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:32,615 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,615 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(15)), (np.int64(8), np.int64(7)))
2025-04-11 17:31:32,623 [INFO] Final candidates: []
2025-04-11 17:31:32,624 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,632 [INFO] Final candidates: []
2025-04-11 17:31:32,632 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,632 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,730 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:32,730 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,730 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(10), np.int64(12)))
2025-04-11 17:31:32,738 [INFO] Final candidates: []
2025-04-11 17:31:32,738 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,746 [INFO] Final candidates: []
2025-04-11 17:31:32,746 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,747 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,886 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:32,886 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,886 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(14)), (np.int64(2), np.int64(12)))
2025-04-11 17:31:32,894 [INFO] Final candidates: []
2025-04-11 17:31:32,894 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,902 [INFO] Final candidates: []
2025-04-11 17:31:32,903 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,903 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:32,959 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:32,959 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:32,959 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(11), np.int64(11)))
2025-04-11 17:31:32,967 [INFO] Final candidates: []
2025-04-11 17:31:32,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,977 [INFO] Final candidates: []
2025-04-11 17:31:32,977 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:32,977 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,202 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:33,202 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,202 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(9)), (np.int64(7), np.int64(13)))
2025-04-11 17:31:33,210 [INFO] Final candidates: []
2025-04-11 17:31:33,210 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,218 [INFO] Final candidates: []
2025-04-11 17:31:33,218 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,219 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,316 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:33,316 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,316 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(9), np.int64(10)))
2025-04-11 17:31:33,325 [INFO] Final candidates: []
2025-04-11 17:31:33,325 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,333 [INFO] Final candidates: []
2025-04-11 17:31:33,333 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,333 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,409 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:33,409 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,409 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(6), np.int64(8)))
2025-04-11 17:31:33,419 [INFO] Final candidates: []
2025-04-11 17:31:33,419 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,428 [INFO] Final candidates: []
2025-04-11 17:31:33,428 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,467 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:33,467 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,467 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(9), np.int64(15)))
2025-04-11 17:31:33,476 [INFO] Final candidates: []
2025-04-11 17:31:33,476 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,484 [INFO] Final candidates: []
2025-04-11 17:31:33,484 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,484 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,577 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:33,577 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,577 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(3), np.int64(11)))
2025-04-11 17:31:33,585 [INFO] Final candidates: []
2025-04-11 17:31:33,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,593 [INFO] Final candidates: []
2025-04-11 17:31:33,593 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,593 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,694 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:33,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,694 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(13)), (np.int64(2), np.int64(12)))
2025-04-11 17:31:33,703 [INFO] Final candidates: []
2025-04-11 17:31:33,703 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,710 [INFO] Final candidates: []
2025-04-11 17:31:33,710 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,711 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,816 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:33,816 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,816 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(9), np.int64(12)))
2025-04-11 17:31:33,827 [INFO] Final candidates: []
2025-04-11 17:31:33,827 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,835 [INFO] Final candidates: []
2025-04-11 17:31:33,835 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,835 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:33,941 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:33,941 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:33,941 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(8), np.int64(16)))
2025-04-11 17:31:33,949 [INFO] Final candidates: []
2025-04-11 17:31:33,949 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,957 [INFO] Final candidates: []
2025-04-11 17:31:33,957 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:33,958 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:34,271 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:34,272 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:34,272 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(5), np.int64(8)))
2025-04-11 17:31:34,280 [INFO] Final candidates: []
2025-04-11 17:31:34,280 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,288 [INFO] Final candidates: []
2025-04-11 17:31:34,288 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,288 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:34,463 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:34,464 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:34,464 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(7), np.int64(14)))
2025-04-11 17:31:34,472 [INFO] Final candidates: []
2025-04-11 17:31:34,472 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,480 [INFO] Final candidates: []
2025-04-11 17:31:34,480 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,481 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:34,567 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:34,568 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:34,568 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(2), np.int64(9)))
2025-04-11 17:31:34,576 [INFO] Final candidates: []
2025-04-11 17:31:34,576 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,584 [INFO] Final candidates: []
2025-04-11 17:31:34,584 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,585 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:34,740 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:34,741 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:34,741 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(8), np.int64(12)))
2025-04-11 17:31:34,749 [INFO] Final candidates: []
2025-04-11 17:31:34,749 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,758 [INFO] Final candidates: []
2025-04-11 17:31:34,758 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,759 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:34,848 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:34,848 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:34,848 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:34,857 [INFO] Final candidates: []
2025-04-11 17:31:34,857 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,865 [INFO] Final candidates: []
2025-04-11 17:31:34,865 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:34,865 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:35,100 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:35,100 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:35,100 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(9), np.int64(12)))
2025-04-11 17:31:35,109 [INFO] Final candidates: []
2025-04-11 17:31:35,109 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,117 [INFO] Final candidates: []
2025-04-11 17:31:35,117 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,117 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:35,181 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:35,181 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:35,181 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(8)), (np.int64(2), np.int64(9)))
2025-04-11 17:31:35,190 [INFO] Final candidates: []
2025-04-11 17:31:35,190 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,198 [INFO] Final candidates: []
2025-04-11 17:31:35,198 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,198 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:35,304 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:35,304 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:35,305 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(11)), (np.int64(13), np.int64(9)))
2025-04-11 17:31:35,314 [INFO] Final candidates: []
2025-04-11 17:31:35,314 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,322 [INFO] Final candidates: []
2025-04-11 17:31:35,322 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,322 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:35,328 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:35,328 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:35,328 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(12)), (np.int64(10), np.int64(13)))
2025-04-11 17:31:35,336 [INFO] Final candidates: []
2025-04-11 17:31:35,336 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,344 [INFO] Final candidates: []
2025-04-11 17:31:35,344 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,345 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:35,494 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:35,494 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:35,495 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(7), np.int64(14)))
2025-04-11 17:31:35,503 [INFO] Final candidates: []
2025-04-11 17:31:35,503 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,511 [INFO] Final candidates: []
2025-04-11 17:31:35,511 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,511 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:35,573 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:35,574 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:35,574 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(11)), (np.int64(10), np.int64(14)))
2025-04-11 17:31:35,582 [INFO] Final candidates: []
2025-04-11 17:31:35,582 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,590 [INFO] Final candidates: []
2025-04-11 17:31:35,590 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,590 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:35,803 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:35,803 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:35,803 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(10)), (np.int64(7), np.int64(6)))
2025-04-11 17:31:35,811 [INFO] Final candidates: []
2025-04-11 17:31:35,811 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,820 [INFO] Final candidates: []
2025-04-11 17:31:35,820 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:35,820 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:36,019 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:36,020 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:36,020 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(9), np.int64(15)))
2025-04-11 17:31:36,028 [INFO] Final candidates: []
2025-04-11 17:31:36,028 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:36,036 [INFO] Final candidates: []
2025-04-11 17:31:36,036 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:36,037 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:36,065 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:36,066 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:36,066 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:36,066 [DEBUG] board coords: [(4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12)]
2025-04-11 17:31:36,066 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:36,066 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 7), (4, 8)]
2025-04-11 17:31:36,066 [DEBUG] check_window_intermediate_custom (only one inserted(4, 8)): For L=6, window [0 0 2 2 2 2] with coords [(4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12)] triggers candidate.
2025-04-11 17:31:36,066 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13)] triggers candidate.
2025-04-11 17:31:36,066 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:36,066 [DEBUG] board coords: [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)]
2025-04-11 17:31:36,066 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:36,066 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 13), (4, 14)]
2025-04-11 17:31:36,066 [DEBUG] check_window_intermediate_custom (only one inserted(4, 13)): For L=6, window [2 2 2 2 0 0] with coords [(4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14)] triggers candidate.
2025-04-11 17:31:36,074 [INFO] Final candidates: [(4, 13), (4, 8)]
2025-04-11 17:31:36,074 [INFO] Phase win: Collected 1unique candidate(s):[((4, 13), (4, 8))]
2025-04-11 17:31:36,074 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:36,083 [INFO] Final candidates: []
2025-04-11 17:31:36,083 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:36,083 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:36,169 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:36,169 [INFO] MCTS: Search finished. Best move selected with 14 visits.
2025-04-11 17:31:36,169 [INFO] MCTS (defense candidates) selected move: K9,L8
2025-04-11 17:31:51,758 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:31:51,766 [INFO] Final candidates: []
2025-04-11 17:31:51,766 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:51,773 [DEBUG] board coords: [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:51,773 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:51,773 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 15), (3, 13)]
2025-04-11 17:31:51,773 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 0 2 2 2] with coords [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:51,773 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)] triggers candidate.
2025-04-11 17:31:51,773 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:51,773 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:51,773 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:51,773 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (9, 7)]
2025-04-11 17:31:51,774 [DEBUG] check_window_intermediate_custom (only one inserted(8, 8)): For L=6, window [2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:51,774 [DEBUG] board coords: [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)]
2025-04-11 17:31:51,774 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:51,774 [DEBUG] check_window_intermediate_custom: empty_cells=[(1, 15), (3, 13)]
2025-04-11 17:31:51,775 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 0 2 2 2 2] with coords [(1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9)] triggers candidate.
2025-04-11 17:31:51,775 [DEBUG] board coords: [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)]
2025-04-11 17:31:51,775 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:31:51,775 [DEBUG] check_window_intermediate_custom: empty_cells=[(3, 13), (8, 8)]
2025-04-11 17:31:51,775 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 2 2 0] with coords [(2, 14), (3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8)] triggers candidate.
2025-04-11 17:31:51,776 [INFO] Final candidates: [(8, 8), (3, 13), (1, 15)]
2025-04-11 17:31:51,776 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (1, 15)), ((8, 8), (3, 13)), ((8, 8), (1, 15))]
2025-04-11 17:31:51,776 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:51,776 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:31:51,776 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 8), (1, 15))
2025-04-11 17:31:51,782 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:51,782 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:51,782 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:51,782 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:51,783 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:51,783 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:51,783 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:51,783 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:51,783 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:51,783 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:51,783 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:51,783 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:51,784 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:51,784 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:51,784 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:51,784 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:51,784 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:51,784 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:51,784 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:51,784 [INFO] Phase win: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:51,784 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:31:51,792 [INFO] Final candidates: []
2025-04-11 17:31:51,792 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:51,793 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:31:51,793 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:51,953 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:51,953 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (1, 15))
2025-04-11 17:31:51,960 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:51,960 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:51,960 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (9, 7)]
2025-04-11 17:31:51,960 [DEBUG] check_window_intermediate_custom (only one inserted(8, 8)): For L=6, window [2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:51,961 [DEBUG] board coords: [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)]
2025-04-11 17:31:51,961 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:51,961 [DEBUG] check_window_intermediate_custom: empty_cells=[(8, 8), (9, 7)]
2025-04-11 17:31:51,961 [DEBUG] check_window_intermediate_custom (only one inserted(8, 8)): For L=7, window [2 2 2 2 2 0 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:51,962 [INFO] Final candidates: [(8, 8), (0, 16)]
2025-04-11 17:31:51,962 [INFO] Phase win: Collected 1unique candidate(s):[((8, 8), (0, 16))]
2025-04-11 17:31:51,962 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:51,970 [INFO] Final candidates: []
2025-04-11 17:31:51,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:51,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:51,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:51,970 [DEBUG] Tree_policy iteration 1: Expanding move ((8, 8), (3, 13))
2025-04-11 17:31:51,977 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:51,977 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:51,977 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (1, 15)]
2025-04-11 17:31:51,977 [DEBUG] check_window_intermediate_custom (only one inserted(1, 15)): For L=6, window [0 0 2 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:51,977 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:51,977 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:51,977 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:51,977 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:51,978 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:51,978 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:51,978 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (1, 15)]
2025-04-11 17:31:51,978 [DEBUG] check_window_intermediate_custom (only one inserted(1, 15)): For L=7, window [0 0 2 2 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:51,978 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:51,978 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:51,978 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:51,979 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:51,979 [INFO] Final candidates: [(9, 7), (1, 15)]
2025-04-11 17:31:51,979 [INFO] Phase win: Collected 1unique candidate(s):[((9, 7), (1, 15))]
2025-04-11 17:31:51,979 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:31:51,987 [INFO] Final candidates: []
2025-04-11 17:31:51,987 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:31:51,988 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:51,988 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:51,988 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:51,988 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(10)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:51,996 [INFO] Final candidates: []
2025-04-11 17:31:51,996 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,002 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,002 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,002 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,002 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,003 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,003 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,003 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,003 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,003 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,003 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,004 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,004 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,004 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,004 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,004 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,004 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,004 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,004 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,004 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,005 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,005 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,005 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,214 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:52,214 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,214 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(7), np.int64(14)))
2025-04-11 17:31:52,222 [INFO] Final candidates: []
2025-04-11 17:31:52,222 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,229 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,229 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,229 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,229 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,229 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,229 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,229 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,229 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,230 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,230 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,230 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,230 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,230 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,230 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,230 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,230 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,230 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,230 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,231 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,231 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,231 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,231 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,246 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:52,246 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,246 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(2), np.int64(15)))
2025-04-11 17:31:52,254 [INFO] Final candidates: []
2025-04-11 17:31:52,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,260 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,260 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,260 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,260 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,261 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,261 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,261 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,261 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,262 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,262 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,262 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,262 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,262 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,262 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,262 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,262 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,262 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,262 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,263 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,263 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,263 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,263 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,380 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:52,381 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,381 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(6)))
2025-04-11 17:31:52,389 [INFO] Final candidates: []
2025-04-11 17:31:52,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,395 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,395 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,395 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,395 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,395 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,395 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,395 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,395 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,396 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,396 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,396 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,396 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,397 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,397 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,397 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,397 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,397 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,397 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,397 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,397 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,397 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,397 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,441 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:52,441 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,441 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(12)), (np.int64(10), np.int64(14)))
2025-04-11 17:31:52,449 [INFO] Final candidates: []
2025-04-11 17:31:52,449 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,455 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,455 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,455 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,455 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,456 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,456 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,456 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,456 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,456 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,456 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,457 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,457 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,457 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,457 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,457 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,457 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,457 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,457 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,458 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,458 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,458 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,458 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,539 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:52,540 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,540 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(12), np.int64(8)))
2025-04-11 17:31:52,548 [INFO] Final candidates: []
2025-04-11 17:31:52,548 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,554 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,554 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,554 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,554 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,555 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,555 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,555 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,555 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,555 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,555 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,555 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,555 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,556 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,556 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,556 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,556 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,556 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,556 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,556 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,556 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,556 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,639 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:52,639 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,639 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(12)), (np.int64(7), np.int64(11)))
2025-04-11 17:31:52,647 [INFO] Final candidates: []
2025-04-11 17:31:52,647 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,654 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,654 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,654 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,654 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,654 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,654 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,654 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,654 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,655 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,655 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,655 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,655 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,655 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,655 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,655 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,655 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,655 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,655 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,656 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,656 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,656 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,656 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,872 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:52,872 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,872 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(10), np.int64(7)))
2025-04-11 17:31:52,880 [INFO] Final candidates: []
2025-04-11 17:31:52,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,887 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:52,887 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,887 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:52,887 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,887 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,887 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,888 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,888 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:52,888 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:52,888 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:52,888 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:52,889 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,889 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,889 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,889 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,889 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,889 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,889 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:52,889 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:52,889 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:52,889 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:52,926 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:52,926 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:52,926 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(16)), (np.int64(1), np.int64(17)))
2025-04-11 17:31:52,934 [INFO] Final candidates: []
2025-04-11 17:31:52,934 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:52,941 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,941 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,941 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,941 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,942 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:52,942 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:52,942 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:52,942 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:52,942 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:52,942 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:52,943 [INFO] Final candidates: [(3, 13), (9, 7)]
2025-04-11 17:31:52,943 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 13), (9, 7))]
2025-04-11 17:31:52,943 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:52,943 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,025 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:53,025 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,025 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(5), np.int64(8)))
2025-04-11 17:31:53,033 [INFO] Final candidates: []
2025-04-11 17:31:53,033 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,040 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,040 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,040 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,040 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,040 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,040 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,040 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,040 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,041 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,041 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,041 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,041 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,041 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,041 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,041 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,041 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,041 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,041 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,042 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,042 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,042 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,042 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,043 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:53,043 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,043 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(6), np.int64(7)))
2025-04-11 17:31:53,051 [INFO] Final candidates: []
2025-04-11 17:31:53,051 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,057 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,057 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,057 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,057 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,058 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,058 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,058 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,058 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,058 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,058 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,058 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,058 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,059 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,059 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,059 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,059 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,059 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,059 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,059 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,059 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,059 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,059 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,075 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:53,075 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,075 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(8)), (np.int64(7), np.int64(6)))
2025-04-11 17:31:53,083 [INFO] Final candidates: []
2025-04-11 17:31:53,083 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,089 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,089 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,089 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,090 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,090 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,090 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,090 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,090 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,091 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,091 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,091 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,091 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,091 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,091 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,091 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,091 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,091 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,091 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,092 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,092 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,092 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,092 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,184 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:53,184 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,184 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(8)), (np.int64(7), np.int64(15)))
2025-04-11 17:31:53,193 [INFO] Final candidates: []
2025-04-11 17:31:53,193 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,199 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,199 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,199 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,199 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,200 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,200 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,200 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,200 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,201 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,201 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,201 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,201 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,201 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,201 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,201 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,201 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,201 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,202 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,202 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,202 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,202 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,202 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,282 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:53,282 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,282 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(7), np.int64(11)))
2025-04-11 17:31:53,290 [INFO] Final candidates: []
2025-04-11 17:31:53,290 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,296 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,296 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,296 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,296 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,297 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,297 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,297 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,297 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,298 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,298 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,298 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,298 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,298 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,298 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,298 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,298 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,298 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,298 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,299 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,299 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,299 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,299 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,394 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:53,394 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,394 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(8)), (np.int64(8), np.int64(16)))
2025-04-11 17:31:53,403 [INFO] Final candidates: []
2025-04-11 17:31:53,403 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,409 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,409 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,410 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,410 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,410 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,410 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,410 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,411 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,411 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,411 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,411 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,411 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,411 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,411 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,411 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,411 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,411 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,412 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,412 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,412 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,412 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,571 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:53,571 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,571 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(7)), (np.int64(11), np.int64(13)))
2025-04-11 17:31:53,579 [INFO] Final candidates: []
2025-04-11 17:31:53,580 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,586 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,586 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,586 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,586 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,587 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,587 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,587 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,587 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,588 [INFO] Final candidates: [(3, 13), (0, 16)]
2025-04-11 17:31:53,588 [INFO] Phase defense: Collected 1unique candidate(s):[((3, 13), (0, 16))]
2025-04-11 17:31:53,588 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:31:53,588 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,693 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:53,694 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,694 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(10)), (np.int64(4), np.int64(13)))
2025-04-11 17:31:53,702 [INFO] Final candidates: []
2025-04-11 17:31:53,702 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,708 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,708 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,708 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,708 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,709 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,709 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,709 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,709 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,709 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,709 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,710 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,710 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,710 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,710 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,710 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,710 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,710 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,710 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,710 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,711 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,711 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,711 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,739 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:53,739 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,739 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(8), np.int64(16)))
2025-04-11 17:31:53,747 [INFO] Final candidates: []
2025-04-11 17:31:53,747 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,754 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,754 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,754 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,754 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,754 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,754 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,754 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,754 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,755 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,755 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,755 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,755 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,755 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,755 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,755 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,755 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,755 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,755 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,756 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,756 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,756 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,756 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,780 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:53,780 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,780 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(15)), (np.int64(7), np.int64(14)))
2025-04-11 17:31:53,788 [INFO] Final candidates: []
2025-04-11 17:31:53,788 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,795 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,795 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,795 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,795 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,795 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,795 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,795 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,795 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,796 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,796 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,796 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,796 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,796 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,796 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,796 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,796 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,796 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,796 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,797 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,797 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,797 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,797 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:53,879 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:53,879 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:53,879 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:53,888 [INFO] Final candidates: []
2025-04-11 17:31:53,888 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:53,894 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:53,894 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,894 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,894 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:53,894 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,894 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,894 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,895 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,895 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:53,895 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:53,895 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:53,895 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:53,895 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:53,896 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:53,896 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:53,896 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:53,896 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:53,896 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:53,896 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:53,896 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:53,896 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:53,896 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:54,169 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:54,169 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:54,169 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(8)), (np.int64(10), np.int64(13)))
2025-04-11 17:31:54,177 [INFO] Final candidates: []
2025-04-11 17:31:54,177 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:54,184 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:54,184 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,184 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,184 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:54,184 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,184 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,184 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,184 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,185 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:54,185 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,185 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,185 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:54,185 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:54,185 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:54,185 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,185 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,185 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,185 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,186 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:54,186 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:54,186 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:54,186 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:54,288 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:54,288 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:54,288 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(9), np.int64(10)))
2025-04-11 17:31:54,296 [INFO] Final candidates: []
2025-04-11 17:31:54,296 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:54,303 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:54,303 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,303 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,303 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:54,303 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,303 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,303 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,303 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,304 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:54,304 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,304 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,304 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:54,304 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:54,304 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:54,304 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,304 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,304 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,304 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,305 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:54,305 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:54,305 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:54,305 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:54,356 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:54,356 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:54,356 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(8)), (np.int64(10), np.int64(8)))
2025-04-11 17:31:54,364 [INFO] Final candidates: []
2025-04-11 17:31:54,364 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:54,370 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:54,370 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,370 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,370 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:54,371 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,371 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,371 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,371 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,372 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:54,372 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,372 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,372 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:54,372 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:54,372 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:54,372 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,372 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,372 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,372 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,373 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:54,373 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:54,373 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:54,373 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:54,497 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:54,498 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:54,498 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(14)), (np.int64(10), np.int64(13)))
2025-04-11 17:31:54,506 [INFO] Final candidates: []
2025-04-11 17:31:54,506 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:54,512 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:54,512 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,512 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,512 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:54,513 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,513 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,513 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,513 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,513 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:54,513 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,513 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,513 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:54,514 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:54,514 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:54,514 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,514 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,514 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,514 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,514 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:54,514 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:54,514 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:54,514 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:54,707 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:54,707 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:54,707 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(3), np.int64(8)))
2025-04-11 17:31:54,715 [INFO] Final candidates: []
2025-04-11 17:31:54,716 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:54,722 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:54,722 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,722 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,722 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:54,722 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,722 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,722 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,722 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,723 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:54,723 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,723 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,723 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:54,724 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:54,724 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:54,724 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,724 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,724 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,724 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,724 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:54,724 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:54,724 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:54,724 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:54,782 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:54,782 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:54,782 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(0), np.int64(14)), (np.int64(6), np.int64(7)))
2025-04-11 17:31:54,790 [INFO] Final candidates: []
2025-04-11 17:31:54,790 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:54,796 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:54,796 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,796 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,797 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:54,797 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,797 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,797 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,797 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,798 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:54,798 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,798 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,798 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:54,798 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:54,798 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:54,798 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,798 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,798 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,798 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,799 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:54,799 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:54,799 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:54,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:54,801 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:54,801 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:54,801 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(10), np.int64(12)))
2025-04-11 17:31:54,810 [INFO] Final candidates: []
2025-04-11 17:31:54,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:54,817 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:54,817 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,817 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,817 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:54,817 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,817 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,817 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,817 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,818 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:54,818 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:54,818 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:54,818 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:54,818 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:54,818 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:54,819 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:54,819 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:54,819 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:54,819 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:54,819 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:54,819 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:54,819 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:54,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,125 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:55,125 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,125 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(10), np.int64(7)))
2025-04-11 17:31:55,133 [INFO] Final candidates: []
2025-04-11 17:31:55,133 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,139 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,139 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,139 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,140 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,140 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,140 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,140 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,140 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,141 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,141 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,141 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,141 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,141 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,141 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,141 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,141 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,141 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,141 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,142 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,142 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,142 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,142 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,149 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:55,149 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,149 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(2), np.int64(12)))
2025-04-11 17:31:55,157 [INFO] Final candidates: []
2025-04-11 17:31:55,157 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,164 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,164 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,164 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,164 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,164 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,164 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,164 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,164 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,165 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,165 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,165 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,165 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,165 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,165 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,165 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,165 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,165 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,165 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,166 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,166 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,166 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,166 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,292 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:55,293 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,294 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(7)), (np.int64(7), np.int64(15)))
2025-04-11 17:31:55,302 [INFO] Final candidates: []
2025-04-11 17:31:55,302 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,308 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,308 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,308 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,308 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,309 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,309 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,309 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,309 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,309 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,309 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,309 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,309 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,310 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,310 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,310 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,310 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,310 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,310 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,310 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,310 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,310 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,310 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,576 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:55,576 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,577 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(7)), (np.int64(1), np.int64(13)))
2025-04-11 17:31:55,585 [INFO] Final candidates: []
2025-04-11 17:31:55,585 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,593 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,593 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,593 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,593 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,593 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,593 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,593 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,594 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,594 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,594 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,594 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,594 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,594 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,595 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,595 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,595 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,595 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,595 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,595 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,595 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,595 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,595 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,638 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:55,638 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,638 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(11)), (np.int64(2), np.int64(9)))
2025-04-11 17:31:55,646 [INFO] Final candidates: []
2025-04-11 17:31:55,646 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,652 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,652 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,652 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,653 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,653 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,653 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,653 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,653 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,654 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,654 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,654 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,654 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,654 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,654 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,654 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,654 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,654 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,654 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,655 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,655 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,655 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,655 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,661 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:55,661 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,662 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(12)), (np.int64(7), np.int64(6)))
2025-04-11 17:31:55,670 [INFO] Final candidates: []
2025-04-11 17:31:55,670 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,676 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,676 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,676 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,676 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,676 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,676 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,676 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,676 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,677 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,677 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,677 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,677 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,677 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,677 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,677 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,677 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,677 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,677 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,678 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,678 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,678 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,678 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:55,700 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,700 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(15)), (np.int64(7), np.int64(13)))
2025-04-11 17:31:55,710 [INFO] Final candidates: []
2025-04-11 17:31:55,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,717 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,717 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,717 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,717 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,717 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,717 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,717 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,717 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,718 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,718 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,718 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,718 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,718 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,718 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,719 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,719 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,719 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,719 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,719 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,719 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,719 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,719 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,835 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:55,835 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,836 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(1), np.int64(14)))
2025-04-11 17:31:55,844 [INFO] Final candidates: []
2025-04-11 17:31:55,844 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,850 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,850 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,850 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,850 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,851 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,851 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,851 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,851 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,851 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,851 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,851 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,851 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,852 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,852 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,852 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,852 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,852 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,852 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,852 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,852 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,852 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,852 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:55,897 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:55,897 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:55,897 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(13)), (np.int64(4), np.int64(10)))
2025-04-11 17:31:55,905 [INFO] Final candidates: []
2025-04-11 17:31:55,905 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:55,911 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:55,911 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,911 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,912 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:55,912 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,912 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,912 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,912 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,913 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:55,913 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:55,913 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:55,913 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:55,913 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:55,913 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:55,913 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:55,913 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:55,913 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:55,913 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:55,914 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:55,914 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:55,914 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:55,914 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,044 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,044 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,044 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(10)), (np.int64(4), np.int64(7)))
2025-04-11 17:31:56,053 [INFO] Final candidates: []
2025-04-11 17:31:56,053 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,061 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,061 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,061 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,061 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,061 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,061 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,062 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,062 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,062 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,062 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,062 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,062 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,062 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,063 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,063 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,063 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,063 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,063 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,063 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,063 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,114 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,114 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,114 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(10), np.int64(7)))
2025-04-11 17:31:56,123 [INFO] Final candidates: []
2025-04-11 17:31:56,123 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,131 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,131 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,131 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,132 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,132 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,132 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,132 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,132 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,132 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,132 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,132 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,133 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,133 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,133 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,133 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,133 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,133 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,133 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,133 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,133 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,134 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,151 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,151 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,151 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(13)), (np.int64(0), np.int64(15)))
2025-04-11 17:31:56,160 [INFO] Final candidates: []
2025-04-11 17:31:56,160 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,166 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,166 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,166 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,167 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,167 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,167 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,167 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,167 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,168 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,168 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,168 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,168 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,168 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,168 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,168 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,168 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,168 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,169 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,169 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,169 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,169 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,197 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,197 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,198 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(8)), (np.int64(1), np.int64(16)))
2025-04-11 17:31:56,207 [INFO] Final candidates: []
2025-04-11 17:31:56,207 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,214 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,214 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,214 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,214 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,214 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,214 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,214 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,214 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,215 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,215 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,215 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,215 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,215 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,215 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,215 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,215 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,215 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,215 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,216 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,216 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,216 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,216 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,217 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,217 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,217 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(16)), (np.int64(10), np.int64(10)))
2025-04-11 17:31:56,225 [INFO] Final candidates: []
2025-04-11 17:31:56,225 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,231 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,231 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,231 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,231 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,231 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,231 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,231 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,232 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,232 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,232 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,232 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,232 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,232 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,233 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,233 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,233 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,233 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,233 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,233 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,233 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,233 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,265 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,265 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,266 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(14)), (np.int64(2), np.int64(12)))
2025-04-11 17:31:56,274 [INFO] Final candidates: []
2025-04-11 17:31:56,274 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,281 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,281 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,281 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,281 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,281 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,282 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,282 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,282 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,282 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,282 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,282 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,282 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,283 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,283 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,283 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,283 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,283 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,283 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,283 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,283 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,283 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,283 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,351 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,351 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,351 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 17:31:56,359 [INFO] Final candidates: []
2025-04-11 17:31:56,359 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,366 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,366 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,366 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,366 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,366 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,366 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,366 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,366 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,367 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,367 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,367 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,367 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,367 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,367 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,367 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,367 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,367 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,367 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,368 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,368 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,368 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,368 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,393 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:56,394 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,394 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(10), np.int64(8)))
2025-04-11 17:31:56,402 [INFO] Final candidates: []
2025-04-11 17:31:56,402 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,409 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,409 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,409 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,409 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,409 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,409 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,409 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,410 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,410 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,410 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,410 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,410 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,410 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,410 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,410 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,411 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,411 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,411 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,411 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,411 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,411 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,548 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:56,549 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,549 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(16)), (np.int64(2), np.int64(13)))
2025-04-11 17:31:56,557 [INFO] Final candidates: []
2025-04-11 17:31:56,557 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,566 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,566 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,566 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,566 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,566 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,566 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,566 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,566 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,567 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,567 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,567 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,567 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,567 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,567 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,567 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,567 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,567 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,567 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,568 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,568 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,568 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,568 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:56,844 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:56,844 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:56,844 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(14)), (np.int64(2), np.int64(12)))
2025-04-11 17:31:56,853 [INFO] Final candidates: []
2025-04-11 17:31:56,853 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:56,859 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:56,859 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,859 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,859 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:56,860 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,860 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,860 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,860 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,860 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:56,860 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:56,861 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:56,861 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:56,861 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:56,861 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:56,861 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:56,861 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:56,861 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:56,861 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:56,862 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:56,862 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:56,862 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:56,862 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:57,001 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:31:57,001 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:31:57,001 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(14)), (np.int64(10), np.int64(12)))
2025-04-11 17:31:57,010 [INFO] Final candidates: []
2025-04-11 17:31:57,010 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:31:57,016 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)]
2025-04-11 17:31:57,016 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:31:57,016 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:57,016 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11)] triggers candidate.
2025-04-11 17:31:57,016 [DEBUG] board coords: [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:57,017 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:57,017 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:57,017 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=6, window [2 2 2 2 0 0] with coords [(5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:57,017 [DEBUG] board coords: [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)]
2025-04-11 17:31:57,017 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:31:57,017 [DEBUG] check_window_intermediate_custom: empty_cells=[(0, 16), (3, 13)]
2025-04-11 17:31:57,017 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 0 2 2 2] with coords [(0, 16), (1, 15), (2, 14), (3, 13), (4, 12), (5, 11), (6, 10)] triggers candidate.
2025-04-11 17:31:57,018 [DEBUG] check_window_margin_custom: For L=7, window [0 2 2 2 2 2 0] with coords [(3, 13), (4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7)] triggers candidate.
2025-04-11 17:31:57,018 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:31:57,018 [DEBUG] board coords: [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)]
2025-04-11 17:31:57,018 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:31:57,018 [DEBUG] check_window_intermediate_custom: empty_cells=[(9, 7), (10, 6)]
2025-04-11 17:31:57,018 [DEBUG] check_window_intermediate_custom (only one inserted(9, 7)): For L=7, window [2 2 2 2 2 0 0] with coords [(4, 12), (5, 11), (6, 10), (7, 9), (8, 8), (9, 7), (10, 6)] triggers candidate.
2025-04-11 17:31:57,018 [INFO] Final candidates: [(3, 13), (9, 7), (0, 16)]
2025-04-11 17:31:57,018 [INFO] Phase defense: Collected 3unique candidate(s):[((3, 13), (9, 7)), ((3, 13), (0, 16)), ((9, 7), (0, 16))]
2025-04-11 17:31:57,018 [INFO] Phase 2 (defense): 3 candidate(s) found.
2025-04-11 17:31:57,018 [INFO] Default policy: Starting random playout.
2025-04-11 17:31:57,028 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:31:57,029 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:31:57,029 [INFO] MCTS (defense candidates) selected move: J9,Q2
2025-04-11 17:32:06,906 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:32:06,914 [INFO] Final candidates: []
2025-04-11 17:32:06,914 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:06,923 [INFO] Final candidates: [(3, 13)]
2025-04-11 17:32:06,923 [INFO] Phase defense: Found only one candidate: (3, 13)
2025-04-11 17:32:06,923 [INFO] Phase defense: Collected 8unique candidate(s):[((3, 13), (np.int64(3), np.int64(12))), ((3, 13), (np.int64(3), np.int64(14))), ((3, 13), (np.int64(4), np.int64(13))), ((3, 13), (np.int64(5), np.int64(13))), ((3, 13), (np.int64(2), np.int64(12))), ((3, 13), (np.int64(3), np.int64(11))), ((3, 13), (np.int64(2), np.int64(13))), ((3, 13), (np.int64(4), np.int64(14)))]
2025-04-11 17:32:06,923 [INFO] Phase 2 (defense): 8 candidate(s) found.
2025-04-11 17:32:06,923 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:32:06,923 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(3), np.int64(11)))
2025-04-11 17:32:06,931 [INFO] Final candidates: []
2025-04-11 17:32:06,931 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:06,939 [INFO] Final candidates: []
2025-04-11 17:32:06,939 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:06,939 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:32:06,940 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,141 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:07,141 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(3), np.int64(14)))
2025-04-11 17:32:07,149 [INFO] Final candidates: []
2025-04-11 17:32:07,149 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,157 [INFO] Final candidates: []
2025-04-11 17:32:07,157 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,158 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,249 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:07,249 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(2), np.int64(12)))
2025-04-11 17:32:07,258 [INFO] Final candidates: []
2025-04-11 17:32:07,258 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,266 [INFO] Final candidates: []
2025-04-11 17:32:07,266 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,266 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,373 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:07,373 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(3), np.int64(12)))
2025-04-11 17:32:07,382 [INFO] Final candidates: []
2025-04-11 17:32:07,382 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,390 [INFO] Final candidates: []
2025-04-11 17:32:07,390 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,391 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,466 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:07,466 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(4), np.int64(13)))
2025-04-11 17:32:07,474 [INFO] Final candidates: []
2025-04-11 17:32:07,474 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,482 [INFO] Final candidates: []
2025-04-11 17:32:07,482 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,482 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,583 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:07,584 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(4), np.int64(14)))
2025-04-11 17:32:07,592 [INFO] Final candidates: []
2025-04-11 17:32:07,592 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,599 [INFO] Final candidates: []
2025-04-11 17:32:07,599 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,600 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,700 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:07,700 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(2), np.int64(13)))
2025-04-11 17:32:07,708 [INFO] Final candidates: []
2025-04-11 17:32:07,708 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,716 [INFO] Final candidates: []
2025-04-11 17:32:07,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,763 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:07,763 [DEBUG] Tree_policy iteration 1: Expanding move ((3, 13), (np.int64(5), np.int64(13)))
2025-04-11 17:32:07,771 [INFO] Final candidates: []
2025-04-11 17:32:07,771 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,779 [INFO] Final candidates: []
2025-04-11 17:32:07,779 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,780 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:07,964 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:07,965 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:07,965 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(9), np.int64(10)), (np.int64(5), np.int64(15)))
2025-04-11 17:32:07,972 [INFO] Final candidates: []
2025-04-11 17:32:07,973 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,981 [INFO] Final candidates: []
2025-04-11 17:32:07,981 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:07,981 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,068 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:08,068 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,068 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(10)), (np.int64(5), np.int64(13)))
2025-04-11 17:32:08,076 [INFO] Final candidates: []
2025-04-11 17:32:08,076 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,084 [INFO] Final candidates: []
2025-04-11 17:32:08,084 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,084 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,219 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:08,219 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,219 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(9)), (np.int64(11), np.int64(8)))
2025-04-11 17:32:08,227 [INFO] Final candidates: []
2025-04-11 17:32:08,227 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,235 [INFO] Final candidates: []
2025-04-11 17:32:08,235 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,236 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,248 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:08,248 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,248 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(6), np.int64(7)))
2025-04-11 17:32:08,257 [INFO] Final candidates: []
2025-04-11 17:32:08,257 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,265 [INFO] Final candidates: []
2025-04-11 17:32:08,265 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,265 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,410 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:08,410 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,410 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(11)), (np.int64(12), np.int64(9)))
2025-04-11 17:32:08,418 [INFO] Final candidates: []
2025-04-11 17:32:08,418 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,426 [INFO] Final candidates: []
2025-04-11 17:32:08,426 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,427 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,533 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:08,533 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,534 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(4), np.int64(10)))
2025-04-11 17:32:08,543 [INFO] Final candidates: []
2025-04-11 17:32:08,543 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,551 [INFO] Final candidates: []
2025-04-11 17:32:08,551 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,552 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,648 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:08,649 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,649 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(12)), (np.int64(11), np.int64(8)))
2025-04-11 17:32:08,657 [INFO] Final candidates: []
2025-04-11 17:32:08,657 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,665 [INFO] Final candidates: []
2025-04-11 17:32:08,665 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,665 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,739 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:08,739 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,740 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(7), np.int64(6)))
2025-04-11 17:32:08,749 [INFO] Final candidates: []
2025-04-11 17:32:08,749 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,757 [INFO] Final candidates: []
2025-04-11 17:32:08,757 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,758 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,805 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:08,805 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,805 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 17:32:08,813 [INFO] Final candidates: []
2025-04-11 17:32:08,813 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,821 [INFO] Final candidates: []
2025-04-11 17:32:08,821 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,821 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,863 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:08,863 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,863 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(7), np.int64(15)))
2025-04-11 17:32:08,871 [INFO] Final candidates: []
2025-04-11 17:32:08,871 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,879 [INFO] Final candidates: []
2025-04-11 17:32:08,879 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,879 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:08,953 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:08,954 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:08,954 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(2), np.int64(13)), (np.int64(2), np.int64(16)))
2025-04-11 17:32:08,962 [INFO] Final candidates: []
2025-04-11 17:32:08,962 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,970 [INFO] Final candidates: []
2025-04-11 17:32:08,970 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:08,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,029 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:09,030 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,030 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(15)), (np.int64(4), np.int64(7)))
2025-04-11 17:32:09,038 [INFO] Final candidates: []
2025-04-11 17:32:09,038 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,045 [INFO] Final candidates: []
2025-04-11 17:32:09,045 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,046 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,099 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:09,099 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,099 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(8)), (np.int64(12), np.int64(8)))
2025-04-11 17:32:09,107 [INFO] Final candidates: []
2025-04-11 17:32:09,107 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,114 [INFO] Final candidates: []
2025-04-11 17:32:09,114 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,118 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,263 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:09,263 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,263 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(5), np.int64(15)))
2025-04-11 17:32:09,271 [INFO] Final candidates: []
2025-04-11 17:32:09,271 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,279 [INFO] Final candidates: []
2025-04-11 17:32:09,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,279 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,571 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:09,571 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,572 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(12)), (np.int64(4), np.int64(14)))
2025-04-11 17:32:09,579 [INFO] Final candidates: []
2025-04-11 17:32:09,579 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,589 [INFO] Final candidates: []
2025-04-11 17:32:09,589 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,590 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,683 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:09,684 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,684 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(4), np.int64(11)))
2025-04-11 17:32:09,692 [INFO] Final candidates: []
2025-04-11 17:32:09,692 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,700 [INFO] Final candidates: []
2025-04-11 17:32:09,700 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,701 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,758 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:09,759 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,759 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(13), np.int64(9)), (np.int64(10), np.int64(7)))
2025-04-11 17:32:09,767 [INFO] Final candidates: []
2025-04-11 17:32:09,767 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,774 [INFO] Final candidates: []
2025-04-11 17:32:09,775 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,775 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,798 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:09,799 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,799 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(4), np.int64(14)))
2025-04-11 17:32:09,806 [INFO] Final candidates: []
2025-04-11 17:32:09,806 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,814 [INFO] Final candidates: []
2025-04-11 17:32:09,814 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,815 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:09,841 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:09,841 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:09,841 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(10)), (np.int64(7), np.int64(6)))
2025-04-11 17:32:09,849 [INFO] Final candidates: []
2025-04-11 17:32:09,849 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,857 [INFO] Final candidates: []
2025-04-11 17:32:09,857 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:09,857 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:10,063 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:10,063 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:10,063 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(14)), (np.int64(10), np.int64(8)))
2025-04-11 17:32:10,071 [INFO] Final candidates: []
2025-04-11 17:32:10,071 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,079 [INFO] Final candidates: []
2025-04-11 17:32:10,079 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,079 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:10,229 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:10,229 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:10,229 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(11)), (np.int64(1), np.int64(9)))
2025-04-11 17:32:10,237 [INFO] Final candidates: []
2025-04-11 17:32:10,237 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,245 [INFO] Final candidates: []
2025-04-11 17:32:10,245 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,246 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:10,322 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:10,322 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:10,322 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(17)), (np.int64(11), np.int64(11)))
2025-04-11 17:32:10,330 [INFO] Final candidates: []
2025-04-11 17:32:10,330 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,338 [INFO] Final candidates: []
2025-04-11 17:32:10,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:10,439 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:10,439 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:10,439 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(10)), (np.int64(10), np.int64(7)))
2025-04-11 17:32:10,447 [INFO] Final candidates: []
2025-04-11 17:32:10,447 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,455 [INFO] Final candidates: []
2025-04-11 17:32:10,455 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,455 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:10,604 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:10,604 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:10,604 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(6), np.int64(11)), (np.int64(2), np.int64(12)))
2025-04-11 17:32:10,612 [INFO] Final candidates: []
2025-04-11 17:32:10,612 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,620 [INFO] Final candidates: []
2025-04-11 17:32:10,620 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,621 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:10,654 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:10,654 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:10,654 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(10)), (np.int64(9), np.int64(15)))
2025-04-11 17:32:10,662 [INFO] Final candidates: []
2025-04-11 17:32:10,662 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,670 [INFO] Final candidates: []
2025-04-11 17:32:10,670 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,670 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:10,865 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:10,865 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:10,865 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(10)), (np.int64(8), np.int64(15)))
2025-04-11 17:32:10,873 [INFO] Final candidates: []
2025-04-11 17:32:10,874 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,882 [INFO] Final candidates: []
2025-04-11 17:32:10,882 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:10,883 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,114 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:11,114 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,115 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(10), np.int64(11)))
2025-04-11 17:32:11,122 [INFO] Final candidates: []
2025-04-11 17:32:11,122 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,130 [INFO] Final candidates: []
2025-04-11 17:32:11,130 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,131 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,279 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:11,279 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,279 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(17)), (np.int64(9), np.int64(15)))
2025-04-11 17:32:11,287 [INFO] Final candidates: []
2025-04-11 17:32:11,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,295 [INFO] Final candidates: []
2025-04-11 17:32:11,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,295 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,322 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:11,322 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,322 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(7)), (np.int64(3), np.int64(11)))
2025-04-11 17:32:11,330 [INFO] Final candidates: []
2025-04-11 17:32:11,330 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,338 [INFO] Final candidates: []
2025-04-11 17:32:11,338 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,339 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,556 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:11,557 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,557 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(17)), (np.int64(10), np.int64(10)))
2025-04-11 17:32:11,565 [INFO] Final candidates: []
2025-04-11 17:32:11,565 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,573 [INFO] Final candidates: []
2025-04-11 17:32:11,573 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,573 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,727 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:11,727 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,727 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(5), np.int64(7)), (np.int64(5), np.int64(8)))
2025-04-11 17:32:11,728 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:11,728 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:11,728 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 6), (5, 10)]
2025-04-11 17:32:11,728 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:11,728 [DEBUG] board coords: [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)]
2025-04-11 17:32:11,728 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:32:11,728 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 12)]
2025-04-11 17:32:11,728 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)] triggers candidate.
2025-04-11 17:32:11,735 [INFO] Final candidates: [(5, 10), (5, 12), (5, 6)]
2025-04-11 17:32:11,735 [INFO] Phase win: Collected 3unique candidate(s):[((5, 10), (5, 12)), ((5, 12), (5, 6)), ((5, 10), (5, 6))]
2025-04-11 17:32:11,735 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:32:11,743 [INFO] Final candidates: []
2025-04-11 17:32:11,743 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,744 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,802 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:11,803 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,803 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(10), np.int64(11)))
2025-04-11 17:32:11,810 [INFO] Final candidates: []
2025-04-11 17:32:11,810 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,818 [INFO] Final candidates: []
2025-04-11 17:32:11,818 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,819 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,896 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:11,897 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,897 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(7), np.int64(12)), (np.int64(8), np.int64(6)))
2025-04-11 17:32:11,904 [INFO] Final candidates: []
2025-04-11 17:32:11,905 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,912 [INFO] Final candidates: []
2025-04-11 17:32:11,912 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,913 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:11,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:11,958 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:11,958 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(12)), (np.int64(3), np.int64(11)))
2025-04-11 17:32:11,966 [INFO] Final candidates: []
2025-04-11 17:32:11,966 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,974 [INFO] Final candidates: []
2025-04-11 17:32:11,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:11,975 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,118 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:12,119 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,119 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(1), np.int64(14)), (np.int64(0), np.int64(15)))
2025-04-11 17:32:12,127 [INFO] Final candidates: []
2025-04-11 17:32:12,127 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,135 [INFO] Final candidates: []
2025-04-11 17:32:12,135 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,135 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,285 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:12,286 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,286 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(4), np.int64(13)), (np.int64(6), np.int64(7)))
2025-04-11 17:32:12,294 [INFO] Final candidates: []
2025-04-11 17:32:12,294 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,301 [INFO] Final candidates: []
2025-04-11 17:32:12,301 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,302 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,337 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:12,337 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,338 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(11), np.int64(10)), (np.int64(4), np.int64(7)))
2025-04-11 17:32:12,345 [INFO] Final candidates: []
2025-04-11 17:32:12,346 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,353 [INFO] Final candidates: []
2025-04-11 17:32:12,353 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,354 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,486 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:12,486 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,486 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(10), np.int64(13)))
2025-04-11 17:32:12,494 [INFO] Final candidates: []
2025-04-11 17:32:12,494 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,502 [INFO] Final candidates: []
2025-04-11 17:32:12,502 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,503 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,521 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:12,521 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,521 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(12), np.int64(10)), (np.int64(4), np.int64(14)))
2025-04-11 17:32:12,529 [INFO] Final candidates: []
2025-04-11 17:32:12,529 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,537 [INFO] Final candidates: []
2025-04-11 17:32:12,537 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,537 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,593 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:12,593 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,594 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(10)), (np.int64(8), np.int64(15)))
2025-04-11 17:32:12,601 [INFO] Final candidates: []
2025-04-11 17:32:12,601 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,609 [INFO] Final candidates: []
2025-04-11 17:32:12,609 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,610 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,751 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:12,752 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,752 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(8), np.int64(6)), (np.int64(12), np.int64(9)))
2025-04-11 17:32:12,760 [INFO] Final candidates: []
2025-04-11 17:32:12,760 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,768 [INFO] Final candidates: []
2025-04-11 17:32:12,768 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,768 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,869 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:12,869 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:12,869 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(7)), (np.int64(10), np.int64(11)))
2025-04-11 17:32:12,877 [INFO] Final candidates: []
2025-04-11 17:32:12,877 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,885 [INFO] Final candidates: []
2025-04-11 17:32:12,885 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:12,885 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:12,945 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:12,945 [INFO] MCTS: Search finished. Best move selected with 9 visits.
2025-04-11 17:32:12,945 [INFO] MCTS (defense candidates) selected move: O4,O3
2025-04-11 17:32:26,164 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:32:26,172 [INFO] Final candidates: []
2025-04-11 17:32:26,172 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,180 [INFO] Final candidates: []
2025-04-11 17:32:26,180 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,180 [INFO] No candidate found in Phase 1 or 2; using full legal moves for MCTS.
2025-04-11 17:32:26,181 [INFO] MCTS: Starting search for 100 iterations.
2025-04-11 17:32:26,181 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(9), np.int64(11)))
2025-04-11 17:32:26,189 [INFO] Final candidates: []
2025-04-11 17:32:26,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,196 [INFO] Final candidates: []
2025-04-11 17:32:26,196 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,197 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:32:26,197 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:26,325 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:26,326 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(4), np.int64(10)))
2025-04-11 17:32:26,333 [INFO] Final candidates: []
2025-04-11 17:32:26,333 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,341 [INFO] Final candidates: []
2025-04-11 17:32:26,341 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,342 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:26,449 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:26,449 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(5), np.int64(4)))
2025-04-11 17:32:26,457 [INFO] Final candidates: []
2025-04-11 17:32:26,457 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,464 [INFO] Final candidates: []
2025-04-11 17:32:26,464 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:26,656 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:26,657 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(14)), (np.int64(7), np.int64(11)))
2025-04-11 17:32:26,664 [INFO] Final candidates: []
2025-04-11 17:32:26,664 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,672 [INFO] Final candidates: []
2025-04-11 17:32:26,672 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,673 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:26,875 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:26,875 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(6), np.int64(8)))
2025-04-11 17:32:26,883 [INFO] Final candidates: []
2025-04-11 17:32:26,883 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,891 [INFO] Final candidates: []
2025-04-11 17:32:26,891 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,891 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:26,958 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:26,958 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(16)), (np.int64(11), np.int64(8)))
2025-04-11 17:32:26,967 [INFO] Final candidates: []
2025-04-11 17:32:26,967 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,974 [INFO] Final candidates: []
2025-04-11 17:32:26,974 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:26,975 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,073 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:27,073 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(8), np.int64(6)))
2025-04-11 17:32:27,081 [INFO] Final candidates: []
2025-04-11 17:32:27,081 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,088 [INFO] Final candidates: []
2025-04-11 17:32:27,088 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,089 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,247 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:27,248 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(7)), (np.int64(4), np.int64(15)))
2025-04-11 17:32:27,255 [INFO] Final candidates: []
2025-04-11 17:32:27,255 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,263 [INFO] Final candidates: []
2025-04-11 17:32:27,263 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,264 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,330 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:27,330 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(0), np.int64(15)))
2025-04-11 17:32:27,338 [INFO] Final candidates: []
2025-04-11 17:32:27,338 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,348 [INFO] Final candidates: []
2025-04-11 17:32:27,348 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,349 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,414 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:27,414 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(12)))
2025-04-11 17:32:27,422 [INFO] Final candidates: []
2025-04-11 17:32:27,422 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,429 [INFO] Final candidates: []
2025-04-11 17:32:27,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,430 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,446 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:27,446 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(8)), (np.int64(6), np.int64(14)))
2025-04-11 17:32:27,454 [INFO] Final candidates: []
2025-04-11 17:32:27,454 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,465 [INFO] Final candidates: []
2025-04-11 17:32:27,465 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,465 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,599 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:27,599 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(4), np.int64(15)))
2025-04-11 17:32:27,607 [INFO] Final candidates: []
2025-04-11 17:32:27,607 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,615 [INFO] Final candidates: []
2025-04-11 17:32:27,615 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,615 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,724 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:27,724 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(5), np.int64(5)))
2025-04-11 17:32:27,732 [INFO] Final candidates: []
2025-04-11 17:32:27,732 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,739 [INFO] Final candidates: []
2025-04-11 17:32:27,740 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,740 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,816 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:27,816 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(11)), (np.int64(4), np.int64(8)))
2025-04-11 17:32:27,824 [INFO] Final candidates: []
2025-04-11 17:32:27,824 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,832 [INFO] Final candidates: []
2025-04-11 17:32:27,832 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,832 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:27,873 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:27,873 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(12), np.int64(8)))
2025-04-11 17:32:27,881 [INFO] Final candidates: []
2025-04-11 17:32:27,881 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,888 [INFO] Final candidates: []
2025-04-11 17:32:27,888 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:27,889 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,051 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:28,051 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(2), np.int64(10)))
2025-04-11 17:32:28,059 [INFO] Final candidates: []
2025-04-11 17:32:28,059 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,067 [INFO] Final candidates: []
2025-04-11 17:32:28,067 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,068 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,180 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:28,181 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(10), np.int64(14)))
2025-04-11 17:32:28,189 [INFO] Final candidates: []
2025-04-11 17:32:28,189 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,197 [INFO] Final candidates: []
2025-04-11 17:32:28,197 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,197 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,254 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:28,255 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(9), np.int64(7)))
2025-04-11 17:32:28,255 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:28,255 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:28,255 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:28,255 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:28,255 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:28,255 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:32:28,255 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 12), (5, 13)]
2025-04-11 17:32:28,255 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:28,263 [INFO] Final candidates: [(5, 13), (5, 12), (5, 7), (5, 8)]
2025-04-11 17:32:28,263 [INFO] Phase win: Collected 6unique candidate(s):[((5, 13), (5, 7)), ((5, 12), (5, 7)), ((5, 12), (5, 8)), ((5, 13), (5, 8)), ((5, 13), (5, 12)), ((5, 7), (5, 8))]
2025-04-11 17:32:28,263 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 17:32:28,270 [INFO] Final candidates: []
2025-04-11 17:32:28,271 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,271 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,467 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:28,467 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(8), np.int64(6)))
2025-04-11 17:32:28,467 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:28,467 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:28,468 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 13)]
2025-04-11 17:32:28,468 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:28,477 [INFO] Final candidates: [(5, 10), (5, 13)]
2025-04-11 17:32:28,477 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 13))]
2025-04-11 17:32:28,477 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:28,486 [INFO] Final candidates: []
2025-04-11 17:32:28,486 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,487 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,646 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:28,646 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(8)), (np.int64(12), np.int64(9)))
2025-04-11 17:32:28,654 [INFO] Final candidates: []
2025-04-11 17:32:28,654 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,661 [INFO] Final candidates: []
2025-04-11 17:32:28,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,662 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,737 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:28,738 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(16)), (np.int64(10), np.int64(8)))
2025-04-11 17:32:28,745 [INFO] Final candidates: []
2025-04-11 17:32:28,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,753 [INFO] Final candidates: []
2025-04-11 17:32:28,754 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,754 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,855 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:28,855 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(4), np.int64(15)))
2025-04-11 17:32:28,864 [INFO] Final candidates: []
2025-04-11 17:32:28,864 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,872 [INFO] Final candidates: []
2025-04-11 17:32:28,872 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,873 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:28,950 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:28,950 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(4), np.int64(16)))
2025-04-11 17:32:28,955 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(0, 12), (1, 13), (2, 14), (3, 15), (4, 16), (5, 17)] triggers candidate.
2025-04-11 17:32:28,955 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:32:28,955 [DEBUG] board coords: [(1, 13), (2, 14), (3, 15), (4, 16), (5, 17), (6, 18)]
2025-04-11 17:32:28,955 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:32:28,955 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 17), (6, 18)]
2025-04-11 17:32:28,955 [DEBUG] check_window_intermediate_custom (only one inserted(5, 17)): For L=6, window [2 2 2 2 0 0] with coords [(1, 13), (2, 14), (3, 15), (4, 16), (5, 17), (6, 18)] triggers candidate.
2025-04-11 17:32:28,958 [INFO] Final candidates: [(0, 12), (5, 17)]
2025-04-11 17:32:28,958 [INFO] Phase win: Collected 1unique candidate(s):[((0, 12), (5, 17))]
2025-04-11 17:32:28,958 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:28,966 [INFO] Final candidates: []
2025-04-11 17:32:28,966 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:28,967 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:29,076 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:29,076 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(14)), (np.int64(0), np.int64(12)))
2025-04-11 17:32:29,081 [DEBUG] board coords: [(0, 12), (1, 13), (2, 14), (3, 15), (4, 16), (5, 17)]
2025-04-11 17:32:29,081 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:32:29,081 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 16), (5, 17)]
2025-04-11 17:32:29,081 [DEBUG] check_window_intermediate_custom (only one inserted(4, 16)): For L=6, window [2 2 2 2 0 0] with coords [(0, 12), (1, 13), (2, 14), (3, 15), (4, 16), (5, 17)] triggers candidate.
2025-04-11 17:32:29,085 [INFO] Final candidates: [(4, 16)]
2025-04-11 17:32:29,085 [INFO] Phase win: Found only one candidate: (4, 16)
2025-04-11 17:32:29,085 [INFO] Phase win: Collected 10unique candidate(s):[((4, 16), (np.int64(3), np.int64(17))), ((4, 16), (np.int64(5), np.int64(16))), ((4, 16), (np.int64(4), np.int64(18))), ((4, 16), (np.int64(4), np.int64(15))), ((4, 16), (np.int64(4), np.int64(17))), ((4, 16), (np.int64(5), np.int64(17))), ((4, 16), (np.int64(2), np.int64(16))), ((4, 16), (np.int64(3), np.int64(16))), ((4, 16), (np.int64(5), np.int64(15))), ((4, 16), (np.int64(6), np.int64(16)))]
2025-04-11 17:32:29,085 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:32:29,092 [INFO] Final candidates: []
2025-04-11 17:32:29,092 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,093 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:29,373 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:29,373 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(5), np.int64(13)))
2025-04-11 17:32:29,373 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:29,373 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:32:29,373 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 12)]
2025-04-11 17:32:29,374 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 0 2 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:29,381 [INFO] Final candidates: [(5, 10), (5, 12)]
2025-04-11 17:32:29,381 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 12))]
2025-04-11 17:32:29,381 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:29,389 [INFO] Final candidates: []
2025-04-11 17:32:29,389 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,389 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:29,486 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:29,486 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(4), np.int64(8)))
2025-04-11 17:32:29,494 [INFO] Final candidates: []
2025-04-11 17:32:29,494 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,502 [INFO] Final candidates: []
2025-04-11 17:32:29,502 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,502 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:29,537 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:29,537 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(9)), (np.int64(5), np.int64(8)))
2025-04-11 17:32:29,538 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:29,538 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:29,538 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 10)]
2025-04-11 17:32:29,538 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:29,547 [INFO] Final candidates: [(5, 10), (5, 7)]
2025-04-11 17:32:29,547 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 7))]
2025-04-11 17:32:29,547 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:29,555 [INFO] Final candidates: []
2025-04-11 17:32:29,555 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,556 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:29,809 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:29,809 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(4), np.int64(5)))
2025-04-11 17:32:29,817 [INFO] Final candidates: []
2025-04-11 17:32:29,817 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,826 [INFO] Final candidates: []
2025-04-11 17:32:29,827 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,827 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:29,935 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:29,935 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(11), np.int64(13)))
2025-04-11 17:32:29,943 [INFO] Final candidates: []
2025-04-11 17:32:29,943 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,950 [INFO] Final candidates: []
2025-04-11 17:32:29,950 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:29,951 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:30,135 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:30,135 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(11), np.int64(8)))
2025-04-11 17:32:30,143 [INFO] Final candidates: []
2025-04-11 17:32:30,143 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,151 [INFO] Final candidates: []
2025-04-11 17:32:30,151 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,151 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:30,319 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:30,319 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(6), np.int64(13)))
2025-04-11 17:32:30,328 [INFO] Final candidates: []
2025-04-11 17:32:30,328 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,337 [INFO] Final candidates: []
2025-04-11 17:32:30,337 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,338 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:30,398 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:30,398 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(13), np.int64(9)))
2025-04-11 17:32:30,406 [INFO] Final candidates: []
2025-04-11 17:32:30,406 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,414 [INFO] Final candidates: []
2025-04-11 17:32:30,414 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,414 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:30,552 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:30,552 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(8), np.int64(16)))
2025-04-11 17:32:30,560 [INFO] Final candidates: []
2025-04-11 17:32:30,560 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,568 [INFO] Final candidates: []
2025-04-11 17:32:30,568 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,569 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:30,706 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:30,706 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(15)), (np.int64(4), np.int64(16)))
2025-04-11 17:32:30,710 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(0, 12), (1, 13), (2, 14), (3, 15), (4, 16), (5, 17)] triggers candidate.
2025-04-11 17:32:30,710 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:32:30,710 [DEBUG] board coords: [(1, 13), (2, 14), (3, 15), (4, 16), (5, 17), (6, 18)]
2025-04-11 17:32:30,710 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:32:30,710 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 17), (6, 18)]
2025-04-11 17:32:30,710 [DEBUG] check_window_intermediate_custom (only one inserted(5, 17)): For L=6, window [2 2 2 2 0 0] with coords [(1, 13), (2, 14), (3, 15), (4, 16), (5, 17), (6, 18)] triggers candidate.
2025-04-11 17:32:30,714 [INFO] Final candidates: [(0, 12), (5, 17)]
2025-04-11 17:32:30,714 [INFO] Phase win: Collected 1unique candidate(s):[((0, 12), (5, 17))]
2025-04-11 17:32:30,714 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:30,721 [INFO] Final candidates: []
2025-04-11 17:32:30,721 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,722 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:30,781 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:30,782 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(2), np.int64(16)))
2025-04-11 17:32:30,789 [INFO] Final candidates: []
2025-04-11 17:32:30,789 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,798 [INFO] Final candidates: []
2025-04-11 17:32:30,798 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,799 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:30,927 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:30,927 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(15)), (np.int64(10), np.int64(11)))
2025-04-11 17:32:30,935 [INFO] Final candidates: []
2025-04-11 17:32:30,935 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,943 [INFO] Final candidates: []
2025-04-11 17:32:30,943 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:30,943 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,088 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:31,088 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(2), np.int64(9)))
2025-04-11 17:32:31,096 [INFO] Final candidates: []
2025-04-11 17:32:31,096 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,103 [INFO] Final candidates: []
2025-04-11 17:32:31,103 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,104 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,128 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:31,129 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(6), np.int64(12)))
2025-04-11 17:32:31,136 [INFO] Final candidates: []
2025-04-11 17:32:31,136 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,144 [INFO] Final candidates: []
2025-04-11 17:32:31,144 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,145 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,176 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:31,176 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(8), np.int64(16)))
2025-04-11 17:32:31,184 [INFO] Final candidates: []
2025-04-11 17:32:31,184 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,192 [INFO] Final candidates: []
2025-04-11 17:32:31,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,193 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,373 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:31,373 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(8), np.int64(15)))
2025-04-11 17:32:31,381 [INFO] Final candidates: []
2025-04-11 17:32:31,381 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,388 [INFO] Final candidates: []
2025-04-11 17:32:31,388 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,389 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,571 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:31,572 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(15)), (np.int64(3), np.int64(16)))
2025-04-11 17:32:31,579 [INFO] Final candidates: []
2025-04-11 17:32:31,579 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,587 [INFO] Final candidates: []
2025-04-11 17:32:31,587 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,589 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,737 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:31,737 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(7), np.int64(13)))
2025-04-11 17:32:31,745 [INFO] Final candidates: []
2025-04-11 17:32:31,745 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,753 [INFO] Final candidates: []
2025-04-11 17:32:31,753 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,754 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,885 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:31,885 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(9), np.int64(15)))
2025-04-11 17:32:31,893 [INFO] Final candidates: []
2025-04-11 17:32:31,893 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,900 [INFO] Final candidates: []
2025-04-11 17:32:31,901 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,901 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:31,967 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:31,967 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(12)), (np.int64(1), np.int64(16)))
2025-04-11 17:32:31,975 [INFO] Final candidates: []
2025-04-11 17:32:31,975 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,983 [INFO] Final candidates: []
2025-04-11 17:32:31,983 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:31,983 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:32,014 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:32,015 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(10)), (np.int64(0), np.int64(13)))
2025-04-11 17:32:32,022 [INFO] Final candidates: []
2025-04-11 17:32:32,022 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,030 [INFO] Final candidates: []
2025-04-11 17:32:32,030 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,030 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:32,138 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:32,138 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(7)), (np.int64(6), np.int64(7)))
2025-04-11 17:32:32,146 [INFO] Final candidates: []
2025-04-11 17:32:32,146 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,155 [INFO] Final candidates: []
2025-04-11 17:32:32,155 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,156 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:32,436 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:32,436 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(9)), (np.int64(11), np.int64(10)))
2025-04-11 17:32:32,444 [INFO] Final candidates: []
2025-04-11 17:32:32,444 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,452 [INFO] Final candidates: []
2025-04-11 17:32:32,452 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,453 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:32,680 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:32,680 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(11), np.int64(7)), (np.int64(0), np.int64(15)))
2025-04-11 17:32:32,688 [INFO] Final candidates: []
2025-04-11 17:32:32,688 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,696 [INFO] Final candidates: []
2025-04-11 17:32:32,696 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,696 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:32,750 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:32,750 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(10), np.int64(12)))
2025-04-11 17:32:32,758 [INFO] Final candidates: []
2025-04-11 17:32:32,758 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,765 [INFO] Final candidates: []
2025-04-11 17:32:32,765 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,766 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:32,889 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:32,889 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(3), np.int64(16)))
2025-04-11 17:32:32,897 [INFO] Final candidates: []
2025-04-11 17:32:32,897 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,905 [INFO] Final candidates: []
2025-04-11 17:32:32,905 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:32,905 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:33,133 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:33,133 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(6), np.int64(12)))
2025-04-11 17:32:33,141 [INFO] Final candidates: []
2025-04-11 17:32:33,141 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,149 [INFO] Final candidates: []
2025-04-11 17:32:33,149 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,150 [DEBUG] MCTS iteration 50: reached a node with 0 visits.
2025-04-11 17:32:33,150 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:33,196 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:33,197 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(10)), (np.int64(6), np.int64(8)))
2025-04-11 17:32:33,204 [INFO] Final candidates: []
2025-04-11 17:32:33,204 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,212 [INFO] Final candidates: []
2025-04-11 17:32:33,212 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,213 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:33,362 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:33,362 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(6), np.int64(12)))
2025-04-11 17:32:33,371 [INFO] Final candidates: []
2025-04-11 17:32:33,371 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,380 [INFO] Final candidates: []
2025-04-11 17:32:33,380 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:33,532 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:33,532 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(17)), (np.int64(6), np.int64(5)))
2025-04-11 17:32:33,540 [INFO] Final candidates: []
2025-04-11 17:32:33,540 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,548 [INFO] Final candidates: []
2025-04-11 17:32:33,548 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,548 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:33,671 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:33,671 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(6)), (np.int64(11), np.int64(10)))
2025-04-11 17:32:33,679 [INFO] Final candidates: []
2025-04-11 17:32:33,679 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,686 [INFO] Final candidates: []
2025-04-11 17:32:33,686 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,687 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:33,753 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:33,753 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(7)), (np.int64(6), np.int64(15)))
2025-04-11 17:32:33,753 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:33,753 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:33,753 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 10)]
2025-04-11 17:32:33,753 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 0 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:33,761 [INFO] Final candidates: [(5, 10), (5, 8)]
2025-04-11 17:32:33,761 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 8))]
2025-04-11 17:32:33,761 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:33,769 [INFO] Final candidates: []
2025-04-11 17:32:33,769 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,769 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:33,955 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:33,955 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(4), np.int64(6)), (np.int64(6), np.int64(5)))
2025-04-11 17:32:33,963 [INFO] Final candidates: []
2025-04-11 17:32:33,963 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,971 [INFO] Final candidates: []
2025-04-11 17:32:33,971 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:33,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:34,090 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:34,090 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(5), np.int64(15)))
2025-04-11 17:32:34,098 [INFO] Final candidates: []
2025-04-11 17:32:34,098 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,106 [INFO] Final candidates: []
2025-04-11 17:32:34,106 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,106 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:34,207 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:34,207 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(6), np.int64(15)))
2025-04-11 17:32:34,215 [INFO] Final candidates: []
2025-04-11 17:32:34,215 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,223 [INFO] Final candidates: []
2025-04-11 17:32:34,223 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,224 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:34,452 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:34,452 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(6), np.int64(7)))
2025-04-11 17:32:34,460 [INFO] Final candidates: []
2025-04-11 17:32:34,460 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,468 [INFO] Final candidates: []
2025-04-11 17:32:34,468 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,469 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:34,554 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:34,554 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(14)), (np.int64(10), np.int64(8)))
2025-04-11 17:32:34,562 [INFO] Final candidates: []
2025-04-11 17:32:34,562 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,569 [INFO] Final candidates: []
2025-04-11 17:32:34,569 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,570 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:34,699 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:34,699 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(10)), (np.int64(0), np.int64(16)))
2025-04-11 17:32:34,699 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:34,699 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:34,699 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:34,699 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:34,699 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:34,699 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2)]
2025-04-11 17:32:34,699 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 12), (5, 13)]
2025-04-11 17:32:34,699 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 0 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:34,707 [INFO] Final candidates: [(5, 13), (5, 12), (5, 7), (5, 8)]
2025-04-11 17:32:34,707 [INFO] Phase win: Collected 6unique candidate(s):[((5, 13), (5, 7)), ((5, 12), (5, 7)), ((5, 12), (5, 8)), ((5, 13), (5, 8)), ((5, 13), (5, 12)), ((5, 7), (5, 8))]
2025-04-11 17:32:34,707 [INFO] Phase 1 (immediate win): 6 candidate(s) found.
2025-04-11 17:32:34,716 [INFO] Final candidates: []
2025-04-11 17:32:34,716 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,717 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:34,834 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:34,834 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(7), np.int64(7)))
2025-04-11 17:32:34,842 [INFO] Final candidates: []
2025-04-11 17:32:34,842 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,849 [INFO] Final candidates: []
2025-04-11 17:32:34,849 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:34,850 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,017 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:35,017 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(4), np.int64(8)))
2025-04-11 17:32:35,025 [INFO] Final candidates: []
2025-04-11 17:32:35,025 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,033 [INFO] Final candidates: []
2025-04-11 17:32:35,033 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,033 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,106 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:35,106 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(0), np.int64(12)))
2025-04-11 17:32:35,111 [DEBUG] board coords: [(0, 12), (1, 13), (2, 14), (3, 15), (4, 16), (5, 17)]
2025-04-11 17:32:35,111 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:32:35,111 [DEBUG] check_window_intermediate_custom: empty_cells=[(4, 16), (5, 17)]
2025-04-11 17:32:35,111 [DEBUG] check_window_intermediate_custom (only one inserted(4, 16)): For L=6, window [2 2 2 2 0 0] with coords [(0, 12), (1, 13), (2, 14), (3, 15), (4, 16), (5, 17)] triggers candidate.
2025-04-11 17:32:35,114 [INFO] Final candidates: [(4, 16)]
2025-04-11 17:32:35,114 [INFO] Phase win: Found only one candidate: (4, 16)
2025-04-11 17:32:35,114 [INFO] Phase win: Collected 11unique candidate(s):[((4, 16), (np.int64(3), np.int64(17))), ((4, 16), (np.int64(5), np.int64(16))), ((4, 16), (np.int64(4), np.int64(18))), ((4, 16), (np.int64(4), np.int64(15))), ((4, 16), (np.int64(4), np.int64(17))), ((4, 16), (np.int64(5), np.int64(17))), ((4, 16), (np.int64(2), np.int64(16))), ((4, 16), (np.int64(3), np.int64(16))), ((4, 16), (np.int64(5), np.int64(15))), ((4, 16), (np.int64(6), np.int64(16))), ((4, 16), (np.int64(4), np.int64(14)))]
2025-04-11 17:32:35,114 [INFO] Phase 1 (immediate win): 11 candidate(s) found.
2025-04-11 17:32:35,122 [INFO] Final candidates: []
2025-04-11 17:32:35,122 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,123 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,340 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:35,340 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(5), np.int64(8)))
2025-04-11 17:32:35,340 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:35,340 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:35,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 10)]
2025-04-11 17:32:35,340 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:35,340 [DEBUG] board coords: [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)]
2025-04-11 17:32:35,340 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:32:35,340 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 10)]
2025-04-11 17:32:35,340 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 0 2 2] with coords [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)] triggers candidate.
2025-04-11 17:32:35,340 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)]
2025-04-11 17:32:35,340 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0)]
2025-04-11 17:32:35,341 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 13)]
2025-04-11 17:32:35,341 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 2 2 0] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:32:35,341 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:35,341 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:35,341 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 13)]
2025-04-11 17:32:35,341 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:35,342 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)]
2025-04-11 17:32:35,342 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:32:35,342 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 10)]
2025-04-11 17:32:35,342 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 2 2 0 2 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)] triggers candidate.
2025-04-11 17:32:35,342 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:35,342 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:35,342 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 13)]
2025-04-11 17:32:35,342 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 0 2 2 0 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:35,348 [INFO] Final candidates: [(5, 10), (5, 7), (5, 13)]
2025-04-11 17:32:35,348 [INFO] Phase win: Collected 3unique candidate(s):[((5, 7), (5, 13)), ((5, 10), (5, 7)), ((5, 10), (5, 13))]
2025-04-11 17:32:35,348 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:32:35,356 [INFO] Final candidates: []
2025-04-11 17:32:35,356 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,357 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,437 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:35,437 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(2), np.int64(10)))
2025-04-11 17:32:35,445 [INFO] Final candidates: []
2025-04-11 17:32:35,445 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,453 [INFO] Final candidates: []
2025-04-11 17:32:35,453 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,454 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,496 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:35,496 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(12), np.int64(8)), (np.int64(8), np.int64(7)))
2025-04-11 17:32:35,505 [INFO] Final candidates: []
2025-04-11 17:32:35,505 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,513 [INFO] Final candidates: []
2025-04-11 17:32:35,513 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,514 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,569 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:35,570 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(13)), (np.int64(12), np.int64(9)))
2025-04-11 17:32:35,579 [INFO] Final candidates: []
2025-04-11 17:32:35,579 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,587 [INFO] Final candidates: []
2025-04-11 17:32:35,587 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,588 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,744 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:35,744 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(14)), (np.int64(6), np.int64(12)))
2025-04-11 17:32:35,752 [INFO] Final candidates: []
2025-04-11 17:32:35,752 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,760 [INFO] Final candidates: []
2025-04-11 17:32:35,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:35,760 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:35,999 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:35,999 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(4), np.int64(14)))
2025-04-11 17:32:36,006 [INFO] Final candidates: []
2025-04-11 17:32:36,006 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,014 [INFO] Final candidates: []
2025-04-11 17:32:36,015 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,015 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:36,170 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:36,171 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(17)), (np.int64(12), np.int64(10)))
2025-04-11 17:32:36,179 [INFO] Final candidates: []
2025-04-11 17:32:36,179 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,186 [INFO] Final candidates: []
2025-04-11 17:32:36,186 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,187 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:36,244 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:36,244 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(8)), (np.int64(3), np.int64(14)))
2025-04-11 17:32:36,252 [INFO] Final candidates: []
2025-04-11 17:32:36,252 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,260 [INFO] Final candidates: []
2025-04-11 17:32:36,260 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,261 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:36,413 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:36,413 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(1), np.int64(11)))
2025-04-11 17:32:36,421 [INFO] Final candidates: []
2025-04-11 17:32:36,421 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,429 [INFO] Final candidates: []
2025-04-11 17:32:36,429 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,429 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:36,462 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:36,462 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(4), np.int64(10)))
2025-04-11 17:32:36,468 [DEBUG] board coords: [(0, 14), (1, 13), (2, 12), (3, 11), (4, 10), (5, 9)]
2025-04-11 17:32:36,468 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:32:36,468 [DEBUG] check_window_intermediate_custom: empty_cells=[(2, 12), (3, 11)]
2025-04-11 17:32:36,468 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 0 0 2 2] with coords [(0, 14), (1, 13), (2, 12), (3, 11), (4, 10), (5, 9)] triggers candidate.
2025-04-11 17:32:36,470 [INFO] Final candidates: [(2, 12), (3, 11)]
2025-04-11 17:32:36,470 [INFO] Phase win: Collected 1unique candidate(s):[((2, 12), (3, 11))]
2025-04-11 17:32:36,470 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:36,478 [INFO] Final candidates: []
2025-04-11 17:32:36,478 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,478 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:36,650 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:36,650 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(11)), (np.int64(9), np.int64(7)))
2025-04-11 17:32:36,658 [INFO] Final candidates: []
2025-04-11 17:32:36,658 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,666 [INFO] Final candidates: []
2025-04-11 17:32:36,666 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,667 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:36,820 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:36,821 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(8)), (np.int64(10), np.int64(11)))
2025-04-11 17:32:36,829 [INFO] Final candidates: []
2025-04-11 17:32:36,829 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,836 [INFO] Final candidates: []
2025-04-11 17:32:36,836 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:36,837 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,052 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:37,053 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(7), np.int64(13)))
2025-04-11 17:32:37,061 [INFO] Final candidates: []
2025-04-11 17:32:37,061 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,068 [INFO] Final candidates: []
2025-04-11 17:32:37,068 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,069 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,198 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:37,199 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(16)), (np.int64(2), np.int64(16)))
2025-04-11 17:32:37,206 [INFO] Final candidates: []
2025-04-11 17:32:37,206 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,214 [INFO] Final candidates: []
2025-04-11 17:32:37,214 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,215 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,254 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:37,254 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(12)), (np.int64(8), np.int64(16)))
2025-04-11 17:32:37,254 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:37,254 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:37,254 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 13)]
2025-04-11 17:32:37,254 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 2 0 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:37,262 [INFO] Final candidates: [(5, 10), (5, 13)]
2025-04-11 17:32:37,262 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 13))]
2025-04-11 17:32:37,262 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:37,270 [INFO] Final candidates: []
2025-04-11 17:32:37,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,270 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,352 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:37,352 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(16)), (np.int64(8), np.int64(15)))
2025-04-11 17:32:37,360 [INFO] Final candidates: []
2025-04-11 17:32:37,360 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,368 [INFO] Final candidates: []
2025-04-11 17:32:37,369 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,370 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,496 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:37,496 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(6)), (np.int64(9), np.int64(14)))
2025-04-11 17:32:37,504 [INFO] Final candidates: []
2025-04-11 17:32:37,504 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,512 [INFO] Final candidates: []
2025-04-11 17:32:37,512 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,512 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,702 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:37,702 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(14)), (np.int64(4), np.int64(6)))
2025-04-11 17:32:37,710 [INFO] Final candidates: []
2025-04-11 17:32:37,710 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,718 [INFO] Final candidates: []
2025-04-11 17:32:37,718 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,718 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,833 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:37,833 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(8)), (np.int64(6), np.int64(12)))
2025-04-11 17:32:37,834 [DEBUG] board coords: [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)]
2025-04-11 17:32:37,834 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:37,834 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 7), (6, 11)]
2025-04-11 17:32:37,834 [DEBUG] check_window_intermediate_custom: For L=6, window [0 2 2 2 0 2] with coords [(6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12)] triggers candidate.
2025-04-11 17:32:37,834 [DEBUG] board coords: [(6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13)]
2025-04-11 17:32:37,834 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:32:37,834 [DEBUG] check_window_intermediate_custom: empty_cells=[(6, 11), (6, 13)]
2025-04-11 17:32:37,834 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13)] triggers candidate.
2025-04-11 17:32:37,841 [INFO] Final candidates: [(6, 7), (6, 13), (6, 11)]
2025-04-11 17:32:37,841 [INFO] Phase win: Collected 3unique candidate(s):[((6, 13), (6, 11)), ((6, 7), (6, 11)), ((6, 7), (6, 13))]
2025-04-11 17:32:37,841 [INFO] Phase 1 (immediate win): 3 candidate(s) found.
2025-04-11 17:32:37,849 [INFO] Final candidates: []
2025-04-11 17:32:37,849 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,849 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:37,928 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:37,929 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(10), np.int64(7)))
2025-04-11 17:32:37,936 [INFO] Final candidates: []
2025-04-11 17:32:37,936 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,944 [INFO] Final candidates: []
2025-04-11 17:32:37,944 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:37,945 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,130 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:38,131 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(6), np.int64(13)), (np.int64(5), np.int64(13)))
2025-04-11 17:32:38,131 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:38,131 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(2), np.int64(0), np.int64(2), np.int64(2)]
2025-04-11 17:32:38,131 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 10), (5, 12)]
2025-04-11 17:32:38,131 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 2 0 2 2] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:38,139 [INFO] Final candidates: [(5, 10), (5, 12)]
2025-04-11 17:32:38,139 [INFO] Phase win: Collected 1unique candidate(s):[((5, 10), (5, 12))]
2025-04-11 17:32:38,139 [INFO] Phase 1 (immediate win): 1 candidate(s) found.
2025-04-11 17:32:38,147 [INFO] Final candidates: []
2025-04-11 17:32:38,147 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,148 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,158 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:38,158 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(10)), (np.int64(4), np.int64(14)))
2025-04-11 17:32:38,166 [INFO] Final candidates: []
2025-04-11 17:32:38,166 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,174 [INFO] Final candidates: []
2025-04-11 17:32:38,174 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,174 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,336 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:38,336 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(5)), (np.int64(6), np.int64(5)))
2025-04-11 17:32:38,344 [INFO] Final candidates: []
2025-04-11 17:32:38,344 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,352 [INFO] Final candidates: []
2025-04-11 17:32:38,352 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,352 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,405 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:38,406 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(8), np.int64(7)))
2025-04-11 17:32:38,413 [INFO] Final candidates: []
2025-04-11 17:32:38,413 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,421 [INFO] Final candidates: []
2025-04-11 17:32:38,421 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,422 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,519 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:38,519 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(12)), (np.int64(9), np.int64(11)))
2025-04-11 17:32:38,527 [INFO] Final candidates: []
2025-04-11 17:32:38,527 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,534 [INFO] Final candidates: []
2025-04-11 17:32:38,534 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,535 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,584 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:38,585 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(0), np.int64(14)), (np.int64(4), np.int64(7)))
2025-04-11 17:32:38,593 [INFO] Final candidates: []
2025-04-11 17:32:38,593 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,600 [INFO] Final candidates: []
2025-04-11 17:32:38,600 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,601 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,645 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:38,645 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(7), np.int64(11)), (np.int64(6), np.int64(14)))
2025-04-11 17:32:38,653 [INFO] Final candidates: []
2025-04-11 17:32:38,653 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,661 [INFO] Final candidates: []
2025-04-11 17:32:38,661 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,661 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,671 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:38,671 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(16)), (np.int64(2), np.int64(10)))
2025-04-11 17:32:38,679 [INFO] Final candidates: []
2025-04-11 17:32:38,679 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,687 [INFO] Final candidates: []
2025-04-11 17:32:38,687 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,688 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:38,876 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:38,876 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(10), np.int64(10)), (np.int64(7), np.int64(13)))
2025-04-11 17:32:38,884 [INFO] Final candidates: []
2025-04-11 17:32:38,885 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,892 [INFO] Final candidates: []
2025-04-11 17:32:38,892 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:38,893 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:39,099 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:39,099 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(1), np.int64(12)), (np.int64(1), np.int64(11)))
2025-04-11 17:32:39,107 [INFO] Final candidates: []
2025-04-11 17:32:39,107 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,114 [INFO] Final candidates: []
2025-04-11 17:32:39,115 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,115 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:39,253 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:39,254 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(9), np.int64(12)), (np.int64(6), np.int64(12)))
2025-04-11 17:32:39,261 [INFO] Final candidates: []
2025-04-11 17:32:39,261 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,270 [INFO] Final candidates: []
2025-04-11 17:32:39,270 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,270 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:39,535 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:39,535 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(8), np.int64(12)), (np.int64(2), np.int64(9)))
2025-04-11 17:32:39,543 [INFO] Final candidates: []
2025-04-11 17:32:39,543 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,550 [INFO] Final candidates: []
2025-04-11 17:32:39,550 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,551 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:39,848 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:39,848 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(3), np.int64(12)), (np.int64(4), np.int64(10)))
2025-04-11 17:32:39,856 [INFO] Final candidates: []
2025-04-11 17:32:39,856 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,864 [INFO] Final candidates: []
2025-04-11 17:32:39,864 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,864 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:39,938 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:39,939 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(2), np.int64(8)), (np.int64(2), np.int64(12)))
2025-04-11 17:32:39,946 [INFO] Final candidates: []
2025-04-11 17:32:39,946 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,954 [INFO] Final candidates: []
2025-04-11 17:32:39,954 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:39,955 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:40,177 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:40,177 [DEBUG] Tree_policy iteration 1: Expanding move ((np.int64(5), np.int64(4)), (np.int64(1), np.int64(11)))
2025-04-11 17:32:40,185 [INFO] Final candidates: []
2025-04-11 17:32:40,185 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:40,192 [INFO] Final candidates: []
2025-04-11 17:32:40,192 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:40,193 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:40,406 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:40,407 [INFO] MCTS: Search finished. Best move selected with 1 visits.
2025-04-11 17:32:40,407 [INFO] MCTS selected move: N4,M10
2025-04-11 17:32:40,407 [INFO] ===============NEW MOVE================
2025-04-11 17:32:45,618 [INFO] Starting pre-MCTS candidate collection.
2025-04-11 17:32:45,625 [INFO] Final candidates: []
2025-04-11 17:32:45,625 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:45,626 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:45,626 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:45,626 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:45,626 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:45,626 [DEBUG] board coords: [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)]
2025-04-11 17:32:45,626 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:45,626 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:45,626 [DEBUG] check_window_intermediate_custom (only one inserted(5, 8)): For L=6, window [0 0 2 2 2 2] with coords [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)] triggers candidate.
2025-04-11 17:32:45,626 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:32:45,626 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:32:45,626 [DEBUG] board coords: [(5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)]
2025-04-11 17:32:45,626 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:32:45,626 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 13), (5, 15)]
2025-04-11 17:32:45,626 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)] triggers candidate.
2025-04-11 17:32:45,627 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)]
2025-04-11 17:32:45,627 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:45,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:45,627 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 0 2 2 2 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)] triggers candidate.
2025-04-11 17:32:45,627 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:45,627 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:45,627 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 13)]
2025-04-11 17:32:45,628 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:45,628 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)]
2025-04-11 17:32:45,628 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:32:45,628 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 13), (5, 15)]
2025-04-11 17:32:45,628 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)] triggers candidate.
2025-04-11 17:32:45,634 [INFO] Final candidates: [(5, 15), (5, 13), (5, 7), (5, 8)]
2025-04-11 17:32:45,634 [INFO] Phase defense: Collected 6unique candidate(s):[((5, 15), (5, 8)), ((5, 13), (5, 7)), ((5, 15), (5, 7)), ((5, 13), (5, 8)), ((5, 15), (5, 13)), ((5, 7), (5, 8))]
2025-04-11 17:32:45,634 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:32:45,634 [INFO] MCTS: Starting search for 50 iterations.
2025-04-11 17:32:45,634 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 7), (5, 8))
2025-04-11 17:32:45,642 [INFO] Final candidates: []
2025-04-11 17:32:45,642 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:45,642 [DEBUG] board coords: [(5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)]
2025-04-11 17:32:45,642 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:32:45,642 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 13), (5, 15)]
2025-04-11 17:32:45,642 [DEBUG] check_window_intermediate_custom: For L=6, window [2 2 2 0 2 0] with coords [(5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)] triggers candidate.
2025-04-11 17:32:45,643 [DEBUG] board coords: [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)]
2025-04-11 17:32:45,643 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2), np.int64(0)]
2025-04-11 17:32:45,643 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 13), (5, 15)]
2025-04-11 17:32:45,643 [DEBUG] check_window_intermediate_custom: For L=7, window [2 2 2 2 0 2 0] with coords [(5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15)] triggers candidate.
2025-04-11 17:32:45,649 [INFO] Final candidates: [(5, 15), (5, 13)]
2025-04-11 17:32:45,649 [INFO] Phase defense: Collected 1unique candidate(s):[((5, 15), (5, 13))]
2025-04-11 17:32:45,649 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:32:45,649 [DEBUG] MCTS iteration 0: reached a node with 0 visits.
2025-04-11 17:32:45,649 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:45,789 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:45,789 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 15), (5, 8))
2025-04-11 17:32:45,797 [INFO] Final candidates: []
2025-04-11 17:32:45,797 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:45,804 [INFO] Final candidates: [(5, 13)]
2025-04-11 17:32:45,805 [INFO] Phase defense: Found only one candidate: (5, 13)
2025-04-11 17:32:45,805 [INFO] Phase defense: Collected 6unique candidate(s):[((5, 13), (np.int64(4), np.int64(14))), ((5, 13), (np.int64(4), np.int64(13))), ((5, 13), (np.int64(6), np.int64(13))), ((5, 13), (np.int64(7), np.int64(13))), ((5, 13), (np.int64(6), np.int64(14))), ((5, 13), (np.int64(6), np.int64(12)))]
2025-04-11 17:32:45,805 [INFO] Phase 2 (defense): 6 candidate(s) found.
2025-04-11 17:32:45,805 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:45,961 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:45,961 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 13), (5, 7))
2025-04-11 17:32:45,969 [INFO] Final candidates: []
2025-04-11 17:32:45,969 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:45,976 [INFO] Final candidates: []
2025-04-11 17:32:45,976 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:45,977 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,003 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:46,003 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 13), (5, 8))
2025-04-11 17:32:46,011 [INFO] Final candidates: []
2025-04-11 17:32:46,011 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,018 [INFO] Final candidates: []
2025-04-11 17:32:46,018 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,019 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,037 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:46,037 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 15), (5, 7))
2025-04-11 17:32:46,046 [INFO] Final candidates: []
2025-04-11 17:32:46,046 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,046 [DEBUG] check_window_margin_custom: For L=6, window [0 2 2 2 2 0] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13)] triggers candidate.
2025-04-11 17:32:46,046 [DEBUG] The consecutive condition should be found in the former check_window_margin_custom.
2025-04-11 17:32:46,047 [DEBUG] board coords: [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)]
2025-04-11 17:32:46,048 [DEBUG] board values[np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(2)]
2025-04-11 17:32:46,048 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 8), (5, 13)]
2025-04-11 17:32:46,048 [DEBUG] check_window_intermediate_custom: For L=7, window [0 2 2 2 2 0 2] with coords [(5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14)] triggers candidate.
2025-04-11 17:32:46,054 [INFO] Final candidates: [(5, 13), (5, 8)]
2025-04-11 17:32:46,054 [INFO] Phase defense: Collected 1unique candidate(s):[((5, 13), (5, 8))]
2025-04-11 17:32:46,054 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:32:46,054 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,055 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,055 [DEBUG] Tree_policy iteration 1: Expanding move ((5, 15), (5, 13))
2025-04-11 17:32:46,062 [INFO] Final candidates: []
2025-04-11 17:32:46,062 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,063 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
2025-04-11 17:32:46,063 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:46,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:46,063 [DEBUG] check_window_intermediate_custom: For L=6, window [2 0 0 2 2 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11)] triggers candidate.
2025-04-11 17:32:46,063 [DEBUG] board coords: [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)]
2025-04-11 17:32:46,063 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:46,063 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:46,063 [DEBUG] check_window_intermediate_custom (only one inserted(5, 8)): For L=6, window [0 0 2 2 2 2] with coords [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)] triggers candidate.
2025-04-11 17:32:46,064 [DEBUG] board coords: [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)]
2025-04-11 17:32:46,064 [DEBUG] board values[np.int64(2), np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:46,064 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 7), (5, 8)]
2025-04-11 17:32:46,064 [DEBUG] check_window_intermediate_custom: For L=7, window [2 0 0 2 2 2 2] with coords [(5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12)] triggers candidate.
2025-04-11 17:32:46,070 [INFO] Final candidates: [(5, 7), (5, 8)]
2025-04-11 17:32:46,070 [INFO] Phase defense: Collected 1unique candidate(s):[((5, 7), (5, 8))]
2025-04-11 17:32:46,070 [INFO] Phase 2 (defense): 1 candidate(s) found.
2025-04-11 17:32:46,070 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,230 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,230 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,230 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 13), (np.int64(6), np.int64(13)))
2025-04-11 17:32:46,238 [INFO] Final candidates: []
2025-04-11 17:32:46,238 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,245 [INFO] Final candidates: []
2025-04-11 17:32:46,245 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,246 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,246 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,246 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,246 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 13), (5, 8))
2025-04-11 17:32:46,254 [INFO] Final candidates: []
2025-04-11 17:32:46,254 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,261 [INFO] Final candidates: []
2025-04-11 17:32:46,261 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,262 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,262 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,262 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,262 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 7), (5, 8))
2025-04-11 17:32:46,262 [DEBUG] board coords: [(5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
2025-04-11 17:32:46,263 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:46,263 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 4), (5, 5)]
2025-04-11 17:32:46,263 [DEBUG] check_window_intermediate_custom (only one inserted(5, 5)): For L=6, window [0 0 2 2 2 2] with coords [(5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)] triggers candidate.
2025-04-11 17:32:46,264 [DEBUG] board coords: [(5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)]
2025-04-11 17:32:46,264 [DEBUG] board values[np.int64(0), np.int64(0), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2)]
2025-04-11 17:32:46,264 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 4), (5, 5)]
2025-04-11 17:32:46,264 [DEBUG] check_window_intermediate_custom (only one inserted(5, 5)): For L=7, window [0 0 2 2 2 2 2] with coords [(5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)] triggers candidate.
2025-04-11 17:32:46,270 [INFO] Final candidates: [(5, 5)]
2025-04-11 17:32:46,270 [INFO] Phase win: Found only one candidate: (5, 5)
2025-04-11 17:32:46,270 [INFO] Phase win: Collected 10unique candidate(s):[((5, 5), (np.int64(4), np.int64(5))), ((5, 5), (np.int64(6), np.int64(5))), ((5, 5), (np.int64(5), np.int64(3))), ((5, 5), (np.int64(6), np.int64(4))), ((5, 5), (np.int64(6), np.int64(6))), ((5, 5), (np.int64(7), np.int64(5))), ((5, 5), (np.int64(4), np.int64(4))), ((5, 5), (np.int64(3), np.int64(5))), ((5, 5), (np.int64(5), np.int64(4))), ((5, 5), (np.int64(4), np.int64(6)))]
2025-04-11 17:32:46,270 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:32:46,279 [INFO] Final candidates: []
2025-04-11 17:32:46,279 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,279 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,280 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,280 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,280 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 13), (np.int64(6), np.int64(14)))
2025-04-11 17:32:46,287 [INFO] Final candidates: []
2025-04-11 17:32:46,287 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,295 [INFO] Final candidates: []
2025-04-11 17:32:46,295 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,296 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,296 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,296 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,296 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,296 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,296 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,296 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,296 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,296 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,296 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,297 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,297 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 13), (np.int64(4), np.int64(14)))
2025-04-11 17:32:46,304 [INFO] Final candidates: []
2025-04-11 17:32:46,304 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,312 [INFO] Final candidates: []
2025-04-11 17:32:46,312 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,313 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,313 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,313 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,313 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,313 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,314 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,314 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 13), (np.int64(4), np.int64(13)))
2025-04-11 17:32:46,321 [INFO] Final candidates: []
2025-04-11 17:32:46,321 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,329 [INFO] Final candidates: []
2025-04-11 17:32:46,329 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,330 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,330 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,330 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,330 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,330 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,330 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,330 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,330 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,330 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,331 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,331 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,331 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 13), (np.int64(7), np.int64(13)))
2025-04-11 17:32:46,338 [INFO] Final candidates: []
2025-04-11 17:32:46,338 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,346 [INFO] Final candidates: []
2025-04-11 17:32:46,346 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,347 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,347 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,347 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,347 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,347 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,347 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,347 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,347 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,348 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,348 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,348 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,348 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,348 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 13), (np.int64(6), np.int64(12)))
2025-04-11 17:32:46,355 [INFO] Final candidates: []
2025-04-11 17:32:46,355 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,363 [INFO] Final candidates: []
2025-04-11 17:32:46,363 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,364 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,364 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,364 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,364 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,364 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,364 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,364 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,364 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,364 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,364 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,365 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,365 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,365 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,365 [DEBUG] Tree_policy iteration 2: Expanding move ((5, 15), (5, 13))
2025-04-11 17:32:46,365 [DEBUG] board coords: [(5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17)]
2025-04-11 17:32:46,365 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:32:46,365 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 16), (5, 17)]
2025-04-11 17:32:46,365 [DEBUG] check_window_intermediate_custom (only one inserted(5, 16)): For L=6, window [2 2 2 2 0 0] with coords [(5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17)] triggers candidate.
2025-04-11 17:32:46,366 [DEBUG] board coords: [(5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17)]
2025-04-11 17:32:46,366 [DEBUG] board values[np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(2), np.int64(0), np.int64(0)]
2025-04-11 17:32:46,366 [DEBUG] check_window_intermediate_custom: empty_cells=[(5, 16), (5, 17)]
2025-04-11 17:32:46,366 [DEBUG] check_window_intermediate_custom (only one inserted(5, 16)): For L=7, window [2 2 2 2 2 0 0] with coords [(5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17)] triggers candidate.
2025-04-11 17:32:46,372 [INFO] Final candidates: [(5, 16)]
2025-04-11 17:32:46,372 [INFO] Phase win: Found only one candidate: (5, 16)
2025-04-11 17:32:46,373 [INFO] Phase win: Collected 10unique candidate(s):[((5, 16), (np.int64(6), np.int64(15))), ((5, 16), (np.int64(7), np.int64(16))), ((5, 16), (np.int64(3), np.int64(16))), ((5, 16), (np.int64(4), np.int64(15))), ((5, 16), (np.int64(4), np.int64(17))), ((5, 16), (np.int64(5), np.int64(17))), ((5, 16), (np.int64(6), np.int64(17))), ((5, 16), (np.int64(4), np.int64(16))), ((5, 16), (np.int64(6), np.int64(16))), ((5, 16), (np.int64(5), np.int64(18)))]
2025-04-11 17:32:46,373 [INFO] Phase 1 (immediate win): 10 candidate(s) found.
2025-04-11 17:32:46,380 [INFO] Final candidates: []
2025-04-11 17:32:46,380 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,381 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,381 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,381 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,381 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,381 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,381 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,382 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,382 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(10), np.int64(7)), (np.int64(2), np.int64(12)))
2025-04-11 17:32:46,389 [INFO] Final candidates: []
2025-04-11 17:32:46,389 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,396 [INFO] Final candidates: []
2025-04-11 17:32:46,396 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,397 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,745 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:46,745 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,745 [DEBUG] Tree_policy iteration 2: Expanding move ((np.int64(3), np.int64(14)), (np.int64(11), np.int64(10)))
2025-04-11 17:32:46,752 [INFO] Final candidates: []
2025-04-11 17:32:46,752 [INFO] Phase win: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,760 [INFO] Final candidates: []
2025-04-11 17:32:46,760 [INFO] Phase defense: Collected 0unique candidate(s):[]
2025-04-11 17:32:46,760 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,967 [INFO] Default policy: Playout finished with winner: 1
2025-04-11 17:32:46,967 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,967 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,967 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,968 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,968 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,968 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,968 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,968 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,968 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,968 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,968 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,968 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,968 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,968 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,968 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,969 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,969 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,969 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,969 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,969 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,969 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,969 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,969 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,969 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,969 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,969 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,969 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,969 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,969 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,969 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,969 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,970 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,970 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,970 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,970 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,970 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,970 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,970 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,970 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,970 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,970 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,971 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,971 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,971 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,971 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,971 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,971 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,971 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,971 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,971 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,971 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,971 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,971 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,972 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,972 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,972 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,972 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,972 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,972 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,972 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,972 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,972 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,972 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,972 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,972 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,972 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,973 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,973 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,973 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,973 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,973 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,973 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,973 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,973 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,973 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,973 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,973 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,974 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,974 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,974 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,974 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,974 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,974 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,974 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,974 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,974 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,974 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,974 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,974 [DEBUG] Best_child: Chosen child with highest UCB1 weight.
2025-04-11 17:32:46,974 [DEBUG] Tree_policy: Terminal node reached.
2025-04-11 17:32:46,974 [INFO] Default policy: Starting random playout.
2025-04-11 17:32:46,974 [INFO] Default policy: Playout finished with winner: 2
2025-04-11 17:32:46,974 [INFO] MCTS: Search finished. Best move selected with 13 visits.
2025-04-11 17:34:24,199 [INFO] Game terminated.
